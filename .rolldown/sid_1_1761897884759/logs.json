{"timestamp":1761897884766,"action":"BuildStart","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884766,"action":"BuildStart","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884780,"action":"HookResolveIdCallStart","importer":null,"module_request":"/Users/kevin/Developer/open-source/tsdown/src/config.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"${hook_resolve_id_trigger}","call_id":"46150129-4af6-42a3-8278-1a8e2590292e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884780,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"${hook_resolve_id_trigger}","call_id":"46150129-4af6-42a3-8278-1a8e2590292e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884780,"action":"HookResolveIdCallStart","importer":null,"module_request":"/Users/kevin/Developer/open-source/tsdown/src/config.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"${hook_resolve_id_trigger}","call_id":"5ff6c6a3-e713-453d-a7c3-f20053a4c1f5","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884781,"action":"HookResolveIdCallStart","importer":null,"module_request":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"${hook_resolve_id_trigger}","call_id":"df3586b1-72ea-4e68-a112-1e2675178aff","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884781,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"${hook_resolve_id_trigger}","call_id":"df3586b1-72ea-4e68-a112-1e2675178aff","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884781,"action":"HookResolveIdCallStart","importer":null,"module_request":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"${hook_resolve_id_trigger}","call_id":"3495f35b-b3cd-4714-bc62-964e10ab9997","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884781,"action":"HookResolveIdCallStart","importer":null,"module_request":"/Users/kevin/Developer/open-source/tsdown/src/plugins.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"${hook_resolve_id_trigger}","call_id":"fb6d368d-bc51-4fb6-9568-33baba7f3ffe","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884782,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"${hook_resolve_id_trigger}","call_id":"fb6d368d-bc51-4fb6-9568-33baba7f3ffe","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884782,"action":"HookResolveIdCallStart","importer":null,"module_request":"/Users/kevin/Developer/open-source/tsdown/src/plugins.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"${hook_resolve_id_trigger}","call_id":"dde5fd22-04c6-4bce-8c1d-4c84ce1255fe","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884782,"action":"HookResolveIdCallStart","importer":null,"module_request":"/Users/kevin/Developer/open-source/tsdown/src/run.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"${hook_resolve_id_trigger}","call_id":"e77be2c7-79a6-4a08-b331-a60c4868c1b4","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884782,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"${hook_resolve_id_trigger}","call_id":"e77be2c7-79a6-4a08-b331-a60c4868c1b4","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884783,"action":"HookResolveIdCallStart","importer":null,"module_request":"/Users/kevin/Developer/open-source/tsdown/src/run.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"${hook_resolve_id_trigger}","call_id":"9367a00c-a6ab-4c0d-86f6-9ac7aea3e512","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884783,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"${hook_resolve_id_trigger}","call_id":"5ff6c6a3-e713-453d-a7c3-f20053a4c1f5","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884783,"action":"HookResolveIdCallStart","importer":null,"module_request":"/Users/kevin/Developer/open-source/tsdown/src/config.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"${hook_resolve_id_trigger}","call_id":"44dceb40-4e04-461a-9800-8c89025c0617","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884783,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"${hook_resolve_id_trigger}","call_id":"3495f35b-b3cd-4714-bc62-964e10ab9997","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884784,"action":"HookResolveIdCallStart","importer":null,"module_request":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"${hook_resolve_id_trigger}","call_id":"785d969a-30dd-4c4b-8dd0-27ac00cdda84","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884784,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"${hook_resolve_id_trigger}","call_id":"dde5fd22-04c6-4bce-8c1d-4c84ce1255fe","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884784,"action":"HookResolveIdCallStart","importer":null,"module_request":"/Users/kevin/Developer/open-source/tsdown/src/plugins.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"${hook_resolve_id_trigger}","call_id":"a19bce30-f873-451d-8613-1f31d2c686d4","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884784,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"${hook_resolve_id_trigger}","call_id":"9367a00c-a6ab-4c0d-86f6-9ac7aea3e512","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884784,"action":"HookResolveIdCallStart","importer":null,"module_request":"/Users/kevin/Developer/open-source/tsdown/src/run.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"${hook_resolve_id_trigger}","call_id":"942b5345-fc8b-4ccb-932d-6800b8d7d85f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884785,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"${hook_resolve_id_trigger}","call_id":"44dceb40-4e04-461a-9800-8c89025c0617","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884785,"action":"HookResolveIdCallStart","importer":null,"module_request":"/Users/kevin/Developer/open-source/tsdown/src/config.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"${hook_resolve_id_trigger}","call_id":"76215731-1712-42b1-9d8d-f49ff3eb4076","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884785,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"${hook_resolve_id_trigger}","call_id":"785d969a-30dd-4c4b-8dd0-27ac00cdda84","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884785,"action":"HookResolveIdCallStart","importer":null,"module_request":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"${hook_resolve_id_trigger}","call_id":"3578edfe-0f57-42c8-a7a5-563f0d4b1479","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884785,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"${hook_resolve_id_trigger}","call_id":"a19bce30-f873-451d-8613-1f31d2c686d4","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884786,"action":"HookResolveIdCallStart","importer":null,"module_request":"/Users/kevin/Developer/open-source/tsdown/src/plugins.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"${hook_resolve_id_trigger}","call_id":"26c39324-a0f8-4a64-b01e-d96715779b53","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884786,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"${hook_resolve_id_trigger}","call_id":"942b5345-fc8b-4ccb-932d-6800b8d7d85f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884786,"action":"HookResolveIdCallStart","importer":null,"module_request":"/Users/kevin/Developer/open-source/tsdown/src/run.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"${hook_resolve_id_trigger}","call_id":"556bcd1a-3183-44dd-98f3-4b73760231db","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884786,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"${hook_resolve_id_trigger}","call_id":"76215731-1712-42b1-9d8d-f49ff3eb4076","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884787,"action":"HookResolveIdCallStart","importer":null,"module_request":"/Users/kevin/Developer/open-source/tsdown/src/config.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"${hook_resolve_id_trigger}","call_id":"0905cfd5-7636-464b-a420-66a6828f875a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884787,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"${hook_resolve_id_trigger}","call_id":"0905cfd5-7636-464b-a420-66a6828f875a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884787,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"${hook_resolve_id_trigger}","call_id":"3578edfe-0f57-42c8-a7a5-563f0d4b1479","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884788,"action":"HookResolveIdCallStart","importer":null,"module_request":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"${hook_resolve_id_trigger}","call_id":"8f3c5698-4594-47be-b06d-2130e19aaf28","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884788,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"${hook_resolve_id_trigger}","call_id":"8f3c5698-4594-47be-b06d-2130e19aaf28","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884788,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"${hook_resolve_id_trigger}","call_id":"26c39324-a0f8-4a64-b01e-d96715779b53","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884788,"action":"HookResolveIdCallStart","importer":null,"module_request":"/Users/kevin/Developer/open-source/tsdown/src/plugins.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"${hook_resolve_id_trigger}","call_id":"de8e8ec1-477d-4f54-9cb1-eec3704ae70d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884789,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"${hook_resolve_id_trigger}","call_id":"de8e8ec1-477d-4f54-9cb1-eec3704ae70d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884789,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"${hook_resolve_id_trigger}","call_id":"556bcd1a-3183-44dd-98f3-4b73760231db","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884789,"action":"HookResolveIdCallStart","importer":null,"module_request":"/Users/kevin/Developer/open-source/tsdown/src/run.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"${hook_resolve_id_trigger}","call_id":"b0c5b0f6-acd7-4a85-ae07-7032f6d1ac3d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884789,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"${hook_resolve_id_trigger}","call_id":"b0c5b0f6-acd7-4a85-ae07-7032f6d1ac3d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884789,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/run.ts","plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"dc4b762e-61e0-483f-b96d-bce09450de0c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884790,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config.ts","plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"0a66cb03-94aa-4b41-9a6e-cf15135c84c2","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884790,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/run.ts","content":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"dc4b762e-61e0-483f-b96d-bce09450de0c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884790,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/plugins.ts","plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"fdad7dae-a52c-47d7-80ea-2ba447a821d2","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884790,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/run.ts","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"b9c74be0-e84f-45ee-af1f-18b382a31979","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884790,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/plugins.ts","content":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"fdad7dae-a52c-47d7-80ea-2ba447a821d2","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884790,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"6e91be3b-9fc9-43a0-9bd7-5f5eaf2fa854","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884791,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config.ts","content":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"0a66cb03-94aa-4b41-9a6e-cf15135c84c2","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884791,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/run.ts","content":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"b9c74be0-e84f-45ee-af1f-18b382a31979","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884791,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config.ts","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"aca65545-e7c2-404b-940e-a87f5f91cbbf","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884791,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/run.ts","plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"1893fff0-0dd1-4933-b39f-5676490bcda6","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884791,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/run.ts","content":null,"plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"1893fff0-0dd1-4933-b39f-5676490bcda6","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884791,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/plugins.ts","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"78660f1c-1260-408f-b989-84c519185c9e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884792,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config.ts","content":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"aca65545-e7c2-404b-940e-a87f5f91cbbf","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884792,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/plugins.ts","content":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"78660f1c-1260-408f-b989-84c519185c9e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884792,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config.ts","plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"e6f94130-ed51-48d5-a6fa-72fa847f0cb3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884793,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/plugins.ts","plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"3728ac7b-cdd7-4729-b714-28e2da455472","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884793,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config.ts","content":null,"plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"e6f94130-ed51-48d5-a6fa-72fa847f0cb3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884793,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/plugins.ts","content":null,"plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"3728ac7b-cdd7-4729-b714-28e2da455472","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884793,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config.ts","content":"import type {\n  UserConfig,\n  UserConfigExport,\n  UserConfigFn,\n} from './config/index.ts'\n\n/**\n * Defines the configuration for tsdown.\n */\nexport function defineConfig(options: UserConfig): UserConfig\nexport function defineConfig(options: UserConfig[]): UserConfig[]\nexport function defineConfig(options: UserConfigFn): UserConfigFn\nexport function defineConfig(options: UserConfigExport): UserConfigExport\nexport function defineConfig(options: UserConfigExport): UserConfigExport {\n  return options\n}\n\nexport type { UserConfig, UserConfigExport, UserConfigFn }\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"d6f3030b-21f6-425e-961d-4ccfa4c18881","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884794,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/plugins.ts","content":"export { ExternalPlugin } from './features/external.ts'\nexport { ShebangPlugin } from './features/shebang.ts'\nexport { ReportPlugin } from './features/report.ts'\nexport { NodeProtocolPlugin } from './features/node-protocol.ts'\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"b127da6d-c0b0-4f2c-9b80-09013c2f38f8","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884794,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","content":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"6e91be3b-9fc9-43a0-9bd7-5f5eaf2fa854","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884794,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/run.ts","content":"#!/usr/bin/env node\nimport module from 'node:module'\nimport { runCLI } from './cli.ts'\n\ntry {\n  module.enableCompileCache?.()\n} catch {}\nrunCLI()\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"8565498b-538a-4dcf-894c-3a3d2f06a4f8","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884794,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"7b932eb3-a4db-46ac-b6e9-9261694f7ae7","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884794,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","content":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"7b932eb3-a4db-46ac-b6e9-9261694f7ae7","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884794,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"b058d012-4626-496c-8bdd-49025eba1a5b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884795,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","content":null,"plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"b058d012-4626-496c-8bdd-49025eba1a5b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"action":"StringRef","id":"0ef2edcfd181daac09ab20839286d8baa983a6dea124c94dfccb83d1be6a3a4b","content":"import path from 'node:path'\nimport process from 'node:process'\nimport { fileURLToPath } from 'node:url'\nimport { green } from 'ansis'\nimport { build as rolldownBuild } from 'rolldown'\nimport { exec } from 'tinyexec'\nimport treeKill from 'tree-kill'\nimport {\n  resolveConfig,\n  type InlineConfig,\n  type ResolvedConfig,\n} from './config/index.ts'\nimport { attw } from './features/attw.ts'\nimport { warnLegacyCJS } from './features/cjs.ts'\nimport { cleanOutDir } from './features/clean.ts'\nimport { copy } from './features/copy.ts'\nimport { writeExports, type TsdownChunks } from './features/exports.ts'\nimport { createHooks } from './features/hooks.ts'\nimport { publint } from './features/publint.ts'\nimport {\n  debugBuildOptions,\n  getBuildOptions,\n  getDebugRolldownDir,\n} from './features/rolldown.ts'\nimport { shortcuts } from './features/shortcuts.ts'\nimport { watchBuild } from './features/watch.ts'\nimport { globalLogger, prettyName, type Logger } from './utils/logger.ts'\n\n/**\n * Build with tsdown.\n */\nexport async function build(userOptions: InlineConfig = {}): Promise<void> {\n  globalLogger.level =\n    userOptions.logLevel || (userOptions.silent ? 'error' : 'info')\n  const { configs, files: configFiles } = await resolveConfig(userOptions)\n\n  let cleanPromise: Promise<void> | undefined\n  const clean = () => {\n    if (cleanPromise) return cleanPromise\n    return (cleanPromise = cleanOutDir(configs))\n  }\n\n  globalLogger.info('Build start')\n  const rebuilds = await Promise.all(\n    configs.map((options) => buildSingle(options, clean)),\n  )\n  const disposeCbs: (() => void | Promise<void>)[] = []\n\n  for (const [i, config] of configs.entries()) {\n    const rebuild = rebuilds[i]\n    if (!rebuild) continue\n\n    const watcher = await watchBuild(config, configFiles, rebuild, restart)\n    disposeCbs.push(() => watcher.close())\n  }\n\n  // Watch mode with shortcuts\n  if (disposeCbs.length) {\n    disposeCbs.push(shortcuts(restart))\n  }\n\n  async function restart() {\n    for (const dispose of disposeCbs) {\n      await dispose()\n    }\n    build(userOptions)\n  }\n}\n\nconst dirname = path.dirname(fileURLToPath(import.meta.url))\nconst pkgRoot: string = path.resolve(dirname, '..')\n\n/** @internal */\nexport const shimFile: string = path.resolve(pkgRoot, 'esm-shims.js')\n\n/**\n * Build a single configuration, without watch and shortcuts features.\n *\n * Internal API, not for public use\n *\n * @private\n * @param config Resolved options\n */\nexport async function buildSingle(\n  config: ResolvedConfig,\n  clean: () => Promise<void>,\n): Promise<(() => Promise<void>) | undefined> {\n  const { format: formats, dts, watch, onSuccess, logger } = config\n  let ab: AbortController | undefined\n\n  const { hooks, context } = await createHooks(config)\n\n  warnLegacyCJS(config)\n\n  await rebuild(true)\n  if (watch) {\n    return () => rebuild()\n  }\n\n  async function rebuild(first?: boolean) {\n    const startTime = performance.now()\n\n    await hooks.callHook('build:prepare', context)\n    ab?.abort()\n\n    if (first) {\n      await clean()\n    } else {\n      await cleanOutDir([config])\n    }\n\n    let hasErrors = false\n    const isMultiFormat = formats.length > 1\n    const chunks: TsdownChunks = {}\n    const debugRolldownDir = await getDebugRolldownDir()\n\n    await Promise.all(\n      formats.map(async (format) => {\n        try {\n          const buildOptions = await getBuildOptions(\n            config,\n            format,\n            isMultiFormat,\n            false,\n          )\n          await hooks.callHook('build:before', {\n            ...context,\n            buildOptions,\n          })\n          if (debugRolldownDir) {\n            await debugBuildOptions(\n              debugRolldownDir,\n              config.name,\n              format,\n              buildOptions,\n            )\n          }\n          const { output } = await rolldownBuild(buildOptions)\n          chunks[format] = output\n          if (format === 'cjs' && dts) {\n            const { output } = await rolldownBuild(\n              await getBuildOptions(config, format, isMultiFormat, true),\n            )\n            chunks[format].push(...output)\n          }\n        } catch (error) {\n          if (watch) {\n            logger.error(error)\n            hasErrors = true\n            return\n          }\n          throw error\n        }\n      }),\n    )\n\n    if (hasErrors) {\n      return\n    }\n\n    await Promise.all([writeExports(config, chunks), copy(config)])\n    await Promise.all([publint(config), attw(config)])\n\n    await hooks.callHook('build:done', context)\n\n    logger.success(\n      prettyName(config.name),\n      `${first ? 'Build' : 'Rebuild'} complete in ${green(`${Math.round(performance.now() - startTime)}ms`)}`,\n    )\n    ab = new AbortController()\n    if (typeof onSuccess === 'string') {\n      const p = exec(onSuccess, [], {\n        nodeOptions: {\n          shell: true,\n          stdio: 'inherit',\n        },\n      })\n      p.then(({ exitCode }) => {\n        if (exitCode) {\n          process.exitCode = exitCode\n        }\n      })\n      ab.signal.addEventListener('abort', () => {\n        if (typeof p.pid === 'number') {\n          treeKill(p.pid)\n        }\n      })\n    } else {\n      await onSuccess?.(config, ab.signal)\n    }\n  }\n}\n\nexport { defineConfig } from './config.ts'\nexport * from './config/types.ts'\nexport { globalLogger, type Logger }\n"}
{"timestamp":1761897884796,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","content":"import path from 'node:path'\nimport process from 'node:process'\nimport { fileURLToPath } from 'node:url'\nimport { green } from 'ansis'\nimport { build as rolldownBuild } from 'rolldown'\nimport { exec } from 'tinyexec'\nimport treeKill from 'tree-kill'\nimport {\n  resolveConfig,\n  type InlineConfig,\n  type ResolvedConfig,\n} from './config/index.ts'\nimport { attw } from './features/attw.ts'\nimport { warnLegacyCJS } from './features/cjs.ts'\nimport { cleanOutDir } from './features/clean.ts'\nimport { copy } from './features/copy.ts'\nimport { writeExports, type TsdownChunks } from './features/exports.ts'\nimport { createHooks } from './features/hooks.ts'\nimport { publint } from './features/publint.ts'\nimport {\n  debugBuildOptions,\n  getBuildOptions,\n  getDebugRolldownDir,\n} from './features/rolldown.ts'\nimport { shortcuts } from './features/shortcuts.ts'\nimport { watchBuild } from './features/watch.ts'\nimport { globalLogger, prettyName, type Logger } from './utils/logger.ts'\n\n/**\n * Build with tsdown.\n */\nexport async function build(userOptions: InlineConfig = {}): Promise<void> {\n  globalLogger.level =\n    userOptions.logLevel || (userOptions.silent ? 'error' : 'info')\n  const { configs, files: configFiles } = await resolveConfig(userOptions)\n\n  let cleanPromise: Promise<void> | undefined\n  const clean = () => {\n    if (cleanPromise) return cleanPromise\n    return (cleanPromise = cleanOutDir(configs))\n  }\n\n  globalLogger.info('Build start')\n  const rebuilds = await Promise.all(\n    configs.map((options) => buildSingle(options, clean)),\n  )\n  const disposeCbs: (() => void | Promise<void>)[] = []\n\n  for (const [i, config] of configs.entries()) {\n    const rebuild = rebuilds[i]\n    if (!rebuild) continue\n\n    const watcher = await watchBuild(config, configFiles, rebuild, restart)\n    disposeCbs.push(() => watcher.close())\n  }\n\n  // Watch mode with shortcuts\n  if (disposeCbs.length) {\n    disposeCbs.push(shortcuts(restart))\n  }\n\n  async function restart() {\n    for (const dispose of disposeCbs) {\n      await dispose()\n    }\n    build(userOptions)\n  }\n}\n\nconst dirname = path.dirname(fileURLToPath(import.meta.url))\nconst pkgRoot: string = path.resolve(dirname, '..')\n\n/** @internal */\nexport const shimFile: string = path.resolve(pkgRoot, 'esm-shims.js')\n\n/**\n * Build a single configuration, without watch and shortcuts features.\n *\n * Internal API, not for public use\n *\n * @private\n * @param config Resolved options\n */\nexport async function buildSingle(\n  config: ResolvedConfig,\n  clean: () => Promise<void>,\n): Promise<(() => Promise<void>) | undefined> {\n  const { format: formats, dts, watch, onSuccess, logger } = config\n  let ab: AbortController | undefined\n\n  const { hooks, context } = await createHooks(config)\n\n  warnLegacyCJS(config)\n\n  await rebuild(true)\n  if (watch) {\n    return () => rebuild()\n  }\n\n  async function rebuild(first?: boolean) {\n    const startTime = performance.now()\n\n    await hooks.callHook('build:prepare', context)\n    ab?.abort()\n\n    if (first) {\n      await clean()\n    } else {\n      await cleanOutDir([config])\n    }\n\n    let hasErrors = false\n    const isMultiFormat = formats.length > 1\n    const chunks: TsdownChunks = {}\n    const debugRolldownDir = await getDebugRolldownDir()\n\n    await Promise.all(\n      formats.map(async (format) => {\n        try {\n          const buildOptions = await getBuildOptions(\n            config,\n            format,\n            isMultiFormat,\n            false,\n          )\n          await hooks.callHook('build:before', {\n            ...context,\n            buildOptions,\n          })\n          if (debugRolldownDir) {\n            await debugBuildOptions(\n              debugRolldownDir,\n              config.name,\n              format,\n              buildOptions,\n            )\n          }\n          const { output } = await rolldownBuild(buildOptions)\n          chunks[format] = output\n          if (format === 'cjs' && dts) {\n            const { output } = await rolldownBuild(\n              await getBuildOptions(config, format, isMultiFormat, true),\n            )\n            chunks[format].push(...output)\n          }\n        } catch (error) {\n          if (watch) {\n            logger.error(error)\n            hasErrors = true\n            return\n          }\n          throw error\n        }\n      }),\n    )\n\n    if (hasErrors) {\n      return\n    }\n\n    await Promise.all([writeExports(config, chunks), copy(config)])\n    await Promise.all([publint(config), attw(config)])\n\n    await hooks.callHook('build:done', context)\n\n    logger.success(\n      prettyName(config.name),\n      `${first ? 'Build' : 'Rebuild'} complete in ${green(`${Math.round(performance.now() - startTime)}ms`)}`,\n    )\n    ab = new AbortController()\n    if (typeof onSuccess === 'string') {\n      const p = exec(onSuccess, [], {\n        nodeOptions: {\n          shell: true,\n          stdio: 'inherit',\n        },\n      })\n      p.then(({ exitCode }) => {\n        if (exitCode) {\n          process.exitCode = exitCode\n        }\n      })\n      ab.signal.addEventListener('abort', () => {\n        if (typeof p.pid === 'number') {\n          treeKill(p.pid)\n        }\n      })\n    } else {\n      await onSuccess?.(config, ab.signal)\n    }\n  }\n}\n\nexport { defineConfig } from './config.ts'\nexport * from './config/types.ts'\nexport { globalLogger, type Logger }\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"cb292752-8813-40ae-8299-d30c0a10098d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884798,"action":"HookResolveIdCallStart","importer":null,"module_request":"/Users/kevin/Developer/open-source/tsdown/src/config.d.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"${hook_resolve_id_trigger}","call_id":"109d1c8d-06b4-4143-bcc6-336c9e6243c3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884798,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"${hook_resolve_id_trigger}","call_id":"109d1c8d-06b4-4143-bcc6-336c9e6243c3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884799,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","content":"import path from 'node:path'\nimport process from 'node:process'\nimport { fileURLToPath } from 'node:url'\nimport { green } from 'ansis'\nimport { build as rolldownBuild } from 'rolldown'\nimport { exec } from 'tinyexec'\nimport treeKill from 'tree-kill'\nimport {\n  resolveConfig,\n  type InlineConfig,\n  type ResolvedConfig,\n} from './config/index.ts'\nimport { attw } from './features/attw.ts'\nimport { warnLegacyCJS } from './features/cjs.ts'\nimport { cleanOutDir } from './features/clean.ts'\nimport { copy } from './features/copy.ts'\nimport { writeExports, type TsdownChunks } from './features/exports.ts'\nimport { createHooks } from './features/hooks.ts'\nimport { publint } from './features/publint.ts'\nimport {\n  debugBuildOptions,\n  getBuildOptions,\n  getDebugRolldownDir,\n} from './features/rolldown.ts'\nimport { shortcuts } from './features/shortcuts.ts'\nimport { watchBuild } from './features/watch.ts'\nimport { globalLogger, prettyName, type Logger } from './utils/logger.ts'\n\n/**\n * Build with tsdown.\n */\nexport async function build(userOptions: InlineConfig = {}): Promise<void> {\n  globalLogger.level =\n    userOptions.logLevel || (userOptions.silent ? 'error' : 'info')\n  const { configs, files: configFiles } = await resolveConfig(userOptions)\n\n  let cleanPromise: Promise<void> | undefined\n  const clean = () => {\n    if (cleanPromise) return cleanPromise\n    return (cleanPromise = cleanOutDir(configs))\n  }\n\n  globalLogger.info('Build start')\n  const rebuilds = await Promise.all(\n    configs.map((options) => buildSingle(options, clean)),\n  )\n  const disposeCbs: (() => void | Promise<void>)[] = []\n\n  for (const [i, config] of configs.entries()) {\n    const rebuild = rebuilds[i]\n    if (!rebuild) continue\n\n    const watcher = await watchBuild(config, configFiles, rebuild, restart)\n    disposeCbs.push(() => watcher.close())\n  }\n\n  // Watch mode with shortcuts\n  if (disposeCbs.length) {\n    disposeCbs.push(shortcuts(restart))\n  }\n\n  async function restart() {\n    for (const dispose of disposeCbs) {\n      await dispose()\n    }\n    build(userOptions)\n  }\n}\n\nconst dirname = path.dirname(fileURLToPath(import.meta.url))\nconst pkgRoot: string = path.resolve(dirname, '..')\n\n/** @internal */\nexport const shimFile: string = path.resolve(pkgRoot, 'esm-shims.js')\n\n/**\n * Build a single configuration, without watch and shortcuts features.\n *\n * Internal API, not for public use\n *\n * @private\n * @param config Resolved options\n */\nexport async function buildSingle(\n  config: ResolvedConfig,\n  clean: () => Promise<void>,\n): Promise<(() => Promise<void>) | undefined> {\n  const { format: formats, dts, watch, onSuccess, logger } = config\n  let ab: AbortController | undefined\n\n  const { hooks, context } = await createHooks(config)\n\n  warnLegacyCJS(config)\n\n  await rebuild(true)\n  if (watch) {\n    return () => rebuild()\n  }\n\n  async function rebuild(first?: boolean) {\n    const startTime = performance.now()\n\n    await hooks.callHook('build:prepare', context)\n    ab?.abort()\n\n    if (first) {\n      await clean()\n    } else {\n      await cleanOutDir([config])\n    }\n\n    let hasErrors = false\n    const isMultiFormat = formats.length > 1\n    const chunks: TsdownChunks = {}\n    const debugRolldownDir = await getDebugRolldownDir()\n\n    await Promise.all(\n      formats.map(async (format) => {\n        try {\n          const buildOptions = await getBuildOptions(\n            config,\n            format,\n            isMultiFormat,\n            false,\n          )\n          await hooks.callHook('build:before', {\n            ...context,\n            buildOptions,\n          })\n          if (debugRolldownDir) {\n            await debugBuildOptions(\n              debugRolldownDir,\n              config.name,\n              format,\n              buildOptions,\n            )\n          }\n          const { output } = await rolldownBuild(buildOptions)\n          chunks[format] = output\n          if (format === 'cjs' && dts) {\n            const { output } = await rolldownBuild(\n              await getBuildOptions(config, format, isMultiFormat, true),\n            )\n            chunks[format].push(...output)\n          }\n        } catch (error) {\n          if (watch) {\n            logger.error(error)\n            hasErrors = true\n            return\n          }\n          throw error\n        }\n      }),\n    )\n\n    if (hasErrors) {\n      return\n    }\n\n    await Promise.all([writeExports(config, chunks), copy(config)])\n    await Promise.all([publint(config), attw(config)])\n\n    await hooks.callHook('build:done', context)\n\n    logger.success(\n      prettyName(config.name),\n      `${first ? 'Build' : 'Rebuild'} complete in ${green(`${Math.round(performance.now() - startTime)}ms`)}`,\n    )\n    ab = new AbortController()\n    if (typeof onSuccess === 'string') {\n      const p = exec(onSuccess, [], {\n        nodeOptions: {\n          shell: true,\n          stdio: 'inherit',\n        },\n      })\n      p.then(({ exitCode }) => {\n        if (exitCode) {\n          process.exitCode = exitCode\n        }\n      })\n      ab.signal.addEventListener('abort', () => {\n        if (typeof p.pid === 'number') {\n          treeKill(p.pid)\n        }\n      })\n    } else {\n      await onSuccess?.(config, ab.signal)\n    }\n  }\n}\n\nexport { defineConfig } from './config.ts'\nexport * from './config/types.ts'\nexport { globalLogger, type Logger }\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"cb292752-8813-40ae-8299-d30c0a10098d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884800,"action":"HookResolveIdCallStart","importer":null,"module_request":"/Users/kevin/Developer/open-source/tsdown/src/config.d.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"${hook_resolve_id_trigger}","call_id":"40570815-1e5d-46df-a127-5d665cbfec9c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884800,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/run.ts","content":"#!/usr/bin/env node\nimport module from 'node:module'\nimport { runCLI } from './cli.ts'\n\ntry {\n  module.enableCompileCache?.()\n} catch {}\nrunCLI()\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"8565498b-538a-4dcf-894c-3a3d2f06a4f8","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884800,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config.ts","content":"import type {\n  UserConfig,\n  UserConfigExport,\n  UserConfigFn,\n} from './config/index.ts'\n\n/**\n * Defines the configuration for tsdown.\n */\nexport function defineConfig(options: UserConfig): UserConfig\nexport function defineConfig(options: UserConfig[]): UserConfig[]\nexport function defineConfig(options: UserConfigFn): UserConfigFn\nexport function defineConfig(options: UserConfigExport): UserConfigExport\nexport function defineConfig(options: UserConfigExport): UserConfigExport {\n  return options\n}\n\nexport type { UserConfig, UserConfigExport, UserConfigFn }\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"d6f3030b-21f6-425e-961d-4ccfa4c18881","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884801,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config.ts","content":"import type {\n  UserConfig,\n  UserConfigExport,\n  UserConfigFn,\n} from './config/index.ts'\n\n/**\n * Defines the configuration for tsdown.\n */\nexport function defineConfig(options: UserConfig): UserConfig\nexport function defineConfig(options: UserConfig[]): UserConfig[]\nexport function defineConfig(options: UserConfigFn): UserConfigFn\nexport function defineConfig(options: UserConfigExport): UserConfigExport\nexport function defineConfig(options: UserConfigExport): UserConfigExport {\n  return options\n}\n\nexport type { UserConfig, UserConfigExport, UserConfigFn }\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"03902dbe-1b1a-4f21-90c3-338c1ba85e99","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884801,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","content":"import path from 'node:path'\nimport process from 'node:process'\nimport { fileURLToPath } from 'node:url'\nimport { green } from 'ansis'\nimport { build as rolldownBuild } from 'rolldown'\nimport { exec } from 'tinyexec'\nimport treeKill from 'tree-kill'\nimport {\n  resolveConfig,\n  type InlineConfig,\n  type ResolvedConfig,\n} from './config/index.ts'\nimport { attw } from './features/attw.ts'\nimport { warnLegacyCJS } from './features/cjs.ts'\nimport { cleanOutDir } from './features/clean.ts'\nimport { copy } from './features/copy.ts'\nimport { writeExports, type TsdownChunks } from './features/exports.ts'\nimport { createHooks } from './features/hooks.ts'\nimport { publint } from './features/publint.ts'\nimport {\n  debugBuildOptions,\n  getBuildOptions,\n  getDebugRolldownDir,\n} from './features/rolldown.ts'\nimport { shortcuts } from './features/shortcuts.ts'\nimport { watchBuild } from './features/watch.ts'\nimport { globalLogger, prettyName, type Logger } from './utils/logger.ts'\n\n/**\n * Build with tsdown.\n */\nexport async function build(userOptions: InlineConfig = {}): Promise<void> {\n  globalLogger.level =\n    userOptions.logLevel || (userOptions.silent ? 'error' : 'info')\n  const { configs, files: configFiles } = await resolveConfig(userOptions)\n\n  let cleanPromise: Promise<void> | undefined\n  const clean = () => {\n    if (cleanPromise) return cleanPromise\n    return (cleanPromise = cleanOutDir(configs))\n  }\n\n  globalLogger.info('Build start')\n  const rebuilds = await Promise.all(\n    configs.map((options) => buildSingle(options, clean)),\n  )\n  const disposeCbs: (() => void | Promise<void>)[] = []\n\n  for (const [i, config] of configs.entries()) {\n    const rebuild = rebuilds[i]\n    if (!rebuild) continue\n\n    const watcher = await watchBuild(config, configFiles, rebuild, restart)\n    disposeCbs.push(() => watcher.close())\n  }\n\n  // Watch mode with shortcuts\n  if (disposeCbs.length) {\n    disposeCbs.push(shortcuts(restart))\n  }\n\n  async function restart() {\n    for (const dispose of disposeCbs) {\n      await dispose()\n    }\n    build(userOptions)\n  }\n}\n\nconst dirname = path.dirname(fileURLToPath(import.meta.url))\nconst pkgRoot: string = path.resolve(dirname, '..')\n\n/** @internal */\nexport const shimFile: string = path.resolve(pkgRoot, 'esm-shims.js')\n\n/**\n * Build a single configuration, without watch and shortcuts features.\n *\n * Internal API, not for public use\n *\n * @private\n * @param config Resolved options\n */\nexport async function buildSingle(\n  config: ResolvedConfig,\n  clean: () => Promise<void>,\n): Promise<(() => Promise<void>) | undefined> {\n  const { format: formats, dts, watch, onSuccess, logger } = config\n  let ab: AbortController | undefined\n\n  const { hooks, context } = await createHooks(config)\n\n  warnLegacyCJS(config)\n\n  await rebuild(true)\n  if (watch) {\n    return () => rebuild()\n  }\n\n  async function rebuild(first?: boolean) {\n    const startTime = performance.now()\n\n    await hooks.callHook('build:prepare', context)\n    ab?.abort()\n\n    if (first) {\n      await clean()\n    } else {\n      await cleanOutDir([config])\n    }\n\n    let hasErrors = false\n    const isMultiFormat = formats.length > 1\n    const chunks: TsdownChunks = {}\n    const debugRolldownDir = await getDebugRolldownDir()\n\n    await Promise.all(\n      formats.map(async (format) => {\n        try {\n          const buildOptions = await getBuildOptions(\n            config,\n            format,\n            isMultiFormat,\n            false,\n          )\n          await hooks.callHook('build:before', {\n            ...context,\n            buildOptions,\n          })\n          if (debugRolldownDir) {\n            await debugBuildOptions(\n              debugRolldownDir,\n              config.name,\n              format,\n              buildOptions,\n            )\n          }\n          const { output } = await rolldownBuild(buildOptions)\n          chunks[format] = output\n          if (format === 'cjs' && dts) {\n            const { output } = await rolldownBuild(\n              await getBuildOptions(config, format, isMultiFormat, true),\n            )\n            chunks[format].push(...output)\n          }\n        } catch (error) {\n          if (watch) {\n            logger.error(error)\n            hasErrors = true\n            return\n          }\n          throw error\n        }\n      }),\n    )\n\n    if (hasErrors) {\n      return\n    }\n\n    await Promise.all([writeExports(config, chunks), copy(config)])\n    await Promise.all([publint(config), attw(config)])\n\n    await hooks.callHook('build:done', context)\n\n    logger.success(\n      prettyName(config.name),\n      `${first ? 'Build' : 'Rebuild'} complete in ${green(`${Math.round(performance.now() - startTime)}ms`)}`,\n    )\n    ab = new AbortController()\n    if (typeof onSuccess === 'string') {\n      const p = exec(onSuccess, [], {\n        nodeOptions: {\n          shell: true,\n          stdio: 'inherit',\n        },\n      })\n      p.then(({ exitCode }) => {\n        if (exitCode) {\n          process.exitCode = exitCode\n        }\n      })\n      ab.signal.addEventListener('abort', () => {\n        if (typeof p.pid === 'number') {\n          treeKill(p.pid)\n        }\n      })\n    } else {\n      await onSuccess?.(config, ab.signal)\n    }\n  }\n}\n\nexport { defineConfig } from './config.ts'\nexport * from './config/types.ts'\nexport { globalLogger, type Logger }\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"36f92e2b-e368-4233-a6a6-14a95cbd089a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884802,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config.ts","content":"import type {\n  UserConfig,\n  UserConfigExport,\n  UserConfigFn,\n} from './config/index.ts'\n\n/**\n * Defines the configuration for tsdown.\n */\nexport function defineConfig(options: UserConfig): UserConfig\nexport function defineConfig(options: UserConfig[]): UserConfig[]\nexport function defineConfig(options: UserConfigFn): UserConfigFn\nexport function defineConfig(options: UserConfigExport): UserConfigExport\nexport function defineConfig(options: UserConfigExport): UserConfigExport {\n  return options\n}\n\nexport type { UserConfig, UserConfigExport, UserConfigFn }\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"03902dbe-1b1a-4f21-90c3-338c1ba85e99","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884803,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/run.ts","content":"#!/usr/bin/env node\nimport module from 'node:module'\nimport { runCLI } from './cli.ts'\n\ntry {\n  module.enableCompileCache?.()\n} catch {}\nrunCLI()\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"04278251-e96a-41ea-897e-86986e9b4f5a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884803,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/plugins.ts","content":"export { ExternalPlugin } from './features/external.ts'\nexport { ShebangPlugin } from './features/shebang.ts'\nexport { ReportPlugin } from './features/report.ts'\nexport { NodeProtocolPlugin } from './features/node-protocol.ts'\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"b127da6d-c0b0-4f2c-9b80-09013c2f38f8","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884803,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/run.ts","content":"#!/usr/bin/env node\nimport module from 'node:module'\nimport { runCLI } from './cli.ts'\n\ntry {\n  module.enableCompileCache?.()\n} catch {}\nrunCLI()\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"04278251-e96a-41ea-897e-86986e9b4f5a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884803,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/plugins.ts","content":"export { ExternalPlugin } from './features/external.ts'\nexport { ShebangPlugin } from './features/shebang.ts'\nexport { ReportPlugin } from './features/report.ts'\nexport { NodeProtocolPlugin } from './features/node-protocol.ts'\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"fc36ecee-85dc-44ad-acfe-6c95f2d74588","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884804,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/run.ts","content":"#!/usr/bin/env node\nimport module from 'node:module'\nimport { runCLI } from './cli.ts'\n\ntry {\n  module.enableCompileCache?.()\n} catch {}\nrunCLI()\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"b34856b8-fdcd-4051-947e-a5a088f47545","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884804,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config.ts","content":"import type {\n  UserConfig,\n  UserConfigExport,\n  UserConfigFn,\n} from './config/index.ts'\n\n/**\n * Defines the configuration for tsdown.\n */\nexport function defineConfig(options: UserConfig): UserConfig\nexport function defineConfig(options: UserConfig[]): UserConfig[]\nexport function defineConfig(options: UserConfigFn): UserConfigFn\nexport function defineConfig(options: UserConfigExport): UserConfigExport\nexport function defineConfig(options: UserConfigExport): UserConfigExport {\n  return options\n}\n\nexport type { UserConfig, UserConfigExport, UserConfigFn }\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"63ab9747-1abc-4f54-af0f-7a439fd21522","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884805,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","content":"import path from 'node:path'\nimport process from 'node:process'\nimport { fileURLToPath } from 'node:url'\nimport { green } from 'ansis'\nimport { build as rolldownBuild } from 'rolldown'\nimport { exec } from 'tinyexec'\nimport treeKill from 'tree-kill'\nimport {\n  resolveConfig,\n  type InlineConfig,\n  type ResolvedConfig,\n} from './config/index.ts'\nimport { attw } from './features/attw.ts'\nimport { warnLegacyCJS } from './features/cjs.ts'\nimport { cleanOutDir } from './features/clean.ts'\nimport { copy } from './features/copy.ts'\nimport { writeExports, type TsdownChunks } from './features/exports.ts'\nimport { createHooks } from './features/hooks.ts'\nimport { publint } from './features/publint.ts'\nimport {\n  debugBuildOptions,\n  getBuildOptions,\n  getDebugRolldownDir,\n} from './features/rolldown.ts'\nimport { shortcuts } from './features/shortcuts.ts'\nimport { watchBuild } from './features/watch.ts'\nimport { globalLogger, prettyName, type Logger } from './utils/logger.ts'\n\n/**\n * Build with tsdown.\n */\nexport async function build(userOptions: InlineConfig = {}): Promise<void> {\n  globalLogger.level =\n    userOptions.logLevel || (userOptions.silent ? 'error' : 'info')\n  const { configs, files: configFiles } = await resolveConfig(userOptions)\n\n  let cleanPromise: Promise<void> | undefined\n  const clean = () => {\n    if (cleanPromise) return cleanPromise\n    return (cleanPromise = cleanOutDir(configs))\n  }\n\n  globalLogger.info('Build start')\n  const rebuilds = await Promise.all(\n    configs.map((options) => buildSingle(options, clean)),\n  )\n  const disposeCbs: (() => void | Promise<void>)[] = []\n\n  for (const [i, config] of configs.entries()) {\n    const rebuild = rebuilds[i]\n    if (!rebuild) continue\n\n    const watcher = await watchBuild(config, configFiles, rebuild, restart)\n    disposeCbs.push(() => watcher.close())\n  }\n\n  // Watch mode with shortcuts\n  if (disposeCbs.length) {\n    disposeCbs.push(shortcuts(restart))\n  }\n\n  async function restart() {\n    for (const dispose of disposeCbs) {\n      await dispose()\n    }\n    build(userOptions)\n  }\n}\n\nconst dirname = path.dirname(fileURLToPath(import.meta.url))\nconst pkgRoot: string = path.resolve(dirname, '..')\n\n/** @internal */\nexport const shimFile: string = path.resolve(pkgRoot, 'esm-shims.js')\n\n/**\n * Build a single configuration, without watch and shortcuts features.\n *\n * Internal API, not for public use\n *\n * @private\n * @param config Resolved options\n */\nexport async function buildSingle(\n  config: ResolvedConfig,\n  clean: () => Promise<void>,\n): Promise<(() => Promise<void>) | undefined> {\n  const { format: formats, dts, watch, onSuccess, logger } = config\n  let ab: AbortController | undefined\n\n  const { hooks, context } = await createHooks(config)\n\n  warnLegacyCJS(config)\n\n  await rebuild(true)\n  if (watch) {\n    return () => rebuild()\n  }\n\n  async function rebuild(first?: boolean) {\n    const startTime = performance.now()\n\n    await hooks.callHook('build:prepare', context)\n    ab?.abort()\n\n    if (first) {\n      await clean()\n    } else {\n      await cleanOutDir([config])\n    }\n\n    let hasErrors = false\n    const isMultiFormat = formats.length > 1\n    const chunks: TsdownChunks = {}\n    const debugRolldownDir = await getDebugRolldownDir()\n\n    await Promise.all(\n      formats.map(async (format) => {\n        try {\n          const buildOptions = await getBuildOptions(\n            config,\n            format,\n            isMultiFormat,\n            false,\n          )\n          await hooks.callHook('build:before', {\n            ...context,\n            buildOptions,\n          })\n          if (debugRolldownDir) {\n            await debugBuildOptions(\n              debugRolldownDir,\n              config.name,\n              format,\n              buildOptions,\n            )\n          }\n          const { output } = await rolldownBuild(buildOptions)\n          chunks[format] = output\n          if (format === 'cjs' && dts) {\n            const { output } = await rolldownBuild(\n              await getBuildOptions(config, format, isMultiFormat, true),\n            )\n            chunks[format].push(...output)\n          }\n        } catch (error) {\n          if (watch) {\n            logger.error(error)\n            hasErrors = true\n            return\n          }\n          throw error\n        }\n      }),\n    )\n\n    if (hasErrors) {\n      return\n    }\n\n    await Promise.all([writeExports(config, chunks), copy(config)])\n    await Promise.all([publint(config), attw(config)])\n\n    await hooks.callHook('build:done', context)\n\n    logger.success(\n      prettyName(config.name),\n      `${first ? 'Build' : 'Rebuild'} complete in ${green(`${Math.round(performance.now() - startTime)}ms`)}`,\n    )\n    ab = new AbortController()\n    if (typeof onSuccess === 'string') {\n      const p = exec(onSuccess, [], {\n        nodeOptions: {\n          shell: true,\n          stdio: 'inherit',\n        },\n      })\n      p.then(({ exitCode }) => {\n        if (exitCode) {\n          process.exitCode = exitCode\n        }\n      })\n      ab.signal.addEventListener('abort', () => {\n        if (typeof p.pid === 'number') {\n          treeKill(p.pid)\n        }\n      })\n    } else {\n      await onSuccess?.(config, ab.signal)\n    }\n  }\n}\n\nexport { defineConfig } from './config.ts'\nexport * from './config/types.ts'\nexport { globalLogger, type Logger }\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"36f92e2b-e368-4233-a6a6-14a95cbd089a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884807,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/plugins.ts","content":"export { ExternalPlugin } from './features/external.ts'\nexport { ShebangPlugin } from './features/shebang.ts'\nexport { ReportPlugin } from './features/report.ts'\nexport { NodeProtocolPlugin } from './features/node-protocol.ts'\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"fc36ecee-85dc-44ad-acfe-6c95f2d74588","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884807,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","content":"import path from 'node:path'\nimport process from 'node:process'\nimport { fileURLToPath } from 'node:url'\nimport { green } from 'ansis'\nimport { build as rolldownBuild } from 'rolldown'\nimport { exec } from 'tinyexec'\nimport treeKill from 'tree-kill'\nimport {\n  resolveConfig,\n  type InlineConfig,\n  type ResolvedConfig,\n} from './config/index.ts'\nimport { attw } from './features/attw.ts'\nimport { warnLegacyCJS } from './features/cjs.ts'\nimport { cleanOutDir } from './features/clean.ts'\nimport { copy } from './features/copy.ts'\nimport { writeExports, type TsdownChunks } from './features/exports.ts'\nimport { createHooks } from './features/hooks.ts'\nimport { publint } from './features/publint.ts'\nimport {\n  debugBuildOptions,\n  getBuildOptions,\n  getDebugRolldownDir,\n} from './features/rolldown.ts'\nimport { shortcuts } from './features/shortcuts.ts'\nimport { watchBuild } from './features/watch.ts'\nimport { globalLogger, prettyName, type Logger } from './utils/logger.ts'\n\n/**\n * Build with tsdown.\n */\nexport async function build(userOptions: InlineConfig = {}): Promise<void> {\n  globalLogger.level =\n    userOptions.logLevel || (userOptions.silent ? 'error' : 'info')\n  const { configs, files: configFiles } = await resolveConfig(userOptions)\n\n  let cleanPromise: Promise<void> | undefined\n  const clean = () => {\n    if (cleanPromise) return cleanPromise\n    return (cleanPromise = cleanOutDir(configs))\n  }\n\n  globalLogger.info('Build start')\n  const rebuilds = await Promise.all(\n    configs.map((options) => buildSingle(options, clean)),\n  )\n  const disposeCbs: (() => void | Promise<void>)[] = []\n\n  for (const [i, config] of configs.entries()) {\n    const rebuild = rebuilds[i]\n    if (!rebuild) continue\n\n    const watcher = await watchBuild(config, configFiles, rebuild, restart)\n    disposeCbs.push(() => watcher.close())\n  }\n\n  // Watch mode with shortcuts\n  if (disposeCbs.length) {\n    disposeCbs.push(shortcuts(restart))\n  }\n\n  async function restart() {\n    for (const dispose of disposeCbs) {\n      await dispose()\n    }\n    build(userOptions)\n  }\n}\n\nconst dirname = path.dirname(fileURLToPath(import.meta.url))\nconst pkgRoot: string = path.resolve(dirname, '..')\n\n/** @internal */\nexport const shimFile: string = path.resolve(pkgRoot, 'esm-shims.js')\n\n/**\n * Build a single configuration, without watch and shortcuts features.\n *\n * Internal API, not for public use\n *\n * @private\n * @param config Resolved options\n */\nexport async function buildSingle(\n  config: ResolvedConfig,\n  clean: () => Promise<void>,\n): Promise<(() => Promise<void>) | undefined> {\n  const { format: formats, dts, watch, onSuccess, logger } = config\n  let ab: AbortController | undefined\n\n  const { hooks, context } = await createHooks(config)\n\n  warnLegacyCJS(config)\n\n  await rebuild(true)\n  if (watch) {\n    return () => rebuild()\n  }\n\n  async function rebuild(first?: boolean) {\n    const startTime = performance.now()\n\n    await hooks.callHook('build:prepare', context)\n    ab?.abort()\n\n    if (first) {\n      await clean()\n    } else {\n      await cleanOutDir([config])\n    }\n\n    let hasErrors = false\n    const isMultiFormat = formats.length > 1\n    const chunks: TsdownChunks = {}\n    const debugRolldownDir = await getDebugRolldownDir()\n\n    await Promise.all(\n      formats.map(async (format) => {\n        try {\n          const buildOptions = await getBuildOptions(\n            config,\n            format,\n            isMultiFormat,\n            false,\n          )\n          await hooks.callHook('build:before', {\n            ...context,\n            buildOptions,\n          })\n          if (debugRolldownDir) {\n            await debugBuildOptions(\n              debugRolldownDir,\n              config.name,\n              format,\n              buildOptions,\n            )\n          }\n          const { output } = await rolldownBuild(buildOptions)\n          chunks[format] = output\n          if (format === 'cjs' && dts) {\n            const { output } = await rolldownBuild(\n              await getBuildOptions(config, format, isMultiFormat, true),\n            )\n            chunks[format].push(...output)\n          }\n        } catch (error) {\n          if (watch) {\n            logger.error(error)\n            hasErrors = true\n            return\n          }\n          throw error\n        }\n      }),\n    )\n\n    if (hasErrors) {\n      return\n    }\n\n    await Promise.all([writeExports(config, chunks), copy(config)])\n    await Promise.all([publint(config), attw(config)])\n\n    await hooks.callHook('build:done', context)\n\n    logger.success(\n      prettyName(config.name),\n      `${first ? 'Build' : 'Rebuild'} complete in ${green(`${Math.round(performance.now() - startTime)}ms`)}`,\n    )\n    ab = new AbortController()\n    if (typeof onSuccess === 'string') {\n      const p = exec(onSuccess, [], {\n        nodeOptions: {\n          shell: true,\n          stdio: 'inherit',\n        },\n      })\n      p.then(({ exitCode }) => {\n        if (exitCode) {\n          process.exitCode = exitCode\n        }\n      })\n      ab.signal.addEventListener('abort', () => {\n        if (typeof p.pid === 'number') {\n          treeKill(p.pid)\n        }\n      })\n    } else {\n      await onSuccess?.(config, ab.signal)\n    }\n  }\n}\n\nexport { defineConfig } from './config.ts'\nexport * from './config/types.ts'\nexport { globalLogger, type Logger }\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"df034735-f9b1-4916-8b95-20061109558a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884808,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"${hook_resolve_id_trigger}","call_id":"40570815-1e5d-46df-a127-5d665cbfec9c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884808,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/run.ts","content":"#!/usr/bin/env node\nimport module from 'node:module'\nimport { runCLI } from './cli.ts'\n\ntry {\n  module.enableCompileCache?.()\n} catch {}\nrunCLI()\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"b34856b8-fdcd-4051-947e-a5a088f47545","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884809,"action":"HookResolveIdCallStart","importer":null,"module_request":"/Users/kevin/Developer/open-source/tsdown/src/config.d.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"${hook_resolve_id_trigger}","call_id":"9af38999-d734-458b-855c-1d06c2496a49","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884809,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config.ts","content":"import type {\n  UserConfig,\n  UserConfigExport,\n  UserConfigFn,\n} from './config/index.ts'\n\n/**\n * Defines the configuration for tsdown.\n */\nexport function defineConfig(options: UserConfig): UserConfig\nexport function defineConfig(options: UserConfig[]): UserConfig[]\nexport function defineConfig(options: UserConfigFn): UserConfigFn\nexport function defineConfig(options: UserConfigExport): UserConfigExport\nexport function defineConfig(options: UserConfigExport): UserConfigExport {\n  return options\n}\n\nexport type { UserConfig, UserConfigExport, UserConfigFn }\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"63ab9747-1abc-4f54-af0f-7a439fd21522","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884809,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/plugins.ts","content":"export { ExternalPlugin } from './features/external.ts'\nexport { ShebangPlugin } from './features/shebang.ts'\nexport { ReportPlugin } from './features/report.ts'\nexport { NodeProtocolPlugin } from './features/node-protocol.ts'\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"e5165348-6421-4cf8-b7df-647a384190e3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884809,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/run.ts","module_request":"node:module","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"1e3ce0b0-3088-4e8a-8d45-8fc44dd7277f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884810,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"1e3ce0b0-3088-4e8a-8d45-8fc44dd7277f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884810,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/run.ts","module_request":"node:module","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"0c379df8-4ee3-4208-ac78-bd6889cbbf95","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884810,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/run.ts","module_request":"./cli.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"dd2f9f04-aa4d-447e-8a11-17aff19e7a2c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884810,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"dd2f9f04-aa4d-447e-8a11-17aff19e7a2c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884810,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/run.ts","module_request":"./cli.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"aa4fef1d-5c54-485c-95b1-a08e37d4dfcd","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884811,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","content":"import path from 'node:path'\nimport process from 'node:process'\nimport { fileURLToPath } from 'node:url'\nimport { green } from 'ansis'\nimport { build as rolldownBuild } from 'rolldown'\nimport { exec } from 'tinyexec'\nimport treeKill from 'tree-kill'\nimport {\n  resolveConfig,\n  type InlineConfig,\n  type ResolvedConfig,\n} from './config/index.ts'\nimport { attw } from './features/attw.ts'\nimport { warnLegacyCJS } from './features/cjs.ts'\nimport { cleanOutDir } from './features/clean.ts'\nimport { copy } from './features/copy.ts'\nimport { writeExports, type TsdownChunks } from './features/exports.ts'\nimport { createHooks } from './features/hooks.ts'\nimport { publint } from './features/publint.ts'\nimport {\n  debugBuildOptions,\n  getBuildOptions,\n  getDebugRolldownDir,\n} from './features/rolldown.ts'\nimport { shortcuts } from './features/shortcuts.ts'\nimport { watchBuild } from './features/watch.ts'\nimport { globalLogger, prettyName, type Logger } from './utils/logger.ts'\n\n/**\n * Build with tsdown.\n */\nexport async function build(userOptions: InlineConfig = {}): Promise<void> {\n  globalLogger.level =\n    userOptions.logLevel || (userOptions.silent ? 'error' : 'info')\n  const { configs, files: configFiles } = await resolveConfig(userOptions)\n\n  let cleanPromise: Promise<void> | undefined\n  const clean = () => {\n    if (cleanPromise) return cleanPromise\n    return (cleanPromise = cleanOutDir(configs))\n  }\n\n  globalLogger.info('Build start')\n  const rebuilds = await Promise.all(\n    configs.map((options) => buildSingle(options, clean)),\n  )\n  const disposeCbs: (() => void | Promise<void>)[] = []\n\n  for (const [i, config] of configs.entries()) {\n    const rebuild = rebuilds[i]\n    if (!rebuild) continue\n\n    const watcher = await watchBuild(config, configFiles, rebuild, restart)\n    disposeCbs.push(() => watcher.close())\n  }\n\n  // Watch mode with shortcuts\n  if (disposeCbs.length) {\n    disposeCbs.push(shortcuts(restart))\n  }\n\n  async function restart() {\n    for (const dispose of disposeCbs) {\n      await dispose()\n    }\n    build(userOptions)\n  }\n}\n\nconst dirname = path.dirname(fileURLToPath(import.meta.url))\nconst pkgRoot: string = path.resolve(dirname, '..')\n\n/** @internal */\nexport const shimFile: string = path.resolve(pkgRoot, 'esm-shims.js')\n\n/**\n * Build a single configuration, without watch and shortcuts features.\n *\n * Internal API, not for public use\n *\n * @private\n * @param config Resolved options\n */\nexport async function buildSingle(\n  config: ResolvedConfig,\n  clean: () => Promise<void>,\n): Promise<(() => Promise<void>) | undefined> {\n  const { format: formats, dts, watch, onSuccess, logger } = config\n  let ab: AbortController | undefined\n\n  const { hooks, context } = await createHooks(config)\n\n  warnLegacyCJS(config)\n\n  await rebuild(true)\n  if (watch) {\n    return () => rebuild()\n  }\n\n  async function rebuild(first?: boolean) {\n    const startTime = performance.now()\n\n    await hooks.callHook('build:prepare', context)\n    ab?.abort()\n\n    if (first) {\n      await clean()\n    } else {\n      await cleanOutDir([config])\n    }\n\n    let hasErrors = false\n    const isMultiFormat = formats.length > 1\n    const chunks: TsdownChunks = {}\n    const debugRolldownDir = await getDebugRolldownDir()\n\n    await Promise.all(\n      formats.map(async (format) => {\n        try {\n          const buildOptions = await getBuildOptions(\n            config,\n            format,\n            isMultiFormat,\n            false,\n          )\n          await hooks.callHook('build:before', {\n            ...context,\n            buildOptions,\n          })\n          if (debugRolldownDir) {\n            await debugBuildOptions(\n              debugRolldownDir,\n              config.name,\n              format,\n              buildOptions,\n            )\n          }\n          const { output } = await rolldownBuild(buildOptions)\n          chunks[format] = output\n          if (format === 'cjs' && dts) {\n            const { output } = await rolldownBuild(\n              await getBuildOptions(config, format, isMultiFormat, true),\n            )\n            chunks[format].push(...output)\n          }\n        } catch (error) {\n          if (watch) {\n            logger.error(error)\n            hasErrors = true\n            return\n          }\n          throw error\n        }\n      }),\n    )\n\n    if (hasErrors) {\n      return\n    }\n\n    await Promise.all([writeExports(config, chunks), copy(config)])\n    await Promise.all([publint(config), attw(config)])\n\n    await hooks.callHook('build:done', context)\n\n    logger.success(\n      prettyName(config.name),\n      `${first ? 'Build' : 'Rebuild'} complete in ${green(`${Math.round(performance.now() - startTime)}ms`)}`,\n    )\n    ab = new AbortController()\n    if (typeof onSuccess === 'string') {\n      const p = exec(onSuccess, [], {\n        nodeOptions: {\n          shell: true,\n          stdio: 'inherit',\n        },\n      })\n      p.then(({ exitCode }) => {\n        if (exitCode) {\n          process.exitCode = exitCode\n        }\n      })\n      ab.signal.addEventListener('abort', () => {\n        if (typeof p.pid === 'number') {\n          treeKill(p.pid)\n        }\n      })\n    } else {\n      await onSuccess?.(config, ab.signal)\n    }\n  }\n}\n\nexport { defineConfig } from './config.ts'\nexport * from './config/types.ts'\nexport { globalLogger, type Logger }\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"df034735-f9b1-4916-8b95-20061109558a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884813,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/plugins.ts","content":"export { ExternalPlugin } from './features/external.ts'\nexport { ShebangPlugin } from './features/shebang.ts'\nexport { ReportPlugin } from './features/report.ts'\nexport { NodeProtocolPlugin } from './features/node-protocol.ts'\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"e5165348-6421-4cf8-b7df-647a384190e3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884813,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"e104a48f-90d5-44ba-9deb-765ade3bff62","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884814,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"e104a48f-90d5-44ba-9deb-765ade3bff62","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884814,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"5ef1aec4-eb43-4a5c-8b01-4a396bcc8f91","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884815,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"node:process","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"4add24a6-4c70-4b5f-b117-9a9ddebf7915","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884815,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"4add24a6-4c70-4b5f-b117-9a9ddebf7915","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884816,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"node:process","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"125871d2-aee5-4398-9967-73c076c55e8c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884816,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"node:url","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"c6e6d156-2ce9-43cc-bc85-9e96c23bf590","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884817,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"c6e6d156-2ce9-43cc-bc85-9e96c23bf590","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884818,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"node:url","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"435cfff8-4cc2-4eb6-b675-b5fc4f8d7e7f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884818,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"ansis","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"addd0fd9-980d-450c-9e08-5fca9efd2dbf","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884818,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"addd0fd9-980d-450c-9e08-5fca9efd2dbf","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884818,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"ansis","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"6686a955-0b7f-4a03-9882-dc24e1b41f28","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884819,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"${hook_resolve_id_trigger}","call_id":"9af38999-d734-458b-855c-1d06c2496a49","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884819,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"rolldown","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"dff7519d-3a39-41a8-a4d5-c9bd8f7f317a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884819,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"dff7519d-3a39-41a8-a4d5-c9bd8f7f317a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884819,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"rolldown","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"f8daecae-d7e4-4e72-b816-d70a81579b29","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884820,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"0c379df8-4ee3-4208-ac78-bd6889cbbf95","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884820,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"tinyexec","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"9ac0cf8f-e4ea-4621-8c81-22149b63b53f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884820,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"9ac0cf8f-e4ea-4621-8c81-22149b63b53f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884820,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"tinyexec","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"d854ef0e-d91c-4968-9bc7-77c2535db52e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884820,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/run.ts","module_request":"node:module","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"5ed6ab0d-1c2d-4e8d-bd7d-d44d52ba351d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884821,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"tree-kill","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"0d9d7fef-6298-4e30-a611-ee078b4cc7dd","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884821,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"0d9d7fef-6298-4e30-a611-ee078b4cc7dd","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884821,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/plugins.ts","module_request":"./features/external.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"5dff69ca-206e-4000-95b5-a6f0cc167e51","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884822,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"tree-kill","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"17496184-034f-4002-befd-692e92530958","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884822,"action":"HookResolveIdCallStart","importer":null,"module_request":"/Users/kevin/Developer/open-source/tsdown/src/config.d.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"${hook_resolve_id_trigger}","call_id":"35467a2b-7c5a-41e8-940d-87624b5d7768","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884822,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./config/index.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"2a8a9cba-3155-46c4-89da-238424711663","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884822,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"2a8a9cba-3155-46c4-89da-238424711663","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884823,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./config/index.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"238f6349-8099-4f2a-92e0-6b17b229a6ac","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884824,"action":"HookResolveIdCallEnd","resolved_id":"/Users/kevin/Developer/open-source/tsdown/src/config.d.ts","is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"${hook_resolve_id_trigger}","call_id":"35467a2b-7c5a-41e8-940d-87624b5d7768","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884824,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./features/attw.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"59fb0d3f-c08a-4bae-9b1c-fbd3bccf62ad","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884824,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"59fb0d3f-c08a-4bae-9b1c-fbd3bccf62ad","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884824,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./features/attw.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"6ef94277-f047-48cc-84ce-2ef8d0b6d0a7","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884824,"action":"HookResolveIdCallStart","importer":null,"module_request":"/Users/kevin/Developer/open-source/tsdown/src/plugins.d.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"${hook_resolve_id_trigger}","call_id":"b595e12e-a8df-4065-af67-8bfb037b6db9","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884825,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"${hook_resolve_id_trigger}","call_id":"b595e12e-a8df-4065-af67-8bfb037b6db9","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884826,"action":"HookResolveIdCallStart","importer":null,"module_request":"/Users/kevin/Developer/open-source/tsdown/src/plugins.d.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"${hook_resolve_id_trigger}","call_id":"745b2ed0-fac6-47a1-9262-e7076ae35635","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884826,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"aa4fef1d-5c54-485c-95b1-a08e37d4dfcd","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884826,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config.d.ts","plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"e8e511f2-d430-43e0-bd39-bc8eeef111be","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884827,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config.d.ts","content":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"e8e511f2-d430-43e0-bd39-bc8eeef111be","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884827,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config.d.ts","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"a248b3b9-c851-4825-bfd1-085fc406e413","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884827,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"${hook_resolve_id_trigger}","call_id":"745b2ed0-fac6-47a1-9262-e7076ae35635","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884827,"action":"HookResolveIdCallStart","importer":null,"module_request":"/Users/kevin/Developer/open-source/tsdown/src/plugins.d.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"${hook_resolve_id_trigger}","call_id":"f2366b90-0782-4e71-b0e0-33668fbe139a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884827,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config.d.ts","content":"import type { UserConfig, UserConfigExport, UserConfigFn } from \"./config/index.ts\";\n/**\n* Defines the configuration for tsdown.\n*/\nexport declare function defineConfig(options: UserConfig): UserConfig;\nexport declare function defineConfig(options: UserConfig[]): UserConfig[];\nexport declare function defineConfig(options: UserConfigFn): UserConfigFn;\nexport declare function defineConfig(options: UserConfigExport): UserConfigExport;\nexport type { UserConfig, UserConfigExport, UserConfigFn };\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"a248b3b9-c851-4825-bfd1-085fc406e413","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884828,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"${hook_resolve_id_trigger}","call_id":"f2366b90-0782-4e71-b0e0-33668fbe139a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884828,"action":"HookResolveIdCallStart","importer":null,"module_request":"/Users/kevin/Developer/open-source/tsdown/src/plugins.d.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"${hook_resolve_id_trigger}","call_id":"e06a8983-e64a-47dc-a805-9af08b0a9c41","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884828,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./features/cjs.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"6b5450b9-7a28-4cee-9ed9-da698b3576b9","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884828,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"6b5450b9-7a28-4cee-9ed9-da698b3576b9","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884828,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./features/cjs.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"f7ec7573-8b84-4e3f-b2e4-164bab473388","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884829,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"5dff69ca-206e-4000-95b5-a6f0cc167e51","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884829,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/plugins.ts","module_request":"./features/external.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"5d7af0fc-a0e0-4fa6-a776-689449e19f06","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884830,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/plugins.ts","module_request":"./features/shebang.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"2d338e46-8e61-428f-82e6-eaf4acfadb74","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884830,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"2d338e46-8e61-428f-82e6-eaf4acfadb74","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884830,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./features/clean.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"63593fb3-2c1c-4414-81a6-f57b4da8eee2","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884830,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"63593fb3-2c1c-4414-81a6-f57b4da8eee2","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884831,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config.d.ts","content":"import type { UserConfig, UserConfigExport, UserConfigFn } from \"./config/index.ts\";\n/**\n* Defines the configuration for tsdown.\n*/\nexport declare function defineConfig(options: UserConfig): UserConfig;\nexport declare function defineConfig(options: UserConfig[]): UserConfig[];\nexport declare function defineConfig(options: UserConfigFn): UserConfigFn;\nexport declare function defineConfig(options: UserConfigExport): UserConfigExport;\nexport type { UserConfig, UserConfigExport, UserConfigFn };\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"5f246635-abd7-4674-ab94-f721ca4168f9","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884831,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./features/clean.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"042d91eb-e211-430a-a560-61032c811e81","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884831,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config.d.ts","content":"import type { UserConfig, UserConfigExport, UserConfigFn } from \"./config/index.ts\";\n/**\n* Defines the configuration for tsdown.\n*/\nexport declare function defineConfig(options: UserConfig): UserConfig;\nexport declare function defineConfig(options: UserConfig[]): UserConfig[];\nexport declare function defineConfig(options: UserConfigFn): UserConfigFn;\nexport declare function defineConfig(options: UserConfigExport): UserConfigExport;\nexport type { UserConfig, UserConfigExport, UserConfigFn };\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"5f246635-abd7-4674-ab94-f721ca4168f9","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884831,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config.d.ts","content":"import type { UserConfig, UserConfigExport, UserConfigFn } from \"./config/index.ts\";\n/**\n* Defines the configuration for tsdown.\n*/\nexport declare function defineConfig(options: UserConfig): UserConfig;\nexport declare function defineConfig(options: UserConfig[]): UserConfig[];\nexport declare function defineConfig(options: UserConfigFn): UserConfigFn;\nexport declare function defineConfig(options: UserConfigExport): UserConfigExport;\nexport type { UserConfig, UserConfigExport, UserConfigFn };\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"2a4f724a-9b4c-42a9-b817-300dd4f92c09","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884831,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./features/copy.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"f5d3a703-f620-46bb-aa17-9dd9d5b042a0","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884831,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/plugins.ts","module_request":"./features/shebang.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"b2d0140c-886e-4716-998b-1042137c09cb","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884832,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"f5d3a703-f620-46bb-aa17-9dd9d5b042a0","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884832,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/plugins.ts","module_request":"./features/report.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"7ef483d1-cd6f-403f-a7f2-66dbf7a7276e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884833,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./features/copy.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"7c67faf9-cc22-4461-86c3-b363e8c2b85f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884833,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"7ef483d1-cd6f-403f-a7f2-66dbf7a7276e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884834,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config.d.ts","content":"import { UserConfig, UserConfigExport, UserConfigFn } from \"./config/index.ts\";\nexport var defineConfig = [0, () => [UserConfig, UserConfig]];\nexport var defineConfig = [1, () => [UserConfig, UserConfig]];\nexport var defineConfig = [2, () => [UserConfigFn, UserConfigFn]];\nexport var defineConfig = [3, () => [UserConfigExport, UserConfigExport]];\nexport { UserConfig, UserConfigExport, UserConfigFn };","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"2a4f724a-9b4c-42a9-b817-300dd4f92c09","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884834,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/plugins.ts","module_request":"./features/report.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"51ea7b7a-6d27-4c61-b482-c82ce15a2d6c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884834,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config.d.ts","content":"import { UserConfig, UserConfigExport, UserConfigFn } from \"./config/index.ts\";\nexport var defineConfig = [0, () => [UserConfig, UserConfig]];\nexport var defineConfig = [1, () => [UserConfig, UserConfig]];\nexport var defineConfig = [2, () => [UserConfigFn, UserConfigFn]];\nexport var defineConfig = [3, () => [UserConfigExport, UserConfigExport]];\nexport { UserConfig, UserConfigExport, UserConfigFn };","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"83c6b121-2d0c-4e07-9d56-5ca18cddb3f4","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884834,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/plugins.ts","module_request":"./features/node-protocol.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"f444ba9e-4cc3-4e90-bf0c-25ca1c4687b3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884834,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"f444ba9e-4cc3-4e90-bf0c-25ca1c4687b3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884834,"action":"HookResolveIdCallEnd","resolved_id":"/Users/kevin/Developer/open-source/tsdown/src/plugins.d.ts","is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"${hook_resolve_id_trigger}","call_id":"e06a8983-e64a-47dc-a805-9af08b0a9c41","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884835,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config.d.ts","content":"import { UserConfig, UserConfigExport, UserConfigFn } from \"./config/index.ts\";\nexport var defineConfig = [0, () => [UserConfig, UserConfig]];\nexport var defineConfig = [1, () => [UserConfig, UserConfig]];\nexport var defineConfig = [2, () => [UserConfigFn, UserConfigFn]];\nexport var defineConfig = [3, () => [UserConfigExport, UserConfigExport]];\nexport { UserConfig, UserConfigExport, UserConfigFn };","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"83c6b121-2d0c-4e07-9d56-5ca18cddb3f4","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884835,"action":"HookResolveIdCallStart","importer":null,"module_request":"/Users/kevin/Developer/open-source/tsdown/src/run.d.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"${hook_resolve_id_trigger}","call_id":"613d48cc-0ee6-477b-a78c-804d805522ba","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884835,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config.d.ts","module_request":"./config/index.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"1062299f-d0a0-43d7-9314-8bcbd758634d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884835,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"${hook_resolve_id_trigger}","call_id":"613d48cc-0ee6-477b-a78c-804d805522ba","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884836,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"1062299f-d0a0-43d7-9314-8bcbd758634d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884836,"action":"HookResolveIdCallStart","importer":null,"module_request":"/Users/kevin/Developer/open-source/tsdown/src/run.d.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"${hook_resolve_id_trigger}","call_id":"1ae1c5fb-9969-4035-a4bc-f433d3e83e0a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884836,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config.d.ts","module_request":"./config/index.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"dd065cec-b234-4565-91d7-98a32b230a9f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884837,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/plugins.d.ts","plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"c8c10a92-edc5-4a21-ac86-100e9df60ed5","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884837,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/plugins.ts","module_request":"./features/node-protocol.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"11baa70d-12c1-4fb7-88de-5d3c024ef677","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884838,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/plugins.d.ts","content":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"c8c10a92-edc5-4a21-ac86-100e9df60ed5","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884838,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"5d7af0fc-a0e0-4fa6-a776-689449e19f06","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884838,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/plugins.d.ts","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"b49ce38f-df8a-4baa-8390-3a85d5adb289","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884838,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/plugins.ts","module_request":"./features/external.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"598ebeca-2134-4dc5-987e-2b4dc4e99a9d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884838,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./features/exports.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"e95cfc18-5734-4b47-bbd5-9379e66f334e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884838,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"b2d0140c-886e-4716-998b-1042137c09cb","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884839,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"e95cfc18-5734-4b47-bbd5-9379e66f334e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884839,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/plugins.ts","module_request":"./features/shebang.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"78f25709-d086-4918-b6a6-39a3443eacbe","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884839,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./features/exports.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"64673ce6-93fd-4cd3-82b8-449ab85ca8b0","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884839,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"51ea7b7a-6d27-4c61-b482-c82ce15a2d6c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884839,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./features/hooks.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"8c6ee00a-c8f9-493a-bee8-1f4fcd75603d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884840,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/plugins.ts","module_request":"./features/report.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"d8cf0699-56b1-4ed6-8cd0-0590b26bb741","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884840,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"8c6ee00a-c8f9-493a-bee8-1f4fcd75603d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884840,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"11baa70d-12c1-4fb7-88de-5d3c024ef677","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884840,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./features/hooks.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"715862ae-06ef-4e0d-b497-bfdc40f3ca5c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884841,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/plugins.ts","module_request":"./features/node-protocol.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"70c35881-0574-4e5a-8522-792414deb00a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884841,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./features/publint.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"804d0371-3774-455b-8ec0-e70bbeaaf87c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884841,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"598ebeca-2134-4dc5-987e-2b4dc4e99a9d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884841,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"804d0371-3774-455b-8ec0-e70bbeaaf87c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884842,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/plugins.ts","module_request":"./features/external.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"c090d55b-ca37-4187-931c-45568f55a521","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884842,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./features/publint.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"3f1dad46-d189-4aee-9259-2e44281aa1c9","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884842,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"78f25709-d086-4918-b6a6-39a3443eacbe","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884842,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./features/rolldown.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"d6b9b391-62a1-4f09-af04-8d8d36fd47c4","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884842,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/plugins.ts","module_request":"./features/shebang.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"0a2128ce-f20d-44db-9c49-507007f07197","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884843,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"d6b9b391-62a1-4f09-af04-8d8d36fd47c4","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884843,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"d8cf0699-56b1-4ed6-8cd0-0590b26bb741","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884843,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./features/rolldown.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"180b51a8-6635-4a36-a133-c05bf550e8ea","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884843,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/plugins.ts","module_request":"./features/report.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"78f153b7-5dad-4b4d-8d18-19ad6fe8d87b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884843,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./features/shortcuts.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"76b4b727-66d0-4393-9acb-ce2e346a8e20","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884844,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"70c35881-0574-4e5a-8522-792414deb00a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884844,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"76b4b727-66d0-4393-9acb-ce2e346a8e20","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884844,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/plugins.ts","module_request":"./features/node-protocol.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"cf450170-5a22-46de-ad06-9221056df9c5","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884844,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./features/shortcuts.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"a23c90e0-a9c9-4421-bdb7-d223907e4c27","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884844,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"c090d55b-ca37-4187-931c-45568f55a521","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884844,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./features/watch.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"87e40531-713e-4a35-92ae-da7d78346758","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884844,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/plugins.ts","module_request":"./features/external.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"eb511402-b108-4e3c-a555-96b129ce7848","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884845,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"87e40531-713e-4a35-92ae-da7d78346758","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884845,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"eb511402-b108-4e3c-a555-96b129ce7848","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884845,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./features/watch.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"b6acce86-7613-4805-8175-ad1ecf355089","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884845,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"0a2128ce-f20d-44db-9c49-507007f07197","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884845,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./utils/logger.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"4296edf5-1b1c-4c8d-bdde-92fc302878a6","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884845,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/plugins.ts","module_request":"./features/shebang.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"7adb46bd-a184-467d-8d57-d35b5c1dc5f3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884845,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"4296edf5-1b1c-4c8d-bdde-92fc302878a6","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884845,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"7adb46bd-a184-467d-8d57-d35b5c1dc5f3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884846,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./utils/logger.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"37b0a7ca-5e48-4aef-9807-3d13d84a1904","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884846,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"78f153b7-5dad-4b4d-8d18-19ad6fe8d87b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884846,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./config.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"05b164f6-704e-4d2d-a75b-6adc3524332c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884846,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/plugins.ts","module_request":"./features/report.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"3e946c27-948d-458a-b10e-b9269aaad6ac","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884846,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"05b164f6-704e-4d2d-a75b-6adc3524332c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884846,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"3e946c27-948d-458a-b10e-b9269aaad6ac","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884846,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./config.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"9ad5965f-1ae3-48b9-b86d-d1e665fd9d82","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884846,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"cf450170-5a22-46de-ad06-9221056df9c5","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884847,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./config/types.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"a6751628-fc0c-436c-adcc-5abe1a0a5091","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884847,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"a6751628-fc0c-436c-adcc-5abe1a0a5091","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884847,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/run.ts","module_request":"./cli.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"458c6679-b00a-4cd3-b067-5499b3441f04","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884847,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./config/types.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"dbd0816c-7495-4441-b7e1-9db80040597a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884847,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"5ed6ab0d-1c2d-4e8d-bd7d-d44d52ba351d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884847,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"5ef1aec4-eb43-4a5c-8b01-4a396bcc8f91","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884847,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/run.ts","module_request":"node:module","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"58e40f7d-3477-4d47-907c-4d2c47be6787","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884848,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"268045f9-6afa-4f78-b8ba-9418d9c4c68c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884848,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/plugins.ts","module_request":"./features/node-protocol.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"2ca221b0-98bf-42b6-9784-98d3d4107d1c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884848,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"125871d2-aee5-4398-9967-73c076c55e8c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884848,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"2ca221b0-98bf-42b6-9784-98d3d4107d1c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884848,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"node:process","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"06bbc4d6-c92a-4684-b4c0-131037b84d15","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884848,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/plugins.d.ts","content":"export { ExternalPlugin } from \"./features/external.ts\";\nexport { ShebangPlugin } from \"./features/shebang.ts\";\nexport { ReportPlugin } from \"./features/report.ts\";\nexport { NodeProtocolPlugin } from \"./features/node-protocol.ts\";\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"b49ce38f-df8a-4baa-8390-3a85d5adb289","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884848,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"435cfff8-4cc2-4eb6-b675-b5fc4f8d7e7f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884848,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/plugins.d.ts","content":"export { ExternalPlugin } from \"./features/external.ts\";\nexport { ShebangPlugin } from \"./features/shebang.ts\";\nexport { ReportPlugin } from \"./features/report.ts\";\nexport { NodeProtocolPlugin } from \"./features/node-protocol.ts\";\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"b12ddd12-cf51-44b6-8ef1-7a442b0715db","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884849,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"node:url","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"139de1e8-ae88-4aed-b7ae-a199a112bacd","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884849,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/plugins.d.ts","content":"export { ExternalPlugin } from \"./features/external.ts\";\nexport { ShebangPlugin } from \"./features/shebang.ts\";\nexport { ReportPlugin } from \"./features/report.ts\";\nexport { NodeProtocolPlugin } from \"./features/node-protocol.ts\";\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"b12ddd12-cf51-44b6-8ef1-7a442b0715db","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884849,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"6686a955-0b7f-4a03-9882-dc24e1b41f28","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884849,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/plugins.d.ts","content":"export { ExternalPlugin } from \"./features/external.ts\";\nexport { ShebangPlugin } from \"./features/shebang.ts\";\nexport { ReportPlugin } from \"./features/report.ts\";\nexport { NodeProtocolPlugin } from \"./features/node-protocol.ts\";\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"1d8251fe-9e46-4ee2-a53b-9dbbf4234f49","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884849,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"ansis","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"23a9e504-cbc5-4082-86b3-4571acf6c6b2","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884849,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"${hook_resolve_id_trigger}","call_id":"1ae1c5fb-9969-4035-a4bc-f433d3e83e0a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884850,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"f8daecae-d7e4-4e72-b816-d70a81579b29","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884850,"action":"HookResolveIdCallStart","importer":null,"module_request":"/Users/kevin/Developer/open-source/tsdown/src/run.d.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"${hook_resolve_id_trigger}","call_id":"16027ade-cc11-4186-a94d-4fa88a1fe3e5","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884850,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"rolldown","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"06f3b1bd-c299-48bc-857b-198288fb64ac","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884850,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"d854ef0e-d91c-4968-9bc7-77c2535db52e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884850,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"tinyexec","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"6893a02d-8747-4b92-bf60-b8cf847856ad","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884850,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"17496184-034f-4002-befd-692e92530958","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884850,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"tree-kill","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"b12f6423-b797-4bf3-9829-921aecddb9d4","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884851,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"238f6349-8099-4f2a-92e0-6b17b229a6ac","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884851,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./config/index.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"91cdc3a7-0b95-47ae-a6d2-cb47a4be7e07","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884851,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"6ef94277-f047-48cc-84ce-2ef8d0b6d0a7","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884851,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./features/attw.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"bd66e289-0ca4-48d1-ad95-33692d2d9b0b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884851,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"f7ec7573-8b84-4e3f-b2e4-164bab473388","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884851,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./features/cjs.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"36f452aa-9f28-4ea7-9742-7c55f1b31341","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884851,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"042d91eb-e211-430a-a560-61032c811e81","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884852,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./features/clean.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"d23426d2-f911-4177-9f0c-6a62ba3db824","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884852,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"7c67faf9-cc22-4461-86c3-b363e8c2b85f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884852,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./features/copy.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"51126383-a527-4112-9d37-e6f2f83c5314","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884852,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"64673ce6-93fd-4cd3-82b8-449ab85ca8b0","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884852,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./features/exports.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"ac496986-35cd-4344-9f4c-9214e7e4774d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884852,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"715862ae-06ef-4e0d-b497-bfdc40f3ca5c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884852,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./features/hooks.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"09dddd33-229d-4a5f-a2ab-450d619e6e87","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884852,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"3f1dad46-d189-4aee-9259-2e44281aa1c9","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884853,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./features/publint.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"9cfdce61-310d-4b41-96d6-e79fb1195a18","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884853,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"180b51a8-6635-4a36-a133-c05bf550e8ea","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884853,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./features/rolldown.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"d48e3cf0-41f1-4c47-b9c5-1fc39a944995","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884853,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"a23c90e0-a9c9-4421-bdb7-d223907e4c27","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884853,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./features/shortcuts.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"9e9f8922-fb4e-4df0-bdbe-281e61833367","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884853,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"b6acce86-7613-4805-8175-ad1ecf355089","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884853,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./features/watch.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"3617b900-e196-4172-950b-fcefb9d01edd","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884854,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"37b0a7ca-5e48-4aef-9807-3d13d84a1904","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884854,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./utils/logger.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"8f2f579b-6b14-4038-9ee0-e5791699974c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884854,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"9ad5965f-1ae3-48b9-b86d-d1e665fd9d82","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884854,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./config.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"76d76ad6-8ffd-4a44-bfd0-5a4f1eff4960","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884855,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"458c6679-b00a-4cd3-b067-5499b3441f04","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884855,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"268045f9-6afa-4f78-b8ba-9418d9c4c68c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884855,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"${hook_resolve_id_trigger}","call_id":"16027ade-cc11-4186-a94d-4fa88a1fe3e5","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884855,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/run.ts","module_request":"./cli.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"ada2d9b6-e08a-40c3-9741-7110bc8db721","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884856,"action":"HookResolveIdCallStart","importer":null,"module_request":"/Users/kevin/Developer/open-source/tsdown/src/run.d.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"${hook_resolve_id_trigger}","call_id":"fb8e4244-b444-45dc-8100-7885a50c59b8","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884856,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"58e40f7d-3477-4d47-907c-4d2c47be6787","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884856,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/plugins.d.ts","content":"export { ExternalPlugin } from \"./features/external.ts\";\nexport { ShebangPlugin } from \"./features/shebang.ts\";\nexport { ReportPlugin } from \"./features/report.ts\";\nexport { NodeProtocolPlugin } from \"./features/node-protocol.ts\";","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"1d8251fe-9e46-4ee2-a53b-9dbbf4234f49","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884856,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/run.ts","module_request":"node:module","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"051d4851-3838-4fc5-bcab-a86aa4b88dcc","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884856,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/plugins.d.ts","content":"export { ExternalPlugin } from \"./features/external.ts\";\nexport { ShebangPlugin } from \"./features/shebang.ts\";\nexport { ReportPlugin } from \"./features/report.ts\";\nexport { NodeProtocolPlugin } from \"./features/node-protocol.ts\";","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"47fec544-4c72-4e76-89e0-1229d5959e31","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884856,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"051d4851-3838-4fc5-bcab-a86aa4b88dcc","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884856,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"5d21af08-4faa-49cf-b2fb-f13775f4d7ea","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884857,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"06bbc4d6-c92a-4684-b4c0-131037b84d15","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884857,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"node:process","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"b0f35130-d31e-4666-a142-d9f703792090","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884857,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"139de1e8-ae88-4aed-b7ae-a199a112bacd","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884857,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"node:url","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"b822e521-a56f-4ddb-bc95-e42535789b7f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884857,"action":"HookResolveIdCallEnd","resolved_id":"ansis","is_external":true,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"23a9e504-cbc5-4082-86b3-4571acf6c6b2","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884857,"action":"HookResolveIdCallEnd","resolved_id":"rolldown","is_external":true,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"06f3b1bd-c299-48bc-857b-198288fb64ac","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884857,"action":"HookResolveIdCallEnd","resolved_id":"tinyexec","is_external":true,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"6893a02d-8747-4b92-bf60-b8cf847856ad","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884858,"action":"HookResolveIdCallEnd","resolved_id":"tree-kill","is_external":true,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"b12f6423-b797-4bf3-9829-921aecddb9d4","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884858,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"91cdc3a7-0b95-47ae-a6d2-cb47a4be7e07","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884858,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./config/index.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"a5bb898d-fe32-4187-b222-2427b58e40d8","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884858,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"bd66e289-0ca4-48d1-ad95-33692d2d9b0b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884858,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./features/attw.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"ec00fea5-2458-4d54-a483-c3673400eb75","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884858,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"ada2d9b6-e08a-40c3-9741-7110bc8db721","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884858,"action":"HookResolveIdCallEnd","resolved_id":"/Users/kevin/Developer/open-source/tsdown/src/run.d.ts","is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"${hook_resolve_id_trigger}","call_id":"fb8e4244-b444-45dc-8100-7885a50c59b8","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884858,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"36f452aa-9f28-4ea7-9742-7c55f1b31341","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884859,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/plugins.d.ts","content":"export { ExternalPlugin } from \"./features/external.ts\";\nexport { ShebangPlugin } from \"./features/shebang.ts\";\nexport { ReportPlugin } from \"./features/report.ts\";\nexport { NodeProtocolPlugin } from \"./features/node-protocol.ts\";","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"47fec544-4c72-4e76-89e0-1229d5959e31","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884859,"action":"HookResolveIdCallStart","importer":null,"module_request":"/Users/kevin/Developer/open-source/tsdown/src/index.d.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"${hook_resolve_id_trigger}","call_id":"2c8a894f-b9c7-4546-ab93-47d8ec58053b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884859,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/run.ts","module_request":"./cli.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"6e801001-cc3a-4ad8-a4cb-e2c8a14b065a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884859,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./features/cjs.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"1920f2f3-1a07-45ae-8794-8ff372527493","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884859,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"${hook_resolve_id_trigger}","call_id":"2c8a894f-b9c7-4546-ab93-47d8ec58053b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884859,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/plugins.d.ts","module_request":"./features/external.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"e361125a-c809-437b-9fc3-baa2e54e9d35","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884859,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"d23426d2-f911-4177-9f0c-6a62ba3db824","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884860,"action":"HookResolveIdCallStart","importer":null,"module_request":"/Users/kevin/Developer/open-source/tsdown/src/index.d.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"${hook_resolve_id_trigger}","call_id":"2881b401-1bd4-45fc-970c-835e9938388b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884860,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./features/clean.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"b002d815-7d24-45ef-b3b6-1255f14b0691","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884860,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/run.d.ts","plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"954e0e3a-26ba-4966-b6c3-52ad7f2fd75f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884860,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"51126383-a527-4112-9d37-e6f2f83c5314","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884860,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/run.d.ts","content":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"954e0e3a-26ba-4966-b6c3-52ad7f2fd75f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884860,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./features/copy.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"65048a2c-ba1d-40c9-a827-682638f3ba83","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884860,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/run.d.ts","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"3a003e2d-45e1-4317-b69d-d4df3971ad09","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884861,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"ac496986-35cd-4344-9f4c-9214e7e4774d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884861,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"6e801001-cc3a-4ad8-a4cb-e2c8a14b065a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884861,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./features/exports.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"8a7d43cd-43ac-4a91-bedd-f00e6500a88b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884861,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"e361125a-c809-437b-9fc3-baa2e54e9d35","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884861,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"09dddd33-229d-4a5f-a2ab-450d619e6e87","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884861,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/plugins.d.ts","module_request":"./features/external.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"f8dde3fb-d611-4177-a5d3-fa6d9402d5ce","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884861,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./features/hooks.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"c712e907-5bd1-4c02-9eec-fa081b3dfc72","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884862,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/plugins.d.ts","module_request":"./features/shebang.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"3e7639dd-f4fc-4f26-8624-01f33908593b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884862,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"9cfdce61-310d-4b41-96d6-e79fb1195a18","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884862,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"3e7639dd-f4fc-4f26-8624-01f33908593b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884862,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./features/publint.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"2d0919b7-3e40-4435-bad6-ca599b68cd29","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884862,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/plugins.d.ts","module_request":"./features/shebang.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"236cc65a-3817-4634-8ea1-0e331bbd718d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884862,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"d48e3cf0-41f1-4c47-b9c5-1fc39a944995","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884862,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/plugins.d.ts","module_request":"./features/report.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"62f4c062-af23-4730-a65d-8dcef0d7e9bf","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884863,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"62f4c062-af23-4730-a65d-8dcef0d7e9bf","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884863,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./features/rolldown.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"7bfa8a3b-ae40-4d63-a6c4-1abab3bbd10d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884863,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/plugins.d.ts","module_request":"./features/report.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"1fb936da-1f36-4a5d-a9bf-8595e50b70a0","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884863,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"9e9f8922-fb4e-4df0-bdbe-281e61833367","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884863,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/plugins.d.ts","module_request":"./features/node-protocol.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"e12f88da-e281-4e4c-8d24-a25a9c23bc09","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884863,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./features/shortcuts.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"c38a8735-23e6-4e18-aba7-57a0958e6f46","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884863,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"e12f88da-e281-4e4c-8d24-a25a9c23bc09","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884864,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"3617b900-e196-4172-950b-fcefb9d01edd","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884864,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/plugins.d.ts","module_request":"./features/node-protocol.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"1d411440-c0a2-4302-8043-4d8856774276","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884864,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./features/watch.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"6952909d-2114-4af1-a66c-7d146855d81d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884864,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"8f2f579b-6b14-4038-9ee0-e5791699974c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884864,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./utils/logger.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"2040ba2a-6337-4963-9a53-a4a5772e56df","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884864,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"76d76ad6-8ffd-4a44-bfd0-5a4f1eff4960","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884865,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./config.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"0c6fe919-0943-4df4-a7cc-4d8e080ac9fa","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884865,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"dbd0816c-7495-4441-b7e1-9db80040597a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884865,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./config/types.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"f8bc347d-a611-4fe6-bc20-87094a5f0a18","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884865,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"5d21af08-4faa-49cf-b2fb-f13775f4d7ea","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884865,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"774e1a3c-2e4f-4ae9-945c-f17bef8d0dcb","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884865,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"774e1a3c-2e4f-4ae9-945c-f17bef8d0dcb","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884865,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"b0f35130-d31e-4666-a142-d9f703792090","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884865,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"node:process","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"1843855f-10fa-443a-bb2b-dfe212000902","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884866,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"1843855f-10fa-443a-bb2b-dfe212000902","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884866,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"b822e521-a56f-4ddb-bc95-e42535789b7f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884866,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"node:url","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"a6dc842d-3bcd-4670-8c29-2527266bfb2f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884866,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"a6dc842d-3bcd-4670-8c29-2527266bfb2f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884866,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"a5bb898d-fe32-4187-b222-2427b58e40d8","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884866,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./config/index.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"48f74aba-8d70-44ae-9636-d1cc9f93c680","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884866,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"48f74aba-8d70-44ae-9636-d1cc9f93c680","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884867,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"ec00fea5-2458-4d54-a483-c3673400eb75","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884867,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./features/attw.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"db9ac51b-5777-4b51-b84d-89f6733fb56a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884867,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"db9ac51b-5777-4b51-b84d-89f6733fb56a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884869,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"f8bc347d-a611-4fe6-bc20-87094a5f0a18","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884869,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/run.d.ts","content":"export {};\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"3a003e2d-45e1-4317-b69d-d4df3971ad09","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884869,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"${hook_resolve_id_trigger}","call_id":"2881b401-1bd4-45fc-970c-835e9938388b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884870,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./config/types.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"68d8e76e-2950-43ed-b5ca-fc0b26142089","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884870,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/run.d.ts","content":"export {};\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"4053b24e-7412-4b7b-8e72-fd8acbc6dba3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884870,"action":"HookResolveIdCallStart","importer":null,"module_request":"/Users/kevin/Developer/open-source/tsdown/src/index.d.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"${hook_resolve_id_trigger}","call_id":"f71e32bd-80a2-402a-ae9f-0f5b5ed78581","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884871,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"1920f2f3-1a07-45ae-8794-8ff372527493","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884871,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/run.d.ts","content":"export {};\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"4053b24e-7412-4b7b-8e72-fd8acbc6dba3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884872,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"${hook_resolve_id_trigger}","call_id":"f71e32bd-80a2-402a-ae9f-0f5b5ed78581","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884872,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/run.d.ts","content":"export {};\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"4c888312-dd16-4418-a04d-0fc24554ebe3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884872,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./features/cjs.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"7007df1e-9832-44aa-ad87-c4b3a2795415","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884872,"action":"HookResolveIdCallStart","importer":null,"module_request":"/Users/kevin/Developer/open-source/tsdown/src/index.d.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"${hook_resolve_id_trigger}","call_id":"437968ef-8e88-47e2-ab7e-9a80f43db57b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884873,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"7007df1e-9832-44aa-ad87-c4b3a2795415","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884873,"action":"HookResolveIdCallEnd","resolved_id":"/Users/kevin/Developer/open-source/tsdown/src/index.d.ts","is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"${hook_resolve_id_trigger}","call_id":"437968ef-8e88-47e2-ab7e-9a80f43db57b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884873,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"b002d815-7d24-45ef-b3b6-1255f14b0691","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884874,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/cli.ts","plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"9db3b83b-2345-4fec-a7e4-6adf7539088b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884874,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/run.d.ts","content":"export {};","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"4c888312-dd16-4418-a04d-0fc24554ebe3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884874,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/cli.ts","content":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"9db3b83b-2345-4fec-a7e4-6adf7539088b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884875,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/external.ts","plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"275e59cc-ad01-4be2-8f6c-1cdcbac65077","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884875,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/shebang.ts","plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"3442d3c7-fc72-4488-9a1b-17d3bf685fdd","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884875,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/external.ts","content":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"275e59cc-ad01-4be2-8f6c-1cdcbac65077","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884876,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/shebang.ts","content":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"3442d3c7-fc72-4488-9a1b-17d3bf685fdd","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884876,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/external.ts","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"1aa88a07-5d38-47f6-84d5-3b0985f5f357","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884876,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/shebang.ts","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"81d8920f-60e0-43ac-a132-9fd5d9508e3e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884877,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/external.ts","content":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"1aa88a07-5d38-47f6-84d5-3b0985f5f357","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884877,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/shebang.ts","content":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"81d8920f-60e0-43ac-a132-9fd5d9508e3e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884877,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/external.ts","plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"d7d88fa7-90bc-40e9-9836-c4a265407857","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884877,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/shebang.ts","plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"a60c7c98-17ae-49ea-947d-1d33278925e6","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884877,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/external.ts","content":null,"plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"d7d88fa7-90bc-40e9-9836-c4a265407857","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884878,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/shebang.ts","content":null,"plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"a60c7c98-17ae-49ea-947d-1d33278925e6","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884878,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"e45167e5-b26c-464f-9160-c34ca835f2a9","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884878,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/external.ts","content":"import { isBuiltin } from 'node:module'\nimport path from 'node:path'\nimport { blue, underline } from 'ansis'\nimport Debug from 'debug'\nimport { RE_DTS, RE_NODE_MODULES } from 'rolldown-plugin-dts/filename'\nimport { shimFile } from '../index.ts'\nimport { matchPattern } from '../utils/general.ts'\nimport type { ResolvedConfig } from '../config/index.ts'\nimport type { PackageJson } from 'pkg-types'\nimport type { Plugin, PluginContext, ResolveIdExtraOptions } from 'rolldown'\n\nconst debug = Debug('tsdown:external')\n\nexport function ExternalPlugin({\n  pkg,\n  noExternal,\n  inlineOnly,\n  skipNodeModulesBundle,\n}: ResolvedConfig): Plugin {\n  const deps = pkg && Array.from(getProductionDeps(pkg))\n\n  return {\n    name: 'tsdown:external',\n    async resolveId(id, importer, extraOptions) {\n      if (extraOptions.isEntry || !importer) return\n\n      const shouldExternal = await externalStrategy(\n        this,\n        id,\n        importer,\n        extraOptions,\n      )\n      const nodeBuiltinModule = isBuiltin(id)\n\n      debug('shouldExternal: %s = %s', id, shouldExternal)\n\n      if (shouldExternal === true || shouldExternal === 'absolute') {\n        return {\n          id,\n          external: shouldExternal,\n          moduleSideEffects: nodeBuiltinModule ? false : undefined,\n        }\n      }\n\n      if (\n        inlineOnly &&\n        !RE_DTS.test(importer) && // skip dts files\n        !nodeBuiltinModule && // skip node built-in modules\n        id[0] !== '.' && // skip relative imports\n        !path.isAbsolute(id) // skip absolute imports\n      ) {\n        const shouldInline =\n          shouldExternal === 'no-external' || // force inline\n          matchPattern(id, inlineOnly)\n        debug('shouldInline: %s = %s', id, shouldInline)\n        if (shouldInline) return\n\n        const resolved = await this.resolve(id, importer, extraOptions)\n        if (!resolved) return\n\n        if (RE_NODE_MODULES.test(resolved.id)) {\n          throw new Error(\n            `${underline(id)} is located in node_modules but is not included in ${blue`inlineOnly`} option.\nTo fix this, either add it to ${blue`inlineOnly`}, declare it as a production or peer dependency in your package.json, or externalize it manually.\nImported by ${underline(importer)}`,\n          )\n        }\n      }\n    },\n  }\n\n  /**\n   * - `true`: always external\n   * - `false`: skip, let other plugins handle it\n   * - `'absolute'`: external as absolute path\n   * - `'no-external'`: skip, but mark as non-external for inlineOnly check\n   */\n  async function externalStrategy(\n    context: PluginContext,\n    id: string,\n    importer: string | undefined,\n    extraOptions: ResolveIdExtraOptions,\n  ): Promise<boolean | 'absolute' | 'no-external'> {\n    if (id === shimFile) return false\n\n    if (noExternal?.(id, importer)) {\n      return 'no-external'\n    }\n\n    if (skipNodeModulesBundle) {\n      const resolved = await context.resolve(id, importer, extraOptions)\n      if (!resolved) return false\n      return resolved.external || RE_NODE_MODULES.test(resolved.id)\n    }\n\n    if (deps) {\n      return deps.some((dep) => id === dep || id.startsWith(`${dep}/`))\n    }\n\n    return false\n  }\n}\n\n/*\n * Production deps should be excluded from the bundle\n */\nexport function getProductionDeps(pkg: PackageJson): Set<string> {\n  return new Set([\n    ...Object.keys(pkg.dependencies || {}),\n    ...Object.keys(pkg.peerDependencies || {}),\n  ])\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"f6bae210-3d77-458b-b6e8-581df4b1ae23","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884879,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/shebang.ts","content":"import { chmod } from 'node:fs/promises'\nimport path from 'node:path'\nimport { underline } from 'ansis'\nimport { fsExists } from '../utils/fs.ts'\nimport { prettyFormat, prettyName, type Logger } from '../utils/logger.ts'\nimport type { Plugin } from 'rolldown'\n\nconst RE_SHEBANG = /^#!.*/\n\nexport function ShebangPlugin(\n  logger: Logger,\n  cwd: string,\n  name?: string,\n  isMultiFormat?: boolean,\n): Plugin {\n  return {\n    name: 'tsdown:shebang',\n    async writeBundle(options, bundle) {\n      for (const chunk of Object.values(bundle)) {\n        if (chunk.type !== 'chunk' || !chunk.isEntry) continue\n        if (!RE_SHEBANG.test(chunk.code)) continue\n\n        const filepath = path.resolve(\n          cwd,\n          options.file || path.join(options.dir!, chunk.fileName),\n        )\n        if (await fsExists(filepath)) {\n          logger.info(\n            prettyName(name),\n            isMultiFormat && prettyFormat(options.format),\n            `Granting execute permission to ${underline(path.relative(cwd, filepath))}`,\n          )\n          await chmod(filepath, 0o755)\n        }\n      }\n    },\n  }\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"53551644-ba2c-4380-95cb-5ab3d60a80b5","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884879,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/external.ts","content":"import { isBuiltin } from 'node:module'\nimport path from 'node:path'\nimport { blue, underline } from 'ansis'\nimport Debug from 'debug'\nimport { RE_DTS, RE_NODE_MODULES } from 'rolldown-plugin-dts/filename'\nimport { shimFile } from '../index.ts'\nimport { matchPattern } from '../utils/general.ts'\nimport type { ResolvedConfig } from '../config/index.ts'\nimport type { PackageJson } from 'pkg-types'\nimport type { Plugin, PluginContext, ResolveIdExtraOptions } from 'rolldown'\n\nconst debug = Debug('tsdown:external')\n\nexport function ExternalPlugin({\n  pkg,\n  noExternal,\n  inlineOnly,\n  skipNodeModulesBundle,\n}: ResolvedConfig): Plugin {\n  const deps = pkg && Array.from(getProductionDeps(pkg))\n\n  return {\n    name: 'tsdown:external',\n    async resolveId(id, importer, extraOptions) {\n      if (extraOptions.isEntry || !importer) return\n\n      const shouldExternal = await externalStrategy(\n        this,\n        id,\n        importer,\n        extraOptions,\n      )\n      const nodeBuiltinModule = isBuiltin(id)\n\n      debug('shouldExternal: %s = %s', id, shouldExternal)\n\n      if (shouldExternal === true || shouldExternal === 'absolute') {\n        return {\n          id,\n          external: shouldExternal,\n          moduleSideEffects: nodeBuiltinModule ? false : undefined,\n        }\n      }\n\n      if (\n        inlineOnly &&\n        !RE_DTS.test(importer) && // skip dts files\n        !nodeBuiltinModule && // skip node built-in modules\n        id[0] !== '.' && // skip relative imports\n        !path.isAbsolute(id) // skip absolute imports\n      ) {\n        const shouldInline =\n          shouldExternal === 'no-external' || // force inline\n          matchPattern(id, inlineOnly)\n        debug('shouldInline: %s = %s', id, shouldInline)\n        if (shouldInline) return\n\n        const resolved = await this.resolve(id, importer, extraOptions)\n        if (!resolved) return\n\n        if (RE_NODE_MODULES.test(resolved.id)) {\n          throw new Error(\n            `${underline(id)} is located in node_modules but is not included in ${blue`inlineOnly`} option.\nTo fix this, either add it to ${blue`inlineOnly`}, declare it as a production or peer dependency in your package.json, or externalize it manually.\nImported by ${underline(importer)}`,\n          )\n        }\n      }\n    },\n  }\n\n  /**\n   * - `true`: always external\n   * - `false`: skip, let other plugins handle it\n   * - `'absolute'`: external as absolute path\n   * - `'no-external'`: skip, but mark as non-external for inlineOnly check\n   */\n  async function externalStrategy(\n    context: PluginContext,\n    id: string,\n    importer: string | undefined,\n    extraOptions: ResolveIdExtraOptions,\n  ): Promise<boolean | 'absolute' | 'no-external'> {\n    if (id === shimFile) return false\n\n    if (noExternal?.(id, importer)) {\n      return 'no-external'\n    }\n\n    if (skipNodeModulesBundle) {\n      const resolved = await context.resolve(id, importer, extraOptions)\n      if (!resolved) return false\n      return resolved.external || RE_NODE_MODULES.test(resolved.id)\n    }\n\n    if (deps) {\n      return deps.some((dep) => id === dep || id.startsWith(`${dep}/`))\n    }\n\n    return false\n  }\n}\n\n/*\n * Production deps should be excluded from the bundle\n */\nexport function getProductionDeps(pkg: PackageJson): Set<string> {\n  return new Set([\n    ...Object.keys(pkg.dependencies || {}),\n    ...Object.keys(pkg.peerDependencies || {}),\n  ])\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"f6bae210-3d77-458b-b6e8-581df4b1ae23","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884880,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/shebang.ts","content":"import { chmod } from 'node:fs/promises'\nimport path from 'node:path'\nimport { underline } from 'ansis'\nimport { fsExists } from '../utils/fs.ts'\nimport { prettyFormat, prettyName, type Logger } from '../utils/logger.ts'\nimport type { Plugin } from 'rolldown'\n\nconst RE_SHEBANG = /^#!.*/\n\nexport function ShebangPlugin(\n  logger: Logger,\n  cwd: string,\n  name?: string,\n  isMultiFormat?: boolean,\n): Plugin {\n  return {\n    name: 'tsdown:shebang',\n    async writeBundle(options, bundle) {\n      for (const chunk of Object.values(bundle)) {\n        if (chunk.type !== 'chunk' || !chunk.isEntry) continue\n        if (!RE_SHEBANG.test(chunk.code)) continue\n\n        const filepath = path.resolve(\n          cwd,\n          options.file || path.join(options.dir!, chunk.fileName),\n        )\n        if (await fsExists(filepath)) {\n          logger.info(\n            prettyName(name),\n            isMultiFormat && prettyFormat(options.format),\n            `Granting execute permission to ${underline(path.relative(cwd, filepath))}`,\n          )\n          await chmod(filepath, 0o755)\n        }\n      }\n    },\n  }\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"53551644-ba2c-4380-95cb-5ab3d60a80b5","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884880,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/external.ts","content":"import { isBuiltin } from 'node:module'\nimport path from 'node:path'\nimport { blue, underline } from 'ansis'\nimport Debug from 'debug'\nimport { RE_DTS, RE_NODE_MODULES } from 'rolldown-plugin-dts/filename'\nimport { shimFile } from '../index.ts'\nimport { matchPattern } from '../utils/general.ts'\nimport type { ResolvedConfig } from '../config/index.ts'\nimport type { PackageJson } from 'pkg-types'\nimport type { Plugin, PluginContext, ResolveIdExtraOptions } from 'rolldown'\n\nconst debug = Debug('tsdown:external')\n\nexport function ExternalPlugin({\n  pkg,\n  noExternal,\n  inlineOnly,\n  skipNodeModulesBundle,\n}: ResolvedConfig): Plugin {\n  const deps = pkg && Array.from(getProductionDeps(pkg))\n\n  return {\n    name: 'tsdown:external',\n    async resolveId(id, importer, extraOptions) {\n      if (extraOptions.isEntry || !importer) return\n\n      const shouldExternal = await externalStrategy(\n        this,\n        id,\n        importer,\n        extraOptions,\n      )\n      const nodeBuiltinModule = isBuiltin(id)\n\n      debug('shouldExternal: %s = %s', id, shouldExternal)\n\n      if (shouldExternal === true || shouldExternal === 'absolute') {\n        return {\n          id,\n          external: shouldExternal,\n          moduleSideEffects: nodeBuiltinModule ? false : undefined,\n        }\n      }\n\n      if (\n        inlineOnly &&\n        !RE_DTS.test(importer) && // skip dts files\n        !nodeBuiltinModule && // skip node built-in modules\n        id[0] !== '.' && // skip relative imports\n        !path.isAbsolute(id) // skip absolute imports\n      ) {\n        const shouldInline =\n          shouldExternal === 'no-external' || // force inline\n          matchPattern(id, inlineOnly)\n        debug('shouldInline: %s = %s', id, shouldInline)\n        if (shouldInline) return\n\n        const resolved = await this.resolve(id, importer, extraOptions)\n        if (!resolved) return\n\n        if (RE_NODE_MODULES.test(resolved.id)) {\n          throw new Error(\n            `${underline(id)} is located in node_modules but is not included in ${blue`inlineOnly`} option.\nTo fix this, either add it to ${blue`inlineOnly`}, declare it as a production or peer dependency in your package.json, or externalize it manually.\nImported by ${underline(importer)}`,\n          )\n        }\n      }\n    },\n  }\n\n  /**\n   * - `true`: always external\n   * - `false`: skip, let other plugins handle it\n   * - `'absolute'`: external as absolute path\n   * - `'no-external'`: skip, but mark as non-external for inlineOnly check\n   */\n  async function externalStrategy(\n    context: PluginContext,\n    id: string,\n    importer: string | undefined,\n    extraOptions: ResolveIdExtraOptions,\n  ): Promise<boolean | 'absolute' | 'no-external'> {\n    if (id === shimFile) return false\n\n    if (noExternal?.(id, importer)) {\n      return 'no-external'\n    }\n\n    if (skipNodeModulesBundle) {\n      const resolved = await context.resolve(id, importer, extraOptions)\n      if (!resolved) return false\n      return resolved.external || RE_NODE_MODULES.test(resolved.id)\n    }\n\n    if (deps) {\n      return deps.some((dep) => id === dep || id.startsWith(`${dep}/`))\n    }\n\n    return false\n  }\n}\n\n/*\n * Production deps should be excluded from the bundle\n */\nexport function getProductionDeps(pkg: PackageJson): Set<string> {\n  return new Set([\n    ...Object.keys(pkg.dependencies || {}),\n    ...Object.keys(pkg.peerDependencies || {}),\n  ])\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"2a1c3f99-3c1b-46a7-9120-db74bfee6825","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884880,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/shebang.ts","content":"import { chmod } from 'node:fs/promises'\nimport path from 'node:path'\nimport { underline } from 'ansis'\nimport { fsExists } from '../utils/fs.ts'\nimport { prettyFormat, prettyName, type Logger } from '../utils/logger.ts'\nimport type { Plugin } from 'rolldown'\n\nconst RE_SHEBANG = /^#!.*/\n\nexport function ShebangPlugin(\n  logger: Logger,\n  cwd: string,\n  name?: string,\n  isMultiFormat?: boolean,\n): Plugin {\n  return {\n    name: 'tsdown:shebang',\n    async writeBundle(options, bundle) {\n      for (const chunk of Object.values(bundle)) {\n        if (chunk.type !== 'chunk' || !chunk.isEntry) continue\n        if (!RE_SHEBANG.test(chunk.code)) continue\n\n        const filepath = path.resolve(\n          cwd,\n          options.file || path.join(options.dir!, chunk.fileName),\n        )\n        if (await fsExists(filepath)) {\n          logger.info(\n            prettyName(name),\n            isMultiFormat && prettyFormat(options.format),\n            `Granting execute permission to ${underline(path.relative(cwd, filepath))}`,\n          )\n          await chmod(filepath, 0o755)\n        }\n      }\n    },\n  }\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"a5d68e8a-80a8-4c68-895f-20a4fc01755b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884881,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/external.ts","content":"import { isBuiltin } from 'node:module'\nimport path from 'node:path'\nimport { blue, underline } from 'ansis'\nimport Debug from 'debug'\nimport { RE_DTS, RE_NODE_MODULES } from 'rolldown-plugin-dts/filename'\nimport { shimFile } from '../index.ts'\nimport { matchPattern } from '../utils/general.ts'\nimport type { ResolvedConfig } from '../config/index.ts'\nimport type { PackageJson } from 'pkg-types'\nimport type { Plugin, PluginContext, ResolveIdExtraOptions } from 'rolldown'\n\nconst debug = Debug('tsdown:external')\n\nexport function ExternalPlugin({\n  pkg,\n  noExternal,\n  inlineOnly,\n  skipNodeModulesBundle,\n}: ResolvedConfig): Plugin {\n  const deps = pkg && Array.from(getProductionDeps(pkg))\n\n  return {\n    name: 'tsdown:external',\n    async resolveId(id, importer, extraOptions) {\n      if (extraOptions.isEntry || !importer) return\n\n      const shouldExternal = await externalStrategy(\n        this,\n        id,\n        importer,\n        extraOptions,\n      )\n      const nodeBuiltinModule = isBuiltin(id)\n\n      debug('shouldExternal: %s = %s', id, shouldExternal)\n\n      if (shouldExternal === true || shouldExternal === 'absolute') {\n        return {\n          id,\n          external: shouldExternal,\n          moduleSideEffects: nodeBuiltinModule ? false : undefined,\n        }\n      }\n\n      if (\n        inlineOnly &&\n        !RE_DTS.test(importer) && // skip dts files\n        !nodeBuiltinModule && // skip node built-in modules\n        id[0] !== '.' && // skip relative imports\n        !path.isAbsolute(id) // skip absolute imports\n      ) {\n        const shouldInline =\n          shouldExternal === 'no-external' || // force inline\n          matchPattern(id, inlineOnly)\n        debug('shouldInline: %s = %s', id, shouldInline)\n        if (shouldInline) return\n\n        const resolved = await this.resolve(id, importer, extraOptions)\n        if (!resolved) return\n\n        if (RE_NODE_MODULES.test(resolved.id)) {\n          throw new Error(\n            `${underline(id)} is located in node_modules but is not included in ${blue`inlineOnly`} option.\nTo fix this, either add it to ${blue`inlineOnly`}, declare it as a production or peer dependency in your package.json, or externalize it manually.\nImported by ${underline(importer)}`,\n          )\n        }\n      }\n    },\n  }\n\n  /**\n   * - `true`: always external\n   * - `false`: skip, let other plugins handle it\n   * - `'absolute'`: external as absolute path\n   * - `'no-external'`: skip, but mark as non-external for inlineOnly check\n   */\n  async function externalStrategy(\n    context: PluginContext,\n    id: string,\n    importer: string | undefined,\n    extraOptions: ResolveIdExtraOptions,\n  ): Promise<boolean | 'absolute' | 'no-external'> {\n    if (id === shimFile) return false\n\n    if (noExternal?.(id, importer)) {\n      return 'no-external'\n    }\n\n    if (skipNodeModulesBundle) {\n      const resolved = await context.resolve(id, importer, extraOptions)\n      if (!resolved) return false\n      return resolved.external || RE_NODE_MODULES.test(resolved.id)\n    }\n\n    if (deps) {\n      return deps.some((dep) => id === dep || id.startsWith(`${dep}/`))\n    }\n\n    return false\n  }\n}\n\n/*\n * Production deps should be excluded from the bundle\n */\nexport function getProductionDeps(pkg: PackageJson): Set<string> {\n  return new Set([\n    ...Object.keys(pkg.dependencies || {}),\n    ...Object.keys(pkg.peerDependencies || {}),\n  ])\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"2a1c3f99-3c1b-46a7-9120-db74bfee6825","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884881,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/shebang.ts","content":"import { chmod } from 'node:fs/promises'\nimport path from 'node:path'\nimport { underline } from 'ansis'\nimport { fsExists } from '../utils/fs.ts'\nimport { prettyFormat, prettyName, type Logger } from '../utils/logger.ts'\nimport type { Plugin } from 'rolldown'\n\nconst RE_SHEBANG = /^#!.*/\n\nexport function ShebangPlugin(\n  logger: Logger,\n  cwd: string,\n  name?: string,\n  isMultiFormat?: boolean,\n): Plugin {\n  return {\n    name: 'tsdown:shebang',\n    async writeBundle(options, bundle) {\n      for (const chunk of Object.values(bundle)) {\n        if (chunk.type !== 'chunk' || !chunk.isEntry) continue\n        if (!RE_SHEBANG.test(chunk.code)) continue\n\n        const filepath = path.resolve(\n          cwd,\n          options.file || path.join(options.dir!, chunk.fileName),\n        )\n        if (await fsExists(filepath)) {\n          logger.info(\n            prettyName(name),\n            isMultiFormat && prettyFormat(options.format),\n            `Granting execute permission to ${underline(path.relative(cwd, filepath))}`,\n          )\n          await chmod(filepath, 0o755)\n        }\n      }\n    },\n  }\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"a5d68e8a-80a8-4c68-895f-20a4fc01755b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884881,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/external.ts","content":"import { isBuiltin } from 'node:module'\nimport path from 'node:path'\nimport { blue, underline } from 'ansis'\nimport Debug from 'debug'\nimport { RE_DTS, RE_NODE_MODULES } from 'rolldown-plugin-dts/filename'\nimport { shimFile } from '../index.ts'\nimport { matchPattern } from '../utils/general.ts'\nimport type { ResolvedConfig } from '../config/index.ts'\nimport type { PackageJson } from 'pkg-types'\nimport type { Plugin, PluginContext, ResolveIdExtraOptions } from 'rolldown'\n\nconst debug = Debug('tsdown:external')\n\nexport function ExternalPlugin({\n  pkg,\n  noExternal,\n  inlineOnly,\n  skipNodeModulesBundle,\n}: ResolvedConfig): Plugin {\n  const deps = pkg && Array.from(getProductionDeps(pkg))\n\n  return {\n    name: 'tsdown:external',\n    async resolveId(id, importer, extraOptions) {\n      if (extraOptions.isEntry || !importer) return\n\n      const shouldExternal = await externalStrategy(\n        this,\n        id,\n        importer,\n        extraOptions,\n      )\n      const nodeBuiltinModule = isBuiltin(id)\n\n      debug('shouldExternal: %s = %s', id, shouldExternal)\n\n      if (shouldExternal === true || shouldExternal === 'absolute') {\n        return {\n          id,\n          external: shouldExternal,\n          moduleSideEffects: nodeBuiltinModule ? false : undefined,\n        }\n      }\n\n      if (\n        inlineOnly &&\n        !RE_DTS.test(importer) && // skip dts files\n        !nodeBuiltinModule && // skip node built-in modules\n        id[0] !== '.' && // skip relative imports\n        !path.isAbsolute(id) // skip absolute imports\n      ) {\n        const shouldInline =\n          shouldExternal === 'no-external' || // force inline\n          matchPattern(id, inlineOnly)\n        debug('shouldInline: %s = %s', id, shouldInline)\n        if (shouldInline) return\n\n        const resolved = await this.resolve(id, importer, extraOptions)\n        if (!resolved) return\n\n        if (RE_NODE_MODULES.test(resolved.id)) {\n          throw new Error(\n            `${underline(id)} is located in node_modules but is not included in ${blue`inlineOnly`} option.\nTo fix this, either add it to ${blue`inlineOnly`}, declare it as a production or peer dependency in your package.json, or externalize it manually.\nImported by ${underline(importer)}`,\n          )\n        }\n      }\n    },\n  }\n\n  /**\n   * - `true`: always external\n   * - `false`: skip, let other plugins handle it\n   * - `'absolute'`: external as absolute path\n   * - `'no-external'`: skip, but mark as non-external for inlineOnly check\n   */\n  async function externalStrategy(\n    context: PluginContext,\n    id: string,\n    importer: string | undefined,\n    extraOptions: ResolveIdExtraOptions,\n  ): Promise<boolean | 'absolute' | 'no-external'> {\n    if (id === shimFile) return false\n\n    if (noExternal?.(id, importer)) {\n      return 'no-external'\n    }\n\n    if (skipNodeModulesBundle) {\n      const resolved = await context.resolve(id, importer, extraOptions)\n      if (!resolved) return false\n      return resolved.external || RE_NODE_MODULES.test(resolved.id)\n    }\n\n    if (deps) {\n      return deps.some((dep) => id === dep || id.startsWith(`${dep}/`))\n    }\n\n    return false\n  }\n}\n\n/*\n * Production deps should be excluded from the bundle\n */\nexport function getProductionDeps(pkg: PackageJson): Set<string> {\n  return new Set([\n    ...Object.keys(pkg.dependencies || {}),\n    ...Object.keys(pkg.peerDependencies || {}),\n  ])\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"f60a6330-14fe-4f5b-ae4c-98e776518bed","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884882,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/shebang.ts","content":"import { chmod } from 'node:fs/promises'\nimport path from 'node:path'\nimport { underline } from 'ansis'\nimport { fsExists } from '../utils/fs.ts'\nimport { prettyFormat, prettyName, type Logger } from '../utils/logger.ts'\nimport type { Plugin } from 'rolldown'\n\nconst RE_SHEBANG = /^#!.*/\n\nexport function ShebangPlugin(\n  logger: Logger,\n  cwd: string,\n  name?: string,\n  isMultiFormat?: boolean,\n): Plugin {\n  return {\n    name: 'tsdown:shebang',\n    async writeBundle(options, bundle) {\n      for (const chunk of Object.values(bundle)) {\n        if (chunk.type !== 'chunk' || !chunk.isEntry) continue\n        if (!RE_SHEBANG.test(chunk.code)) continue\n\n        const filepath = path.resolve(\n          cwd,\n          options.file || path.join(options.dir!, chunk.fileName),\n        )\n        if (await fsExists(filepath)) {\n          logger.info(\n            prettyName(name),\n            isMultiFormat && prettyFormat(options.format),\n            `Granting execute permission to ${underline(path.relative(cwd, filepath))}`,\n          )\n          await chmod(filepath, 0o755)\n        }\n      }\n    },\n  }\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"195a6dba-edbb-4566-83e3-a3d6bc670971","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884882,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/index.d.ts","plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"dcd03eb5-f145-4e70-b2ea-2319fc8eabaf","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884882,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"6ba151e6-82c9-4027-a8b1-2f1e5ba1d138","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884882,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/index.d.ts","content":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"dcd03eb5-f145-4e70-b2ea-2319fc8eabaf","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884882,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","content":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"6ba151e6-82c9-4027-a8b1-2f1e5ba1d138","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884883,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/index.d.ts","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"dc46f883-14c3-47b2-b31a-ef3a5e9dbdf5","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884883,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/external.ts","content":"import { isBuiltin } from 'node:module'\nimport path from 'node:path'\nimport { blue, underline } from 'ansis'\nimport Debug from 'debug'\nimport { RE_DTS, RE_NODE_MODULES } from 'rolldown-plugin-dts/filename'\nimport { shimFile } from '../index.ts'\nimport { matchPattern } from '../utils/general.ts'\nimport type { ResolvedConfig } from '../config/index.ts'\nimport type { PackageJson } from 'pkg-types'\nimport type { Plugin, PluginContext, ResolveIdExtraOptions } from 'rolldown'\n\nconst debug = Debug('tsdown:external')\n\nexport function ExternalPlugin({\n  pkg,\n  noExternal,\n  inlineOnly,\n  skipNodeModulesBundle,\n}: ResolvedConfig): Plugin {\n  const deps = pkg && Array.from(getProductionDeps(pkg))\n\n  return {\n    name: 'tsdown:external',\n    async resolveId(id, importer, extraOptions) {\n      if (extraOptions.isEntry || !importer) return\n\n      const shouldExternal = await externalStrategy(\n        this,\n        id,\n        importer,\n        extraOptions,\n      )\n      const nodeBuiltinModule = isBuiltin(id)\n\n      debug('shouldExternal: %s = %s', id, shouldExternal)\n\n      if (shouldExternal === true || shouldExternal === 'absolute') {\n        return {\n          id,\n          external: shouldExternal,\n          moduleSideEffects: nodeBuiltinModule ? false : undefined,\n        }\n      }\n\n      if (\n        inlineOnly &&\n        !RE_DTS.test(importer) && // skip dts files\n        !nodeBuiltinModule && // skip node built-in modules\n        id[0] !== '.' && // skip relative imports\n        !path.isAbsolute(id) // skip absolute imports\n      ) {\n        const shouldInline =\n          shouldExternal === 'no-external' || // force inline\n          matchPattern(id, inlineOnly)\n        debug('shouldInline: %s = %s', id, shouldInline)\n        if (shouldInline) return\n\n        const resolved = await this.resolve(id, importer, extraOptions)\n        if (!resolved) return\n\n        if (RE_NODE_MODULES.test(resolved.id)) {\n          throw new Error(\n            `${underline(id)} is located in node_modules but is not included in ${blue`inlineOnly`} option.\nTo fix this, either add it to ${blue`inlineOnly`}, declare it as a production or peer dependency in your package.json, or externalize it manually.\nImported by ${underline(importer)}`,\n          )\n        }\n      }\n    },\n  }\n\n  /**\n   * - `true`: always external\n   * - `false`: skip, let other plugins handle it\n   * - `'absolute'`: external as absolute path\n   * - `'no-external'`: skip, but mark as non-external for inlineOnly check\n   */\n  async function externalStrategy(\n    context: PluginContext,\n    id: string,\n    importer: string | undefined,\n    extraOptions: ResolveIdExtraOptions,\n  ): Promise<boolean | 'absolute' | 'no-external'> {\n    if (id === shimFile) return false\n\n    if (noExternal?.(id, importer)) {\n      return 'no-external'\n    }\n\n    if (skipNodeModulesBundle) {\n      const resolved = await context.resolve(id, importer, extraOptions)\n      if (!resolved) return false\n      return resolved.external || RE_NODE_MODULES.test(resolved.id)\n    }\n\n    if (deps) {\n      return deps.some((dep) => id === dep || id.startsWith(`${dep}/`))\n    }\n\n    return false\n  }\n}\n\n/*\n * Production deps should be excluded from the bundle\n */\nexport function getProductionDeps(pkg: PackageJson): Set<string> {\n  return new Set([\n    ...Object.keys(pkg.dependencies || {}),\n    ...Object.keys(pkg.peerDependencies || {}),\n  ])\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"f60a6330-14fe-4f5b-ae4c-98e776518bed","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884883,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/index.d.ts","content":"import { type InlineConfig, type ResolvedConfig } from \"./config/index.ts\";\nimport { globalLogger, type Logger } from \"./utils/logger.ts\";\n/**\n* Build with tsdown.\n*/\nexport declare function build(userOptions?: InlineConfig): Promise<void>;\n/** @internal */\nexport declare const shimFile: string;\n/**\n* Build a single configuration, without watch and shortcuts features.\n*\n* Internal API, not for public use\n*\n* @private\n* @param config Resolved options\n*/\nexport declare function buildSingle(config: ResolvedConfig, clean: () => Promise<void>): Promise<(() => Promise<void>) | undefined>;\nexport { defineConfig } from \"./config.ts\";\nexport * from \"./config/types.ts\";\nexport { globalLogger, type Logger };\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"dc46f883-14c3-47b2-b31a-ef3a5e9dbdf5","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884883,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/node-protocol.ts","plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"b773b679-100c-4a30-a928-79406c891284","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884883,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/node-protocol.ts","content":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"b773b679-100c-4a30-a928-79406c891284","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884883,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/node-protocol.ts","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"c4a35514-6c49-4688-a0b9-1568a7e87ab8","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884884,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/node-protocol.ts","content":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"c4a35514-6c49-4688-a0b9-1568a7e87ab8","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884884,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/node-protocol.ts","plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"4acfe7ff-4048-4426-b334-0f1d3e8fb812","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884884,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/node-protocol.ts","content":null,"plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"4acfe7ff-4048-4426-b334-0f1d3e8fb812","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884884,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/index.d.ts","content":"import { type InlineConfig, type ResolvedConfig } from \"./config/index.ts\";\nimport { globalLogger, type Logger } from \"./utils/logger.ts\";\n/**\n* Build with tsdown.\n*/\nexport declare function build(userOptions?: InlineConfig): Promise<void>;\n/** @internal */\nexport declare const shimFile: string;\n/**\n* Build a single configuration, without watch and shortcuts features.\n*\n* Internal API, not for public use\n*\n* @private\n* @param config Resolved options\n*/\nexport declare function buildSingle(config: ResolvedConfig, clean: () => Promise<void>): Promise<(() => Promise<void>) | undefined>;\nexport { defineConfig } from \"./config.ts\";\nexport * from \"./config/types.ts\";\nexport { globalLogger, type Logger };\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"fee94d4b-c914-4b61-91b8-b6deb6199927","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884884,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/index.d.ts","content":"import { type InlineConfig, type ResolvedConfig } from \"./config/index.ts\";\nimport { globalLogger, type Logger } from \"./utils/logger.ts\";\n/**\n* Build with tsdown.\n*/\nexport declare function build(userOptions?: InlineConfig): Promise<void>;\n/** @internal */\nexport declare const shimFile: string;\n/**\n* Build a single configuration, without watch and shortcuts features.\n*\n* Internal API, not for public use\n*\n* @private\n* @param config Resolved options\n*/\nexport declare function buildSingle(config: ResolvedConfig, clean: () => Promise<void>): Promise<(() => Promise<void>) | undefined>;\nexport { defineConfig } from \"./config.ts\";\nexport * from \"./config/types.ts\";\nexport { globalLogger, type Logger };\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"fee94d4b-c914-4b61-91b8-b6deb6199927","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884884,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/index.d.ts","content":"import { type InlineConfig, type ResolvedConfig } from \"./config/index.ts\";\nimport { globalLogger, type Logger } from \"./utils/logger.ts\";\n/**\n* Build with tsdown.\n*/\nexport declare function build(userOptions?: InlineConfig): Promise<void>;\n/** @internal */\nexport declare const shimFile: string;\n/**\n* Build a single configuration, without watch and shortcuts features.\n*\n* Internal API, not for public use\n*\n* @private\n* @param config Resolved options\n*/\nexport declare function buildSingle(config: ResolvedConfig, clean: () => Promise<void>): Promise<(() => Promise<void>) | undefined>;\nexport { defineConfig } from \"./config.ts\";\nexport * from \"./config/types.ts\";\nexport { globalLogger, type Logger };\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"e4dc61e8-6f23-4020-864b-d828a0f46bc7","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884885,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/node-protocol.ts","content":"import { builtinModules } from 'node:module'\nimport type { Plugin } from 'rolldown'\n\nconst modulesWithoutProtocol = builtinModules.filter(\n  (mod) => !mod.startsWith('node:'),\n)\n\n/**\n * The `node:` protocol was added in Node.js v14.18.0.\n * @see https://nodejs.org/api/esm.html#node-imports\n */\nexport function NodeProtocolPlugin(nodeProtocolOption: 'strip' | true): Plugin {\n  if (nodeProtocolOption === 'strip') {\n    const regex = new RegExp(`^node:(${modulesWithoutProtocol.join('|')})$`)\n\n    return {\n      name: 'tsdown:node-protocol:strip',\n      resolveId: {\n        order: 'pre',\n        filter: { id: regex },\n        handler(id) {\n          return {\n            id: id.slice(5), // strip the `node:` prefix\n            external: true,\n            moduleSideEffects: false,\n          }\n        },\n      },\n    }\n  }\n\n  // create regex from builtin modules\n  // filter without `node:` prefix\n  const builtinModulesRegex = new RegExp(\n    `^(${modulesWithoutProtocol.join('|')})$`,\n  )\n\n  return {\n    name: 'tsdown:node-protocol:add',\n    resolveId: {\n      order: 'pre',\n      filter: { id: builtinModulesRegex },\n      handler(id) {\n        return {\n          id: `node:${id}`,\n          external: true,\n          moduleSideEffects: false,\n        }\n      },\n    },\n  }\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"5c66b2b6-a96b-4bea-b7c0-1cd909d05400","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884885,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/external.ts","module_request":"node:module","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"2b6c031c-eb6c-45d2-934d-25b6c9920468","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884885,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"2b6c031c-eb6c-45d2-934d-25b6c9920468","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884885,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/shebang.ts","content":"import { chmod } from 'node:fs/promises'\nimport path from 'node:path'\nimport { underline } from 'ansis'\nimport { fsExists } from '../utils/fs.ts'\nimport { prettyFormat, prettyName, type Logger } from '../utils/logger.ts'\nimport type { Plugin } from 'rolldown'\n\nconst RE_SHEBANG = /^#!.*/\n\nexport function ShebangPlugin(\n  logger: Logger,\n  cwd: string,\n  name?: string,\n  isMultiFormat?: boolean,\n): Plugin {\n  return {\n    name: 'tsdown:shebang',\n    async writeBundle(options, bundle) {\n      for (const chunk of Object.values(bundle)) {\n        if (chunk.type !== 'chunk' || !chunk.isEntry) continue\n        if (!RE_SHEBANG.test(chunk.code)) continue\n\n        const filepath = path.resolve(\n          cwd,\n          options.file || path.join(options.dir!, chunk.fileName),\n        )\n        if (await fsExists(filepath)) {\n          logger.info(\n            prettyName(name),\n            isMultiFormat && prettyFormat(options.format),\n            `Granting execute permission to ${underline(path.relative(cwd, filepath))}`,\n          )\n          await chmod(filepath, 0o755)\n        }\n      }\n    },\n  }\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"195a6dba-edbb-4566-83e3-a3d6bc670971","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884885,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/external.ts","module_request":"node:module","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"45c78a58-cb90-4b78-bdd5-0ea2f8d448d3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884886,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/shebang.ts","module_request":"node:fs/promises","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"79428516-9180-4cc0-98f8-ad5a0a2d5cc4","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884886,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"79428516-9180-4cc0-98f8-ad5a0a2d5cc4","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884886,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/shebang.ts","module_request":"node:fs/promises","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"47c3fc37-3abc-4ecb-af85-6bcceb3b4488","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884886,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/run.d.ts","content":"export {};","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"6cd739b5-f952-4324-a639-9bbd871ec048","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884886,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/index.d.ts","content":"import { InlineConfig, ResolvedConfig } from \"./config/index.ts\";\nimport { globalLogger, Logger } from \"./utils/logger.ts\";\nexport var build = [4, () => [InlineConfig, Promise]];\nexport var shimFile = [5, () => []];\nexport var buildSingle = [6, () => [ResolvedConfig, Promise, Promise, Promise]];\nexport { defineConfig } from \"./config.ts\";\nexport * from \"./config/types.ts\";\nexport { globalLogger, Logger };","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"e4dc61e8-6f23-4020-864b-d828a0f46bc7","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884886,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/index.d.ts","content":"import { InlineConfig, ResolvedConfig } from \"./config/index.ts\";\nimport { globalLogger, Logger } from \"./utils/logger.ts\";\nexport var build = [4, () => [InlineConfig, Promise]];\nexport var shimFile = [5, () => []];\nexport var buildSingle = [6, () => [ResolvedConfig, Promise, Promise, Promise]];\nexport { defineConfig } from \"./config.ts\";\nexport * from \"./config/types.ts\";\nexport { globalLogger, Logger };","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"2802bcad-e245-4a36-ab08-ac2907d9d018","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884887,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/run.d.ts","content":"export {};","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"6cd739b5-f952-4324-a639-9bbd871ec048","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884887,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/index.d.ts","content":"import { InlineConfig, ResolvedConfig } from \"./config/index.ts\";\nimport { globalLogger, Logger } from \"./utils/logger.ts\";\nexport var build = [4, () => [InlineConfig, Promise]];\nexport var shimFile = [5, () => []];\nexport var buildSingle = [6, () => [ResolvedConfig, Promise, Promise, Promise]];\nexport { defineConfig } from \"./config.ts\";\nexport * from \"./config/types.ts\";\nexport { globalLogger, Logger };","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"2802bcad-e245-4a36-ab08-ac2907d9d018","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884887,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/shebang.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"3529491c-1a0e-4d98-ba23-947a017da0ec","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884887,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"3529491c-1a0e-4d98-ba23-947a017da0ec","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884887,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/shebang.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"4bcece37-3cc6-4646-b9a0-126cc5355016","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884887,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/shebang.ts","module_request":"ansis","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"bb01440d-5074-4f69-b6dd-fe109df5fa87","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884888,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"bb01440d-5074-4f69-b6dd-fe109df5fa87","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884888,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/shebang.ts","module_request":"ansis","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"7ac08902-cea2-40c9-845c-c1a0199c313b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884888,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/shebang.ts","module_request":"../utils/fs.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"ace2feba-5a86-44b7-8192-a5fd349f2a45","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884888,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"ace2feba-5a86-44b7-8192-a5fd349f2a45","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884888,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/shebang.ts","module_request":"../utils/fs.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"98eece3a-9a51-49e5-bfb8-5ad0212cf1bc","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884888,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/shebang.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"6e99d6f4-9a77-484a-98f2-162e233c9c1f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884888,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.d.ts","module_request":"./config/index.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"4fb66d74-4fab-451a-8102-0b2ef2967ebe","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884888,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"4fb66d74-4fab-451a-8102-0b2ef2967ebe","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884889,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.d.ts","module_request":"./config/index.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"ce0a15a0-f1eb-41b2-8132-9e2083ec3e8b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884889,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.d.ts","module_request":"./utils/logger.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"8b574760-8228-4f62-8034-9eaf64da59a7","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884889,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"8b574760-8228-4f62-8034-9eaf64da59a7","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884889,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","content":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"e45167e5-b26c-464f-9160-c34ca835f2a9","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884889,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.d.ts","module_request":"./utils/logger.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"c2345c11-f919-48ae-beed-2f4cbfe1f161","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884890,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"678de90b-b433-4c64-9d09-b57ccf6e2f28","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884890,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","content":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"678de90b-b433-4c64-9d09-b57ccf6e2f28","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884890,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"3be51f99-9ffc-48d8-9b55-b2831fa8fd6b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884890,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.d.ts","module_request":"./config.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"97d86c57-2e07-449c-9edc-a16b0569345a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884890,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"97d86c57-2e07-449c-9edc-a16b0569345a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884891,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"6e99d6f4-9a77-484a-98f2-162e233c9c1f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884891,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.d.ts","module_request":"./config.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"4bb09e00-f038-4690-ac0a-e0517f491eb6","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884892,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/shebang.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"e91526c5-f005-412a-a871-5839b9d2abd6","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884892,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"47c3fc37-3abc-4ecb-af85-6bcceb3b4488","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884892,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/shebang.ts","module_request":"node:fs/promises","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"91c90993-4c57-4c8c-870d-17ab50a5a6e5","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884892,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"4bcece37-3cc6-4646-b9a0-126cc5355016","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884893,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/shebang.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"acf96892-4539-41bf-b4d9-305f70d82936","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884893,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"7ac08902-cea2-40c9-845c-c1a0199c313b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884893,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/shebang.ts","module_request":"ansis","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"ce277c43-9ec7-43f4-9058-9f27f713de68","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884893,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"98eece3a-9a51-49e5-bfb8-5ad0212cf1bc","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884893,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/shebang.ts","module_request":"../utils/fs.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"20245941-62cb-478e-8249-2064385b722b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884894,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"e91526c5-f005-412a-a871-5839b9d2abd6","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884894,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/shebang.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"ba906dc9-d112-471b-bccd-9d10e4546357","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884894,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"91c90993-4c57-4c8c-870d-17ab50a5a6e5","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884894,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.d.ts","module_request":"./config/types.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"9f0e4b31-c854-4ad6-be78-7b6de18d03af","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884895,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"9f0e4b31-c854-4ad6-be78-7b6de18d03af","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884895,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.d.ts","module_request":"./config/types.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"ea0469f0-a5ba-490d-b1a7-70bccf13ad31","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884896,"action":"HookResolveIdCallEnd","resolved_id":"/Users/kevin/Developer/open-source/tsdown/src/config.d.ts","is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"4bb09e00-f038-4690-ac0a-e0517f491eb6","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884896,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/shebang.ts","module_request":"node:fs/promises","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"13346f15-2729-45bc-a6d8-bd48ffbff4eb","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884896,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"acf96892-4539-41bf-b4d9-305f70d82936","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884896,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/shebang.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"2dc55198-99e1-40b2-965d-08024dd4ebb1","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884896,"action":"HookResolveIdCallEnd","resolved_id":"ansis","is_external":true,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"ce277c43-9ec7-43f4-9058-9f27f713de68","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884897,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"20245941-62cb-478e-8249-2064385b722b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884897,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/shebang.ts","module_request":"../utils/fs.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"e24b892b-b210-449c-9d13-d0c2138a89c4","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884897,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"ba906dc9-d112-471b-bccd-9d10e4546357","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884897,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/shebang.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"e33b5546-01a3-42ea-b721-642e50d75fbf","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884897,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"13346f15-2729-45bc-a6d8-bd48ffbff4eb","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884897,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/shebang.ts","module_request":"node:fs/promises","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"2a669128-a0cf-4448-960c-f7411c768450","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884898,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"2a669128-a0cf-4448-960c-f7411c768450","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884898,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"2dc55198-99e1-40b2-965d-08024dd4ebb1","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884898,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/shebang.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"c32d5c39-9e80-471b-922e-f76fe2273369","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884898,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"c32d5c39-9e80-471b-922e-f76fe2273369","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884898,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"e24b892b-b210-449c-9d13-d0c2138a89c4","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884898,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/shebang.ts","module_request":"../utils/fs.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"a7aa38a8-3e42-44c0-8a31-ac488238e41c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884898,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"a7aa38a8-3e42-44c0-8a31-ac488238e41c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884899,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"e33b5546-01a3-42ea-b721-642e50d75fbf","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884899,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/shebang.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"44fcc379-64f5-4746-84a6-c09af68437ef","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884899,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"44fcc379-64f5-4746-84a6-c09af68437ef","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884899,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/types.ts","plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"9db8637d-873f-4c88-90b6-d08cd3edaa02","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884899,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/types.ts","content":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"9db8637d-873f-4c88-90b6-d08cd3edaa02","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884899,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/types.ts","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"126fd52d-de67-4659-babc-6a16fb0f4daf","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884899,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/types.ts","content":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"126fd52d-de67-4659-babc-6a16fb0f4daf","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884899,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/types.ts","plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"090bf254-30cd-4fca-820c-e56fcee7c197","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884900,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/types.ts","content":null,"plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"090bf254-30cd-4fca-820c-e56fcee7c197","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884900,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/fs.ts","plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"3d871120-5bd5-47ca-96ed-97dc4288b346","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884900,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/fs.ts","content":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"3d871120-5bd5-47ca-96ed-97dc4288b346","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884900,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/fs.ts","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"cdd7d699-2d19-4ab1-85bc-82509879404d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884900,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/fs.ts","content":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"cdd7d699-2d19-4ab1-85bc-82509879404d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884900,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/fs.ts","plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"95a34869-7036-45ad-bc25-4232cf83593e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884900,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/fs.ts","content":null,"plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"95a34869-7036-45ad-bc25-4232cf83593e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"action":"StringRef","id":"09d816e0b1938d2bc20eb8c1c34ec6987939bf52c4a4b1591ce9aa38ec524168","content":"import type { AttwOptions } from '../features/attw.ts'\nimport type { CopyEntry, CopyOptions, CopyOptionsFn } from '../features/copy.ts'\nimport type { ExportsOptions, TsdownChunks } from '../features/exports.ts'\nimport type {\n  BuildContext,\n  RolldownContext,\n  TsdownHooks,\n} from '../features/hooks.ts'\nimport type {\n  ChunkAddon,\n  ChunkAddonFunction,\n  ChunkAddonObject,\n  OutExtensionContext,\n  OutExtensionFactory,\n  OutExtensionObject,\n} from '../features/output.ts'\nimport type { ReportOptions } from '../features/report.ts'\nimport type { Logger, LogLevel } from '../utils/logger.ts'\nimport type { PackageType } from '../utils/package.ts'\nimport type {\n  Arrayable,\n  Awaitable,\n  MarkPartial,\n  Overwrite,\n} from '../utils/types.ts'\nimport type { Hookable } from 'hookable'\nimport type { PackageJson } from 'pkg-types'\nimport type { Options as PublintOptions } from 'publint'\nimport type {\n  ExternalOption,\n  InputOption,\n  InputOptions,\n  InternalModuleFormat,\n  MinifyOptions,\n  ModuleFormat,\n  ModuleTypes,\n  OutputOptions,\n  TreeshakingOptions,\n} from 'rolldown'\nimport type { Options as DtsOptions } from 'rolldown-plugin-dts'\nimport type { Options as UnusedOptions } from 'unplugin-unused'\n\nexport type Sourcemap = boolean | 'inline' | 'hidden'\nexport type Format = ModuleFormat\nexport type NormalizedFormat = InternalModuleFormat\nexport type {\n  AttwOptions,\n  BuildContext,\n  ChunkAddon,\n  ChunkAddonFunction,\n  ChunkAddonObject,\n  CopyEntry,\n  CopyOptions,\n  CopyOptionsFn,\n  DtsOptions,\n  ExportsOptions,\n  OutExtensionContext,\n  OutExtensionFactory,\n  OutExtensionObject,\n  PackageType,\n  PublintOptions,\n  ReportOptions,\n  RolldownContext,\n  TreeshakingOptions,\n  TsdownChunks,\n  TsdownHooks,\n  UnusedOptions,\n}\n\nexport interface Workspace {\n  /**\n   * Workspace directories. Glob patterns are supported.\n   * - `auto`: Automatically detect `package.json` files in the workspace.\n   * @default 'auto'\n   */\n  include?: Arrayable<string> | 'auto'\n  /**\n   * Exclude directories from workspace.\n   * Defaults to all `node_modules`, `dist`, `test`, `tests`, `temp`, and `tmp` directories.\n   */\n  exclude?: Arrayable<string>\n\n  /**\n   * Path to the workspace configuration file.\n   */\n  config?: boolean | string\n}\n\nexport type NoExternalFn = (\n  id: string,\n  importer: string | undefined,\n) => boolean | null | undefined | void\n\n/**\n * Options for tsdown.\n */\nexport interface UserConfig {\n  // #region Input Options\n  /**\n   * Defaults to `'src/index.ts'` if it exists.\n   */\n  entry?: InputOption\n\n  external?: ExternalOption\n  noExternal?: Arrayable<string | RegExp> | NoExternalFn\n  /**\n   * Bundle only the dependencies listed here; throw an error if any others are missing.\n   *\n   * Note: Be sure to include all required sub-dependencies as well.\n   */\n  inlineOnly?: Arrayable<string | RegExp>\n  /**\n   * Skip bundling `node_modules`.\n   * @default false\n   */\n  skipNodeModulesBundle?: boolean\n\n  alias?: Record<string, string>\n  tsconfig?: string | boolean\n\n  /**\n   * Specifies the target runtime platform for the build.\n   *\n   * - `node`: Node.js and compatible runtimes (e.g., Deno, Bun).\n   *   For CJS format, this is always set to `node` and cannot be changed.\n   * - `neutral`: A platform-agnostic target with no specific runtime assumptions.\n   * - `browser`: Web browsers.\n   *\n   * @default 'node'\n   * @see https://tsdown.dev/options/platform\n   */\n  platform?: 'node' | 'neutral' | 'browser'\n\n  /**\n   * Specifies the compilation target environment(s).\n   *\n   * Determines the JavaScript version or runtime(s) for which the code should be compiled.\n   * If not set, defaults to the value of `engines.node` in your project's `package.json`.\n   * If no `engines.node` field exists, no syntax transformations are applied.\n   *\n   * Accepts a single target (e.g., `'es2020'`, `'node18'`), an array of targets, or `false` to disable all transformations.\n   *\n   * @see {@link https://tsdown.dev/options/target#supported-targets} for a list of valid targets and more details.\n   *\n   * @example\n   * ```jsonc\n   * // Target a single environment\n   * { \"target\": \"node18\" }\n   * ```\n   *\n   * @example\n   * ```jsonc\n   * // Target multiple environments\n   * { \"target\": [\"node18\", \"es2020\"] }\n   * ```\n   *\n   * @example\n   * ```jsonc\n   * // Disable all syntax transformations\n   * { \"target\": false }\n   * ```\n   */\n  target?: string | string[] | false\n\n  /**\n   * Compile-time env variables.\n   * @example\n   * ```json\n   * {\n   *   \"DEBUG\": true,\n   *   \"NODE_ENV\": \"production\"\n   * }\n   * ```\n   */\n  env?: Record<string, any>\n  define?: Record<string, string>\n\n  /** @default false */\n  shims?: boolean\n\n  /**\n   * Configure tree shaking options.\n   * @see {@link https://rolldown.rs/options/treeshake} for more details.\n   * @default true\n   */\n  treeshake?: boolean | TreeshakingOptions\n\n  /**\n   * Sets how input files are processed.\n   * For example, use 'js' to treat files as JavaScript or 'base64' for images.\n   * Lets you import or require files like images or fonts.\n   * @example\n   * ```json\n   * { '.jpg': 'asset', '.png': 'base64' }\n   * ```\n   */\n  loader?: ModuleTypes\n\n  /**\n   * If enabled, strips the `node:` protocol prefix from import source.\n   *\n   * @default false\n   * @deprecated Use `nodeProtocol: 'strip'` instead.\n   *\n   * @example\n   * // With removeNodeProtocol enabled:\n   * import('node:fs'); // becomes import('fs')\n   */\n  removeNodeProtocol?: boolean\n\n  /**\n   * - If `true`, add `node:` prefix to built-in modules.\n   * - If `'strip'`, strips the `node:` protocol prefix from import source.\n   * - If `false`, does not modify the import source.\n   *\n   * @default false\n   *\n   * @example\n   * // With nodeProtocol enabled:\n   * import('fs'); // becomes import('node:fs')\n   * // With nodeProtocol set to 'strip':\n   * import('node:fs'); // becomes import('fs')\n   * // With nodeProtocol set to false:\n   * import('node:fs'); // remains import('node:fs')\n   *\n   */\n  nodeProtocol?: 'strip' | boolean\n\n  plugins?: InputOptions['plugins']\n\n  /**\n   * Use with caution; ensure you understand the implications.\n   */\n  inputOptions?:\n    | InputOptions\n    | ((\n        options: InputOptions,\n        format: NormalizedFormat,\n        context: { cjsDts: boolean },\n      ) => Awaitable<InputOptions | void | null>)\n\n  //#region Output Options\n\n  /** @default ['es'] */\n  format?: Format | Format[]\n  globalName?: string\n  /** @default 'dist' */\n  outDir?: string\n  /**\n   * Whether to generate source map files.\n   *\n   * Note that this option will always be `true` if you have\n   * [`declarationMap`](https://www.typescriptlang.org/tsconfig/#declarationMap)\n   * option enabled in your `tsconfig.json`.\n   *\n   * @default false\n   */\n  sourcemap?: Sourcemap\n  /**\n   * Clean directories before build.\n   *\n   * Default to output directory.\n   * @default true\n   */\n  clean?: boolean | string[]\n  /**\n   * @default false\n   */\n  minify?: boolean | 'dce-only' | MinifyOptions\n  footer?: ChunkAddon\n  banner?: ChunkAddon\n\n  /**\n   * Determines whether unbundle mode is enabled.\n   * When set to true, the output files will mirror the input file structure.\n   * @default false\n   */\n  unbundle?: boolean\n\n  /**\n   * @deprecated Use `unbundle` instead.\n   * @default true\n   */\n  bundle?: boolean\n\n  /**\n   * Use a fixed extension for output files.\n   * The extension will always be `.cjs` or `.mjs`.\n   * Otherwise, it will depend on the package type.\n   *\n   * Defaults to `true` if `platform` is set to `node`, `false` otherwise.\n   */\n  fixedExtension?: boolean\n\n  /**\n   * Custom extensions for output files.\n   * `fixedExtension` will be overridden by this option.\n   */\n  outExtensions?: OutExtensionFactory\n\n  /**\n   * If enabled, appends hash to chunk filenames.\n   * @default true\n   */\n  hash?: boolean\n\n  /**\n   * @default true\n   */\n  cjsDefault?: boolean\n\n  /**\n   * Use with caution; ensure you understand the implications.\n   */\n  outputOptions?:\n    | OutputOptions\n    | ((\n        options: OutputOptions,\n        format: NormalizedFormat,\n        context: { cjsDts: boolean },\n      ) => Awaitable<OutputOptions | void | null>)\n\n  //#region CLI Options\n\n  /**\n   * The working directory of the config file.\n   * - Defaults to `process.cwd()` for root config.\n   * - Defaults to the package directory for workspace config.\n   */\n  cwd?: string\n\n  /**\n   * The name to show in CLI output. This is useful for monorepos or workspaces.\n   * When using workspace mode, this option defaults to the package name from package.json.\n   * In non-workspace mode, this option must be set explicitly for the name to show in the CLI output.\n   */\n  name?: string\n\n  /**\n   * @default false\n   * @deprecated Use `logLevel` instead.\n   */\n  silent?: boolean\n\n  /**\n   * Log level.\n   * @default 'info'\n   */\n  logLevel?: LogLevel\n  /**\n   * If true, fails the build on warnings.\n   * @default false\n   */\n  failOnWarn?: boolean\n  /**\n   * Custom logger.\n   */\n  customLogger?: Logger\n\n  /**\n   * Reuse config from Vite or Vitest (experimental)\n   * @default false\n   */\n  fromVite?: boolean | 'vitest'\n\n  /**\n   * @default false\n   */\n  watch?: boolean | Arrayable<string>\n  ignoreWatch?: Arrayable<string | RegExp>\n\n  /**\n   * You can specify command to be executed after a successful build, specially useful for Watch mode\n   */\n  onSuccess?:\n    | string\n    | ((config: ResolvedConfig, signal: AbortSignal) => void | Promise<void>)\n\n  //#region Addons\n\n  /**\n   * Enables generation of TypeScript declaration files (`.d.ts`).\n   *\n   * By default, this option is auto-detected based on your project's `package.json`:\n   * - If the `types` field is present, or if the main `exports` contains a `types` entry, declaration file generation is enabled by default.\n   * - Otherwise, declaration file generation is disabled by default.\n   */\n  dts?: boolean | DtsOptions\n\n  /**\n   * Enable unused dependencies check with `unplugin-unused`\n   * Requires `unplugin-unused` to be installed.\n   * @default false\n   */\n  unused?: boolean | UnusedOptions\n\n  /**\n   * Run publint after bundling.\n   * Requires `publint` to be installed.\n   * @default false\n   */\n  publint?: boolean | PublintOptions\n\n  /**\n   * Run `arethetypeswrong` after bundling.\n   * Requires `@arethetypeswrong/core` to be installed.\n   *\n   * @default false\n   * @see https://github.com/arethetypeswrong/arethetypeswrong.github.io\n   */\n  attw?: boolean | AttwOptions\n\n  /**\n   * Enable size reporting after bundling.\n   * @default true\n   */\n  report?: boolean | ReportOptions\n\n  /**\n   * `import.meta.glob` support.\n   * @see https://vite.dev/guide/features.html#glob-import\n   * @default true\n   */\n  globImport?: boolean\n\n  /**\n   * **[experimental]** Generate package exports for `package.json`.\n   *\n   * This will set the `main`, `module`, `types`, `exports` fields in `package.json`\n   * to point to the generated files.\n   */\n  exports?: boolean | ExportsOptions\n\n  /**\n   * @deprecated Alias for `copy`, will be removed in the future.\n   */\n  publicDir?: CopyOptions | CopyOptionsFn\n\n  /**\n   * Copy files to another directory.\n   * @example\n   * ```ts\n   * [\n   *   'src/assets',\n   *   { from: 'src/assets', to: 'dist/assets' },\n   * ]\n   * ```\n   */\n  copy?: CopyOptions | CopyOptionsFn\n\n  hooks?:\n    | Partial<TsdownHooks>\n    | ((hooks: Hookable<TsdownHooks>) => Awaitable<void>)\n\n  /**\n   * **[experimental]** Enable workspace mode.\n   * This allows you to build multiple packages in a monorepo.\n   */\n  workspace?: Workspace | Arrayable<string> | true\n}\n\nexport interface InlineConfig extends UserConfig {\n  /**\n   * Config file path\n   */\n  config?: boolean | string\n\n  /**\n   * Config loader to use. It can only be set via CLI or API.\n   * @default 'auto'\n   */\n  configLoader?: 'auto' | 'native' | 'unconfig' | 'unrun'\n\n  /**\n   * Filter workspace packages. This option is only available in workspace mode.\n   */\n  filter?: RegExp | string | string[]\n}\n\nexport type UserConfigFn = (\n  inlineConfig: InlineConfig,\n) => Awaitable<Arrayable<UserConfig>>\n\nexport type UserConfigExport = Awaitable<Arrayable<UserConfig> | UserConfigFn>\n\nexport type ResolvedConfig = Overwrite<\n  MarkPartial<\n    Omit<\n      UserConfig,\n      | 'workspace' // merged\n      | 'fromVite' // merged\n      | 'publicDir' // deprecated\n      | 'silent' // deprecated\n      | 'bundle' // deprecated\n      | 'removeNodeProtocol' // deprecated\n      | 'logLevel' // merge to `logger`\n      | 'failOnWarn' // merge to `logger`\n      | 'customLogger' // merge to `logger`\n    >,\n    | 'globalName'\n    | 'inputOptions'\n    | 'outputOptions'\n    | 'minify'\n    | 'define'\n    | 'alias'\n    | 'external'\n    | 'onSuccess'\n    | 'outExtensions'\n    | 'hooks'\n    | 'copy'\n    | 'loader'\n    | 'name'\n    | 'banner'\n    | 'footer'\n  >,\n  {\n    format: NormalizedFormat[]\n    target?: string[]\n    clean: string[]\n    dts: false | DtsOptions\n    report: false | ReportOptions\n    tsconfig: false | string\n    pkg?: PackageJson\n    exports: false | ExportsOptions\n    nodeProtocol: 'strip' | boolean\n    logger: Logger\n    ignoreWatch: Array<string | RegExp>\n    noExternal?: NoExternalFn\n    inlineOnly?: Array<string | RegExp>\n  }\n>\n"}
{"timestamp":1761897884902,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/types.ts","content":"$ref:09d816e0b1938d2bc20eb8c1c34ec6987939bf52c4a4b1591ce9aa38ec524168","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"a4efbfea-52a2-4bd4-9105-d2f5627ecd33","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884902,"action":"HookResolveIdCallEnd","resolved_id":"/Users/kevin/Developer/open-source/tsdown/src/features/shebang.d.ts","is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"236cc65a-3817-4634-8ea1-0e331bbd718d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884902,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/fs.ts","content":"import { access, cp, rm, stat } from 'node:fs/promises'\nimport { dirname, normalize, sep } from 'node:path'\nimport type { Stats } from 'node:fs'\n\nexport function fsExists(path: string): Promise<boolean> {\n  return access(path).then(\n    () => true,\n    () => false,\n  )\n}\n\nexport function fsStat(path: string): Promise<Stats | null> {\n  return stat(path).catch(() => null)\n}\n\nexport function fsRemove(path: string): Promise<void> {\n  return rm(path, { force: true, recursive: true }).catch(() => {})\n}\n\nexport function fsCopy(from: string, to: string): Promise<void> {\n  return cp(from, to, { recursive: true, force: true })\n}\n\nexport function lowestCommonAncestor(...filepaths: string[]): string {\n  if (filepaths.length === 0) return ''\n  if (filepaths.length === 1) return dirname(filepaths[0])\n  filepaths = filepaths.map(normalize)\n  const [first, ...rest] = filepaths\n  let ancestor = first.split(sep)\n  for (const filepath of rest) {\n    const directories = filepath.split(sep, ancestor.length)\n    let index = 0\n    for (const directory of directories) {\n      if (directory === ancestor[index]) {\n        index += 1\n      } else {\n        ancestor = ancestor.slice(0, index)\n        break\n      }\n    }\n    ancestor = ancestor.slice(0, index)\n  }\n\n  return ancestor.length <= 1 && ancestor[0] === ''\n    ? sep + ancestor[0]\n    : ancestor.join(sep)\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"77a81f5c-7fd6-43f9-b411-171a502c765f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884903,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/types.ts","content":"$ref:09d816e0b1938d2bc20eb8c1c34ec6987939bf52c4a4b1591ce9aa38ec524168","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"a4efbfea-52a2-4bd4-9105-d2f5627ecd33","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884903,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/fs.ts","content":"import { access, cp, rm, stat } from 'node:fs/promises'\nimport { dirname, normalize, sep } from 'node:path'\nimport type { Stats } from 'node:fs'\n\nexport function fsExists(path: string): Promise<boolean> {\n  return access(path).then(\n    () => true,\n    () => false,\n  )\n}\n\nexport function fsStat(path: string): Promise<Stats | null> {\n  return stat(path).catch(() => null)\n}\n\nexport function fsRemove(path: string): Promise<void> {\n  return rm(path, { force: true, recursive: true }).catch(() => {})\n}\n\nexport function fsCopy(from: string, to: string): Promise<void> {\n  return cp(from, to, { recursive: true, force: true })\n}\n\nexport function lowestCommonAncestor(...filepaths: string[]): string {\n  if (filepaths.length === 0) return ''\n  if (filepaths.length === 1) return dirname(filepaths[0])\n  filepaths = filepaths.map(normalize)\n  const [first, ...rest] = filepaths\n  let ancestor = first.split(sep)\n  for (const filepath of rest) {\n    const directories = filepath.split(sep, ancestor.length)\n    let index = 0\n    for (const directory of directories) {\n      if (directory === ancestor[index]) {\n        index += 1\n      } else {\n        ancestor = ancestor.slice(0, index)\n        break\n      }\n    }\n    ancestor = ancestor.slice(0, index)\n  }\n\n  return ancestor.length <= 1 && ancestor[0] === ''\n    ? sep + ancestor[0]\n    : ancestor.join(sep)\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"77a81f5c-7fd6-43f9-b411-171a502c765f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884903,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/fs.ts","content":"import { access, cp, rm, stat } from 'node:fs/promises'\nimport { dirname, normalize, sep } from 'node:path'\nimport type { Stats } from 'node:fs'\n\nexport function fsExists(path: string): Promise<boolean> {\n  return access(path).then(\n    () => true,\n    () => false,\n  )\n}\n\nexport function fsStat(path: string): Promise<Stats | null> {\n  return stat(path).catch(() => null)\n}\n\nexport function fsRemove(path: string): Promise<void> {\n  return rm(path, { force: true, recursive: true }).catch(() => {})\n}\n\nexport function fsCopy(from: string, to: string): Promise<void> {\n  return cp(from, to, { recursive: true, force: true })\n}\n\nexport function lowestCommonAncestor(...filepaths: string[]): string {\n  if (filepaths.length === 0) return ''\n  if (filepaths.length === 1) return dirname(filepaths[0])\n  filepaths = filepaths.map(normalize)\n  const [first, ...rest] = filepaths\n  let ancestor = first.split(sep)\n  for (const filepath of rest) {\n    const directories = filepath.split(sep, ancestor.length)\n    let index = 0\n    for (const directory of directories) {\n      if (directory === ancestor[index]) {\n        index += 1\n      } else {\n        ancestor = ancestor.slice(0, index)\n        break\n      }\n    }\n    ancestor = ancestor.slice(0, index)\n  }\n\n  return ancestor.length <= 1 && ancestor[0] === ''\n    ? sep + ancestor[0]\n    : ancestor.join(sep)\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"4e14924a-2e41-4b88-996f-0a3711b27a52","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884903,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/fs.ts","content":"import { access, cp, rm, stat } from 'node:fs/promises'\nimport { dirname, normalize, sep } from 'node:path'\nimport type { Stats } from 'node:fs'\n\nexport function fsExists(path: string): Promise<boolean> {\n  return access(path).then(\n    () => true,\n    () => false,\n  )\n}\n\nexport function fsStat(path: string): Promise<Stats | null> {\n  return stat(path).catch(() => null)\n}\n\nexport function fsRemove(path: string): Promise<void> {\n  return rm(path, { force: true, recursive: true }).catch(() => {})\n}\n\nexport function fsCopy(from: string, to: string): Promise<void> {\n  return cp(from, to, { recursive: true, force: true })\n}\n\nexport function lowestCommonAncestor(...filepaths: string[]): string {\n  if (filepaths.length === 0) return ''\n  if (filepaths.length === 1) return dirname(filepaths[0])\n  filepaths = filepaths.map(normalize)\n  const [first, ...rest] = filepaths\n  let ancestor = first.split(sep)\n  for (const filepath of rest) {\n    const directories = filepath.split(sep, ancestor.length)\n    let index = 0\n    for (const directory of directories) {\n      if (directory === ancestor[index]) {\n        index += 1\n      } else {\n        ancestor = ancestor.slice(0, index)\n        break\n      }\n    }\n    ancestor = ancestor.slice(0, index)\n  }\n\n  return ancestor.length <= 1 && ancestor[0] === ''\n    ? sep + ancestor[0]\n    : ancestor.join(sep)\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"4e14924a-2e41-4b88-996f-0a3711b27a52","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884904,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/types.ts","content":"$ref:09d816e0b1938d2bc20eb8c1c34ec6987939bf52c4a4b1591ce9aa38ec524168","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"aaa049d8-b151-4030-8cea-b27b32f9dcad","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884904,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/fs.ts","content":"import { access, cp, rm, stat } from 'node:fs/promises'\nimport { dirname, normalize, sep } from 'node:path'\nimport type { Stats } from 'node:fs'\n\nexport function fsExists(path: string): Promise<boolean> {\n  return access(path).then(\n    () => true,\n    () => false,\n  )\n}\n\nexport function fsStat(path: string): Promise<Stats | null> {\n  return stat(path).catch(() => null)\n}\n\nexport function fsRemove(path: string): Promise<void> {\n  return rm(path, { force: true, recursive: true }).catch(() => {})\n}\n\nexport function fsCopy(from: string, to: string): Promise<void> {\n  return cp(from, to, { recursive: true, force: true })\n}\n\nexport function lowestCommonAncestor(...filepaths: string[]): string {\n  if (filepaths.length === 0) return ''\n  if (filepaths.length === 1) return dirname(filepaths[0])\n  filepaths = filepaths.map(normalize)\n  const [first, ...rest] = filepaths\n  let ancestor = first.split(sep)\n  for (const filepath of rest) {\n    const directories = filepath.split(sep, ancestor.length)\n    let index = 0\n    for (const directory of directories) {\n      if (directory === ancestor[index]) {\n        index += 1\n      } else {\n        ancestor = ancestor.slice(0, index)\n        break\n      }\n    }\n    ancestor = ancestor.slice(0, index)\n  }\n\n  return ancestor.length <= 1 && ancestor[0] === ''\n    ? sep + ancestor[0]\n    : ancestor.join(sep)\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"c1a6b56c-a78a-411f-a2b7-d530d9ef1d78","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884904,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/types.ts","content":"$ref:09d816e0b1938d2bc20eb8c1c34ec6987939bf52c4a4b1591ce9aa38ec524168","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"aaa049d8-b151-4030-8cea-b27b32f9dcad","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884904,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./features/clean.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"0710b327-a400-46e0-9d1f-bc53af9d965c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884904,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/types.ts","content":"$ref:09d816e0b1938d2bc20eb8c1c34ec6987939bf52c4a4b1591ce9aa38ec524168","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"0da4606d-ada7-45fe-b7ec-8da5db19261c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884905,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"0710b327-a400-46e0-9d1f-bc53af9d965c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884905,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/fs.ts","content":"import { access, cp, rm, stat } from 'node:fs/promises'\nimport { dirname, normalize, sep } from 'node:path'\nimport type { Stats } from 'node:fs'\n\nexport function fsExists(path: string): Promise<boolean> {\n  return access(path).then(\n    () => true,\n    () => false,\n  )\n}\n\nexport function fsStat(path: string): Promise<Stats | null> {\n  return stat(path).catch(() => null)\n}\n\nexport function fsRemove(path: string): Promise<void> {\n  return rm(path, { force: true, recursive: true }).catch(() => {})\n}\n\nexport function fsCopy(from: string, to: string): Promise<void> {\n  return cp(from, to, { recursive: true, force: true })\n}\n\nexport function lowestCommonAncestor(...filepaths: string[]): string {\n  if (filepaths.length === 0) return ''\n  if (filepaths.length === 1) return dirname(filepaths[0])\n  filepaths = filepaths.map(normalize)\n  const [first, ...rest] = filepaths\n  let ancestor = first.split(sep)\n  for (const filepath of rest) {\n    const directories = filepath.split(sep, ancestor.length)\n    let index = 0\n    for (const directory of directories) {\n      if (directory === ancestor[index]) {\n        index += 1\n      } else {\n        ancestor = ancestor.slice(0, index)\n        break\n      }\n    }\n    ancestor = ancestor.slice(0, index)\n  }\n\n  return ancestor.length <= 1 && ancestor[0] === ''\n    ? sep + ancestor[0]\n    : ancestor.join(sep)\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"c1a6b56c-a78a-411f-a2b7-d530d9ef1d78","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884905,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"65048a2c-ba1d-40c9-a827-682638f3ba83","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884905,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./features/copy.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"cf8bbee3-6d56-4316-a14a-e0172fb3cbd2","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884905,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"cf8bbee3-6d56-4316-a14a-e0172fb3cbd2","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884905,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/cli.ts","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"2ce8d061-2d0f-4d61-ae22-2949896096eb","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884906,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"8a7d43cd-43ac-4a91-bedd-f00e6500a88b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884906,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/cli.ts","content":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"2ce8d061-2d0f-4d61-ae22-2949896096eb","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884906,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./features/exports.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"574d9c32-fe40-4f41-9237-de57cb2bd02f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884906,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"574d9c32-fe40-4f41-9237-de57cb2bd02f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884906,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/utils/fs.ts","module_request":"node:fs/promises","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"381d5781-985a-4b74-aa62-005c79e72332","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884906,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"c712e907-5bd1-4c02-9eec-fa081b3dfc72","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884906,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"381d5781-985a-4b74-aa62-005c79e72332","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884907,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./features/hooks.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"a98dd2bf-3eea-474e-aa57-cf80cba7b74b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884907,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/utils/fs.ts","module_request":"node:fs/promises","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"788bbd5a-07ec-4e86-be40-0dbf0a87ca2d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884907,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"a98dd2bf-3eea-474e-aa57-cf80cba7b74b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884907,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/utils/fs.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"c896344c-d295-4634-8590-2df86281b29e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884907,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"2d0919b7-3e40-4435-bad6-ca599b68cd29","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884907,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"c896344c-d295-4634-8590-2df86281b29e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884907,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./features/publint.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"e623772b-f462-437c-919b-d7c7286e152e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884908,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/utils/fs.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"86c72fb9-56f9-4adc-b24d-622dca944452","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884908,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"e623772b-f462-437c-919b-d7c7286e152e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884908,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"788bbd5a-07ec-4e86-be40-0dbf0a87ca2d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884908,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"7bfa8a3b-ae40-4d63-a6c4-1abab3bbd10d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884908,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/utils/fs.ts","module_request":"node:fs/promises","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"09b9f33d-0575-46a5-ad38-77f9564331e9","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884908,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./features/rolldown.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"bddd9c30-8316-45fb-8c46-5da9017cdccc","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884908,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"86c72fb9-56f9-4adc-b24d-622dca944452","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884908,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"bddd9c30-8316-45fb-8c46-5da9017cdccc","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884909,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/utils/fs.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"b7e5f20a-6846-4a1d-928d-c0b8b847ee50","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884909,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"09b9f33d-0575-46a5-ad38-77f9564331e9","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884909,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/types.ts","content":"$ref:09d816e0b1938d2bc20eb8c1c34ec6987939bf52c4a4b1591ce9aa38ec524168","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"0da4606d-ada7-45fe-b7ec-8da5db19261c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884909,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/utils/fs.ts","module_request":"node:fs/promises","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"8d35840d-763c-4d69-b472-22bf114354fa","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884909,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","content":null,"plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"3be51f99-9ffc-48d8-9b55-b2831fa8fd6b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884909,"action":"HookResolveIdCallEnd","resolved_id":"/Users/kevin/Developer/open-source/tsdown/src/config/types.d.ts","is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"ea0469f0-a5ba-490d-b1a7-70bccf13ad31","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"action":"StringRef","id":"864ed7fa9fe3cbea8bbf2c9f35304baa9f651b224ca786ff091220b90262f821","content":"import { Buffer } from 'node:buffer'\nimport path from 'node:path'\nimport { promisify } from 'node:util'\nimport { brotliCompress, gzip } from 'node:zlib'\nimport { bold, dim, green } from 'ansis'\nimport Debug from 'debug'\nimport { RE_DTS } from 'rolldown-plugin-dts/filename'\nimport { formatBytes } from '../utils/format.ts'\nimport { noop } from '../utils/general.ts'\nimport { prettyFormat, prettyName, type Logger } from '../utils/logger.ts'\nimport type { OutputAsset, OutputChunk, Plugin } from 'rolldown'\n\nconst debug = Debug('tsdown:report')\nconst brotliCompressAsync = promisify(brotliCompress)\nconst gzipAsync = promisify(gzip)\n\ninterface SizeInfo {\n  filename: string\n  dts: boolean\n  isEntry: boolean\n  raw: number\n  gzip: number\n  brotli: number\n  rawText: string\n  gzipText?: string\n  brotliText?: string\n}\n\nexport interface ReportOptions {\n  /**\n   * Enable/disable gzip-compressed size reporting.\n   * Compressing large output files can be slow, so disabling this may increase build performance for large projects.\n   *\n   * @default true\n   */\n  gzip?: boolean\n\n  /**\n   * Enable/disable brotli-compressed size reporting.\n   * Compressing large output files can be slow, so disabling this may increase build performance for large projects.\n   *\n   * @default false\n   */\n  brotli?: boolean\n\n  /**\n   * Skip reporting compressed size for files larger than this size.\n   * @default 1_000_000 // 1MB\n   */\n  maxCompressSize?: number\n}\n\nconst defaultOptions = {\n  gzip: true,\n  brotli: false,\n  maxCompressSize: 1_000_000,\n}\n\nexport function ReportPlugin(\n  userOptions: ReportOptions,\n  logger: Logger,\n  cwd: string,\n  cjsDts?: boolean,\n  name?: string,\n  isMultiFormat?: boolean,\n): Plugin {\n  const options = {\n    ...defaultOptions,\n    ...userOptions,\n  }\n\n  return {\n    name: 'tsdown:report',\n    async writeBundle(outputOptions, bundle) {\n      const outDir = path.relative(\n        cwd,\n        outputOptions.file\n          ? path.resolve(cwd, outputOptions.file, '..')\n          : path.resolve(cwd, outputOptions.dir!),\n      )\n\n      const sizes: SizeInfo[] = []\n      for (const chunk of Object.values(bundle)) {\n        const size = await calcSize(options, chunk)\n        sizes.push(size)\n      }\n\n      const filenameLength = Math.max(\n        ...sizes.map((size) => size.filename.length),\n      )\n\n      // padding rawText, gzipText, brotliText to the same length\n      const rawTextLength = Math.max(\n        ...sizes.map((size) => size.rawText.length),\n      )\n      const gzipTextLength = Math.max(\n        ...sizes.map((size) =>\n          size.gzipText == null ? 0 : size.gzipText.length,\n        ),\n      )\n      const brotliTextLength = Math.max(\n        ...sizes.map((size) =>\n          size.brotliText == null ? 0 : size.brotliText.length,\n        ),\n      )\n\n      let totalRaw = 0\n      for (const size of sizes) {\n        size.rawText = size.rawText.padStart(rawTextLength)\n        size.gzipText = size.gzipText?.padStart(gzipTextLength)\n        size.brotliText = size.brotliText?.padStart(brotliTextLength)\n        totalRaw += size.raw\n      }\n\n      // sort\n      sizes.sort((a, b) => {\n        // dts last\n        if (a.dts !== b.dts) return a.dts ? 1 : -1\n        // entry first\n        if (a.isEntry !== b.isEntry) return a.isEntry ? -1 : 1\n        // otherwise, sort by raw size descending\n        return b.raw - a.raw\n      })\n\n      const nameLabel = prettyName(name)\n      const formatLabel =\n        isMultiFormat && prettyFormat(cjsDts ? 'cjs' : outputOptions.format)\n\n      for (const size of sizes) {\n        const filenameColor = size.dts ? green : noop\n\n        logger.info(\n          nameLabel,\n          formatLabel,\n          dim(outDir + path.sep) +\n            filenameColor((size.isEntry ? bold : noop)(size.filename)),\n          ` `.repeat(filenameLength - size.filename.length),\n          dim(size.rawText),\n          options.gzip && size.gzipText && dim`│ gzip: ${size.gzipText}`,\n          options.brotli &&\n            size.brotliText &&\n            dim`│ brotli: ${size.brotliText}`,\n        )\n      }\n\n      const totalSizeText = formatBytes(totalRaw)\n      logger.info(\n        nameLabel,\n        formatLabel,\n        `${sizes.length} files, total: ${totalSizeText}`,\n      )\n    },\n  }\n}\n\nasync function calcSize(\n  options: Required<ReportOptions>,\n  chunk: OutputAsset | OutputChunk,\n): Promise<SizeInfo> {\n  debug(`Calculating size for`, chunk.fileName)\n\n  const content = chunk.type === 'chunk' ? chunk.code : chunk.source\n\n  const raw = Buffer.byteLength(content, 'utf8')\n  debug('[size]', chunk.fileName, raw)\n\n  let gzip: number = Infinity\n  let brotli: number = Infinity\n  if (raw > options.maxCompressSize) {\n    debug(chunk.fileName, 'file size exceeds limit, skip gzip/brotli')\n  } else {\n    if (options.gzip) {\n      gzip = (await gzipAsync(content)).length\n      debug('[gzip]', chunk.fileName, gzip)\n    }\n    if (options.brotli) {\n      brotli = (await brotliCompressAsync(content)).length\n      debug('[brotli]', chunk.fileName, brotli)\n    }\n  }\n\n  return {\n    filename: chunk.fileName,\n    dts: RE_DTS.test(chunk.fileName),\n    isEntry: chunk.type === 'chunk' && chunk.isEntry,\n    raw,\n    rawText: formatBytes(raw)!,\n    gzip,\n    gzipText: formatBytes(gzip),\n    brotli,\n    brotliText: formatBytes(brotli),\n  }\n}\n"}
{"timestamp":1761897884910,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","content":"import { Buffer } from 'node:buffer'\nimport path from 'node:path'\nimport { promisify } from 'node:util'\nimport { brotliCompress, gzip } from 'node:zlib'\nimport { bold, dim, green } from 'ansis'\nimport Debug from 'debug'\nimport { RE_DTS } from 'rolldown-plugin-dts/filename'\nimport { formatBytes } from '../utils/format.ts'\nimport { noop } from '../utils/general.ts'\nimport { prettyFormat, prettyName, type Logger } from '../utils/logger.ts'\nimport type { OutputAsset, OutputChunk, Plugin } from 'rolldown'\n\nconst debug = Debug('tsdown:report')\nconst brotliCompressAsync = promisify(brotliCompress)\nconst gzipAsync = promisify(gzip)\n\ninterface SizeInfo {\n  filename: string\n  dts: boolean\n  isEntry: boolean\n  raw: number\n  gzip: number\n  brotli: number\n  rawText: string\n  gzipText?: string\n  brotliText?: string\n}\n\nexport interface ReportOptions {\n  /**\n   * Enable/disable gzip-compressed size reporting.\n   * Compressing large output files can be slow, so disabling this may increase build performance for large projects.\n   *\n   * @default true\n   */\n  gzip?: boolean\n\n  /**\n   * Enable/disable brotli-compressed size reporting.\n   * Compressing large output files can be slow, so disabling this may increase build performance for large projects.\n   *\n   * @default false\n   */\n  brotli?: boolean\n\n  /**\n   * Skip reporting compressed size for files larger than this size.\n   * @default 1_000_000 // 1MB\n   */\n  maxCompressSize?: number\n}\n\nconst defaultOptions = {\n  gzip: true,\n  brotli: false,\n  maxCompressSize: 1_000_000,\n}\n\nexport function ReportPlugin(\n  userOptions: ReportOptions,\n  logger: Logger,\n  cwd: string,\n  cjsDts?: boolean,\n  name?: string,\n  isMultiFormat?: boolean,\n): Plugin {\n  const options = {\n    ...defaultOptions,\n    ...userOptions,\n  }\n\n  return {\n    name: 'tsdown:report',\n    async writeBundle(outputOptions, bundle) {\n      const outDir = path.relative(\n        cwd,\n        outputOptions.file\n          ? path.resolve(cwd, outputOptions.file, '..')\n          : path.resolve(cwd, outputOptions.dir!),\n      )\n\n      const sizes: SizeInfo[] = []\n      for (const chunk of Object.values(bundle)) {\n        const size = await calcSize(options, chunk)\n        sizes.push(size)\n      }\n\n      const filenameLength = Math.max(\n        ...sizes.map((size) => size.filename.length),\n      )\n\n      // padding rawText, gzipText, brotliText to the same length\n      const rawTextLength = Math.max(\n        ...sizes.map((size) => size.rawText.length),\n      )\n      const gzipTextLength = Math.max(\n        ...sizes.map((size) =>\n          size.gzipText == null ? 0 : size.gzipText.length,\n        ),\n      )\n      const brotliTextLength = Math.max(\n        ...sizes.map((size) =>\n          size.brotliText == null ? 0 : size.brotliText.length,\n        ),\n      )\n\n      let totalRaw = 0\n      for (const size of sizes) {\n        size.rawText = size.rawText.padStart(rawTextLength)\n        size.gzipText = size.gzipText?.padStart(gzipTextLength)\n        size.brotliText = size.brotliText?.padStart(brotliTextLength)\n        totalRaw += size.raw\n      }\n\n      // sort\n      sizes.sort((a, b) => {\n        // dts last\n        if (a.dts !== b.dts) return a.dts ? 1 : -1\n        // entry first\n        if (a.isEntry !== b.isEntry) return a.isEntry ? -1 : 1\n        // otherwise, sort by raw size descending\n        return b.raw - a.raw\n      })\n\n      const nameLabel = prettyName(name)\n      const formatLabel =\n        isMultiFormat && prettyFormat(cjsDts ? 'cjs' : outputOptions.format)\n\n      for (const size of sizes) {\n        const filenameColor = size.dts ? green : noop\n\n        logger.info(\n          nameLabel,\n          formatLabel,\n          dim(outDir + path.sep) +\n            filenameColor((size.isEntry ? bold : noop)(size.filename)),\n          ` `.repeat(filenameLength - size.filename.length),\n          dim(size.rawText),\n          options.gzip && size.gzipText && dim`│ gzip: ${size.gzipText}`,\n          options.brotli &&\n            size.brotliText &&\n            dim`│ brotli: ${size.brotliText}`,\n        )\n      }\n\n      const totalSizeText = formatBytes(totalRaw)\n      logger.info(\n        nameLabel,\n        formatLabel,\n        `${sizes.length} files, total: ${totalSizeText}`,\n      )\n    },\n  }\n}\n\nasync function calcSize(\n  options: Required<ReportOptions>,\n  chunk: OutputAsset | OutputChunk,\n): Promise<SizeInfo> {\n  debug(`Calculating size for`, chunk.fileName)\n\n  const content = chunk.type === 'chunk' ? chunk.code : chunk.source\n\n  const raw = Buffer.byteLength(content, 'utf8')\n  debug('[size]', chunk.fileName, raw)\n\n  let gzip: number = Infinity\n  let brotli: number = Infinity\n  if (raw > options.maxCompressSize) {\n    debug(chunk.fileName, 'file size exceeds limit, skip gzip/brotli')\n  } else {\n    if (options.gzip) {\n      gzip = (await gzipAsync(content)).length\n      debug('[gzip]', chunk.fileName, gzip)\n    }\n    if (options.brotli) {\n      brotli = (await brotliCompressAsync(content)).length\n      debug('[brotli]', chunk.fileName, brotli)\n    }\n  }\n\n  return {\n    filename: chunk.fileName,\n    dts: RE_DTS.test(chunk.fileName),\n    isEntry: chunk.type === 'chunk' && chunk.isEntry,\n    raw,\n    rawText: formatBytes(raw)!,\n    gzip,\n    gzipText: formatBytes(gzip),\n    brotli,\n    brotliText: formatBytes(brotli),\n  }\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"9b16a296-40a4-44f9-b7df-9d608fed97e0","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884911,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/cli.ts","plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"cd7a3f1f-2b2b-4f09-a5da-aec353698c8e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884911,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"c38a8735-23e6-4e18-aba7-57a0958e6f46","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884911,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","content":"import { Buffer } from 'node:buffer'\nimport path from 'node:path'\nimport { promisify } from 'node:util'\nimport { brotliCompress, gzip } from 'node:zlib'\nimport { bold, dim, green } from 'ansis'\nimport Debug from 'debug'\nimport { RE_DTS } from 'rolldown-plugin-dts/filename'\nimport { formatBytes } from '../utils/format.ts'\nimport { noop } from '../utils/general.ts'\nimport { prettyFormat, prettyName, type Logger } from '../utils/logger.ts'\nimport type { OutputAsset, OutputChunk, Plugin } from 'rolldown'\n\nconst debug = Debug('tsdown:report')\nconst brotliCompressAsync = promisify(brotliCompress)\nconst gzipAsync = promisify(gzip)\n\ninterface SizeInfo {\n  filename: string\n  dts: boolean\n  isEntry: boolean\n  raw: number\n  gzip: number\n  brotli: number\n  rawText: string\n  gzipText?: string\n  brotliText?: string\n}\n\nexport interface ReportOptions {\n  /**\n   * Enable/disable gzip-compressed size reporting.\n   * Compressing large output files can be slow, so disabling this may increase build performance for large projects.\n   *\n   * @default true\n   */\n  gzip?: boolean\n\n  /**\n   * Enable/disable brotli-compressed size reporting.\n   * Compressing large output files can be slow, so disabling this may increase build performance for large projects.\n   *\n   * @default false\n   */\n  brotli?: boolean\n\n  /**\n   * Skip reporting compressed size for files larger than this size.\n   * @default 1_000_000 // 1MB\n   */\n  maxCompressSize?: number\n}\n\nconst defaultOptions = {\n  gzip: true,\n  brotli: false,\n  maxCompressSize: 1_000_000,\n}\n\nexport function ReportPlugin(\n  userOptions: ReportOptions,\n  logger: Logger,\n  cwd: string,\n  cjsDts?: boolean,\n  name?: string,\n  isMultiFormat?: boolean,\n): Plugin {\n  const options = {\n    ...defaultOptions,\n    ...userOptions,\n  }\n\n  return {\n    name: 'tsdown:report',\n    async writeBundle(outputOptions, bundle) {\n      const outDir = path.relative(\n        cwd,\n        outputOptions.file\n          ? path.resolve(cwd, outputOptions.file, '..')\n          : path.resolve(cwd, outputOptions.dir!),\n      )\n\n      const sizes: SizeInfo[] = []\n      for (const chunk of Object.values(bundle)) {\n        const size = await calcSize(options, chunk)\n        sizes.push(size)\n      }\n\n      const filenameLength = Math.max(\n        ...sizes.map((size) => size.filename.length),\n      )\n\n      // padding rawText, gzipText, brotliText to the same length\n      const rawTextLength = Math.max(\n        ...sizes.map((size) => size.rawText.length),\n      )\n      const gzipTextLength = Math.max(\n        ...sizes.map((size) =>\n          size.gzipText == null ? 0 : size.gzipText.length,\n        ),\n      )\n      const brotliTextLength = Math.max(\n        ...sizes.map((size) =>\n          size.brotliText == null ? 0 : size.brotliText.length,\n        ),\n      )\n\n      let totalRaw = 0\n      for (const size of sizes) {\n        size.rawText = size.rawText.padStart(rawTextLength)\n        size.gzipText = size.gzipText?.padStart(gzipTextLength)\n        size.brotliText = size.brotliText?.padStart(brotliTextLength)\n        totalRaw += size.raw\n      }\n\n      // sort\n      sizes.sort((a, b) => {\n        // dts last\n        if (a.dts !== b.dts) return a.dts ? 1 : -1\n        // entry first\n        if (a.isEntry !== b.isEntry) return a.isEntry ? -1 : 1\n        // otherwise, sort by raw size descending\n        return b.raw - a.raw\n      })\n\n      const nameLabel = prettyName(name)\n      const formatLabel =\n        isMultiFormat && prettyFormat(cjsDts ? 'cjs' : outputOptions.format)\n\n      for (const size of sizes) {\n        const filenameColor = size.dts ? green : noop\n\n        logger.info(\n          nameLabel,\n          formatLabel,\n          dim(outDir + path.sep) +\n            filenameColor((size.isEntry ? bold : noop)(size.filename)),\n          ` `.repeat(filenameLength - size.filename.length),\n          dim(size.rawText),\n          options.gzip && size.gzipText && dim`│ gzip: ${size.gzipText}`,\n          options.brotli &&\n            size.brotliText &&\n            dim`│ brotli: ${size.brotliText}`,\n        )\n      }\n\n      const totalSizeText = formatBytes(totalRaw)\n      logger.info(\n        nameLabel,\n        formatLabel,\n        `${sizes.length} files, total: ${totalSizeText}`,\n      )\n    },\n  }\n}\n\nasync function calcSize(\n  options: Required<ReportOptions>,\n  chunk: OutputAsset | OutputChunk,\n): Promise<SizeInfo> {\n  debug(`Calculating size for`, chunk.fileName)\n\n  const content = chunk.type === 'chunk' ? chunk.code : chunk.source\n\n  const raw = Buffer.byteLength(content, 'utf8')\n  debug('[size]', chunk.fileName, raw)\n\n  let gzip: number = Infinity\n  let brotli: number = Infinity\n  if (raw > options.maxCompressSize) {\n    debug(chunk.fileName, 'file size exceeds limit, skip gzip/brotli')\n  } else {\n    if (options.gzip) {\n      gzip = (await gzipAsync(content)).length\n      debug('[gzip]', chunk.fileName, gzip)\n    }\n    if (options.brotli) {\n      brotli = (await brotliCompressAsync(content)).length\n      debug('[brotli]', chunk.fileName, brotli)\n    }\n  }\n\n  return {\n    filename: chunk.fileName,\n    dts: RE_DTS.test(chunk.fileName),\n    isEntry: chunk.type === 'chunk' && chunk.isEntry,\n    raw,\n    rawText: formatBytes(raw)!,\n    gzip,\n    gzipText: formatBytes(gzip),\n    brotli,\n    brotliText: formatBytes(brotli),\n  }\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"9b16a296-40a4-44f9-b7df-9d608fed97e0","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884912,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./features/shortcuts.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"4eab0aed-68aa-44e9-ae83-305c4bd5d63d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884912,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","content":"import { Buffer } from 'node:buffer'\nimport path from 'node:path'\nimport { promisify } from 'node:util'\nimport { brotliCompress, gzip } from 'node:zlib'\nimport { bold, dim, green } from 'ansis'\nimport Debug from 'debug'\nimport { RE_DTS } from 'rolldown-plugin-dts/filename'\nimport { formatBytes } from '../utils/format.ts'\nimport { noop } from '../utils/general.ts'\nimport { prettyFormat, prettyName, type Logger } from '../utils/logger.ts'\nimport type { OutputAsset, OutputChunk, Plugin } from 'rolldown'\n\nconst debug = Debug('tsdown:report')\nconst brotliCompressAsync = promisify(brotliCompress)\nconst gzipAsync = promisify(gzip)\n\ninterface SizeInfo {\n  filename: string\n  dts: boolean\n  isEntry: boolean\n  raw: number\n  gzip: number\n  brotli: number\n  rawText: string\n  gzipText?: string\n  brotliText?: string\n}\n\nexport interface ReportOptions {\n  /**\n   * Enable/disable gzip-compressed size reporting.\n   * Compressing large output files can be slow, so disabling this may increase build performance for large projects.\n   *\n   * @default true\n   */\n  gzip?: boolean\n\n  /**\n   * Enable/disable brotli-compressed size reporting.\n   * Compressing large output files can be slow, so disabling this may increase build performance for large projects.\n   *\n   * @default false\n   */\n  brotli?: boolean\n\n  /**\n   * Skip reporting compressed size for files larger than this size.\n   * @default 1_000_000 // 1MB\n   */\n  maxCompressSize?: number\n}\n\nconst defaultOptions = {\n  gzip: true,\n  brotli: false,\n  maxCompressSize: 1_000_000,\n}\n\nexport function ReportPlugin(\n  userOptions: ReportOptions,\n  logger: Logger,\n  cwd: string,\n  cjsDts?: boolean,\n  name?: string,\n  isMultiFormat?: boolean,\n): Plugin {\n  const options = {\n    ...defaultOptions,\n    ...userOptions,\n  }\n\n  return {\n    name: 'tsdown:report',\n    async writeBundle(outputOptions, bundle) {\n      const outDir = path.relative(\n        cwd,\n        outputOptions.file\n          ? path.resolve(cwd, outputOptions.file, '..')\n          : path.resolve(cwd, outputOptions.dir!),\n      )\n\n      const sizes: SizeInfo[] = []\n      for (const chunk of Object.values(bundle)) {\n        const size = await calcSize(options, chunk)\n        sizes.push(size)\n      }\n\n      const filenameLength = Math.max(\n        ...sizes.map((size) => size.filename.length),\n      )\n\n      // padding rawText, gzipText, brotliText to the same length\n      const rawTextLength = Math.max(\n        ...sizes.map((size) => size.rawText.length),\n      )\n      const gzipTextLength = Math.max(\n        ...sizes.map((size) =>\n          size.gzipText == null ? 0 : size.gzipText.length,\n        ),\n      )\n      const brotliTextLength = Math.max(\n        ...sizes.map((size) =>\n          size.brotliText == null ? 0 : size.brotliText.length,\n        ),\n      )\n\n      let totalRaw = 0\n      for (const size of sizes) {\n        size.rawText = size.rawText.padStart(rawTextLength)\n        size.gzipText = size.gzipText?.padStart(gzipTextLength)\n        size.brotliText = size.brotliText?.padStart(brotliTextLength)\n        totalRaw += size.raw\n      }\n\n      // sort\n      sizes.sort((a, b) => {\n        // dts last\n        if (a.dts !== b.dts) return a.dts ? 1 : -1\n        // entry first\n        if (a.isEntry !== b.isEntry) return a.isEntry ? -1 : 1\n        // otherwise, sort by raw size descending\n        return b.raw - a.raw\n      })\n\n      const nameLabel = prettyName(name)\n      const formatLabel =\n        isMultiFormat && prettyFormat(cjsDts ? 'cjs' : outputOptions.format)\n\n      for (const size of sizes) {\n        const filenameColor = size.dts ? green : noop\n\n        logger.info(\n          nameLabel,\n          formatLabel,\n          dim(outDir + path.sep) +\n            filenameColor((size.isEntry ? bold : noop)(size.filename)),\n          ` `.repeat(filenameLength - size.filename.length),\n          dim(size.rawText),\n          options.gzip && size.gzipText && dim`│ gzip: ${size.gzipText}`,\n          options.brotli &&\n            size.brotliText &&\n            dim`│ brotli: ${size.brotliText}`,\n        )\n      }\n\n      const totalSizeText = formatBytes(totalRaw)\n      logger.info(\n        nameLabel,\n        formatLabel,\n        `${sizes.length} files, total: ${totalSizeText}`,\n      )\n    },\n  }\n}\n\nasync function calcSize(\n  options: Required<ReportOptions>,\n  chunk: OutputAsset | OutputChunk,\n): Promise<SizeInfo> {\n  debug(`Calculating size for`, chunk.fileName)\n\n  const content = chunk.type === 'chunk' ? chunk.code : chunk.source\n\n  const raw = Buffer.byteLength(content, 'utf8')\n  debug('[size]', chunk.fileName, raw)\n\n  let gzip: number = Infinity\n  let brotli: number = Infinity\n  if (raw > options.maxCompressSize) {\n    debug(chunk.fileName, 'file size exceeds limit, skip gzip/brotli')\n  } else {\n    if (options.gzip) {\n      gzip = (await gzipAsync(content)).length\n      debug('[gzip]', chunk.fileName, gzip)\n    }\n    if (options.brotli) {\n      brotli = (await brotliCompressAsync(content)).length\n      debug('[brotli]', chunk.fileName, brotli)\n    }\n  }\n\n  return {\n    filename: chunk.fileName,\n    dts: RE_DTS.test(chunk.fileName),\n    isEntry: chunk.type === 'chunk' && chunk.isEntry,\n    raw,\n    rawText: formatBytes(raw)!,\n    gzip,\n    gzipText: formatBytes(gzip),\n    brotli,\n    brotliText: formatBytes(brotli),\n  }\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"bb44a3ad-7aa4-436b-9cf5-88e53b7b012e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884913,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"4eab0aed-68aa-44e9-ae83-305c4bd5d63d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884913,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","content":"import { Buffer } from 'node:buffer'\nimport path from 'node:path'\nimport { promisify } from 'node:util'\nimport { brotliCompress, gzip } from 'node:zlib'\nimport { bold, dim, green } from 'ansis'\nimport Debug from 'debug'\nimport { RE_DTS } from 'rolldown-plugin-dts/filename'\nimport { formatBytes } from '../utils/format.ts'\nimport { noop } from '../utils/general.ts'\nimport { prettyFormat, prettyName, type Logger } from '../utils/logger.ts'\nimport type { OutputAsset, OutputChunk, Plugin } from 'rolldown'\n\nconst debug = Debug('tsdown:report')\nconst brotliCompressAsync = promisify(brotliCompress)\nconst gzipAsync = promisify(gzip)\n\ninterface SizeInfo {\n  filename: string\n  dts: boolean\n  isEntry: boolean\n  raw: number\n  gzip: number\n  brotli: number\n  rawText: string\n  gzipText?: string\n  brotliText?: string\n}\n\nexport interface ReportOptions {\n  /**\n   * Enable/disable gzip-compressed size reporting.\n   * Compressing large output files can be slow, so disabling this may increase build performance for large projects.\n   *\n   * @default true\n   */\n  gzip?: boolean\n\n  /**\n   * Enable/disable brotli-compressed size reporting.\n   * Compressing large output files can be slow, so disabling this may increase build performance for large projects.\n   *\n   * @default false\n   */\n  brotli?: boolean\n\n  /**\n   * Skip reporting compressed size for files larger than this size.\n   * @default 1_000_000 // 1MB\n   */\n  maxCompressSize?: number\n}\n\nconst defaultOptions = {\n  gzip: true,\n  brotli: false,\n  maxCompressSize: 1_000_000,\n}\n\nexport function ReportPlugin(\n  userOptions: ReportOptions,\n  logger: Logger,\n  cwd: string,\n  cjsDts?: boolean,\n  name?: string,\n  isMultiFormat?: boolean,\n): Plugin {\n  const options = {\n    ...defaultOptions,\n    ...userOptions,\n  }\n\n  return {\n    name: 'tsdown:report',\n    async writeBundle(outputOptions, bundle) {\n      const outDir = path.relative(\n        cwd,\n        outputOptions.file\n          ? path.resolve(cwd, outputOptions.file, '..')\n          : path.resolve(cwd, outputOptions.dir!),\n      )\n\n      const sizes: SizeInfo[] = []\n      for (const chunk of Object.values(bundle)) {\n        const size = await calcSize(options, chunk)\n        sizes.push(size)\n      }\n\n      const filenameLength = Math.max(\n        ...sizes.map((size) => size.filename.length),\n      )\n\n      // padding rawText, gzipText, brotliText to the same length\n      const rawTextLength = Math.max(\n        ...sizes.map((size) => size.rawText.length),\n      )\n      const gzipTextLength = Math.max(\n        ...sizes.map((size) =>\n          size.gzipText == null ? 0 : size.gzipText.length,\n        ),\n      )\n      const brotliTextLength = Math.max(\n        ...sizes.map((size) =>\n          size.brotliText == null ? 0 : size.brotliText.length,\n        ),\n      )\n\n      let totalRaw = 0\n      for (const size of sizes) {\n        size.rawText = size.rawText.padStart(rawTextLength)\n        size.gzipText = size.gzipText?.padStart(gzipTextLength)\n        size.brotliText = size.brotliText?.padStart(brotliTextLength)\n        totalRaw += size.raw\n      }\n\n      // sort\n      sizes.sort((a, b) => {\n        // dts last\n        if (a.dts !== b.dts) return a.dts ? 1 : -1\n        // entry first\n        if (a.isEntry !== b.isEntry) return a.isEntry ? -1 : 1\n        // otherwise, sort by raw size descending\n        return b.raw - a.raw\n      })\n\n      const nameLabel = prettyName(name)\n      const formatLabel =\n        isMultiFormat && prettyFormat(cjsDts ? 'cjs' : outputOptions.format)\n\n      for (const size of sizes) {\n        const filenameColor = size.dts ? green : noop\n\n        logger.info(\n          nameLabel,\n          formatLabel,\n          dim(outDir + path.sep) +\n            filenameColor((size.isEntry ? bold : noop)(size.filename)),\n          ` `.repeat(filenameLength - size.filename.length),\n          dim(size.rawText),\n          options.gzip && size.gzipText && dim`│ gzip: ${size.gzipText}`,\n          options.brotli &&\n            size.brotliText &&\n            dim`│ brotli: ${size.brotliText}`,\n        )\n      }\n\n      const totalSizeText = formatBytes(totalRaw)\n      logger.info(\n        nameLabel,\n        formatLabel,\n        `${sizes.length} files, total: ${totalSizeText}`,\n      )\n    },\n  }\n}\n\nasync function calcSize(\n  options: Required<ReportOptions>,\n  chunk: OutputAsset | OutputChunk,\n): Promise<SizeInfo> {\n  debug(`Calculating size for`, chunk.fileName)\n\n  const content = chunk.type === 'chunk' ? chunk.code : chunk.source\n\n  const raw = Buffer.byteLength(content, 'utf8')\n  debug('[size]', chunk.fileName, raw)\n\n  let gzip: number = Infinity\n  let brotli: number = Infinity\n  if (raw > options.maxCompressSize) {\n    debug(chunk.fileName, 'file size exceeds limit, skip gzip/brotli')\n  } else {\n    if (options.gzip) {\n      gzip = (await gzipAsync(content)).length\n      debug('[gzip]', chunk.fileName, gzip)\n    }\n    if (options.brotli) {\n      brotli = (await brotliCompressAsync(content)).length\n      debug('[brotli]', chunk.fileName, brotli)\n    }\n  }\n\n  return {\n    filename: chunk.fileName,\n    dts: RE_DTS.test(chunk.fileName),\n    isEntry: chunk.type === 'chunk' && chunk.isEntry,\n    raw,\n    rawText: formatBytes(raw)!,\n    gzip,\n    gzipText: formatBytes(gzip),\n    brotli,\n    brotliText: formatBytes(brotli),\n  }\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"bb44a3ad-7aa4-436b-9cf5-88e53b7b012e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884914,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"6952909d-2114-4af1-a66c-7d146855d81d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884914,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","content":"import { Buffer } from 'node:buffer'\nimport path from 'node:path'\nimport { promisify } from 'node:util'\nimport { brotliCompress, gzip } from 'node:zlib'\nimport { bold, dim, green } from 'ansis'\nimport Debug from 'debug'\nimport { RE_DTS } from 'rolldown-plugin-dts/filename'\nimport { formatBytes } from '../utils/format.ts'\nimport { noop } from '../utils/general.ts'\nimport { prettyFormat, prettyName, type Logger } from '../utils/logger.ts'\nimport type { OutputAsset, OutputChunk, Plugin } from 'rolldown'\n\nconst debug = Debug('tsdown:report')\nconst brotliCompressAsync = promisify(brotliCompress)\nconst gzipAsync = promisify(gzip)\n\ninterface SizeInfo {\n  filename: string\n  dts: boolean\n  isEntry: boolean\n  raw: number\n  gzip: number\n  brotli: number\n  rawText: string\n  gzipText?: string\n  brotliText?: string\n}\n\nexport interface ReportOptions {\n  /**\n   * Enable/disable gzip-compressed size reporting.\n   * Compressing large output files can be slow, so disabling this may increase build performance for large projects.\n   *\n   * @default true\n   */\n  gzip?: boolean\n\n  /**\n   * Enable/disable brotli-compressed size reporting.\n   * Compressing large output files can be slow, so disabling this may increase build performance for large projects.\n   *\n   * @default false\n   */\n  brotli?: boolean\n\n  /**\n   * Skip reporting compressed size for files larger than this size.\n   * @default 1_000_000 // 1MB\n   */\n  maxCompressSize?: number\n}\n\nconst defaultOptions = {\n  gzip: true,\n  brotli: false,\n  maxCompressSize: 1_000_000,\n}\n\nexport function ReportPlugin(\n  userOptions: ReportOptions,\n  logger: Logger,\n  cwd: string,\n  cjsDts?: boolean,\n  name?: string,\n  isMultiFormat?: boolean,\n): Plugin {\n  const options = {\n    ...defaultOptions,\n    ...userOptions,\n  }\n\n  return {\n    name: 'tsdown:report',\n    async writeBundle(outputOptions, bundle) {\n      const outDir = path.relative(\n        cwd,\n        outputOptions.file\n          ? path.resolve(cwd, outputOptions.file, '..')\n          : path.resolve(cwd, outputOptions.dir!),\n      )\n\n      const sizes: SizeInfo[] = []\n      for (const chunk of Object.values(bundle)) {\n        const size = await calcSize(options, chunk)\n        sizes.push(size)\n      }\n\n      const filenameLength = Math.max(\n        ...sizes.map((size) => size.filename.length),\n      )\n\n      // padding rawText, gzipText, brotliText to the same length\n      const rawTextLength = Math.max(\n        ...sizes.map((size) => size.rawText.length),\n      )\n      const gzipTextLength = Math.max(\n        ...sizes.map((size) =>\n          size.gzipText == null ? 0 : size.gzipText.length,\n        ),\n      )\n      const brotliTextLength = Math.max(\n        ...sizes.map((size) =>\n          size.brotliText == null ? 0 : size.brotliText.length,\n        ),\n      )\n\n      let totalRaw = 0\n      for (const size of sizes) {\n        size.rawText = size.rawText.padStart(rawTextLength)\n        size.gzipText = size.gzipText?.padStart(gzipTextLength)\n        size.brotliText = size.brotliText?.padStart(brotliTextLength)\n        totalRaw += size.raw\n      }\n\n      // sort\n      sizes.sort((a, b) => {\n        // dts last\n        if (a.dts !== b.dts) return a.dts ? 1 : -1\n        // entry first\n        if (a.isEntry !== b.isEntry) return a.isEntry ? -1 : 1\n        // otherwise, sort by raw size descending\n        return b.raw - a.raw\n      })\n\n      const nameLabel = prettyName(name)\n      const formatLabel =\n        isMultiFormat && prettyFormat(cjsDts ? 'cjs' : outputOptions.format)\n\n      for (const size of sizes) {\n        const filenameColor = size.dts ? green : noop\n\n        logger.info(\n          nameLabel,\n          formatLabel,\n          dim(outDir + path.sep) +\n            filenameColor((size.isEntry ? bold : noop)(size.filename)),\n          ` `.repeat(filenameLength - size.filename.length),\n          dim(size.rawText),\n          options.gzip && size.gzipText && dim`│ gzip: ${size.gzipText}`,\n          options.brotli &&\n            size.brotliText &&\n            dim`│ brotli: ${size.brotliText}`,\n        )\n      }\n\n      const totalSizeText = formatBytes(totalRaw)\n      logger.info(\n        nameLabel,\n        formatLabel,\n        `${sizes.length} files, total: ${totalSizeText}`,\n      )\n    },\n  }\n}\n\nasync function calcSize(\n  options: Required<ReportOptions>,\n  chunk: OutputAsset | OutputChunk,\n): Promise<SizeInfo> {\n  debug(`Calculating size for`, chunk.fileName)\n\n  const content = chunk.type === 'chunk' ? chunk.code : chunk.source\n\n  const raw = Buffer.byteLength(content, 'utf8')\n  debug('[size]', chunk.fileName, raw)\n\n  let gzip: number = Infinity\n  let brotli: number = Infinity\n  if (raw > options.maxCompressSize) {\n    debug(chunk.fileName, 'file size exceeds limit, skip gzip/brotli')\n  } else {\n    if (options.gzip) {\n      gzip = (await gzipAsync(content)).length\n      debug('[gzip]', chunk.fileName, gzip)\n    }\n    if (options.brotli) {\n      brotli = (await brotliCompressAsync(content)).length\n      debug('[brotli]', chunk.fileName, brotli)\n    }\n  }\n\n  return {\n    filename: chunk.fileName,\n    dts: RE_DTS.test(chunk.fileName),\n    isEntry: chunk.type === 'chunk' && chunk.isEntry,\n    raw,\n    rawText: formatBytes(raw)!,\n    gzip,\n    gzipText: formatBytes(gzip),\n    brotli,\n    brotliText: formatBytes(brotli),\n  }\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"ac4b2fa8-a77d-4c2f-a113-44c4be10820c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884914,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./features/watch.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"2c94ac33-4242-4592-aa0c-865012df6a17","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884915,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"b7e5f20a-6846-4a1d-928d-c0b8b847ee50","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884915,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"2c94ac33-4242-4592-aa0c-865012df6a17","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884915,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/utils/fs.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"8ee9fcdc-4f92-4d7b-981d-7304fdab2dd4","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884915,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"2040ba2a-6337-4963-9a53-a4a5772e56df","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884915,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"8d35840d-763c-4d69-b472-22bf114354fa","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884915,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./utils/logger.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"513a6226-93ac-4fc9-a4bc-6c08d524f3fa","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884915,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/utils/fs.ts","module_request":"node:fs/promises","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"0e913f85-4766-40d6-b879-39cab2b5f13a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884916,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"513a6226-93ac-4fc9-a4bc-6c08d524f3fa","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884916,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"0e913f85-4766-40d6-b879-39cab2b5f13a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884916,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"0c6fe919-0943-4df4-a7cc-4d8e080ac9fa","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884916,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/logger.ts","plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"2745defb-dbe5-4646-a319-5e2122f6071a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884916,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./config.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"496881b9-06fc-4993-be0e-0482e5ceebcb","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884916,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/logger.ts","content":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"2745defb-dbe5-4646-a319-5e2122f6071a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884916,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"496881b9-06fc-4993-be0e-0482e5ceebcb","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884917,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/logger.ts","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"e8f00628-552b-467d-9153-fcc874aedf40","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884917,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"8ee9fcdc-4f92-4d7b-981d-7304fdab2dd4","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884917,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/logger.ts","content":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"e8f00628-552b-467d-9153-fcc874aedf40","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884917,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/utils/fs.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"488dc170-6967-4319-afa6-1e4c87f7d51d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884917,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/logger.ts","plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"b74d77a9-e3c0-4530-baee-24e60e514ddc","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884917,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"488dc170-6967-4319-afa6-1e4c87f7d51d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884917,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/logger.ts","content":null,"plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"b74d77a9-e3c0-4530-baee-24e60e514ddc","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884917,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/node-protocol.ts","content":"import { builtinModules } from 'node:module'\nimport type { Plugin } from 'rolldown'\n\nconst modulesWithoutProtocol = builtinModules.filter(\n  (mod) => !mod.startsWith('node:'),\n)\n\n/**\n * The `node:` protocol was added in Node.js v14.18.0.\n * @see https://nodejs.org/api/esm.html#node-imports\n */\nexport function NodeProtocolPlugin(nodeProtocolOption: 'strip' | true): Plugin {\n  if (nodeProtocolOption === 'strip') {\n    const regex = new RegExp(`^node:(${modulesWithoutProtocol.join('|')})$`)\n\n    return {\n      name: 'tsdown:node-protocol:strip',\n      resolveId: {\n        order: 'pre',\n        filter: { id: regex },\n        handler(id) {\n          return {\n            id: id.slice(5), // strip the `node:` prefix\n            external: true,\n            moduleSideEffects: false,\n          }\n        },\n      },\n    }\n  }\n\n  // create regex from builtin modules\n  // filter without `node:` prefix\n  const builtinModulesRegex = new RegExp(\n    `^(${modulesWithoutProtocol.join('|')})$`,\n  )\n\n  return {\n    name: 'tsdown:node-protocol:add',\n    resolveId: {\n      order: 'pre',\n      filter: { id: builtinModulesRegex },\n      handler(id) {\n        return {\n          id: `node:${id}`,\n          external: true,\n          moduleSideEffects: false,\n        }\n      },\n    },\n  }\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"5c66b2b6-a96b-4bea-b7c0-1cd909d05400","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884918,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/logger.ts","content":"import { bgRed, bgYellow, blue, green, rgb, yellow, type Ansis } from 'ansis'\nimport { noop } from './general.ts'\nimport type { InternalModuleFormat } from 'rolldown'\n\nexport type LogType = 'error' | 'warn' | 'info'\nexport type LogLevel = LogType | 'silent'\n\nexport interface LoggerOptions {\n  customLogger?: Logger\n  console?: Console\n  failOnWarn?: boolean\n}\n\nexport const LogLevels: Record<LogLevel, number> = {\n  silent: 0,\n  error: 1,\n  warn: 2,\n  info: 3,\n}\n\nexport interface Logger {\n  level: LogLevel\n  info: (...args: any[]) => void\n  warn: (...args: any[]) => void\n  warnOnce: (...args: any[]) => void\n  error: (...args: any[]) => void\n  success: (...args: any[]) => void\n}\n\nfunction format(msgs: any[]) {\n  return msgs.filter((arg) => arg !== undefined && arg !== false).join(' ')\n}\n\nconst warnedMessages = new Set<string>()\n\nexport function createLogger(\n  level: LogLevel = 'info',\n  {\n    customLogger,\n    console = globalThis.console,\n    failOnWarn = false,\n  }: LoggerOptions = {},\n): Logger {\n  if (customLogger) {\n    return customLogger\n  }\n\n  function output(type: LogType, msg: string) {\n    const thresh = LogLevels[logger.level]\n    if (thresh < LogLevels[type]) return\n\n    const method = type === 'info' ? 'log' : type\n    console[method](msg)\n  }\n\n  const logger: Logger = {\n    level,\n\n    info(...msgs: any[]): void {\n      output('info', `${blue`ℹ`} ${format(msgs)}`)\n    },\n\n    warn(...msgs: any[]): void {\n      const message = format(msgs)\n      if (failOnWarn) {\n        throw new Error(message)\n      }\n      warnedMessages.add(message)\n      output('warn', `\\n${bgYellow` WARN `} ${message}\\n`)\n    },\n\n    warnOnce(...msgs: any[]): void {\n      const message = format(msgs)\n      if (warnedMessages.has(message)) {\n        return\n      }\n\n      if (failOnWarn) {\n        throw new Error(message)\n      }\n      warnedMessages.add(message)\n\n      output('warn', `\\n${bgYellow` WARN `} ${message}\\n`)\n    },\n\n    error(...msgs: any[]): void {\n      output('error', `\\n${bgRed` ERROR `} ${format(msgs)}\\n`)\n    },\n\n    success(...msgs: any[]): void {\n      output('info', `${green`✔`} ${format(msgs)}`)\n    },\n  }\n  return logger\n}\n\nexport const globalLogger: Logger = createLogger()\n\nexport function prettyName(name?: string): string | undefined {\n  if (!name) return undefined\n  return generateColor(name)(`[${name}]`)\n}\n\nexport function prettyFormat(format: InternalModuleFormat): string {\n  const formatColor = format === 'es' ? blue : format === 'cjs' ? yellow : noop\n\n  let formatText: string\n  switch (format) {\n    case 'es':\n      formatText = 'ESM'\n      break\n    default:\n      formatText = format.toUpperCase()\n      break\n  }\n\n  return formatColor(`[${formatText}]`)\n}\n\n// Copied from https://github.com/antfu/vscode-pnpm-catalog-lens - MIT License\nconst colors = new Map<string, Ansis>()\nexport function generateColor(name: string = 'default'): Ansis {\n  if (colors.has(name)) {\n    return colors.get(name)!\n  }\n  let color: Ansis\n  if (name === 'default') {\n    color = blue\n  } else {\n    let hash = 0\n    for (let i = 0; i < name.length; i++)\n      // eslint-disable-next-line unicorn/prefer-code-point\n      hash = name.charCodeAt(i) + ((hash << 5) - hash)\n    const hue = hash % 360\n    const saturation = 35\n    const lightness = 55\n    color = rgb(...hslToRgb(hue, saturation, lightness))\n  }\n  colors.set(name, color)\n  return color\n}\n\nfunction hslToRgb(\n  h: number,\n  s: number,\n  l: number,\n): [r: number, g: number, b: number] {\n  h = h % 360\n  h /= 360\n  s /= 100\n  l /= 100\n  let r, g, b\n\n  if (s === 0) {\n    r = g = b = l // achromatic\n  } else {\n    const q = l < 0.5 ? l * (1 + s) : l + s - l * s\n    const p = 2 * l - q\n    r = hue2rgb(p, q, h + 1 / 3)\n    g = hue2rgb(p, q, h)\n    b = hue2rgb(p, q, h - 1 / 3)\n  }\n\n  return [\n    Math.max(0, Math.round(r * 255)),\n    Math.max(0, Math.round(g * 255)),\n    Math.max(0, Math.round(b * 255)),\n  ]\n}\n\nfunction hue2rgb(p: number, q: number, t: number) {\n  if (t < 0) t += 1\n  if (t > 1) t -= 1\n  if (t < 1 / 6) return p + (q - p) * 6 * t\n  if (t < 1 / 2) return q\n  if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6\n  return p\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"2bd94e52-0f4e-42dc-a879-54ff083cab99","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884918,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/node-protocol.ts","content":"import { builtinModules } from 'node:module'\nimport type { Plugin } from 'rolldown'\n\nconst modulesWithoutProtocol = builtinModules.filter(\n  (mod) => !mod.startsWith('node:'),\n)\n\n/**\n * The `node:` protocol was added in Node.js v14.18.0.\n * @see https://nodejs.org/api/esm.html#node-imports\n */\nexport function NodeProtocolPlugin(nodeProtocolOption: 'strip' | true): Plugin {\n  if (nodeProtocolOption === 'strip') {\n    const regex = new RegExp(`^node:(${modulesWithoutProtocol.join('|')})$`)\n\n    return {\n      name: 'tsdown:node-protocol:strip',\n      resolveId: {\n        order: 'pre',\n        filter: { id: regex },\n        handler(id) {\n          return {\n            id: id.slice(5), // strip the `node:` prefix\n            external: true,\n            moduleSideEffects: false,\n          }\n        },\n      },\n    }\n  }\n\n  // create regex from builtin modules\n  // filter without `node:` prefix\n  const builtinModulesRegex = new RegExp(\n    `^(${modulesWithoutProtocol.join('|')})$`,\n  )\n\n  return {\n    name: 'tsdown:node-protocol:add',\n    resolveId: {\n      order: 'pre',\n      filter: { id: builtinModulesRegex },\n      handler(id) {\n        return {\n          id: `node:${id}`,\n          external: true,\n          moduleSideEffects: false,\n        }\n      },\n    },\n  }\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"5dab4dba-94c7-4335-9a5c-6227289fe24d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884919,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/logger.ts","content":"import { bgRed, bgYellow, blue, green, rgb, yellow, type Ansis } from 'ansis'\nimport { noop } from './general.ts'\nimport type { InternalModuleFormat } from 'rolldown'\n\nexport type LogType = 'error' | 'warn' | 'info'\nexport type LogLevel = LogType | 'silent'\n\nexport interface LoggerOptions {\n  customLogger?: Logger\n  console?: Console\n  failOnWarn?: boolean\n}\n\nexport const LogLevels: Record<LogLevel, number> = {\n  silent: 0,\n  error: 1,\n  warn: 2,\n  info: 3,\n}\n\nexport interface Logger {\n  level: LogLevel\n  info: (...args: any[]) => void\n  warn: (...args: any[]) => void\n  warnOnce: (...args: any[]) => void\n  error: (...args: any[]) => void\n  success: (...args: any[]) => void\n}\n\nfunction format(msgs: any[]) {\n  return msgs.filter((arg) => arg !== undefined && arg !== false).join(' ')\n}\n\nconst warnedMessages = new Set<string>()\n\nexport function createLogger(\n  level: LogLevel = 'info',\n  {\n    customLogger,\n    console = globalThis.console,\n    failOnWarn = false,\n  }: LoggerOptions = {},\n): Logger {\n  if (customLogger) {\n    return customLogger\n  }\n\n  function output(type: LogType, msg: string) {\n    const thresh = LogLevels[logger.level]\n    if (thresh < LogLevels[type]) return\n\n    const method = type === 'info' ? 'log' : type\n    console[method](msg)\n  }\n\n  const logger: Logger = {\n    level,\n\n    info(...msgs: any[]): void {\n      output('info', `${blue`ℹ`} ${format(msgs)}`)\n    },\n\n    warn(...msgs: any[]): void {\n      const message = format(msgs)\n      if (failOnWarn) {\n        throw new Error(message)\n      }\n      warnedMessages.add(message)\n      output('warn', `\\n${bgYellow` WARN `} ${message}\\n`)\n    },\n\n    warnOnce(...msgs: any[]): void {\n      const message = format(msgs)\n      if (warnedMessages.has(message)) {\n        return\n      }\n\n      if (failOnWarn) {\n        throw new Error(message)\n      }\n      warnedMessages.add(message)\n\n      output('warn', `\\n${bgYellow` WARN `} ${message}\\n`)\n    },\n\n    error(...msgs: any[]): void {\n      output('error', `\\n${bgRed` ERROR `} ${format(msgs)}\\n`)\n    },\n\n    success(...msgs: any[]): void {\n      output('info', `${green`✔`} ${format(msgs)}`)\n    },\n  }\n  return logger\n}\n\nexport const globalLogger: Logger = createLogger()\n\nexport function prettyName(name?: string): string | undefined {\n  if (!name) return undefined\n  return generateColor(name)(`[${name}]`)\n}\n\nexport function prettyFormat(format: InternalModuleFormat): string {\n  const formatColor = format === 'es' ? blue : format === 'cjs' ? yellow : noop\n\n  let formatText: string\n  switch (format) {\n    case 'es':\n      formatText = 'ESM'\n      break\n    default:\n      formatText = format.toUpperCase()\n      break\n  }\n\n  return formatColor(`[${formatText}]`)\n}\n\n// Copied from https://github.com/antfu/vscode-pnpm-catalog-lens - MIT License\nconst colors = new Map<string, Ansis>()\nexport function generateColor(name: string = 'default'): Ansis {\n  if (colors.has(name)) {\n    return colors.get(name)!\n  }\n  let color: Ansis\n  if (name === 'default') {\n    color = blue\n  } else {\n    let hash = 0\n    for (let i = 0; i < name.length; i++)\n      // eslint-disable-next-line unicorn/prefer-code-point\n      hash = name.charCodeAt(i) + ((hash << 5) - hash)\n    const hue = hash % 360\n    const saturation = 35\n    const lightness = 55\n    color = rgb(...hslToRgb(hue, saturation, lightness))\n  }\n  colors.set(name, color)\n  return color\n}\n\nfunction hslToRgb(\n  h: number,\n  s: number,\n  l: number,\n): [r: number, g: number, b: number] {\n  h = h % 360\n  h /= 360\n  s /= 100\n  l /= 100\n  let r, g, b\n\n  if (s === 0) {\n    r = g = b = l // achromatic\n  } else {\n    const q = l < 0.5 ? l * (1 + s) : l + s - l * s\n    const p = 2 * l - q\n    r = hue2rgb(p, q, h + 1 / 3)\n    g = hue2rgb(p, q, h)\n    b = hue2rgb(p, q, h - 1 / 3)\n  }\n\n  return [\n    Math.max(0, Math.round(r * 255)),\n    Math.max(0, Math.round(g * 255)),\n    Math.max(0, Math.round(b * 255)),\n  ]\n}\n\nfunction hue2rgb(p: number, q: number, t: number) {\n  if (t < 0) t += 1\n  if (t > 1) t -= 1\n  if (t < 1 / 6) return p + (q - p) * 6 * t\n  if (t < 1 / 2) return q\n  if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6\n  return p\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"2bd94e52-0f4e-42dc-a879-54ff083cab99","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884920,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/node-protocol.ts","content":"import { builtinModules } from 'node:module'\nimport type { Plugin } from 'rolldown'\n\nconst modulesWithoutProtocol = builtinModules.filter(\n  (mod) => !mod.startsWith('node:'),\n)\n\n/**\n * The `node:` protocol was added in Node.js v14.18.0.\n * @see https://nodejs.org/api/esm.html#node-imports\n */\nexport function NodeProtocolPlugin(nodeProtocolOption: 'strip' | true): Plugin {\n  if (nodeProtocolOption === 'strip') {\n    const regex = new RegExp(`^node:(${modulesWithoutProtocol.join('|')})$`)\n\n    return {\n      name: 'tsdown:node-protocol:strip',\n      resolveId: {\n        order: 'pre',\n        filter: { id: regex },\n        handler(id) {\n          return {\n            id: id.slice(5), // strip the `node:` prefix\n            external: true,\n            moduleSideEffects: false,\n          }\n        },\n      },\n    }\n  }\n\n  // create regex from builtin modules\n  // filter without `node:` prefix\n  const builtinModulesRegex = new RegExp(\n    `^(${modulesWithoutProtocol.join('|')})$`,\n  )\n\n  return {\n    name: 'tsdown:node-protocol:add',\n    resolveId: {\n      order: 'pre',\n      filter: { id: builtinModulesRegex },\n      handler(id) {\n        return {\n          id: `node:${id}`,\n          external: true,\n          moduleSideEffects: false,\n        }\n      },\n    },\n  }\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"5dab4dba-94c7-4335-9a5c-6227289fe24d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884920,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"68d8e76e-2950-43ed-b5ca-fc0b26142089","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884920,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","module_request":"./config/types.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"ae56c0ec-43a9-4934-9642-08d923215e7a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884920,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"ae56c0ec-43a9-4934-9642-08d923215e7a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884920,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/node-protocol.ts","content":"import { builtinModules } from 'node:module'\nimport type { Plugin } from 'rolldown'\n\nconst modulesWithoutProtocol = builtinModules.filter(\n  (mod) => !mod.startsWith('node:'),\n)\n\n/**\n * The `node:` protocol was added in Node.js v14.18.0.\n * @see https://nodejs.org/api/esm.html#node-imports\n */\nexport function NodeProtocolPlugin(nodeProtocolOption: 'strip' | true): Plugin {\n  if (nodeProtocolOption === 'strip') {\n    const regex = new RegExp(`^node:(${modulesWithoutProtocol.join('|')})$`)\n\n    return {\n      name: 'tsdown:node-protocol:strip',\n      resolveId: {\n        order: 'pre',\n        filter: { id: regex },\n        handler(id) {\n          return {\n            id: id.slice(5), // strip the `node:` prefix\n            external: true,\n            moduleSideEffects: false,\n          }\n        },\n      },\n    }\n  }\n\n  // create regex from builtin modules\n  // filter without `node:` prefix\n  const builtinModulesRegex = new RegExp(\n    `^(${modulesWithoutProtocol.join('|')})$`,\n  )\n\n  return {\n    name: 'tsdown:node-protocol:add',\n    resolveId: {\n      order: 'pre',\n      filter: { id: builtinModulesRegex },\n      handler(id) {\n        return {\n          id: `node:${id}`,\n          external: true,\n          moduleSideEffects: false,\n        }\n      },\n    },\n  }\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"7669c740-dcc9-4fdd-8668-10bc661249ad","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884921,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/logger.ts","content":"import { bgRed, bgYellow, blue, green, rgb, yellow, type Ansis } from 'ansis'\nimport { noop } from './general.ts'\nimport type { InternalModuleFormat } from 'rolldown'\n\nexport type LogType = 'error' | 'warn' | 'info'\nexport type LogLevel = LogType | 'silent'\n\nexport interface LoggerOptions {\n  customLogger?: Logger\n  console?: Console\n  failOnWarn?: boolean\n}\n\nexport const LogLevels: Record<LogLevel, number> = {\n  silent: 0,\n  error: 1,\n  warn: 2,\n  info: 3,\n}\n\nexport interface Logger {\n  level: LogLevel\n  info: (...args: any[]) => void\n  warn: (...args: any[]) => void\n  warnOnce: (...args: any[]) => void\n  error: (...args: any[]) => void\n  success: (...args: any[]) => void\n}\n\nfunction format(msgs: any[]) {\n  return msgs.filter((arg) => arg !== undefined && arg !== false).join(' ')\n}\n\nconst warnedMessages = new Set<string>()\n\nexport function createLogger(\n  level: LogLevel = 'info',\n  {\n    customLogger,\n    console = globalThis.console,\n    failOnWarn = false,\n  }: LoggerOptions = {},\n): Logger {\n  if (customLogger) {\n    return customLogger\n  }\n\n  function output(type: LogType, msg: string) {\n    const thresh = LogLevels[logger.level]\n    if (thresh < LogLevels[type]) return\n\n    const method = type === 'info' ? 'log' : type\n    console[method](msg)\n  }\n\n  const logger: Logger = {\n    level,\n\n    info(...msgs: any[]): void {\n      output('info', `${blue`ℹ`} ${format(msgs)}`)\n    },\n\n    warn(...msgs: any[]): void {\n      const message = format(msgs)\n      if (failOnWarn) {\n        throw new Error(message)\n      }\n      warnedMessages.add(message)\n      output('warn', `\\n${bgYellow` WARN `} ${message}\\n`)\n    },\n\n    warnOnce(...msgs: any[]): void {\n      const message = format(msgs)\n      if (warnedMessages.has(message)) {\n        return\n      }\n\n      if (failOnWarn) {\n        throw new Error(message)\n      }\n      warnedMessages.add(message)\n\n      output('warn', `\\n${bgYellow` WARN `} ${message}\\n`)\n    },\n\n    error(...msgs: any[]): void {\n      output('error', `\\n${bgRed` ERROR `} ${format(msgs)}\\n`)\n    },\n\n    success(...msgs: any[]): void {\n      output('info', `${green`✔`} ${format(msgs)}`)\n    },\n  }\n  return logger\n}\n\nexport const globalLogger: Logger = createLogger()\n\nexport function prettyName(name?: string): string | undefined {\n  if (!name) return undefined\n  return generateColor(name)(`[${name}]`)\n}\n\nexport function prettyFormat(format: InternalModuleFormat): string {\n  const formatColor = format === 'es' ? blue : format === 'cjs' ? yellow : noop\n\n  let formatText: string\n  switch (format) {\n    case 'es':\n      formatText = 'ESM'\n      break\n    default:\n      formatText = format.toUpperCase()\n      break\n  }\n\n  return formatColor(`[${formatText}]`)\n}\n\n// Copied from https://github.com/antfu/vscode-pnpm-catalog-lens - MIT License\nconst colors = new Map<string, Ansis>()\nexport function generateColor(name: string = 'default'): Ansis {\n  if (colors.has(name)) {\n    return colors.get(name)!\n  }\n  let color: Ansis\n  if (name === 'default') {\n    color = blue\n  } else {\n    let hash = 0\n    for (let i = 0; i < name.length; i++)\n      // eslint-disable-next-line unicorn/prefer-code-point\n      hash = name.charCodeAt(i) + ((hash << 5) - hash)\n    const hue = hash % 360\n    const saturation = 35\n    const lightness = 55\n    color = rgb(...hslToRgb(hue, saturation, lightness))\n  }\n  colors.set(name, color)\n  return color\n}\n\nfunction hslToRgb(\n  h: number,\n  s: number,\n  l: number,\n): [r: number, g: number, b: number] {\n  h = h % 360\n  h /= 360\n  s /= 100\n  l /= 100\n  let r, g, b\n\n  if (s === 0) {\n    r = g = b = l // achromatic\n  } else {\n    const q = l < 0.5 ? l * (1 + s) : l + s - l * s\n    const p = 2 * l - q\n    r = hue2rgb(p, q, h + 1 / 3)\n    g = hue2rgb(p, q, h)\n    b = hue2rgb(p, q, h - 1 / 3)\n  }\n\n  return [\n    Math.max(0, Math.round(r * 255)),\n    Math.max(0, Math.round(g * 255)),\n    Math.max(0, Math.round(b * 255)),\n  ]\n}\n\nfunction hue2rgb(p: number, q: number, t: number) {\n  if (t < 0) t += 1\n  if (t > 1) t -= 1\n  if (t < 1 / 6) return p + (q - p) * 6 * t\n  if (t < 1 / 2) return q\n  if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6\n  return p\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"24c485d8-7bd9-400d-b3c5-41f066bd777e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884921,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/clean.ts","plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"90a3d691-2eb0-4e82-9429-c01244b11751","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884921,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/clean.ts","content":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"90a3d691-2eb0-4e82-9429-c01244b11751","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884921,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/clean.ts","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"ff4d1ef8-8919-417d-a14e-9bc84fd36bdc","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884922,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/logger.ts","content":"import { bgRed, bgYellow, blue, green, rgb, yellow, type Ansis } from 'ansis'\nimport { noop } from './general.ts'\nimport type { InternalModuleFormat } from 'rolldown'\n\nexport type LogType = 'error' | 'warn' | 'info'\nexport type LogLevel = LogType | 'silent'\n\nexport interface LoggerOptions {\n  customLogger?: Logger\n  console?: Console\n  failOnWarn?: boolean\n}\n\nexport const LogLevels: Record<LogLevel, number> = {\n  silent: 0,\n  error: 1,\n  warn: 2,\n  info: 3,\n}\n\nexport interface Logger {\n  level: LogLevel\n  info: (...args: any[]) => void\n  warn: (...args: any[]) => void\n  warnOnce: (...args: any[]) => void\n  error: (...args: any[]) => void\n  success: (...args: any[]) => void\n}\n\nfunction format(msgs: any[]) {\n  return msgs.filter((arg) => arg !== undefined && arg !== false).join(' ')\n}\n\nconst warnedMessages = new Set<string>()\n\nexport function createLogger(\n  level: LogLevel = 'info',\n  {\n    customLogger,\n    console = globalThis.console,\n    failOnWarn = false,\n  }: LoggerOptions = {},\n): Logger {\n  if (customLogger) {\n    return customLogger\n  }\n\n  function output(type: LogType, msg: string) {\n    const thresh = LogLevels[logger.level]\n    if (thresh < LogLevels[type]) return\n\n    const method = type === 'info' ? 'log' : type\n    console[method](msg)\n  }\n\n  const logger: Logger = {\n    level,\n\n    info(...msgs: any[]): void {\n      output('info', `${blue`ℹ`} ${format(msgs)}`)\n    },\n\n    warn(...msgs: any[]): void {\n      const message = format(msgs)\n      if (failOnWarn) {\n        throw new Error(message)\n      }\n      warnedMessages.add(message)\n      output('warn', `\\n${bgYellow` WARN `} ${message}\\n`)\n    },\n\n    warnOnce(...msgs: any[]): void {\n      const message = format(msgs)\n      if (warnedMessages.has(message)) {\n        return\n      }\n\n      if (failOnWarn) {\n        throw new Error(message)\n      }\n      warnedMessages.add(message)\n\n      output('warn', `\\n${bgYellow` WARN `} ${message}\\n`)\n    },\n\n    error(...msgs: any[]): void {\n      output('error', `\\n${bgRed` ERROR `} ${format(msgs)}\\n`)\n    },\n\n    success(...msgs: any[]): void {\n      output('info', `${green`✔`} ${format(msgs)}`)\n    },\n  }\n  return logger\n}\n\nexport const globalLogger: Logger = createLogger()\n\nexport function prettyName(name?: string): string | undefined {\n  if (!name) return undefined\n  return generateColor(name)(`[${name}]`)\n}\n\nexport function prettyFormat(format: InternalModuleFormat): string {\n  const formatColor = format === 'es' ? blue : format === 'cjs' ? yellow : noop\n\n  let formatText: string\n  switch (format) {\n    case 'es':\n      formatText = 'ESM'\n      break\n    default:\n      formatText = format.toUpperCase()\n      break\n  }\n\n  return formatColor(`[${formatText}]`)\n}\n\n// Copied from https://github.com/antfu/vscode-pnpm-catalog-lens - MIT License\nconst colors = new Map<string, Ansis>()\nexport function generateColor(name: string = 'default'): Ansis {\n  if (colors.has(name)) {\n    return colors.get(name)!\n  }\n  let color: Ansis\n  if (name === 'default') {\n    color = blue\n  } else {\n    let hash = 0\n    for (let i = 0; i < name.length; i++)\n      // eslint-disable-next-line unicorn/prefer-code-point\n      hash = name.charCodeAt(i) + ((hash << 5) - hash)\n    const hue = hash % 360\n    const saturation = 35\n    const lightness = 55\n    color = rgb(...hslToRgb(hue, saturation, lightness))\n  }\n  colors.set(name, color)\n  return color\n}\n\nfunction hslToRgb(\n  h: number,\n  s: number,\n  l: number,\n): [r: number, g: number, b: number] {\n  h = h % 360\n  h /= 360\n  s /= 100\n  l /= 100\n  let r, g, b\n\n  if (s === 0) {\n    r = g = b = l // achromatic\n  } else {\n    const q = l < 0.5 ? l * (1 + s) : l + s - l * s\n    const p = 2 * l - q\n    r = hue2rgb(p, q, h + 1 / 3)\n    g = hue2rgb(p, q, h)\n    b = hue2rgb(p, q, h - 1 / 3)\n  }\n\n  return [\n    Math.max(0, Math.round(r * 255)),\n    Math.max(0, Math.round(g * 255)),\n    Math.max(0, Math.round(b * 255)),\n  ]\n}\n\nfunction hue2rgb(p: number, q: number, t: number) {\n  if (t < 0) t += 1\n  if (t > 1) t -= 1\n  if (t < 1 / 6) return p + (q - p) * 6 * t\n  if (t < 1 / 2) return q\n  if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6\n  return p\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"24c485d8-7bd9-400d-b3c5-41f066bd777e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884922,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/clean.ts","content":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"ff4d1ef8-8919-417d-a14e-9bc84fd36bdc","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884922,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/logger.ts","content":"import { bgRed, bgYellow, blue, green, rgb, yellow, type Ansis } from 'ansis'\nimport { noop } from './general.ts'\nimport type { InternalModuleFormat } from 'rolldown'\n\nexport type LogType = 'error' | 'warn' | 'info'\nexport type LogLevel = LogType | 'silent'\n\nexport interface LoggerOptions {\n  customLogger?: Logger\n  console?: Console\n  failOnWarn?: boolean\n}\n\nexport const LogLevels: Record<LogLevel, number> = {\n  silent: 0,\n  error: 1,\n  warn: 2,\n  info: 3,\n}\n\nexport interface Logger {\n  level: LogLevel\n  info: (...args: any[]) => void\n  warn: (...args: any[]) => void\n  warnOnce: (...args: any[]) => void\n  error: (...args: any[]) => void\n  success: (...args: any[]) => void\n}\n\nfunction format(msgs: any[]) {\n  return msgs.filter((arg) => arg !== undefined && arg !== false).join(' ')\n}\n\nconst warnedMessages = new Set<string>()\n\nexport function createLogger(\n  level: LogLevel = 'info',\n  {\n    customLogger,\n    console = globalThis.console,\n    failOnWarn = false,\n  }: LoggerOptions = {},\n): Logger {\n  if (customLogger) {\n    return customLogger\n  }\n\n  function output(type: LogType, msg: string) {\n    const thresh = LogLevels[logger.level]\n    if (thresh < LogLevels[type]) return\n\n    const method = type === 'info' ? 'log' : type\n    console[method](msg)\n  }\n\n  const logger: Logger = {\n    level,\n\n    info(...msgs: any[]): void {\n      output('info', `${blue`ℹ`} ${format(msgs)}`)\n    },\n\n    warn(...msgs: any[]): void {\n      const message = format(msgs)\n      if (failOnWarn) {\n        throw new Error(message)\n      }\n      warnedMessages.add(message)\n      output('warn', `\\n${bgYellow` WARN `} ${message}\\n`)\n    },\n\n    warnOnce(...msgs: any[]): void {\n      const message = format(msgs)\n      if (warnedMessages.has(message)) {\n        return\n      }\n\n      if (failOnWarn) {\n        throw new Error(message)\n      }\n      warnedMessages.add(message)\n\n      output('warn', `\\n${bgYellow` WARN `} ${message}\\n`)\n    },\n\n    error(...msgs: any[]): void {\n      output('error', `\\n${bgRed` ERROR `} ${format(msgs)}\\n`)\n    },\n\n    success(...msgs: any[]): void {\n      output('info', `${green`✔`} ${format(msgs)}`)\n    },\n  }\n  return logger\n}\n\nexport const globalLogger: Logger = createLogger()\n\nexport function prettyName(name?: string): string | undefined {\n  if (!name) return undefined\n  return generateColor(name)(`[${name}]`)\n}\n\nexport function prettyFormat(format: InternalModuleFormat): string {\n  const formatColor = format === 'es' ? blue : format === 'cjs' ? yellow : noop\n\n  let formatText: string\n  switch (format) {\n    case 'es':\n      formatText = 'ESM'\n      break\n    default:\n      formatText = format.toUpperCase()\n      break\n  }\n\n  return formatColor(`[${formatText}]`)\n}\n\n// Copied from https://github.com/antfu/vscode-pnpm-catalog-lens - MIT License\nconst colors = new Map<string, Ansis>()\nexport function generateColor(name: string = 'default'): Ansis {\n  if (colors.has(name)) {\n    return colors.get(name)!\n  }\n  let color: Ansis\n  if (name === 'default') {\n    color = blue\n  } else {\n    let hash = 0\n    for (let i = 0; i < name.length; i++)\n      // eslint-disable-next-line unicorn/prefer-code-point\n      hash = name.charCodeAt(i) + ((hash << 5) - hash)\n    const hue = hash % 360\n    const saturation = 35\n    const lightness = 55\n    color = rgb(...hslToRgb(hue, saturation, lightness))\n  }\n  colors.set(name, color)\n  return color\n}\n\nfunction hslToRgb(\n  h: number,\n  s: number,\n  l: number,\n): [r: number, g: number, b: number] {\n  h = h % 360\n  h /= 360\n  s /= 100\n  l /= 100\n  let r, g, b\n\n  if (s === 0) {\n    r = g = b = l // achromatic\n  } else {\n    const q = l < 0.5 ? l * (1 + s) : l + s - l * s\n    const p = 2 * l - q\n    r = hue2rgb(p, q, h + 1 / 3)\n    g = hue2rgb(p, q, h)\n    b = hue2rgb(p, q, h - 1 / 3)\n  }\n\n  return [\n    Math.max(0, Math.round(r * 255)),\n    Math.max(0, Math.round(g * 255)),\n    Math.max(0, Math.round(b * 255)),\n  ]\n}\n\nfunction hue2rgb(p: number, q: number, t: number) {\n  if (t < 0) t += 1\n  if (t > 1) t -= 1\n  if (t < 1 / 6) return p + (q - p) * 6 * t\n  if (t < 1 / 2) return q\n  if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6\n  return p\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"e2c368b5-b59b-4c61-8571-22941829ba73","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884923,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/node-protocol.ts","content":"import { builtinModules } from 'node:module'\nimport type { Plugin } from 'rolldown'\n\nconst modulesWithoutProtocol = builtinModules.filter(\n  (mod) => !mod.startsWith('node:'),\n)\n\n/**\n * The `node:` protocol was added in Node.js v14.18.0.\n * @see https://nodejs.org/api/esm.html#node-imports\n */\nexport function NodeProtocolPlugin(nodeProtocolOption: 'strip' | true): Plugin {\n  if (nodeProtocolOption === 'strip') {\n    const regex = new RegExp(`^node:(${modulesWithoutProtocol.join('|')})$`)\n\n    return {\n      name: 'tsdown:node-protocol:strip',\n      resolveId: {\n        order: 'pre',\n        filter: { id: regex },\n        handler(id) {\n          return {\n            id: id.slice(5), // strip the `node:` prefix\n            external: true,\n            moduleSideEffects: false,\n          }\n        },\n      },\n    }\n  }\n\n  // create regex from builtin modules\n  // filter without `node:` prefix\n  const builtinModulesRegex = new RegExp(\n    `^(${modulesWithoutProtocol.join('|')})$`,\n  )\n\n  return {\n    name: 'tsdown:node-protocol:add',\n    resolveId: {\n      order: 'pre',\n      filter: { id: builtinModulesRegex },\n      handler(id) {\n        return {\n          id: `node:${id}`,\n          external: true,\n          moduleSideEffects: false,\n        }\n      },\n    },\n  }\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"7669c740-dcc9-4fdd-8668-10bc661249ad","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884923,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/clean.ts","plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"971a075a-aef2-44eb-b815-46a507da047b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884923,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/cli.ts","content":null,"plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"cd7a3f1f-2b2b-4f09-a5da-aec353698c8e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884924,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/node-protocol.ts","module_request":"node:module","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"a2f62694-245c-4699-a357-4f5ed5915417","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884924,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/cjs.ts","plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"cb7938cd-a5da-41a1-8084-4292f17349ff","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884924,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/cjs.ts","content":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"cb7938cd-a5da-41a1-8084-4292f17349ff","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884924,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.ts","plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"38e8b12f-90be-477d-ab46-ee7f06f25141","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884924,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/cjs.ts","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"0047667e-f9c2-4452-9f40-0b133821c0a0","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884924,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/copy.ts","plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"2e2a366e-e039-4ea5-891d-df4658b3eed0","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884924,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/copy.ts","content":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"2e2a366e-e039-4ea5-891d-df4658b3eed0","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884924,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/copy.ts","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"bc7eb47a-61ba-456a-bd59-bf90880d568d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884925,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/copy.ts","content":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"bc7eb47a-61ba-456a-bd59-bf90880d568d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884925,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"8cf5d6fc-149b-4175-80be-40a38a0987b0","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884925,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","content":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"8cf5d6fc-149b-4175-80be-40a38a0987b0","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884925,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"616e5652-c5b9-474a-834c-5ff5876b07dc","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884925,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","content":null,"plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"616e5652-c5b9-474a-834c-5ff5876b07dc","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884925,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/copy.ts","plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"6caa7acb-7ea1-43cd-905d-42795b792482","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884925,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/copy.ts","content":null,"plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"6caa7acb-7ea1-43cd-905d-42795b792482","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884925,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/cli.ts","content":"import process from 'node:process'\nimport { dim } from 'ansis'\nimport { cac } from 'cac'\nimport debug from 'debug'\nimport { VERSION as rolldownVersion } from 'rolldown'\nimport pkg from '../package.json' with { type: 'json' }\nimport { resolveComma, toArray } from './utils/general.ts'\nimport { globalLogger } from './utils/logger.ts'\nimport type { UserConfig } from './config.ts'\n\nconst cli = cac('tsdown')\ncli.help().version(pkg.version)\n\ncli\n  .command('[...files]', 'Bundle files', {\n    ignoreOptionDefaultValue: true,\n    allowUnknownOptions: true,\n  })\n  .option('-c, --config <filename>', 'Use a custom config file')\n  .option(\n    '--config-loader <loader>',\n    'Config loader to use: auto, native, unconfig',\n    { default: 'auto' },\n  )\n  .option('--no-config', 'Disable config file')\n  .option('-f, --format <format>', 'Bundle format: esm, cjs, iife, umd', {\n    default: 'esm',\n  })\n  .option('--clean', 'Clean output directory, --no-clean to disable')\n  .option('--external <module>', 'Mark dependencies as external')\n  .option('--minify', 'Minify output')\n  .option('--debug [feat]', 'Show debug logs')\n  .option('--target <target>', 'Bundle target, e.g \"es2015\", \"esnext\"')\n  .option('-l, --logLevel <level>', 'Set log level: info, warn, error, silent')\n  .option('--fail-on-warn', 'Fail on warnings', { default: true })\n  .option('-d, --out-dir <dir>', 'Output directory', { default: 'dist' })\n  .option('--treeshake', 'Tree-shake bundle', { default: true })\n  .option('--sourcemap', 'Generate source map', { default: false })\n  .option('--shims', 'Enable cjs and esm shims ', { default: false })\n  .option('--platform <platform>', 'Target platform', {\n    default: 'node',\n  })\n  .option('--dts', 'Generate dts files')\n  .option('--publint', 'Enable publint', { default: false })\n  .option('--attw', 'Enable Are the types wrong integration', {\n    default: false,\n  })\n  .option('--unused', 'Enable unused dependencies check', { default: false })\n  .option('-w, --watch [path]', 'Watch mode')\n  .option('--ignore-watch <path>', 'Ignore custom paths in watch mode')\n  .option('--from-vite [vitest]', 'Reuse config from Vite or Vitest')\n  .option('--report', 'Size report', { default: true })\n  .option('--env.* <value>', 'Define compile-time env variables')\n  .option('--on-success <command>', 'Command to run on success')\n  .option('--copy <dir>', 'Copy files to output dir')\n  .option('--public-dir <dir>', 'Alias for --copy, deprecated')\n  .option('--tsconfig <tsconfig>', 'Set tsconfig path')\n  .option('--unbundle', 'Unbundle mode')\n  .option('-W, --workspace [dir]', 'Enable workspace mode')\n  .option(\n    '-F, --filter <pattern>',\n    'Filter workspace packages, e.g. /regex/ or substring',\n  )\n  .option(\n    '--exports',\n    'Generate export-related metadata for package.json (experimental)',\n  )\n  .action(async (input: string[], flags: UserConfig) => {\n    globalLogger.level = flags.logLevel || (flags.silent ? 'error' : 'info')\n    globalLogger.info(\n      `tsdown ${dim`v${pkg.version}`} powered by rolldown ${dim`v${rolldownVersion}`}`,\n    )\n    const { build } = await import('./index.ts')\n    if (input.length > 0) flags.entry = input\n    await build(flags)\n  })\n\ncli\n  .command('migrate', 'Migrate from tsup to tsdown')\n  .option('-c, --cwd <dir>', 'Working directory')\n  .option('-d, --dry-run', 'Dry run')\n  .action(async (args) => {\n    const { migrate } = await import('./migrate.ts')\n    await migrate(args)\n  })\n\nexport async function runCLI(): Promise<void> {\n  cli.parse(process.argv, { run: false })\n\n  if (cli.options.debug) {\n    let namespace: string\n    if (cli.options.debug === true) {\n      namespace = 'tsdown:*'\n    } else {\n      // support debugging multiple flags with comma-separated list\n      namespace = resolveComma(toArray(cli.options.debug))\n        .map((v) => `tsdown:${v}`)\n        .join(',')\n    }\n\n    const enabled = debug.disable()\n    if (enabled) namespace += `,${enabled}`\n\n    debug.enable(namespace)\n    debug('tsdown:debug')('Debugging enabled', namespace)\n  }\n\n  try {\n    await cli.runMatchedCommand()\n  } catch (error) {\n    globalLogger.error(error)\n    process.exit(1)\n  }\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"b879d675-e856-4fdc-97a5-c26d387620af","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884926,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/logger.ts","content":"import { bgRed, bgYellow, blue, green, rgb, yellow, type Ansis } from 'ansis'\nimport { noop } from './general.ts'\nimport type { InternalModuleFormat } from 'rolldown'\n\nexport type LogType = 'error' | 'warn' | 'info'\nexport type LogLevel = LogType | 'silent'\n\nexport interface LoggerOptions {\n  customLogger?: Logger\n  console?: Console\n  failOnWarn?: boolean\n}\n\nexport const LogLevels: Record<LogLevel, number> = {\n  silent: 0,\n  error: 1,\n  warn: 2,\n  info: 3,\n}\n\nexport interface Logger {\n  level: LogLevel\n  info: (...args: any[]) => void\n  warn: (...args: any[]) => void\n  warnOnce: (...args: any[]) => void\n  error: (...args: any[]) => void\n  success: (...args: any[]) => void\n}\n\nfunction format(msgs: any[]) {\n  return msgs.filter((arg) => arg !== undefined && arg !== false).join(' ')\n}\n\nconst warnedMessages = new Set<string>()\n\nexport function createLogger(\n  level: LogLevel = 'info',\n  {\n    customLogger,\n    console = globalThis.console,\n    failOnWarn = false,\n  }: LoggerOptions = {},\n): Logger {\n  if (customLogger) {\n    return customLogger\n  }\n\n  function output(type: LogType, msg: string) {\n    const thresh = LogLevels[logger.level]\n    if (thresh < LogLevels[type]) return\n\n    const method = type === 'info' ? 'log' : type\n    console[method](msg)\n  }\n\n  const logger: Logger = {\n    level,\n\n    info(...msgs: any[]): void {\n      output('info', `${blue`ℹ`} ${format(msgs)}`)\n    },\n\n    warn(...msgs: any[]): void {\n      const message = format(msgs)\n      if (failOnWarn) {\n        throw new Error(message)\n      }\n      warnedMessages.add(message)\n      output('warn', `\\n${bgYellow` WARN `} ${message}\\n`)\n    },\n\n    warnOnce(...msgs: any[]): void {\n      const message = format(msgs)\n      if (warnedMessages.has(message)) {\n        return\n      }\n\n      if (failOnWarn) {\n        throw new Error(message)\n      }\n      warnedMessages.add(message)\n\n      output('warn', `\\n${bgYellow` WARN `} ${message}\\n`)\n    },\n\n    error(...msgs: any[]): void {\n      output('error', `\\n${bgRed` ERROR `} ${format(msgs)}\\n`)\n    },\n\n    success(...msgs: any[]): void {\n      output('info', `${green`✔`} ${format(msgs)}`)\n    },\n  }\n  return logger\n}\n\nexport const globalLogger: Logger = createLogger()\n\nexport function prettyName(name?: string): string | undefined {\n  if (!name) return undefined\n  return generateColor(name)(`[${name}]`)\n}\n\nexport function prettyFormat(format: InternalModuleFormat): string {\n  const formatColor = format === 'es' ? blue : format === 'cjs' ? yellow : noop\n\n  let formatText: string\n  switch (format) {\n    case 'es':\n      formatText = 'ESM'\n      break\n    default:\n      formatText = format.toUpperCase()\n      break\n  }\n\n  return formatColor(`[${formatText}]`)\n}\n\n// Copied from https://github.com/antfu/vscode-pnpm-catalog-lens - MIT License\nconst colors = new Map<string, Ansis>()\nexport function generateColor(name: string = 'default'): Ansis {\n  if (colors.has(name)) {\n    return colors.get(name)!\n  }\n  let color: Ansis\n  if (name === 'default') {\n    color = blue\n  } else {\n    let hash = 0\n    for (let i = 0; i < name.length; i++)\n      // eslint-disable-next-line unicorn/prefer-code-point\n      hash = name.charCodeAt(i) + ((hash << 5) - hash)\n    const hue = hash % 360\n    const saturation = 35\n    const lightness = 55\n    color = rgb(...hslToRgb(hue, saturation, lightness))\n  }\n  colors.set(name, color)\n  return color\n}\n\nfunction hslToRgb(\n  h: number,\n  s: number,\n  l: number,\n): [r: number, g: number, b: number] {\n  h = h % 360\n  h /= 360\n  s /= 100\n  l /= 100\n  let r, g, b\n\n  if (s === 0) {\n    r = g = b = l // achromatic\n  } else {\n    const q = l < 0.5 ? l * (1 + s) : l + s - l * s\n    const p = 2 * l - q\n    r = hue2rgb(p, q, h + 1 / 3)\n    g = hue2rgb(p, q, h)\n    b = hue2rgb(p, q, h - 1 / 3)\n  }\n\n  return [\n    Math.max(0, Math.round(r * 255)),\n    Math.max(0, Math.round(g * 255)),\n    Math.max(0, Math.round(b * 255)),\n  ]\n}\n\nfunction hue2rgb(p: number, q: number, t: number) {\n  if (t < 0) t += 1\n  if (t > 1) t -= 1\n  if (t < 1 / 6) return p + (q - p) * 6 * t\n  if (t < 1 / 2) return q\n  if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6\n  return p\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"e2c368b5-b59b-4c61-8571-22941829ba73","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"action":"StringRef","id":"3d730748cd634c388a0559361d355a04dce614c033162ec940052971d4c40835","content":"import path from 'node:path'\nimport process from 'node:process'\nimport { blue } from 'ansis'\nimport Debug from 'debug'\nimport { glob } from 'tinyglobby'\nimport { resolveClean } from '../features/clean.ts'\nimport { resolveEntry } from '../features/entry.ts'\nimport { hasExportsTypes } from '../features/exports.ts'\nimport { resolveTarget } from '../features/target.ts'\nimport { resolveTsconfig } from '../features/tsconfig.ts'\nimport { matchPattern, resolveRegex, slash, toArray } from '../utils/general.ts'\nimport { createLogger } from '../utils/logger.ts'\nimport { normalizeFormat, readPackageJson } from '../utils/package.ts'\nimport type { Awaitable } from '../utils/types.ts'\nimport { loadConfigFile, loadViteConfig } from './config.ts'\nimport type { InlineConfig, ResolvedConfig, UserConfig } from './types.ts'\n\nexport * from './types.ts'\n\nconst debug = Debug('tsdown:options')\n\nconst DEFAULT_EXCLUDE_WORKSPACE = [\n  '**/node_modules/**',\n  '**/dist/**',\n  '**/test?(s)/**',\n  '**/t?(e)mp/**',\n]\n\n// InlineConfig (CLI)\n//  -> loadConfigFile: InlineConfig + UserConfig[]\n//  -> resolveWorkspace: InlineConfig + UserConfig[]\n//  -> UserConfig[]\n//  -> ResolvedConfig[]\n//  -> build\n\n// resolved configs count = 1 (inline config) * root config count * workspace count * sub config count\n\nexport async function resolveConfig(inlineConfig: InlineConfig): Promise<{\n  configs: ResolvedConfig[]\n  files: string[]\n}> {\n  debug('inline config %O', inlineConfig)\n\n  const { configs: rootConfigs, file } = await loadConfigFile(inlineConfig)\n  const files: string[] = []\n  if (file) {\n    files.push(file)\n    debug('loaded root user config file %s', file)\n    debug('root user configs %O', rootConfigs)\n  } else {\n    debug('no root user config file found')\n  }\n\n  const configs: ResolvedConfig[] = (\n    await Promise.all(\n      rootConfigs.map(async (rootConfig): Promise<ResolvedConfig[]> => {\n        const { configs: workspaceConfigs, files: workspaceFiles } =\n          await resolveWorkspace(rootConfig, inlineConfig)\n        if (workspaceFiles) {\n          files.push(...workspaceFiles)\n        }\n        return Promise.all(\n          workspaceConfigs\n            .filter((config) => !config.workspace || config.entry)\n            .map((config) => resolveUserConfig(config)),\n        )\n      }),\n    )\n  ).flat()\n  debug('resolved configs %O', configs)\n  return { configs, files }\n}\n\nasync function resolveWorkspace(\n  config: UserConfig,\n  inlineConfig: InlineConfig,\n): Promise<{ configs: UserConfig[]; files?: string[] }> {\n  const normalized = { ...config, ...inlineConfig }\n  const rootCwd = normalized.cwd || process.cwd()\n  let { workspace } = normalized\n  if (!workspace) return { configs: [normalized], files: [] }\n\n  if (workspace === true) {\n    workspace = {}\n  } else if (typeof workspace === 'string' || Array.isArray(workspace)) {\n    workspace = { include: workspace }\n  }\n\n  let {\n    include: packages = 'auto',\n    exclude = DEFAULT_EXCLUDE_WORKSPACE,\n    config: workspaceConfig,\n  } = workspace\n  if (packages === 'auto') {\n    packages = (\n      await glob('**/package.json', {\n        ignore: exclude,\n        cwd: rootCwd,\n        expandDirectories: false,\n      })\n    )\n      .filter((file) => file !== 'package.json') // exclude root package.json\n      .map((file) => slash(path.resolve(rootCwd, file, '..')))\n  } else {\n    packages = (\n      await glob(packages, {\n        ignore: exclude,\n        cwd: rootCwd,\n        onlyDirectories: true,\n        absolute: true,\n        expandDirectories: false,\n      })\n    ).map((file) => slash(path.resolve(file)))\n  }\n\n  if (packages.length === 0) {\n    throw new Error('No workspace packages found, please check your config')\n  }\n\n  if (inlineConfig.filter) {\n    inlineConfig.filter = resolveRegex(inlineConfig.filter)\n    packages = packages.filter((path) => {\n      return typeof inlineConfig.filter === 'string'\n        ? path.includes(inlineConfig.filter)\n        : Array.isArray(inlineConfig.filter)\n          ? inlineConfig.filter.some((filter) => path.includes(filter))\n          : inlineConfig.filter!.test(path)\n    })\n    if (packages.length === 0) {\n      throw new Error('No packages matched the filters')\n    }\n  }\n\n  const files: string[] = []\n  const configs = (\n    await Promise.all(\n      packages.map(async (cwd) => {\n        debug('loading workspace config %s', cwd)\n        const { configs, file } = await loadConfigFile(\n          {\n            ...inlineConfig,\n            config: workspaceConfig,\n            cwd,\n          },\n          cwd,\n        )\n        if (file) {\n          debug('loaded workspace config file %s', file)\n          files.push(file)\n        } else {\n          debug('no workspace config file found in %s', cwd)\n        }\n        return configs.map(\n          (config): UserConfig => ({\n            ...normalized,\n            cwd,\n            ...config,\n          }),\n        )\n      }),\n    )\n  ).flat()\n\n  return { configs, files }\n}\n\nasync function resolveUserConfig(\n  userConfig: UserConfig,\n): Promise<ResolvedConfig> {\n  let {\n    entry,\n    format = ['es'],\n    plugins = [],\n    clean = true,\n    silent = false,\n    logLevel = silent ? 'silent' : 'info',\n    failOnWarn = false,\n    customLogger,\n    treeshake = true,\n    platform = 'node',\n    outDir = 'dist',\n    sourcemap = false,\n    dts,\n    unused = false,\n    watch = false,\n    ignoreWatch,\n    shims = false,\n    skipNodeModulesBundle = false,\n    publint = false,\n    attw = false,\n    fromVite,\n    alias,\n    tsconfig,\n    report = true,\n    target,\n    env = {},\n    copy,\n    publicDir,\n    hash,\n    cwd = process.cwd(),\n    name,\n    workspace,\n    external,\n    noExternal,\n    exports = false,\n    bundle,\n    unbundle = typeof bundle === 'boolean' ? !bundle : false,\n    removeNodeProtocol,\n    nodeProtocol,\n    cjsDefault = true,\n    globImport = true,\n    inlineOnly,\n    fixedExtension = platform === 'node',\n  } = userConfig\n\n  const logger = createLogger(logLevel, { customLogger, failOnWarn })\n\n  if (typeof bundle === 'boolean') {\n    logger.warn('`bundle` option is deprecated. Use `unbundle` instead.')\n  }\n\n  if (removeNodeProtocol && nodeProtocol) {\n    throw new TypeError(\n      '`removeNodeProtocol` is deprecated. Please only use `nodeProtocol` instead.',\n    )\n  }\n\n  // Resolve nodeProtocol option with backward compatibility for removeNodeProtocol\n  nodeProtocol =\n    nodeProtocol ??\n    // `removeNodeProtocol: true` means stripping the `node:` protocol which equals to `nodeProtocol: 'strip'`\n    // `removeNodeProtocol: false` means keeping the `node:` protocol which equals to `nodeProtocol: false` (ignore it)\n    (removeNodeProtocol ? 'strip' : false)\n\n  outDir = path.resolve(cwd, outDir)\n  clean = resolveClean(clean, outDir, cwd)\n\n  const pkg = await readPackageJson(cwd)\n  if (workspace) {\n    name ||= pkg?.name\n  }\n  entry = await resolveEntry(logger, entry, cwd, name)\n  if (dts == null) {\n    dts = !!(pkg?.types || pkg?.typings || hasExportsTypes(pkg))\n  }\n  target = resolveTarget(logger, target, pkg, name)\n  tsconfig = await resolveTsconfig(logger, tsconfig, cwd, name)\n  if (typeof external === 'string') {\n    external = resolveRegex(external)\n  }\n  if (typeof noExternal === 'string') {\n    noExternal = resolveRegex(noExternal)\n  }\n\n  if (publint === true) publint = {}\n  if (attw === true) attw = {}\n  if (exports === true) exports = {}\n\n  if (publicDir) {\n    if (copy) {\n      throw new TypeError(\n        '`publicDir` is deprecated. Cannot be used with `copy`',\n      )\n    } else {\n      logger.warn(\n        `${blue`publicDir`} is deprecated. Use ${blue`copy`} instead.`,\n      )\n    }\n  }\n\n  if (fromVite) {\n    const viteUserConfig = await loadViteConfig(\n      fromVite === true ? 'vite' : fromVite,\n      cwd,\n    )\n    if (viteUserConfig) {\n      const viteAlias = viteUserConfig.resolve?.alias\n\n      if ((Array.isArray as (arg: any) => arg is readonly any[])(viteAlias)) {\n        throw new TypeError(\n          'Unsupported resolve.alias in Vite config. Use object instead of array',\n        )\n      }\n      if (viteAlias) {\n        alias = { ...alias, ...viteAlias }\n      }\n\n      if (viteUserConfig.plugins) {\n        plugins = [viteUserConfig.plugins as any, plugins]\n      }\n    }\n  }\n\n  ignoreWatch = toArray(ignoreWatch).map((ignore) => {\n    ignore = resolveRegex(ignore)\n    if (typeof ignore === 'string') {\n      return path.resolve(cwd, ignore)\n    }\n    return ignore\n  })\n\n  if (noExternal != null && typeof noExternal !== 'function') {\n    const noExternalPatterns = toArray(noExternal)\n    noExternal = (id) => matchPattern(id, noExternalPatterns)\n  }\n  if (inlineOnly != null) {\n    inlineOnly = toArray(inlineOnly)\n  }\n\n  const config: ResolvedConfig = {\n    ...userConfig,\n    entry,\n    plugins,\n    format: normalizeFormat(format),\n    target,\n    outDir,\n    clean,\n    logger,\n    treeshake,\n    platform,\n    sourcemap,\n    dts: dts === true ? {} : dts,\n    report: report === true ? {} : report,\n    unused,\n    watch,\n    ignoreWatch,\n    shims,\n    skipNodeModulesBundle,\n    publint,\n    attw,\n    alias,\n    tsconfig,\n    cwd,\n    env,\n    pkg,\n    copy: publicDir || copy,\n    hash: hash ?? true,\n    name,\n    external,\n    noExternal,\n    exports,\n    unbundle,\n    nodeProtocol,\n    cjsDefault,\n    globImport,\n    inlineOnly,\n    fixedExtension,\n  }\n\n  return config\n}\n\nexport async function mergeUserOptions<T extends object, A extends unknown[]>(\n  defaults: T,\n  user:\n    | T\n    | undefined\n    | null\n    | ((options: T, ...args: A) => Awaitable<T | void | null>),\n  args: A,\n): Promise<T> {\n  const userOutputOptions =\n    typeof user === 'function' ? await user(defaults, ...args) : user\n  return { ...defaults, ...userOutputOptions }\n}\n"}
{"timestamp":1761897884928,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","content":"import path from 'node:path'\nimport process from 'node:process'\nimport { blue } from 'ansis'\nimport Debug from 'debug'\nimport { glob } from 'tinyglobby'\nimport { resolveClean } from '../features/clean.ts'\nimport { resolveEntry } from '../features/entry.ts'\nimport { hasExportsTypes } from '../features/exports.ts'\nimport { resolveTarget } from '../features/target.ts'\nimport { resolveTsconfig } from '../features/tsconfig.ts'\nimport { matchPattern, resolveRegex, slash, toArray } from '../utils/general.ts'\nimport { createLogger } from '../utils/logger.ts'\nimport { normalizeFormat, readPackageJson } from '../utils/package.ts'\nimport type { Awaitable } from '../utils/types.ts'\nimport { loadConfigFile, loadViteConfig } from './config.ts'\nimport type { InlineConfig, ResolvedConfig, UserConfig } from './types.ts'\n\nexport * from './types.ts'\n\nconst debug = Debug('tsdown:options')\n\nconst DEFAULT_EXCLUDE_WORKSPACE = [\n  '**/node_modules/**',\n  '**/dist/**',\n  '**/test?(s)/**',\n  '**/t?(e)mp/**',\n]\n\n// InlineConfig (CLI)\n//  -> loadConfigFile: InlineConfig + UserConfig[]\n//  -> resolveWorkspace: InlineConfig + UserConfig[]\n//  -> UserConfig[]\n//  -> ResolvedConfig[]\n//  -> build\n\n// resolved configs count = 1 (inline config) * root config count * workspace count * sub config count\n\nexport async function resolveConfig(inlineConfig: InlineConfig): Promise<{\n  configs: ResolvedConfig[]\n  files: string[]\n}> {\n  debug('inline config %O', inlineConfig)\n\n  const { configs: rootConfigs, file } = await loadConfigFile(inlineConfig)\n  const files: string[] = []\n  if (file) {\n    files.push(file)\n    debug('loaded root user config file %s', file)\n    debug('root user configs %O', rootConfigs)\n  } else {\n    debug('no root user config file found')\n  }\n\n  const configs: ResolvedConfig[] = (\n    await Promise.all(\n      rootConfigs.map(async (rootConfig): Promise<ResolvedConfig[]> => {\n        const { configs: workspaceConfigs, files: workspaceFiles } =\n          await resolveWorkspace(rootConfig, inlineConfig)\n        if (workspaceFiles) {\n          files.push(...workspaceFiles)\n        }\n        return Promise.all(\n          workspaceConfigs\n            .filter((config) => !config.workspace || config.entry)\n            .map((config) => resolveUserConfig(config)),\n        )\n      }),\n    )\n  ).flat()\n  debug('resolved configs %O', configs)\n  return { configs, files }\n}\n\nasync function resolveWorkspace(\n  config: UserConfig,\n  inlineConfig: InlineConfig,\n): Promise<{ configs: UserConfig[]; files?: string[] }> {\n  const normalized = { ...config, ...inlineConfig }\n  const rootCwd = normalized.cwd || process.cwd()\n  let { workspace } = normalized\n  if (!workspace) return { configs: [normalized], files: [] }\n\n  if (workspace === true) {\n    workspace = {}\n  } else if (typeof workspace === 'string' || Array.isArray(workspace)) {\n    workspace = { include: workspace }\n  }\n\n  let {\n    include: packages = 'auto',\n    exclude = DEFAULT_EXCLUDE_WORKSPACE,\n    config: workspaceConfig,\n  } = workspace\n  if (packages === 'auto') {\n    packages = (\n      await glob('**/package.json', {\n        ignore: exclude,\n        cwd: rootCwd,\n        expandDirectories: false,\n      })\n    )\n      .filter((file) => file !== 'package.json') // exclude root package.json\n      .map((file) => slash(path.resolve(rootCwd, file, '..')))\n  } else {\n    packages = (\n      await glob(packages, {\n        ignore: exclude,\n        cwd: rootCwd,\n        onlyDirectories: true,\n        absolute: true,\n        expandDirectories: false,\n      })\n    ).map((file) => slash(path.resolve(file)))\n  }\n\n  if (packages.length === 0) {\n    throw new Error('No workspace packages found, please check your config')\n  }\n\n  if (inlineConfig.filter) {\n    inlineConfig.filter = resolveRegex(inlineConfig.filter)\n    packages = packages.filter((path) => {\n      return typeof inlineConfig.filter === 'string'\n        ? path.includes(inlineConfig.filter)\n        : Array.isArray(inlineConfig.filter)\n          ? inlineConfig.filter.some((filter) => path.includes(filter))\n          : inlineConfig.filter!.test(path)\n    })\n    if (packages.length === 0) {\n      throw new Error('No packages matched the filters')\n    }\n  }\n\n  const files: string[] = []\n  const configs = (\n    await Promise.all(\n      packages.map(async (cwd) => {\n        debug('loading workspace config %s', cwd)\n        const { configs, file } = await loadConfigFile(\n          {\n            ...inlineConfig,\n            config: workspaceConfig,\n            cwd,\n          },\n          cwd,\n        )\n        if (file) {\n          debug('loaded workspace config file %s', file)\n          files.push(file)\n        } else {\n          debug('no workspace config file found in %s', cwd)\n        }\n        return configs.map(\n          (config): UserConfig => ({\n            ...normalized,\n            cwd,\n            ...config,\n          }),\n        )\n      }),\n    )\n  ).flat()\n\n  return { configs, files }\n}\n\nasync function resolveUserConfig(\n  userConfig: UserConfig,\n): Promise<ResolvedConfig> {\n  let {\n    entry,\n    format = ['es'],\n    plugins = [],\n    clean = true,\n    silent = false,\n    logLevel = silent ? 'silent' : 'info',\n    failOnWarn = false,\n    customLogger,\n    treeshake = true,\n    platform = 'node',\n    outDir = 'dist',\n    sourcemap = false,\n    dts,\n    unused = false,\n    watch = false,\n    ignoreWatch,\n    shims = false,\n    skipNodeModulesBundle = false,\n    publint = false,\n    attw = false,\n    fromVite,\n    alias,\n    tsconfig,\n    report = true,\n    target,\n    env = {},\n    copy,\n    publicDir,\n    hash,\n    cwd = process.cwd(),\n    name,\n    workspace,\n    external,\n    noExternal,\n    exports = false,\n    bundle,\n    unbundle = typeof bundle === 'boolean' ? !bundle : false,\n    removeNodeProtocol,\n    nodeProtocol,\n    cjsDefault = true,\n    globImport = true,\n    inlineOnly,\n    fixedExtension = platform === 'node',\n  } = userConfig\n\n  const logger = createLogger(logLevel, { customLogger, failOnWarn })\n\n  if (typeof bundle === 'boolean') {\n    logger.warn('`bundle` option is deprecated. Use `unbundle` instead.')\n  }\n\n  if (removeNodeProtocol && nodeProtocol) {\n    throw new TypeError(\n      '`removeNodeProtocol` is deprecated. Please only use `nodeProtocol` instead.',\n    )\n  }\n\n  // Resolve nodeProtocol option with backward compatibility for removeNodeProtocol\n  nodeProtocol =\n    nodeProtocol ??\n    // `removeNodeProtocol: true` means stripping the `node:` protocol which equals to `nodeProtocol: 'strip'`\n    // `removeNodeProtocol: false` means keeping the `node:` protocol which equals to `nodeProtocol: false` (ignore it)\n    (removeNodeProtocol ? 'strip' : false)\n\n  outDir = path.resolve(cwd, outDir)\n  clean = resolveClean(clean, outDir, cwd)\n\n  const pkg = await readPackageJson(cwd)\n  if (workspace) {\n    name ||= pkg?.name\n  }\n  entry = await resolveEntry(logger, entry, cwd, name)\n  if (dts == null) {\n    dts = !!(pkg?.types || pkg?.typings || hasExportsTypes(pkg))\n  }\n  target = resolveTarget(logger, target, pkg, name)\n  tsconfig = await resolveTsconfig(logger, tsconfig, cwd, name)\n  if (typeof external === 'string') {\n    external = resolveRegex(external)\n  }\n  if (typeof noExternal === 'string') {\n    noExternal = resolveRegex(noExternal)\n  }\n\n  if (publint === true) publint = {}\n  if (attw === true) attw = {}\n  if (exports === true) exports = {}\n\n  if (publicDir) {\n    if (copy) {\n      throw new TypeError(\n        '`publicDir` is deprecated. Cannot be used with `copy`',\n      )\n    } else {\n      logger.warn(\n        `${blue`publicDir`} is deprecated. Use ${blue`copy`} instead.`,\n      )\n    }\n  }\n\n  if (fromVite) {\n    const viteUserConfig = await loadViteConfig(\n      fromVite === true ? 'vite' : fromVite,\n      cwd,\n    )\n    if (viteUserConfig) {\n      const viteAlias = viteUserConfig.resolve?.alias\n\n      if ((Array.isArray as (arg: any) => arg is readonly any[])(viteAlias)) {\n        throw new TypeError(\n          'Unsupported resolve.alias in Vite config. Use object instead of array',\n        )\n      }\n      if (viteAlias) {\n        alias = { ...alias, ...viteAlias }\n      }\n\n      if (viteUserConfig.plugins) {\n        plugins = [viteUserConfig.plugins as any, plugins]\n      }\n    }\n  }\n\n  ignoreWatch = toArray(ignoreWatch).map((ignore) => {\n    ignore = resolveRegex(ignore)\n    if (typeof ignore === 'string') {\n      return path.resolve(cwd, ignore)\n    }\n    return ignore\n  })\n\n  if (noExternal != null && typeof noExternal !== 'function') {\n    const noExternalPatterns = toArray(noExternal)\n    noExternal = (id) => matchPattern(id, noExternalPatterns)\n  }\n  if (inlineOnly != null) {\n    inlineOnly = toArray(inlineOnly)\n  }\n\n  const config: ResolvedConfig = {\n    ...userConfig,\n    entry,\n    plugins,\n    format: normalizeFormat(format),\n    target,\n    outDir,\n    clean,\n    logger,\n    treeshake,\n    platform,\n    sourcemap,\n    dts: dts === true ? {} : dts,\n    report: report === true ? {} : report,\n    unused,\n    watch,\n    ignoreWatch,\n    shims,\n    skipNodeModulesBundle,\n    publint,\n    attw,\n    alias,\n    tsconfig,\n    cwd,\n    env,\n    pkg,\n    copy: publicDir || copy,\n    hash: hash ?? true,\n    name,\n    external,\n    noExternal,\n    exports,\n    unbundle,\n    nodeProtocol,\n    cjsDefault,\n    globImport,\n    inlineOnly,\n    fixedExtension,\n  }\n\n  return config\n}\n\nexport async function mergeUserOptions<T extends object, A extends unknown[]>(\n  defaults: T,\n  user:\n    | T\n    | undefined\n    | null\n    | ((options: T, ...args: A) => Awaitable<T | void | null>),\n  args: A,\n): Promise<T> {\n  const userOutputOptions =\n    typeof user === 'function' ? await user(defaults, ...args) : user\n  return { ...defaults, ...userOutputOptions }\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"924b74c8-748c-441d-90c3-e571901a6a13","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884930,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/utils/logger.ts","module_request":"ansis","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"aa469c9a-85d2-442a-89bd-c81859a21ccf","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884930,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"aa469c9a-85d2-442a-89bd-c81859a21ccf","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884930,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.ts","content":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"38e8b12f-90be-477d-ab46-ee7f06f25141","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884930,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/utils/logger.ts","module_request":"ansis","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"bb66507e-9437-46aa-8a47-6d5fc259216f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884930,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/utils/logger.ts","module_request":"./general.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"db8b4c06-4b9c-4227-9473-906f2bb2f4ce","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884930,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"db8b4c06-4b9c-4227-9473-906f2bb2f4ce","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884931,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.ts","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"c990574c-c930-43fa-8dcb-71938fb32238","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884931,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/external.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"cb35fe1c-f789-473f-88cc-441e16ffb8dd","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884931,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"cb35fe1c-f789-473f-88cc-441e16ffb8dd","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884931,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","content":"import { Buffer } from 'node:buffer'\nimport path from 'node:path'\nimport { promisify } from 'node:util'\nimport { brotliCompress, gzip } from 'node:zlib'\nimport { bold, dim, green } from 'ansis'\nimport Debug from 'debug'\nimport { RE_DTS } from 'rolldown-plugin-dts/filename'\nimport { formatBytes } from '../utils/format.ts'\nimport { noop } from '../utils/general.ts'\nimport { prettyFormat, prettyName, type Logger } from '../utils/logger.ts'\nimport type { OutputAsset, OutputChunk, Plugin } from 'rolldown'\n\nconst debug = Debug('tsdown:report')\nconst brotliCompressAsync = promisify(brotliCompress)\nconst gzipAsync = promisify(gzip)\n\ninterface SizeInfo {\n  filename: string\n  dts: boolean\n  isEntry: boolean\n  raw: number\n  gzip: number\n  brotli: number\n  rawText: string\n  gzipText?: string\n  brotliText?: string\n}\n\nexport interface ReportOptions {\n  /**\n   * Enable/disable gzip-compressed size reporting.\n   * Compressing large output files can be slow, so disabling this may increase build performance for large projects.\n   *\n   * @default true\n   */\n  gzip?: boolean\n\n  /**\n   * Enable/disable brotli-compressed size reporting.\n   * Compressing large output files can be slow, so disabling this may increase build performance for large projects.\n   *\n   * @default false\n   */\n  brotli?: boolean\n\n  /**\n   * Skip reporting compressed size for files larger than this size.\n   * @default 1_000_000 // 1MB\n   */\n  maxCompressSize?: number\n}\n\nconst defaultOptions = {\n  gzip: true,\n  brotli: false,\n  maxCompressSize: 1_000_000,\n}\n\nexport function ReportPlugin(\n  userOptions: ReportOptions,\n  logger: Logger,\n  cwd: string,\n  cjsDts?: boolean,\n  name?: string,\n  isMultiFormat?: boolean,\n): Plugin {\n  const options = {\n    ...defaultOptions,\n    ...userOptions,\n  }\n\n  return {\n    name: 'tsdown:report',\n    async writeBundle(outputOptions, bundle) {\n      const outDir = path.relative(\n        cwd,\n        outputOptions.file\n          ? path.resolve(cwd, outputOptions.file, '..')\n          : path.resolve(cwd, outputOptions.dir!),\n      )\n\n      const sizes: SizeInfo[] = []\n      for (const chunk of Object.values(bundle)) {\n        const size = await calcSize(options, chunk)\n        sizes.push(size)\n      }\n\n      const filenameLength = Math.max(\n        ...sizes.map((size) => size.filename.length),\n      )\n\n      // padding rawText, gzipText, brotliText to the same length\n      const rawTextLength = Math.max(\n        ...sizes.map((size) => size.rawText.length),\n      )\n      const gzipTextLength = Math.max(\n        ...sizes.map((size) =>\n          size.gzipText == null ? 0 : size.gzipText.length,\n        ),\n      )\n      const brotliTextLength = Math.max(\n        ...sizes.map((size) =>\n          size.brotliText == null ? 0 : size.brotliText.length,\n        ),\n      )\n\n      let totalRaw = 0\n      for (const size of sizes) {\n        size.rawText = size.rawText.padStart(rawTextLength)\n        size.gzipText = size.gzipText?.padStart(gzipTextLength)\n        size.brotliText = size.brotliText?.padStart(brotliTextLength)\n        totalRaw += size.raw\n      }\n\n      // sort\n      sizes.sort((a, b) => {\n        // dts last\n        if (a.dts !== b.dts) return a.dts ? 1 : -1\n        // entry first\n        if (a.isEntry !== b.isEntry) return a.isEntry ? -1 : 1\n        // otherwise, sort by raw size descending\n        return b.raw - a.raw\n      })\n\n      const nameLabel = prettyName(name)\n      const formatLabel =\n        isMultiFormat && prettyFormat(cjsDts ? 'cjs' : outputOptions.format)\n\n      for (const size of sizes) {\n        const filenameColor = size.dts ? green : noop\n\n        logger.info(\n          nameLabel,\n          formatLabel,\n          dim(outDir + path.sep) +\n            filenameColor((size.isEntry ? bold : noop)(size.filename)),\n          ` `.repeat(filenameLength - size.filename.length),\n          dim(size.rawText),\n          options.gzip && size.gzipText && dim`│ gzip: ${size.gzipText}`,\n          options.brotli &&\n            size.brotliText &&\n            dim`│ brotli: ${size.brotliText}`,\n        )\n      }\n\n      const totalSizeText = formatBytes(totalRaw)\n      logger.info(\n        nameLabel,\n        formatLabel,\n        `${sizes.length} files, total: ${totalSizeText}`,\n      )\n    },\n  }\n}\n\nasync function calcSize(\n  options: Required<ReportOptions>,\n  chunk: OutputAsset | OutputChunk,\n): Promise<SizeInfo> {\n  debug(`Calculating size for`, chunk.fileName)\n\n  const content = chunk.type === 'chunk' ? chunk.code : chunk.source\n\n  const raw = Buffer.byteLength(content, 'utf8')\n  debug('[size]', chunk.fileName, raw)\n\n  let gzip: number = Infinity\n  let brotli: number = Infinity\n  if (raw > options.maxCompressSize) {\n    debug(chunk.fileName, 'file size exceeds limit, skip gzip/brotli')\n  } else {\n    if (options.gzip) {\n      gzip = (await gzipAsync(content)).length\n      debug('[gzip]', chunk.fileName, gzip)\n    }\n    if (options.brotli) {\n      brotli = (await brotliCompressAsync(content)).length\n      debug('[brotli]', chunk.fileName, brotli)\n    }\n  }\n\n  return {\n    filename: chunk.fileName,\n    dts: RE_DTS.test(chunk.fileName),\n    isEntry: chunk.type === 'chunk' && chunk.isEntry,\n    raw,\n    rawText: formatBytes(raw)!,\n    gzip,\n    gzipText: formatBytes(gzip),\n    brotli,\n    brotliText: formatBytes(brotli),\n  }\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"ac4b2fa8-a77d-4c2f-a113-44c4be10820c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884932,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/external.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"451a9c4d-b72f-4466-9d6a-78965f504664","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884932,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/exports.ts","plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"21e0f27f-293b-495e-91e4-3c8b59264330","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884932,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/external.ts","module_request":"ansis","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"c9cdc284-47eb-4af8-a316-2eb0f25a80e6","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884932,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/exports.ts","content":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"21e0f27f-293b-495e-91e4-3c8b59264330","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884932,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"c9cdc284-47eb-4af8-a316-2eb0f25a80e6","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884933,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/external.ts","module_request":"ansis","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"deab184c-d51f-4921-a67d-992a7413e91f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884933,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/external.ts","module_request":"debug","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"145e7c3c-0ce1-4036-9455-5c560f29087b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884933,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"145e7c3c-0ce1-4036-9455-5c560f29087b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884933,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/external.ts","module_request":"debug","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"4abaae6b-e7e2-4641-ba7a-c373e3389308","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884933,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/watch.ts","plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"cd8ed2bc-63af-4aab-a096-3d81d0d6a5ac","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884933,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/external.ts","module_request":"rolldown-plugin-dts/filename","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"33aae29d-3dbc-4b16-a4f6-ce97b5189fa3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884934,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"33aae29d-3dbc-4b16-a4f6-ce97b5189fa3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884934,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/external.ts","module_request":"rolldown-plugin-dts/filename","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"956dadd5-b9ae-49e8-8951-ec6f4e2fca09","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884934,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.ts","content":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"c990574c-c930-43fa-8dcb-71938fb32238","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884934,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/external.ts","module_request":"../index.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"b0b19611-6b5e-4d89-8b89-ae0c3939cb7a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884934,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"b0b19611-6b5e-4d89-8b89-ae0c3939cb7a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884934,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/external.ts","module_request":"../index.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"4fde69d1-a900-4866-8cb5-ff9b0f41280a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884934,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/copy.ts","content":"import path from 'node:path'\nimport { fsCopy } from '../utils/fs.ts'\nimport { toArray } from '../utils/general.ts'\nimport type { ResolvedConfig } from '../config/index.ts'\nimport type { Arrayable, Awaitable } from '../utils/types.ts'\n\nexport interface CopyEntry {\n  from: string\n  to: string\n}\nexport type CopyOptions = Arrayable<string | CopyEntry>\nexport type CopyOptionsFn = (options: ResolvedConfig) => Awaitable<CopyOptions>\n\nexport async function copy(options: ResolvedConfig): Promise<void> {\n  if (!options.copy) return\n\n  const copy: CopyOptions =\n    typeof options.copy === 'function'\n      ? await options.copy(options)\n      : options.copy\n\n  await Promise.all(\n    toArray(copy).map((dir) => {\n      const from = typeof dir === 'string' ? dir : dir.from\n      const to =\n        typeof dir === 'string'\n          ? path.resolve(options.outDir, path.basename(from))\n          : dir.to\n      return cp(options.cwd, from, to)\n    }),\n  )\n}\n\nfunction cp(cwd: string, from: string, to: string): Promise<void> {\n  return fsCopy(path.resolve(cwd, from), path.resolve(cwd, to))\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"063fd539-9c43-4f77-80aa-b8f3a81db6c7","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884935,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/external.ts","module_request":"../utils/general.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"4035443d-0817-479c-8790-78bba3aa97b3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884935,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"4035443d-0817-479c-8790-78bba3aa97b3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884935,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/external.ts","module_request":"../utils/general.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"0408ba18-a587-4530-9c1d-4b81012f6cf5","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884935,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/cli.ts","content":"import process from 'node:process'\nimport { dim } from 'ansis'\nimport { cac } from 'cac'\nimport debug from 'debug'\nimport { VERSION as rolldownVersion } from 'rolldown'\nimport pkg from '../package.json' with { type: 'json' }\nimport { resolveComma, toArray } from './utils/general.ts'\nimport { globalLogger } from './utils/logger.ts'\nimport type { UserConfig } from './config.ts'\n\nconst cli = cac('tsdown')\ncli.help().version(pkg.version)\n\ncli\n  .command('[...files]', 'Bundle files', {\n    ignoreOptionDefaultValue: true,\n    allowUnknownOptions: true,\n  })\n  .option('-c, --config <filename>', 'Use a custom config file')\n  .option(\n    '--config-loader <loader>',\n    'Config loader to use: auto, native, unconfig',\n    { default: 'auto' },\n  )\n  .option('--no-config', 'Disable config file')\n  .option('-f, --format <format>', 'Bundle format: esm, cjs, iife, umd', {\n    default: 'esm',\n  })\n  .option('--clean', 'Clean output directory, --no-clean to disable')\n  .option('--external <module>', 'Mark dependencies as external')\n  .option('--minify', 'Minify output')\n  .option('--debug [feat]', 'Show debug logs')\n  .option('--target <target>', 'Bundle target, e.g \"es2015\", \"esnext\"')\n  .option('-l, --logLevel <level>', 'Set log level: info, warn, error, silent')\n  .option('--fail-on-warn', 'Fail on warnings', { default: true })\n  .option('-d, --out-dir <dir>', 'Output directory', { default: 'dist' })\n  .option('--treeshake', 'Tree-shake bundle', { default: true })\n  .option('--sourcemap', 'Generate source map', { default: false })\n  .option('--shims', 'Enable cjs and esm shims ', { default: false })\n  .option('--platform <platform>', 'Target platform', {\n    default: 'node',\n  })\n  .option('--dts', 'Generate dts files')\n  .option('--publint', 'Enable publint', { default: false })\n  .option('--attw', 'Enable Are the types wrong integration', {\n    default: false,\n  })\n  .option('--unused', 'Enable unused dependencies check', { default: false })\n  .option('-w, --watch [path]', 'Watch mode')\n  .option('--ignore-watch <path>', 'Ignore custom paths in watch mode')\n  .option('--from-vite [vitest]', 'Reuse config from Vite or Vitest')\n  .option('--report', 'Size report', { default: true })\n  .option('--env.* <value>', 'Define compile-time env variables')\n  .option('--on-success <command>', 'Command to run on success')\n  .option('--copy <dir>', 'Copy files to output dir')\n  .option('--public-dir <dir>', 'Alias for --copy, deprecated')\n  .option('--tsconfig <tsconfig>', 'Set tsconfig path')\n  .option('--unbundle', 'Unbundle mode')\n  .option('-W, --workspace [dir]', 'Enable workspace mode')\n  .option(\n    '-F, --filter <pattern>',\n    'Filter workspace packages, e.g. /regex/ or substring',\n  )\n  .option(\n    '--exports',\n    'Generate export-related metadata for package.json (experimental)',\n  )\n  .action(async (input: string[], flags: UserConfig) => {\n    globalLogger.level = flags.logLevel || (flags.silent ? 'error' : 'info')\n    globalLogger.info(\n      `tsdown ${dim`v${pkg.version}`} powered by rolldown ${dim`v${rolldownVersion}`}`,\n    )\n    const { build } = await import('./index.ts')\n    if (input.length > 0) flags.entry = input\n    await build(flags)\n  })\n\ncli\n  .command('migrate', 'Migrate from tsup to tsdown')\n  .option('-c, --cwd <dir>', 'Working directory')\n  .option('-d, --dry-run', 'Dry run')\n  .action(async (args) => {\n    const { migrate } = await import('./migrate.ts')\n    await migrate(args)\n  })\n\nexport async function runCLI(): Promise<void> {\n  cli.parse(process.argv, { run: false })\n\n  if (cli.options.debug) {\n    let namespace: string\n    if (cli.options.debug === true) {\n      namespace = 'tsdown:*'\n    } else {\n      // support debugging multiple flags with comma-separated list\n      namespace = resolveComma(toArray(cli.options.debug))\n        .map((v) => `tsdown:${v}`)\n        .join(',')\n    }\n\n    const enabled = debug.disable()\n    if (enabled) namespace += `,${enabled}`\n\n    debug.enable(namespace)\n    debug('tsdown:debug')('Debugging enabled', namespace)\n  }\n\n  try {\n    await cli.runMatchedCommand()\n  } catch (error) {\n    globalLogger.error(error)\n    process.exit(1)\n  }\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"b879d675-e856-4fdc-97a5-c26d387620af","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884936,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/cli.ts","content":"import process from 'node:process'\nimport { dim } from 'ansis'\nimport { cac } from 'cac'\nimport debug from 'debug'\nimport { VERSION as rolldownVersion } from 'rolldown'\nimport pkg from '../package.json' with { type: 'json' }\nimport { resolveComma, toArray } from './utils/general.ts'\nimport { globalLogger } from './utils/logger.ts'\nimport type { UserConfig } from './config.ts'\n\nconst cli = cac('tsdown')\ncli.help().version(pkg.version)\n\ncli\n  .command('[...files]', 'Bundle files', {\n    ignoreOptionDefaultValue: true,\n    allowUnknownOptions: true,\n  })\n  .option('-c, --config <filename>', 'Use a custom config file')\n  .option(\n    '--config-loader <loader>',\n    'Config loader to use: auto, native, unconfig',\n    { default: 'auto' },\n  )\n  .option('--no-config', 'Disable config file')\n  .option('-f, --format <format>', 'Bundle format: esm, cjs, iife, umd', {\n    default: 'esm',\n  })\n  .option('--clean', 'Clean output directory, --no-clean to disable')\n  .option('--external <module>', 'Mark dependencies as external')\n  .option('--minify', 'Minify output')\n  .option('--debug [feat]', 'Show debug logs')\n  .option('--target <target>', 'Bundle target, e.g \"es2015\", \"esnext\"')\n  .option('-l, --logLevel <level>', 'Set log level: info, warn, error, silent')\n  .option('--fail-on-warn', 'Fail on warnings', { default: true })\n  .option('-d, --out-dir <dir>', 'Output directory', { default: 'dist' })\n  .option('--treeshake', 'Tree-shake bundle', { default: true })\n  .option('--sourcemap', 'Generate source map', { default: false })\n  .option('--shims', 'Enable cjs and esm shims ', { default: false })\n  .option('--platform <platform>', 'Target platform', {\n    default: 'node',\n  })\n  .option('--dts', 'Generate dts files')\n  .option('--publint', 'Enable publint', { default: false })\n  .option('--attw', 'Enable Are the types wrong integration', {\n    default: false,\n  })\n  .option('--unused', 'Enable unused dependencies check', { default: false })\n  .option('-w, --watch [path]', 'Watch mode')\n  .option('--ignore-watch <path>', 'Ignore custom paths in watch mode')\n  .option('--from-vite [vitest]', 'Reuse config from Vite or Vitest')\n  .option('--report', 'Size report', { default: true })\n  .option('--env.* <value>', 'Define compile-time env variables')\n  .option('--on-success <command>', 'Command to run on success')\n  .option('--copy <dir>', 'Copy files to output dir')\n  .option('--public-dir <dir>', 'Alias for --copy, deprecated')\n  .option('--tsconfig <tsconfig>', 'Set tsconfig path')\n  .option('--unbundle', 'Unbundle mode')\n  .option('-W, --workspace [dir]', 'Enable workspace mode')\n  .option(\n    '-F, --filter <pattern>',\n    'Filter workspace packages, e.g. /regex/ or substring',\n  )\n  .option(\n    '--exports',\n    'Generate export-related metadata for package.json (experimental)',\n  )\n  .action(async (input: string[], flags: UserConfig) => {\n    globalLogger.level = flags.logLevel || (flags.silent ? 'error' : 'info')\n    globalLogger.info(\n      `tsdown ${dim`v${pkg.version}`} powered by rolldown ${dim`v${rolldownVersion}`}`,\n    )\n    const { build } = await import('./index.ts')\n    if (input.length > 0) flags.entry = input\n    await build(flags)\n  })\n\ncli\n  .command('migrate', 'Migrate from tsup to tsdown')\n  .option('-c, --cwd <dir>', 'Working directory')\n  .option('-d, --dry-run', 'Dry run')\n  .action(async (args) => {\n    const { migrate } = await import('./migrate.ts')\n    await migrate(args)\n  })\n\nexport async function runCLI(): Promise<void> {\n  cli.parse(process.argv, { run: false })\n\n  if (cli.options.debug) {\n    let namespace: string\n    if (cli.options.debug === true) {\n      namespace = 'tsdown:*'\n    } else {\n      // support debugging multiple flags with comma-separated list\n      namespace = resolveComma(toArray(cli.options.debug))\n        .map((v) => `tsdown:${v}`)\n        .join(',')\n    }\n\n    const enabled = debug.disable()\n    if (enabled) namespace += `,${enabled}`\n\n    debug.enable(namespace)\n    debug('tsdown:debug')('Debugging enabled', namespace)\n  }\n\n  try {\n    await cli.runMatchedCommand()\n  } catch (error) {\n    globalLogger.error(error)\n    process.exit(1)\n  }\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"6dc28e46-c21c-496d-9cd5-59c78b6abc8b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884936,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/cli.ts","content":"import process from 'node:process'\nimport { dim } from 'ansis'\nimport { cac } from 'cac'\nimport debug from 'debug'\nimport { VERSION as rolldownVersion } from 'rolldown'\nimport pkg from '../package.json' with { type: 'json' }\nimport { resolveComma, toArray } from './utils/general.ts'\nimport { globalLogger } from './utils/logger.ts'\nimport type { UserConfig } from './config.ts'\n\nconst cli = cac('tsdown')\ncli.help().version(pkg.version)\n\ncli\n  .command('[...files]', 'Bundle files', {\n    ignoreOptionDefaultValue: true,\n    allowUnknownOptions: true,\n  })\n  .option('-c, --config <filename>', 'Use a custom config file')\n  .option(\n    '--config-loader <loader>',\n    'Config loader to use: auto, native, unconfig',\n    { default: 'auto' },\n  )\n  .option('--no-config', 'Disable config file')\n  .option('-f, --format <format>', 'Bundle format: esm, cjs, iife, umd', {\n    default: 'esm',\n  })\n  .option('--clean', 'Clean output directory, --no-clean to disable')\n  .option('--external <module>', 'Mark dependencies as external')\n  .option('--minify', 'Minify output')\n  .option('--debug [feat]', 'Show debug logs')\n  .option('--target <target>', 'Bundle target, e.g \"es2015\", \"esnext\"')\n  .option('-l, --logLevel <level>', 'Set log level: info, warn, error, silent')\n  .option('--fail-on-warn', 'Fail on warnings', { default: true })\n  .option('-d, --out-dir <dir>', 'Output directory', { default: 'dist' })\n  .option('--treeshake', 'Tree-shake bundle', { default: true })\n  .option('--sourcemap', 'Generate source map', { default: false })\n  .option('--shims', 'Enable cjs and esm shims ', { default: false })\n  .option('--platform <platform>', 'Target platform', {\n    default: 'node',\n  })\n  .option('--dts', 'Generate dts files')\n  .option('--publint', 'Enable publint', { default: false })\n  .option('--attw', 'Enable Are the types wrong integration', {\n    default: false,\n  })\n  .option('--unused', 'Enable unused dependencies check', { default: false })\n  .option('-w, --watch [path]', 'Watch mode')\n  .option('--ignore-watch <path>', 'Ignore custom paths in watch mode')\n  .option('--from-vite [vitest]', 'Reuse config from Vite or Vitest')\n  .option('--report', 'Size report', { default: true })\n  .option('--env.* <value>', 'Define compile-time env variables')\n  .option('--on-success <command>', 'Command to run on success')\n  .option('--copy <dir>', 'Copy files to output dir')\n  .option('--public-dir <dir>', 'Alias for --copy, deprecated')\n  .option('--tsconfig <tsconfig>', 'Set tsconfig path')\n  .option('--unbundle', 'Unbundle mode')\n  .option('-W, --workspace [dir]', 'Enable workspace mode')\n  .option(\n    '-F, --filter <pattern>',\n    'Filter workspace packages, e.g. /regex/ or substring',\n  )\n  .option(\n    '--exports',\n    'Generate export-related metadata for package.json (experimental)',\n  )\n  .action(async (input: string[], flags: UserConfig) => {\n    globalLogger.level = flags.logLevel || (flags.silent ? 'error' : 'info')\n    globalLogger.info(\n      `tsdown ${dim`v${pkg.version}`} powered by rolldown ${dim`v${rolldownVersion}`}`,\n    )\n    const { build } = await import('./index.ts')\n    if (input.length > 0) flags.entry = input\n    await build(flags)\n  })\n\ncli\n  .command('migrate', 'Migrate from tsup to tsdown')\n  .option('-c, --cwd <dir>', 'Working directory')\n  .option('-d, --dry-run', 'Dry run')\n  .action(async (args) => {\n    const { migrate } = await import('./migrate.ts')\n    await migrate(args)\n  })\n\nexport async function runCLI(): Promise<void> {\n  cli.parse(process.argv, { run: false })\n\n  if (cli.options.debug) {\n    let namespace: string\n    if (cli.options.debug === true) {\n      namespace = 'tsdown:*'\n    } else {\n      // support debugging multiple flags with comma-separated list\n      namespace = resolveComma(toArray(cli.options.debug))\n        .map((v) => `tsdown:${v}`)\n        .join(',')\n    }\n\n    const enabled = debug.disable()\n    if (enabled) namespace += `,${enabled}`\n\n    debug.enable(namespace)\n    debug('tsdown:debug')('Debugging enabled', namespace)\n  }\n\n  try {\n    await cli.runMatchedCommand()\n  } catch (error) {\n    globalLogger.error(error)\n    process.exit(1)\n  }\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"6dc28e46-c21c-496d-9cd5-59c78b6abc8b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884937,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/cli.ts","content":"import process from 'node:process'\nimport { dim } from 'ansis'\nimport { cac } from 'cac'\nimport debug from 'debug'\nimport { VERSION as rolldownVersion } from 'rolldown'\nimport pkg from '../package.json' with { type: 'json' }\nimport { resolveComma, toArray } from './utils/general.ts'\nimport { globalLogger } from './utils/logger.ts'\nimport type { UserConfig } from './config.ts'\n\nconst cli = cac('tsdown')\ncli.help().version(pkg.version)\n\ncli\n  .command('[...files]', 'Bundle files', {\n    ignoreOptionDefaultValue: true,\n    allowUnknownOptions: true,\n  })\n  .option('-c, --config <filename>', 'Use a custom config file')\n  .option(\n    '--config-loader <loader>',\n    'Config loader to use: auto, native, unconfig',\n    { default: 'auto' },\n  )\n  .option('--no-config', 'Disable config file')\n  .option('-f, --format <format>', 'Bundle format: esm, cjs, iife, umd', {\n    default: 'esm',\n  })\n  .option('--clean', 'Clean output directory, --no-clean to disable')\n  .option('--external <module>', 'Mark dependencies as external')\n  .option('--minify', 'Minify output')\n  .option('--debug [feat]', 'Show debug logs')\n  .option('--target <target>', 'Bundle target, e.g \"es2015\", \"esnext\"')\n  .option('-l, --logLevel <level>', 'Set log level: info, warn, error, silent')\n  .option('--fail-on-warn', 'Fail on warnings', { default: true })\n  .option('-d, --out-dir <dir>', 'Output directory', { default: 'dist' })\n  .option('--treeshake', 'Tree-shake bundle', { default: true })\n  .option('--sourcemap', 'Generate source map', { default: false })\n  .option('--shims', 'Enable cjs and esm shims ', { default: false })\n  .option('--platform <platform>', 'Target platform', {\n    default: 'node',\n  })\n  .option('--dts', 'Generate dts files')\n  .option('--publint', 'Enable publint', { default: false })\n  .option('--attw', 'Enable Are the types wrong integration', {\n    default: false,\n  })\n  .option('--unused', 'Enable unused dependencies check', { default: false })\n  .option('-w, --watch [path]', 'Watch mode')\n  .option('--ignore-watch <path>', 'Ignore custom paths in watch mode')\n  .option('--from-vite [vitest]', 'Reuse config from Vite or Vitest')\n  .option('--report', 'Size report', { default: true })\n  .option('--env.* <value>', 'Define compile-time env variables')\n  .option('--on-success <command>', 'Command to run on success')\n  .option('--copy <dir>', 'Copy files to output dir')\n  .option('--public-dir <dir>', 'Alias for --copy, deprecated')\n  .option('--tsconfig <tsconfig>', 'Set tsconfig path')\n  .option('--unbundle', 'Unbundle mode')\n  .option('-W, --workspace [dir]', 'Enable workspace mode')\n  .option(\n    '-F, --filter <pattern>',\n    'Filter workspace packages, e.g. /regex/ or substring',\n  )\n  .option(\n    '--exports',\n    'Generate export-related metadata for package.json (experimental)',\n  )\n  .action(async (input: string[], flags: UserConfig) => {\n    globalLogger.level = flags.logLevel || (flags.silent ? 'error' : 'info')\n    globalLogger.info(\n      `tsdown ${dim`v${pkg.version}`} powered by rolldown ${dim`v${rolldownVersion}`}`,\n    )\n    const { build } = await import('./index.ts')\n    if (input.length > 0) flags.entry = input\n    await build(flags)\n  })\n\ncli\n  .command('migrate', 'Migrate from tsup to tsdown')\n  .option('-c, --cwd <dir>', 'Working directory')\n  .option('-d, --dry-run', 'Dry run')\n  .action(async (args) => {\n    const { migrate } = await import('./migrate.ts')\n    await migrate(args)\n  })\n\nexport async function runCLI(): Promise<void> {\n  cli.parse(process.argv, { run: false })\n\n  if (cli.options.debug) {\n    let namespace: string\n    if (cli.options.debug === true) {\n      namespace = 'tsdown:*'\n    } else {\n      // support debugging multiple flags with comma-separated list\n      namespace = resolveComma(toArray(cli.options.debug))\n        .map((v) => `tsdown:${v}`)\n        .join(',')\n    }\n\n    const enabled = debug.disable()\n    if (enabled) namespace += `,${enabled}`\n\n    debug.enable(namespace)\n    debug('tsdown:debug')('Debugging enabled', namespace)\n  }\n\n  try {\n    await cli.runMatchedCommand()\n  } catch (error) {\n    globalLogger.error(error)\n    process.exit(1)\n  }\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"316ab119-1d13-4424-a811-0553070fd129","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884937,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","module_request":"node:buffer","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"c91d6a2f-168c-44f2-b2fe-3d7a73abe5a3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884937,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","content":"import path from 'node:path'\nimport process from 'node:process'\nimport { blue } from 'ansis'\nimport Debug from 'debug'\nimport { glob } from 'tinyglobby'\nimport { resolveClean } from '../features/clean.ts'\nimport { resolveEntry } from '../features/entry.ts'\nimport { hasExportsTypes } from '../features/exports.ts'\nimport { resolveTarget } from '../features/target.ts'\nimport { resolveTsconfig } from '../features/tsconfig.ts'\nimport { matchPattern, resolveRegex, slash, toArray } from '../utils/general.ts'\nimport { createLogger } from '../utils/logger.ts'\nimport { normalizeFormat, readPackageJson } from '../utils/package.ts'\nimport type { Awaitable } from '../utils/types.ts'\nimport { loadConfigFile, loadViteConfig } from './config.ts'\nimport type { InlineConfig, ResolvedConfig, UserConfig } from './types.ts'\n\nexport * from './types.ts'\n\nconst debug = Debug('tsdown:options')\n\nconst DEFAULT_EXCLUDE_WORKSPACE = [\n  '**/node_modules/**',\n  '**/dist/**',\n  '**/test?(s)/**',\n  '**/t?(e)mp/**',\n]\n\n// InlineConfig (CLI)\n//  -> loadConfigFile: InlineConfig + UserConfig[]\n//  -> resolveWorkspace: InlineConfig + UserConfig[]\n//  -> UserConfig[]\n//  -> ResolvedConfig[]\n//  -> build\n\n// resolved configs count = 1 (inline config) * root config count * workspace count * sub config count\n\nexport async function resolveConfig(inlineConfig: InlineConfig): Promise<{\n  configs: ResolvedConfig[]\n  files: string[]\n}> {\n  debug('inline config %O', inlineConfig)\n\n  const { configs: rootConfigs, file } = await loadConfigFile(inlineConfig)\n  const files: string[] = []\n  if (file) {\n    files.push(file)\n    debug('loaded root user config file %s', file)\n    debug('root user configs %O', rootConfigs)\n  } else {\n    debug('no root user config file found')\n  }\n\n  const configs: ResolvedConfig[] = (\n    await Promise.all(\n      rootConfigs.map(async (rootConfig): Promise<ResolvedConfig[]> => {\n        const { configs: workspaceConfigs, files: workspaceFiles } =\n          await resolveWorkspace(rootConfig, inlineConfig)\n        if (workspaceFiles) {\n          files.push(...workspaceFiles)\n        }\n        return Promise.all(\n          workspaceConfigs\n            .filter((config) => !config.workspace || config.entry)\n            .map((config) => resolveUserConfig(config)),\n        )\n      }),\n    )\n  ).flat()\n  debug('resolved configs %O', configs)\n  return { configs, files }\n}\n\nasync function resolveWorkspace(\n  config: UserConfig,\n  inlineConfig: InlineConfig,\n): Promise<{ configs: UserConfig[]; files?: string[] }> {\n  const normalized = { ...config, ...inlineConfig }\n  const rootCwd = normalized.cwd || process.cwd()\n  let { workspace } = normalized\n  if (!workspace) return { configs: [normalized], files: [] }\n\n  if (workspace === true) {\n    workspace = {}\n  } else if (typeof workspace === 'string' || Array.isArray(workspace)) {\n    workspace = { include: workspace }\n  }\n\n  let {\n    include: packages = 'auto',\n    exclude = DEFAULT_EXCLUDE_WORKSPACE,\n    config: workspaceConfig,\n  } = workspace\n  if (packages === 'auto') {\n    packages = (\n      await glob('**/package.json', {\n        ignore: exclude,\n        cwd: rootCwd,\n        expandDirectories: false,\n      })\n    )\n      .filter((file) => file !== 'package.json') // exclude root package.json\n      .map((file) => slash(path.resolve(rootCwd, file, '..')))\n  } else {\n    packages = (\n      await glob(packages, {\n        ignore: exclude,\n        cwd: rootCwd,\n        onlyDirectories: true,\n        absolute: true,\n        expandDirectories: false,\n      })\n    ).map((file) => slash(path.resolve(file)))\n  }\n\n  if (packages.length === 0) {\n    throw new Error('No workspace packages found, please check your config')\n  }\n\n  if (inlineConfig.filter) {\n    inlineConfig.filter = resolveRegex(inlineConfig.filter)\n    packages = packages.filter((path) => {\n      return typeof inlineConfig.filter === 'string'\n        ? path.includes(inlineConfig.filter)\n        : Array.isArray(inlineConfig.filter)\n          ? inlineConfig.filter.some((filter) => path.includes(filter))\n          : inlineConfig.filter!.test(path)\n    })\n    if (packages.length === 0) {\n      throw new Error('No packages matched the filters')\n    }\n  }\n\n  const files: string[] = []\n  const configs = (\n    await Promise.all(\n      packages.map(async (cwd) => {\n        debug('loading workspace config %s', cwd)\n        const { configs, file } = await loadConfigFile(\n          {\n            ...inlineConfig,\n            config: workspaceConfig,\n            cwd,\n          },\n          cwd,\n        )\n        if (file) {\n          debug('loaded workspace config file %s', file)\n          files.push(file)\n        } else {\n          debug('no workspace config file found in %s', cwd)\n        }\n        return configs.map(\n          (config): UserConfig => ({\n            ...normalized,\n            cwd,\n            ...config,\n          }),\n        )\n      }),\n    )\n  ).flat()\n\n  return { configs, files }\n}\n\nasync function resolveUserConfig(\n  userConfig: UserConfig,\n): Promise<ResolvedConfig> {\n  let {\n    entry,\n    format = ['es'],\n    plugins = [],\n    clean = true,\n    silent = false,\n    logLevel = silent ? 'silent' : 'info',\n    failOnWarn = false,\n    customLogger,\n    treeshake = true,\n    platform = 'node',\n    outDir = 'dist',\n    sourcemap = false,\n    dts,\n    unused = false,\n    watch = false,\n    ignoreWatch,\n    shims = false,\n    skipNodeModulesBundle = false,\n    publint = false,\n    attw = false,\n    fromVite,\n    alias,\n    tsconfig,\n    report = true,\n    target,\n    env = {},\n    copy,\n    publicDir,\n    hash,\n    cwd = process.cwd(),\n    name,\n    workspace,\n    external,\n    noExternal,\n    exports = false,\n    bundle,\n    unbundle = typeof bundle === 'boolean' ? !bundle : false,\n    removeNodeProtocol,\n    nodeProtocol,\n    cjsDefault = true,\n    globImport = true,\n    inlineOnly,\n    fixedExtension = platform === 'node',\n  } = userConfig\n\n  const logger = createLogger(logLevel, { customLogger, failOnWarn })\n\n  if (typeof bundle === 'boolean') {\n    logger.warn('`bundle` option is deprecated. Use `unbundle` instead.')\n  }\n\n  if (removeNodeProtocol && nodeProtocol) {\n    throw new TypeError(\n      '`removeNodeProtocol` is deprecated. Please only use `nodeProtocol` instead.',\n    )\n  }\n\n  // Resolve nodeProtocol option with backward compatibility for removeNodeProtocol\n  nodeProtocol =\n    nodeProtocol ??\n    // `removeNodeProtocol: true` means stripping the `node:` protocol which equals to `nodeProtocol: 'strip'`\n    // `removeNodeProtocol: false` means keeping the `node:` protocol which equals to `nodeProtocol: false` (ignore it)\n    (removeNodeProtocol ? 'strip' : false)\n\n  outDir = path.resolve(cwd, outDir)\n  clean = resolveClean(clean, outDir, cwd)\n\n  const pkg = await readPackageJson(cwd)\n  if (workspace) {\n    name ||= pkg?.name\n  }\n  entry = await resolveEntry(logger, entry, cwd, name)\n  if (dts == null) {\n    dts = !!(pkg?.types || pkg?.typings || hasExportsTypes(pkg))\n  }\n  target = resolveTarget(logger, target, pkg, name)\n  tsconfig = await resolveTsconfig(logger, tsconfig, cwd, name)\n  if (typeof external === 'string') {\n    external = resolveRegex(external)\n  }\n  if (typeof noExternal === 'string') {\n    noExternal = resolveRegex(noExternal)\n  }\n\n  if (publint === true) publint = {}\n  if (attw === true) attw = {}\n  if (exports === true) exports = {}\n\n  if (publicDir) {\n    if (copy) {\n      throw new TypeError(\n        '`publicDir` is deprecated. Cannot be used with `copy`',\n      )\n    } else {\n      logger.warn(\n        `${blue`publicDir`} is deprecated. Use ${blue`copy`} instead.`,\n      )\n    }\n  }\n\n  if (fromVite) {\n    const viteUserConfig = await loadViteConfig(\n      fromVite === true ? 'vite' : fromVite,\n      cwd,\n    )\n    if (viteUserConfig) {\n      const viteAlias = viteUserConfig.resolve?.alias\n\n      if ((Array.isArray as (arg: any) => arg is readonly any[])(viteAlias)) {\n        throw new TypeError(\n          'Unsupported resolve.alias in Vite config. Use object instead of array',\n        )\n      }\n      if (viteAlias) {\n        alias = { ...alias, ...viteAlias }\n      }\n\n      if (viteUserConfig.plugins) {\n        plugins = [viteUserConfig.plugins as any, plugins]\n      }\n    }\n  }\n\n  ignoreWatch = toArray(ignoreWatch).map((ignore) => {\n    ignore = resolveRegex(ignore)\n    if (typeof ignore === 'string') {\n      return path.resolve(cwd, ignore)\n    }\n    return ignore\n  })\n\n  if (noExternal != null && typeof noExternal !== 'function') {\n    const noExternalPatterns = toArray(noExternal)\n    noExternal = (id) => matchPattern(id, noExternalPatterns)\n  }\n  if (inlineOnly != null) {\n    inlineOnly = toArray(inlineOnly)\n  }\n\n  const config: ResolvedConfig = {\n    ...userConfig,\n    entry,\n    plugins,\n    format: normalizeFormat(format),\n    target,\n    outDir,\n    clean,\n    logger,\n    treeshake,\n    platform,\n    sourcemap,\n    dts: dts === true ? {} : dts,\n    report: report === true ? {} : report,\n    unused,\n    watch,\n    ignoreWatch,\n    shims,\n    skipNodeModulesBundle,\n    publint,\n    attw,\n    alias,\n    tsconfig,\n    cwd,\n    env,\n    pkg,\n    copy: publicDir || copy,\n    hash: hash ?? true,\n    name,\n    external,\n    noExternal,\n    exports,\n    unbundle,\n    nodeProtocol,\n    cjsDefault,\n    globImport,\n    inlineOnly,\n    fixedExtension,\n  }\n\n  return config\n}\n\nexport async function mergeUserOptions<T extends object, A extends unknown[]>(\n  defaults: T,\n  user:\n    | T\n    | undefined\n    | null\n    | ((options: T, ...args: A) => Awaitable<T | void | null>),\n  args: A,\n): Promise<T> {\n  const userOutputOptions =\n    typeof user === 'function' ? await user(defaults, ...args) : user\n  return { ...defaults, ...userOutputOptions }\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"924b74c8-748c-441d-90c3-e571901a6a13","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884939,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"c91d6a2f-168c-44f2-b2fe-3d7a73abe5a3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884939,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","module_request":"node:buffer","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"cd51ce8c-64d0-4120-b8cc-1fbd204c1291","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884939,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"45c78a58-cb90-4b78-bdd5-0ea2f8d448d3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884939,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"d77fd26f-b543-4f12-ae20-ec7e45de6fbf","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884939,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"d77fd26f-b543-4f12-ae20-ec7e45de6fbf","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884940,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.ts","plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"0a46312e-857e-4c5b-b9ff-1711090250e2","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884940,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"236e77df-a7bd-4390-8a0d-a98dfaca38a5","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884940,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.ts","content":null,"plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"0a46312e-857e-4c5b-b9ff-1711090250e2","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884940,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","module_request":"node:util","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"2f090c02-bbaa-437e-b60c-d6184d667549","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884940,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"2f090c02-bbaa-437e-b60c-d6184d667549","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884941,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/copy.ts","content":"import path from 'node:path'\nimport { fsCopy } from '../utils/fs.ts'\nimport { toArray } from '../utils/general.ts'\nimport type { ResolvedConfig } from '../config/index.ts'\nimport type { Arrayable, Awaitable } from '../utils/types.ts'\n\nexport interface CopyEntry {\n  from: string\n  to: string\n}\nexport type CopyOptions = Arrayable<string | CopyEntry>\nexport type CopyOptionsFn = (options: ResolvedConfig) => Awaitable<CopyOptions>\n\nexport async function copy(options: ResolvedConfig): Promise<void> {\n  if (!options.copy) return\n\n  const copy: CopyOptions =\n    typeof options.copy === 'function'\n      ? await options.copy(options)\n      : options.copy\n\n  await Promise.all(\n    toArray(copy).map((dir) => {\n      const from = typeof dir === 'string' ? dir : dir.from\n      const to =\n        typeof dir === 'string'\n          ? path.resolve(options.outDir, path.basename(from))\n          : dir.to\n      return cp(options.cwd, from, to)\n    }),\n  )\n}\n\nfunction cp(cwd: string, from: string, to: string): Promise<void> {\n  return fsCopy(path.resolve(cwd, from), path.resolve(cwd, to))\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"063fd539-9c43-4f77-80aa-b8f3a81db6c7","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884941,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","module_request":"node:util","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"10d2f862-bfe7-4636-bd0e-a87eeb85c159","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884941,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","module_request":"node:zlib","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"01d436ce-bba6-4bdd-9862-5372d4ccc890","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884941,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"01d436ce-bba6-4bdd-9862-5372d4ccc890","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884941,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","module_request":"node:zlib","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"aad716f9-5cce-4fb5-9a39-1b16fa099340","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884941,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","module_request":"ansis","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"869e4551-0a2c-4153-9567-f877301bb406","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884942,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"869e4551-0a2c-4153-9567-f877301bb406","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884942,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","module_request":"ansis","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"83e4764f-0a43-4e19-a574-7e0e101f1e88","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884942,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/clean.ts","content":null,"plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"971a075a-aef2-44eb-b815-46a507da047b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884942,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","module_request":"debug","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"d8d454aa-8641-47b9-9deb-e851efcdcf98","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884942,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"d8d454aa-8641-47b9-9deb-e851efcdcf98","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884942,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","module_request":"debug","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"467dc631-f274-4207-97bd-c3ef338b80af","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884943,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","module_request":"rolldown-plugin-dts/filename","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"dd9feb06-1c6f-4c97-9154-a7ef6b129fd3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884943,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"dd9feb06-1c6f-4c97-9154-a7ef6b129fd3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884943,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","module_request":"rolldown-plugin-dts/filename","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"a4a8a98e-76fd-4d4d-a438-1fb975ad25d0","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884943,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/cli.ts","content":"import process from 'node:process'\nimport { dim } from 'ansis'\nimport { cac } from 'cac'\nimport debug from 'debug'\nimport { VERSION as rolldownVersion } from 'rolldown'\nimport pkg from '../package.json' with { type: 'json' }\nimport { resolveComma, toArray } from './utils/general.ts'\nimport { globalLogger } from './utils/logger.ts'\nimport type { UserConfig } from './config.ts'\n\nconst cli = cac('tsdown')\ncli.help().version(pkg.version)\n\ncli\n  .command('[...files]', 'Bundle files', {\n    ignoreOptionDefaultValue: true,\n    allowUnknownOptions: true,\n  })\n  .option('-c, --config <filename>', 'Use a custom config file')\n  .option(\n    '--config-loader <loader>',\n    'Config loader to use: auto, native, unconfig',\n    { default: 'auto' },\n  )\n  .option('--no-config', 'Disable config file')\n  .option('-f, --format <format>', 'Bundle format: esm, cjs, iife, umd', {\n    default: 'esm',\n  })\n  .option('--clean', 'Clean output directory, --no-clean to disable')\n  .option('--external <module>', 'Mark dependencies as external')\n  .option('--minify', 'Minify output')\n  .option('--debug [feat]', 'Show debug logs')\n  .option('--target <target>', 'Bundle target, e.g \"es2015\", \"esnext\"')\n  .option('-l, --logLevel <level>', 'Set log level: info, warn, error, silent')\n  .option('--fail-on-warn', 'Fail on warnings', { default: true })\n  .option('-d, --out-dir <dir>', 'Output directory', { default: 'dist' })\n  .option('--treeshake', 'Tree-shake bundle', { default: true })\n  .option('--sourcemap', 'Generate source map', { default: false })\n  .option('--shims', 'Enable cjs and esm shims ', { default: false })\n  .option('--platform <platform>', 'Target platform', {\n    default: 'node',\n  })\n  .option('--dts', 'Generate dts files')\n  .option('--publint', 'Enable publint', { default: false })\n  .option('--attw', 'Enable Are the types wrong integration', {\n    default: false,\n  })\n  .option('--unused', 'Enable unused dependencies check', { default: false })\n  .option('-w, --watch [path]', 'Watch mode')\n  .option('--ignore-watch <path>', 'Ignore custom paths in watch mode')\n  .option('--from-vite [vitest]', 'Reuse config from Vite or Vitest')\n  .option('--report', 'Size report', { default: true })\n  .option('--env.* <value>', 'Define compile-time env variables')\n  .option('--on-success <command>', 'Command to run on success')\n  .option('--copy <dir>', 'Copy files to output dir')\n  .option('--public-dir <dir>', 'Alias for --copy, deprecated')\n  .option('--tsconfig <tsconfig>', 'Set tsconfig path')\n  .option('--unbundle', 'Unbundle mode')\n  .option('-W, --workspace [dir]', 'Enable workspace mode')\n  .option(\n    '-F, --filter <pattern>',\n    'Filter workspace packages, e.g. /regex/ or substring',\n  )\n  .option(\n    '--exports',\n    'Generate export-related metadata for package.json (experimental)',\n  )\n  .action(async (input: string[], flags: UserConfig) => {\n    globalLogger.level = flags.logLevel || (flags.silent ? 'error' : 'info')\n    globalLogger.info(\n      `tsdown ${dim`v${pkg.version}`} powered by rolldown ${dim`v${rolldownVersion}`}`,\n    )\n    const { build } = await import('./index.ts')\n    if (input.length > 0) flags.entry = input\n    await build(flags)\n  })\n\ncli\n  .command('migrate', 'Migrate from tsup to tsdown')\n  .option('-c, --cwd <dir>', 'Working directory')\n  .option('-d, --dry-run', 'Dry run')\n  .action(async (args) => {\n    const { migrate } = await import('./migrate.ts')\n    await migrate(args)\n  })\n\nexport async function runCLI(): Promise<void> {\n  cli.parse(process.argv, { run: false })\n\n  if (cli.options.debug) {\n    let namespace: string\n    if (cli.options.debug === true) {\n      namespace = 'tsdown:*'\n    } else {\n      // support debugging multiple flags with comma-separated list\n      namespace = resolveComma(toArray(cli.options.debug))\n        .map((v) => `tsdown:${v}`)\n        .join(',')\n    }\n\n    const enabled = debug.disable()\n    if (enabled) namespace += `,${enabled}`\n\n    debug.enable(namespace)\n    debug('tsdown:debug')('Debugging enabled', namespace)\n  }\n\n  try {\n    await cli.runMatchedCommand()\n  } catch (error) {\n    globalLogger.error(error)\n    process.exit(1)\n  }\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"316ab119-1d13-4424-a811-0553070fd129","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884944,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","module_request":"../utils/format.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"622518c1-1908-48ae-8257-adf6082c9efe","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884945,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/cli.ts","module_request":"node:process","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"eac9631a-91f8-455c-943d-cc02d87fa8cf","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884945,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"eac9631a-91f8-455c-943d-cc02d87fa8cf","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884945,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/cli.ts","module_request":"node:process","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"ba01e3f2-470f-4e55-be07-f9379569e794","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884946,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/cli.ts","module_request":"ansis","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"ab5f1f53-c080-4688-9df9-8b29de221032","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884946,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"ab5f1f53-c080-4688-9df9-8b29de221032","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884946,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/cli.ts","module_request":"ansis","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"b6a58710-0243-4002-af21-a976b5c521cc","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884946,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/cli.ts","module_request":"cac","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"2c7172d1-b064-453b-a6bc-c1805ec28f6f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884946,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"2c7172d1-b064-453b-a6bc-c1805ec28f6f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884946,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/cli.ts","module_request":"cac","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"77a70e4c-b643-465f-b9ec-2d00ed873c97","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884947,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/cli.ts","module_request":"debug","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"86c2006a-61cc-4ff5-b035-020fdea74d08","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884947,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"86c2006a-61cc-4ff5-b035-020fdea74d08","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884947,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/cli.ts","module_request":"debug","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"f8a67c01-cdff-451f-85ef-7fb905c92129","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884947,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/cli.ts","module_request":"rolldown","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"51d6d7fa-270c-4ca0-9713-306f516ad06b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884947,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"51d6d7fa-270c-4ca0-9713-306f516ad06b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884947,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/cli.ts","module_request":"rolldown","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"2326f00f-3550-4b70-9007-15fcce4f760f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884948,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/cli.ts","module_request":"../package.json","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"ecdb87a7-f4cd-46ad-a393-84d999b97744","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884948,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"ecdb87a7-f4cd-46ad-a393-84d999b97744","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884948,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"622518c1-1908-48ae-8257-adf6082c9efe","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884948,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","module_request":"../utils/format.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"b59fc9a8-21be-425f-ae2f-23418acbc2db","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884948,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/cli.ts","module_request":"../package.json","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"82c629f2-c2d9-4225-8007-70ce2bb13197","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884948,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","module_request":"../utils/general.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"507bf996-6f5c-4c23-9c95-9317cc2b08d2","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884948,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/cli.ts","module_request":"./utils/general.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"064184ae-b8ba-4a72-b09b-4bb1d7e37218","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884949,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"064184ae-b8ba-4a72-b09b-4bb1d7e37218","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884949,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","content":"import path from 'node:path'\nimport process from 'node:process'\nimport { blue } from 'ansis'\nimport Debug from 'debug'\nimport { glob } from 'tinyglobby'\nimport { resolveClean } from '../features/clean.ts'\nimport { resolveEntry } from '../features/entry.ts'\nimport { hasExportsTypes } from '../features/exports.ts'\nimport { resolveTarget } from '../features/target.ts'\nimport { resolveTsconfig } from '../features/tsconfig.ts'\nimport { matchPattern, resolveRegex, slash, toArray } from '../utils/general.ts'\nimport { createLogger } from '../utils/logger.ts'\nimport { normalizeFormat, readPackageJson } from '../utils/package.ts'\nimport type { Awaitable } from '../utils/types.ts'\nimport { loadConfigFile, loadViteConfig } from './config.ts'\nimport type { InlineConfig, ResolvedConfig, UserConfig } from './types.ts'\n\nexport * from './types.ts'\n\nconst debug = Debug('tsdown:options')\n\nconst DEFAULT_EXCLUDE_WORKSPACE = [\n  '**/node_modules/**',\n  '**/dist/**',\n  '**/test?(s)/**',\n  '**/t?(e)mp/**',\n]\n\n// InlineConfig (CLI)\n//  -> loadConfigFile: InlineConfig + UserConfig[]\n//  -> resolveWorkspace: InlineConfig + UserConfig[]\n//  -> UserConfig[]\n//  -> ResolvedConfig[]\n//  -> build\n\n// resolved configs count = 1 (inline config) * root config count * workspace count * sub config count\n\nexport async function resolveConfig(inlineConfig: InlineConfig): Promise<{\n  configs: ResolvedConfig[]\n  files: string[]\n}> {\n  debug('inline config %O', inlineConfig)\n\n  const { configs: rootConfigs, file } = await loadConfigFile(inlineConfig)\n  const files: string[] = []\n  if (file) {\n    files.push(file)\n    debug('loaded root user config file %s', file)\n    debug('root user configs %O', rootConfigs)\n  } else {\n    debug('no root user config file found')\n  }\n\n  const configs: ResolvedConfig[] = (\n    await Promise.all(\n      rootConfigs.map(async (rootConfig): Promise<ResolvedConfig[]> => {\n        const { configs: workspaceConfigs, files: workspaceFiles } =\n          await resolveWorkspace(rootConfig, inlineConfig)\n        if (workspaceFiles) {\n          files.push(...workspaceFiles)\n        }\n        return Promise.all(\n          workspaceConfigs\n            .filter((config) => !config.workspace || config.entry)\n            .map((config) => resolveUserConfig(config)),\n        )\n      }),\n    )\n  ).flat()\n  debug('resolved configs %O', configs)\n  return { configs, files }\n}\n\nasync function resolveWorkspace(\n  config: UserConfig,\n  inlineConfig: InlineConfig,\n): Promise<{ configs: UserConfig[]; files?: string[] }> {\n  const normalized = { ...config, ...inlineConfig }\n  const rootCwd = normalized.cwd || process.cwd()\n  let { workspace } = normalized\n  if (!workspace) return { configs: [normalized], files: [] }\n\n  if (workspace === true) {\n    workspace = {}\n  } else if (typeof workspace === 'string' || Array.isArray(workspace)) {\n    workspace = { include: workspace }\n  }\n\n  let {\n    include: packages = 'auto',\n    exclude = DEFAULT_EXCLUDE_WORKSPACE,\n    config: workspaceConfig,\n  } = workspace\n  if (packages === 'auto') {\n    packages = (\n      await glob('**/package.json', {\n        ignore: exclude,\n        cwd: rootCwd,\n        expandDirectories: false,\n      })\n    )\n      .filter((file) => file !== 'package.json') // exclude root package.json\n      .map((file) => slash(path.resolve(rootCwd, file, '..')))\n  } else {\n    packages = (\n      await glob(packages, {\n        ignore: exclude,\n        cwd: rootCwd,\n        onlyDirectories: true,\n        absolute: true,\n        expandDirectories: false,\n      })\n    ).map((file) => slash(path.resolve(file)))\n  }\n\n  if (packages.length === 0) {\n    throw new Error('No workspace packages found, please check your config')\n  }\n\n  if (inlineConfig.filter) {\n    inlineConfig.filter = resolveRegex(inlineConfig.filter)\n    packages = packages.filter((path) => {\n      return typeof inlineConfig.filter === 'string'\n        ? path.includes(inlineConfig.filter)\n        : Array.isArray(inlineConfig.filter)\n          ? inlineConfig.filter.some((filter) => path.includes(filter))\n          : inlineConfig.filter!.test(path)\n    })\n    if (packages.length === 0) {\n      throw new Error('No packages matched the filters')\n    }\n  }\n\n  const files: string[] = []\n  const configs = (\n    await Promise.all(\n      packages.map(async (cwd) => {\n        debug('loading workspace config %s', cwd)\n        const { configs, file } = await loadConfigFile(\n          {\n            ...inlineConfig,\n            config: workspaceConfig,\n            cwd,\n          },\n          cwd,\n        )\n        if (file) {\n          debug('loaded workspace config file %s', file)\n          files.push(file)\n        } else {\n          debug('no workspace config file found in %s', cwd)\n        }\n        return configs.map(\n          (config): UserConfig => ({\n            ...normalized,\n            cwd,\n            ...config,\n          }),\n        )\n      }),\n    )\n  ).flat()\n\n  return { configs, files }\n}\n\nasync function resolveUserConfig(\n  userConfig: UserConfig,\n): Promise<ResolvedConfig> {\n  let {\n    entry,\n    format = ['es'],\n    plugins = [],\n    clean = true,\n    silent = false,\n    logLevel = silent ? 'silent' : 'info',\n    failOnWarn = false,\n    customLogger,\n    treeshake = true,\n    platform = 'node',\n    outDir = 'dist',\n    sourcemap = false,\n    dts,\n    unused = false,\n    watch = false,\n    ignoreWatch,\n    shims = false,\n    skipNodeModulesBundle = false,\n    publint = false,\n    attw = false,\n    fromVite,\n    alias,\n    tsconfig,\n    report = true,\n    target,\n    env = {},\n    copy,\n    publicDir,\n    hash,\n    cwd = process.cwd(),\n    name,\n    workspace,\n    external,\n    noExternal,\n    exports = false,\n    bundle,\n    unbundle = typeof bundle === 'boolean' ? !bundle : false,\n    removeNodeProtocol,\n    nodeProtocol,\n    cjsDefault = true,\n    globImport = true,\n    inlineOnly,\n    fixedExtension = platform === 'node',\n  } = userConfig\n\n  const logger = createLogger(logLevel, { customLogger, failOnWarn })\n\n  if (typeof bundle === 'boolean') {\n    logger.warn('`bundle` option is deprecated. Use `unbundle` instead.')\n  }\n\n  if (removeNodeProtocol && nodeProtocol) {\n    throw new TypeError(\n      '`removeNodeProtocol` is deprecated. Please only use `nodeProtocol` instead.',\n    )\n  }\n\n  // Resolve nodeProtocol option with backward compatibility for removeNodeProtocol\n  nodeProtocol =\n    nodeProtocol ??\n    // `removeNodeProtocol: true` means stripping the `node:` protocol which equals to `nodeProtocol: 'strip'`\n    // `removeNodeProtocol: false` means keeping the `node:` protocol which equals to `nodeProtocol: false` (ignore it)\n    (removeNodeProtocol ? 'strip' : false)\n\n  outDir = path.resolve(cwd, outDir)\n  clean = resolveClean(clean, outDir, cwd)\n\n  const pkg = await readPackageJson(cwd)\n  if (workspace) {\n    name ||= pkg?.name\n  }\n  entry = await resolveEntry(logger, entry, cwd, name)\n  if (dts == null) {\n    dts = !!(pkg?.types || pkg?.typings || hasExportsTypes(pkg))\n  }\n  target = resolveTarget(logger, target, pkg, name)\n  tsconfig = await resolveTsconfig(logger, tsconfig, cwd, name)\n  if (typeof external === 'string') {\n    external = resolveRegex(external)\n  }\n  if (typeof noExternal === 'string') {\n    noExternal = resolveRegex(noExternal)\n  }\n\n  if (publint === true) publint = {}\n  if (attw === true) attw = {}\n  if (exports === true) exports = {}\n\n  if (publicDir) {\n    if (copy) {\n      throw new TypeError(\n        '`publicDir` is deprecated. Cannot be used with `copy`',\n      )\n    } else {\n      logger.warn(\n        `${blue`publicDir`} is deprecated. Use ${blue`copy`} instead.`,\n      )\n    }\n  }\n\n  if (fromVite) {\n    const viteUserConfig = await loadViteConfig(\n      fromVite === true ? 'vite' : fromVite,\n      cwd,\n    )\n    if (viteUserConfig) {\n      const viteAlias = viteUserConfig.resolve?.alias\n\n      if ((Array.isArray as (arg: any) => arg is readonly any[])(viteAlias)) {\n        throw new TypeError(\n          'Unsupported resolve.alias in Vite config. Use object instead of array',\n        )\n      }\n      if (viteAlias) {\n        alias = { ...alias, ...viteAlias }\n      }\n\n      if (viteUserConfig.plugins) {\n        plugins = [viteUserConfig.plugins as any, plugins]\n      }\n    }\n  }\n\n  ignoreWatch = toArray(ignoreWatch).map((ignore) => {\n    ignore = resolveRegex(ignore)\n    if (typeof ignore === 'string') {\n      return path.resolve(cwd, ignore)\n    }\n    return ignore\n  })\n\n  if (noExternal != null && typeof noExternal !== 'function') {\n    const noExternalPatterns = toArray(noExternal)\n    noExternal = (id) => matchPattern(id, noExternalPatterns)\n  }\n  if (inlineOnly != null) {\n    inlineOnly = toArray(inlineOnly)\n  }\n\n  const config: ResolvedConfig = {\n    ...userConfig,\n    entry,\n    plugins,\n    format: normalizeFormat(format),\n    target,\n    outDir,\n    clean,\n    logger,\n    treeshake,\n    platform,\n    sourcemap,\n    dts: dts === true ? {} : dts,\n    report: report === true ? {} : report,\n    unused,\n    watch,\n    ignoreWatch,\n    shims,\n    skipNodeModulesBundle,\n    publint,\n    attw,\n    alias,\n    tsconfig,\n    cwd,\n    env,\n    pkg,\n    copy: publicDir || copy,\n    hash: hash ?? true,\n    name,\n    external,\n    noExternal,\n    exports,\n    unbundle,\n    nodeProtocol,\n    cjsDefault,\n    globImport,\n    inlineOnly,\n    fixedExtension,\n  }\n\n  return config\n}\n\nexport async function mergeUserOptions<T extends object, A extends unknown[]>(\n  defaults: T,\n  user:\n    | T\n    | undefined\n    | null\n    | ((options: T, ...args: A) => Awaitable<T | void | null>),\n  args: A,\n): Promise<T> {\n  const userOutputOptions =\n    typeof user === 'function' ? await user(defaults, ...args) : user\n  return { ...defaults, ...userOutputOptions }\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"240f102d-3b44-4ccd-a1f8-6984e3bd7ecf","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884950,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/cli.ts","module_request":"./utils/general.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"77fe6645-1c9c-4c4c-9d7b-61499d30014b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884950,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","content":"import path from 'node:path'\nimport process from 'node:process'\nimport { blue } from 'ansis'\nimport Debug from 'debug'\nimport { glob } from 'tinyglobby'\nimport { resolveClean } from '../features/clean.ts'\nimport { resolveEntry } from '../features/entry.ts'\nimport { hasExportsTypes } from '../features/exports.ts'\nimport { resolveTarget } from '../features/target.ts'\nimport { resolveTsconfig } from '../features/tsconfig.ts'\nimport { matchPattern, resolveRegex, slash, toArray } from '../utils/general.ts'\nimport { createLogger } from '../utils/logger.ts'\nimport { normalizeFormat, readPackageJson } from '../utils/package.ts'\nimport type { Awaitable } from '../utils/types.ts'\nimport { loadConfigFile, loadViteConfig } from './config.ts'\nimport type { InlineConfig, ResolvedConfig, UserConfig } from './types.ts'\n\nexport * from './types.ts'\n\nconst debug = Debug('tsdown:options')\n\nconst DEFAULT_EXCLUDE_WORKSPACE = [\n  '**/node_modules/**',\n  '**/dist/**',\n  '**/test?(s)/**',\n  '**/t?(e)mp/**',\n]\n\n// InlineConfig (CLI)\n//  -> loadConfigFile: InlineConfig + UserConfig[]\n//  -> resolveWorkspace: InlineConfig + UserConfig[]\n//  -> UserConfig[]\n//  -> ResolvedConfig[]\n//  -> build\n\n// resolved configs count = 1 (inline config) * root config count * workspace count * sub config count\n\nexport async function resolveConfig(inlineConfig: InlineConfig): Promise<{\n  configs: ResolvedConfig[]\n  files: string[]\n}> {\n  debug('inline config %O', inlineConfig)\n\n  const { configs: rootConfigs, file } = await loadConfigFile(inlineConfig)\n  const files: string[] = []\n  if (file) {\n    files.push(file)\n    debug('loaded root user config file %s', file)\n    debug('root user configs %O', rootConfigs)\n  } else {\n    debug('no root user config file found')\n  }\n\n  const configs: ResolvedConfig[] = (\n    await Promise.all(\n      rootConfigs.map(async (rootConfig): Promise<ResolvedConfig[]> => {\n        const { configs: workspaceConfigs, files: workspaceFiles } =\n          await resolveWorkspace(rootConfig, inlineConfig)\n        if (workspaceFiles) {\n          files.push(...workspaceFiles)\n        }\n        return Promise.all(\n          workspaceConfigs\n            .filter((config) => !config.workspace || config.entry)\n            .map((config) => resolveUserConfig(config)),\n        )\n      }),\n    )\n  ).flat()\n  debug('resolved configs %O', configs)\n  return { configs, files }\n}\n\nasync function resolveWorkspace(\n  config: UserConfig,\n  inlineConfig: InlineConfig,\n): Promise<{ configs: UserConfig[]; files?: string[] }> {\n  const normalized = { ...config, ...inlineConfig }\n  const rootCwd = normalized.cwd || process.cwd()\n  let { workspace } = normalized\n  if (!workspace) return { configs: [normalized], files: [] }\n\n  if (workspace === true) {\n    workspace = {}\n  } else if (typeof workspace === 'string' || Array.isArray(workspace)) {\n    workspace = { include: workspace }\n  }\n\n  let {\n    include: packages = 'auto',\n    exclude = DEFAULT_EXCLUDE_WORKSPACE,\n    config: workspaceConfig,\n  } = workspace\n  if (packages === 'auto') {\n    packages = (\n      await glob('**/package.json', {\n        ignore: exclude,\n        cwd: rootCwd,\n        expandDirectories: false,\n      })\n    )\n      .filter((file) => file !== 'package.json') // exclude root package.json\n      .map((file) => slash(path.resolve(rootCwd, file, '..')))\n  } else {\n    packages = (\n      await glob(packages, {\n        ignore: exclude,\n        cwd: rootCwd,\n        onlyDirectories: true,\n        absolute: true,\n        expandDirectories: false,\n      })\n    ).map((file) => slash(path.resolve(file)))\n  }\n\n  if (packages.length === 0) {\n    throw new Error('No workspace packages found, please check your config')\n  }\n\n  if (inlineConfig.filter) {\n    inlineConfig.filter = resolveRegex(inlineConfig.filter)\n    packages = packages.filter((path) => {\n      return typeof inlineConfig.filter === 'string'\n        ? path.includes(inlineConfig.filter)\n        : Array.isArray(inlineConfig.filter)\n          ? inlineConfig.filter.some((filter) => path.includes(filter))\n          : inlineConfig.filter!.test(path)\n    })\n    if (packages.length === 0) {\n      throw new Error('No packages matched the filters')\n    }\n  }\n\n  const files: string[] = []\n  const configs = (\n    await Promise.all(\n      packages.map(async (cwd) => {\n        debug('loading workspace config %s', cwd)\n        const { configs, file } = await loadConfigFile(\n          {\n            ...inlineConfig,\n            config: workspaceConfig,\n            cwd,\n          },\n          cwd,\n        )\n        if (file) {\n          debug('loaded workspace config file %s', file)\n          files.push(file)\n        } else {\n          debug('no workspace config file found in %s', cwd)\n        }\n        return configs.map(\n          (config): UserConfig => ({\n            ...normalized,\n            cwd,\n            ...config,\n          }),\n        )\n      }),\n    )\n  ).flat()\n\n  return { configs, files }\n}\n\nasync function resolveUserConfig(\n  userConfig: UserConfig,\n): Promise<ResolvedConfig> {\n  let {\n    entry,\n    format = ['es'],\n    plugins = [],\n    clean = true,\n    silent = false,\n    logLevel = silent ? 'silent' : 'info',\n    failOnWarn = false,\n    customLogger,\n    treeshake = true,\n    platform = 'node',\n    outDir = 'dist',\n    sourcemap = false,\n    dts,\n    unused = false,\n    watch = false,\n    ignoreWatch,\n    shims = false,\n    skipNodeModulesBundle = false,\n    publint = false,\n    attw = false,\n    fromVite,\n    alias,\n    tsconfig,\n    report = true,\n    target,\n    env = {},\n    copy,\n    publicDir,\n    hash,\n    cwd = process.cwd(),\n    name,\n    workspace,\n    external,\n    noExternal,\n    exports = false,\n    bundle,\n    unbundle = typeof bundle === 'boolean' ? !bundle : false,\n    removeNodeProtocol,\n    nodeProtocol,\n    cjsDefault = true,\n    globImport = true,\n    inlineOnly,\n    fixedExtension = platform === 'node',\n  } = userConfig\n\n  const logger = createLogger(logLevel, { customLogger, failOnWarn })\n\n  if (typeof bundle === 'boolean') {\n    logger.warn('`bundle` option is deprecated. Use `unbundle` instead.')\n  }\n\n  if (removeNodeProtocol && nodeProtocol) {\n    throw new TypeError(\n      '`removeNodeProtocol` is deprecated. Please only use `nodeProtocol` instead.',\n    )\n  }\n\n  // Resolve nodeProtocol option with backward compatibility for removeNodeProtocol\n  nodeProtocol =\n    nodeProtocol ??\n    // `removeNodeProtocol: true` means stripping the `node:` protocol which equals to `nodeProtocol: 'strip'`\n    // `removeNodeProtocol: false` means keeping the `node:` protocol which equals to `nodeProtocol: false` (ignore it)\n    (removeNodeProtocol ? 'strip' : false)\n\n  outDir = path.resolve(cwd, outDir)\n  clean = resolveClean(clean, outDir, cwd)\n\n  const pkg = await readPackageJson(cwd)\n  if (workspace) {\n    name ||= pkg?.name\n  }\n  entry = await resolveEntry(logger, entry, cwd, name)\n  if (dts == null) {\n    dts = !!(pkg?.types || pkg?.typings || hasExportsTypes(pkg))\n  }\n  target = resolveTarget(logger, target, pkg, name)\n  tsconfig = await resolveTsconfig(logger, tsconfig, cwd, name)\n  if (typeof external === 'string') {\n    external = resolveRegex(external)\n  }\n  if (typeof noExternal === 'string') {\n    noExternal = resolveRegex(noExternal)\n  }\n\n  if (publint === true) publint = {}\n  if (attw === true) attw = {}\n  if (exports === true) exports = {}\n\n  if (publicDir) {\n    if (copy) {\n      throw new TypeError(\n        '`publicDir` is deprecated. Cannot be used with `copy`',\n      )\n    } else {\n      logger.warn(\n        `${blue`publicDir`} is deprecated. Use ${blue`copy`} instead.`,\n      )\n    }\n  }\n\n  if (fromVite) {\n    const viteUserConfig = await loadViteConfig(\n      fromVite === true ? 'vite' : fromVite,\n      cwd,\n    )\n    if (viteUserConfig) {\n      const viteAlias = viteUserConfig.resolve?.alias\n\n      if ((Array.isArray as (arg: any) => arg is readonly any[])(viteAlias)) {\n        throw new TypeError(\n          'Unsupported resolve.alias in Vite config. Use object instead of array',\n        )\n      }\n      if (viteAlias) {\n        alias = { ...alias, ...viteAlias }\n      }\n\n      if (viteUserConfig.plugins) {\n        plugins = [viteUserConfig.plugins as any, plugins]\n      }\n    }\n  }\n\n  ignoreWatch = toArray(ignoreWatch).map((ignore) => {\n    ignore = resolveRegex(ignore)\n    if (typeof ignore === 'string') {\n      return path.resolve(cwd, ignore)\n    }\n    return ignore\n  })\n\n  if (noExternal != null && typeof noExternal !== 'function') {\n    const noExternalPatterns = toArray(noExternal)\n    noExternal = (id) => matchPattern(id, noExternalPatterns)\n  }\n  if (inlineOnly != null) {\n    inlineOnly = toArray(inlineOnly)\n  }\n\n  const config: ResolvedConfig = {\n    ...userConfig,\n    entry,\n    plugins,\n    format: normalizeFormat(format),\n    target,\n    outDir,\n    clean,\n    logger,\n    treeshake,\n    platform,\n    sourcemap,\n    dts: dts === true ? {} : dts,\n    report: report === true ? {} : report,\n    unused,\n    watch,\n    ignoreWatch,\n    shims,\n    skipNodeModulesBundle,\n    publint,\n    attw,\n    alias,\n    tsconfig,\n    cwd,\n    env,\n    pkg,\n    copy: publicDir || copy,\n    hash: hash ?? true,\n    name,\n    external,\n    noExternal,\n    exports,\n    unbundle,\n    nodeProtocol,\n    cjsDefault,\n    globImport,\n    inlineOnly,\n    fixedExtension,\n  }\n\n  return config\n}\n\nexport async function mergeUserOptions<T extends object, A extends unknown[]>(\n  defaults: T,\n  user:\n    | T\n    | undefined\n    | null\n    | ((options: T, ...args: A) => Awaitable<T | void | null>),\n  args: A,\n): Promise<T> {\n  const userOutputOptions =\n    typeof user === 'function' ? await user(defaults, ...args) : user\n  return { ...defaults, ...userOutputOptions }\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"240f102d-3b44-4ccd-a1f8-6984e3bd7ecf","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884952,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/cli.ts","module_request":"./utils/logger.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"a2eb0fa3-f571-4351-bf6c-207285712218","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884952,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"a2eb0fa3-f571-4351-bf6c-207285712218","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884952,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/cli.ts","module_request":"./utils/logger.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"4dc14309-1c30-4c57-ab4c-5cddba8b1c79","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884952,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","content":"import path from 'node:path'\nimport process from 'node:process'\nimport { blue } from 'ansis'\nimport Debug from 'debug'\nimport { glob } from 'tinyglobby'\nimport { resolveClean } from '../features/clean.ts'\nimport { resolveEntry } from '../features/entry.ts'\nimport { hasExportsTypes } from '../features/exports.ts'\nimport { resolveTarget } from '../features/target.ts'\nimport { resolveTsconfig } from '../features/tsconfig.ts'\nimport { matchPattern, resolveRegex, slash, toArray } from '../utils/general.ts'\nimport { createLogger } from '../utils/logger.ts'\nimport { normalizeFormat, readPackageJson } from '../utils/package.ts'\nimport type { Awaitable } from '../utils/types.ts'\nimport { loadConfigFile, loadViteConfig } from './config.ts'\nimport type { InlineConfig, ResolvedConfig, UserConfig } from './types.ts'\n\nexport * from './types.ts'\n\nconst debug = Debug('tsdown:options')\n\nconst DEFAULT_EXCLUDE_WORKSPACE = [\n  '**/node_modules/**',\n  '**/dist/**',\n  '**/test?(s)/**',\n  '**/t?(e)mp/**',\n]\n\n// InlineConfig (CLI)\n//  -> loadConfigFile: InlineConfig + UserConfig[]\n//  -> resolveWorkspace: InlineConfig + UserConfig[]\n//  -> UserConfig[]\n//  -> ResolvedConfig[]\n//  -> build\n\n// resolved configs count = 1 (inline config) * root config count * workspace count * sub config count\n\nexport async function resolveConfig(inlineConfig: InlineConfig): Promise<{\n  configs: ResolvedConfig[]\n  files: string[]\n}> {\n  debug('inline config %O', inlineConfig)\n\n  const { configs: rootConfigs, file } = await loadConfigFile(inlineConfig)\n  const files: string[] = []\n  if (file) {\n    files.push(file)\n    debug('loaded root user config file %s', file)\n    debug('root user configs %O', rootConfigs)\n  } else {\n    debug('no root user config file found')\n  }\n\n  const configs: ResolvedConfig[] = (\n    await Promise.all(\n      rootConfigs.map(async (rootConfig): Promise<ResolvedConfig[]> => {\n        const { configs: workspaceConfigs, files: workspaceFiles } =\n          await resolveWorkspace(rootConfig, inlineConfig)\n        if (workspaceFiles) {\n          files.push(...workspaceFiles)\n        }\n        return Promise.all(\n          workspaceConfigs\n            .filter((config) => !config.workspace || config.entry)\n            .map((config) => resolveUserConfig(config)),\n        )\n      }),\n    )\n  ).flat()\n  debug('resolved configs %O', configs)\n  return { configs, files }\n}\n\nasync function resolveWorkspace(\n  config: UserConfig,\n  inlineConfig: InlineConfig,\n): Promise<{ configs: UserConfig[]; files?: string[] }> {\n  const normalized = { ...config, ...inlineConfig }\n  const rootCwd = normalized.cwd || process.cwd()\n  let { workspace } = normalized\n  if (!workspace) return { configs: [normalized], files: [] }\n\n  if (workspace === true) {\n    workspace = {}\n  } else if (typeof workspace === 'string' || Array.isArray(workspace)) {\n    workspace = { include: workspace }\n  }\n\n  let {\n    include: packages = 'auto',\n    exclude = DEFAULT_EXCLUDE_WORKSPACE,\n    config: workspaceConfig,\n  } = workspace\n  if (packages === 'auto') {\n    packages = (\n      await glob('**/package.json', {\n        ignore: exclude,\n        cwd: rootCwd,\n        expandDirectories: false,\n      })\n    )\n      .filter((file) => file !== 'package.json') // exclude root package.json\n      .map((file) => slash(path.resolve(rootCwd, file, '..')))\n  } else {\n    packages = (\n      await glob(packages, {\n        ignore: exclude,\n        cwd: rootCwd,\n        onlyDirectories: true,\n        absolute: true,\n        expandDirectories: false,\n      })\n    ).map((file) => slash(path.resolve(file)))\n  }\n\n  if (packages.length === 0) {\n    throw new Error('No workspace packages found, please check your config')\n  }\n\n  if (inlineConfig.filter) {\n    inlineConfig.filter = resolveRegex(inlineConfig.filter)\n    packages = packages.filter((path) => {\n      return typeof inlineConfig.filter === 'string'\n        ? path.includes(inlineConfig.filter)\n        : Array.isArray(inlineConfig.filter)\n          ? inlineConfig.filter.some((filter) => path.includes(filter))\n          : inlineConfig.filter!.test(path)\n    })\n    if (packages.length === 0) {\n      throw new Error('No packages matched the filters')\n    }\n  }\n\n  const files: string[] = []\n  const configs = (\n    await Promise.all(\n      packages.map(async (cwd) => {\n        debug('loading workspace config %s', cwd)\n        const { configs, file } = await loadConfigFile(\n          {\n            ...inlineConfig,\n            config: workspaceConfig,\n            cwd,\n          },\n          cwd,\n        )\n        if (file) {\n          debug('loaded workspace config file %s', file)\n          files.push(file)\n        } else {\n          debug('no workspace config file found in %s', cwd)\n        }\n        return configs.map(\n          (config): UserConfig => ({\n            ...normalized,\n            cwd,\n            ...config,\n          }),\n        )\n      }),\n    )\n  ).flat()\n\n  return { configs, files }\n}\n\nasync function resolveUserConfig(\n  userConfig: UserConfig,\n): Promise<ResolvedConfig> {\n  let {\n    entry,\n    format = ['es'],\n    plugins = [],\n    clean = true,\n    silent = false,\n    logLevel = silent ? 'silent' : 'info',\n    failOnWarn = false,\n    customLogger,\n    treeshake = true,\n    platform = 'node',\n    outDir = 'dist',\n    sourcemap = false,\n    dts,\n    unused = false,\n    watch = false,\n    ignoreWatch,\n    shims = false,\n    skipNodeModulesBundle = false,\n    publint = false,\n    attw = false,\n    fromVite,\n    alias,\n    tsconfig,\n    report = true,\n    target,\n    env = {},\n    copy,\n    publicDir,\n    hash,\n    cwd = process.cwd(),\n    name,\n    workspace,\n    external,\n    noExternal,\n    exports = false,\n    bundle,\n    unbundle = typeof bundle === 'boolean' ? !bundle : false,\n    removeNodeProtocol,\n    nodeProtocol,\n    cjsDefault = true,\n    globImport = true,\n    inlineOnly,\n    fixedExtension = platform === 'node',\n  } = userConfig\n\n  const logger = createLogger(logLevel, { customLogger, failOnWarn })\n\n  if (typeof bundle === 'boolean') {\n    logger.warn('`bundle` option is deprecated. Use `unbundle` instead.')\n  }\n\n  if (removeNodeProtocol && nodeProtocol) {\n    throw new TypeError(\n      '`removeNodeProtocol` is deprecated. Please only use `nodeProtocol` instead.',\n    )\n  }\n\n  // Resolve nodeProtocol option with backward compatibility for removeNodeProtocol\n  nodeProtocol =\n    nodeProtocol ??\n    // `removeNodeProtocol: true` means stripping the `node:` protocol which equals to `nodeProtocol: 'strip'`\n    // `removeNodeProtocol: false` means keeping the `node:` protocol which equals to `nodeProtocol: false` (ignore it)\n    (removeNodeProtocol ? 'strip' : false)\n\n  outDir = path.resolve(cwd, outDir)\n  clean = resolveClean(clean, outDir, cwd)\n\n  const pkg = await readPackageJson(cwd)\n  if (workspace) {\n    name ||= pkg?.name\n  }\n  entry = await resolveEntry(logger, entry, cwd, name)\n  if (dts == null) {\n    dts = !!(pkg?.types || pkg?.typings || hasExportsTypes(pkg))\n  }\n  target = resolveTarget(logger, target, pkg, name)\n  tsconfig = await resolveTsconfig(logger, tsconfig, cwd, name)\n  if (typeof external === 'string') {\n    external = resolveRegex(external)\n  }\n  if (typeof noExternal === 'string') {\n    noExternal = resolveRegex(noExternal)\n  }\n\n  if (publint === true) publint = {}\n  if (attw === true) attw = {}\n  if (exports === true) exports = {}\n\n  if (publicDir) {\n    if (copy) {\n      throw new TypeError(\n        '`publicDir` is deprecated. Cannot be used with `copy`',\n      )\n    } else {\n      logger.warn(\n        `${blue`publicDir`} is deprecated. Use ${blue`copy`} instead.`,\n      )\n    }\n  }\n\n  if (fromVite) {\n    const viteUserConfig = await loadViteConfig(\n      fromVite === true ? 'vite' : fromVite,\n      cwd,\n    )\n    if (viteUserConfig) {\n      const viteAlias = viteUserConfig.resolve?.alias\n\n      if ((Array.isArray as (arg: any) => arg is readonly any[])(viteAlias)) {\n        throw new TypeError(\n          'Unsupported resolve.alias in Vite config. Use object instead of array',\n        )\n      }\n      if (viteAlias) {\n        alias = { ...alias, ...viteAlias }\n      }\n\n      if (viteUserConfig.plugins) {\n        plugins = [viteUserConfig.plugins as any, plugins]\n      }\n    }\n  }\n\n  ignoreWatch = toArray(ignoreWatch).map((ignore) => {\n    ignore = resolveRegex(ignore)\n    if (typeof ignore === 'string') {\n      return path.resolve(cwd, ignore)\n    }\n    return ignore\n  })\n\n  if (noExternal != null && typeof noExternal !== 'function') {\n    const noExternalPatterns = toArray(noExternal)\n    noExternal = (id) => matchPattern(id, noExternalPatterns)\n  }\n  if (inlineOnly != null) {\n    inlineOnly = toArray(inlineOnly)\n  }\n\n  const config: ResolvedConfig = {\n    ...userConfig,\n    entry,\n    plugins,\n    format: normalizeFormat(format),\n    target,\n    outDir,\n    clean,\n    logger,\n    treeshake,\n    platform,\n    sourcemap,\n    dts: dts === true ? {} : dts,\n    report: report === true ? {} : report,\n    unused,\n    watch,\n    ignoreWatch,\n    shims,\n    skipNodeModulesBundle,\n    publint,\n    attw,\n    alias,\n    tsconfig,\n    cwd,\n    env,\n    pkg,\n    copy: publicDir || copy,\n    hash: hash ?? true,\n    name,\n    external,\n    noExternal,\n    exports,\n    unbundle,\n    nodeProtocol,\n    cjsDefault,\n    globImport,\n    inlineOnly,\n    fixedExtension,\n  }\n\n  return config\n}\n\nexport async function mergeUserOptions<T extends object, A extends unknown[]>(\n  defaults: T,\n  user:\n    | T\n    | undefined\n    | null\n    | ((options: T, ...args: A) => Awaitable<T | void | null>),\n  args: A,\n): Promise<T> {\n  const userOutputOptions =\n    typeof user === 'function' ? await user(defaults, ...args) : user\n  return { ...defaults, ...userOutputOptions }\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"9dec58b1-2ead-4c74-9e63-ee66d3cbdeca","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884953,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/cli.ts","module_request":"./index.ts","import_kind":"dynamic-import","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"a15d25d5-0961-4d6c-8ea7-7a8b63052112","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"action":"StringRef","id":"6c2e4d67c51f5811b5b1ace8a67c270b664be45df865a3a04272362ec05b7824","content":"import child_process from 'node:child_process'\nimport { mkdtemp, readFile } from 'node:fs/promises'\nimport { tmpdir } from 'node:os'\nimport path from 'node:path'\nimport process from 'node:process'\nimport { promisify } from 'node:util'\nimport { blue, dim } from 'ansis'\nimport Debug from 'debug'\nimport { fsRemove } from '../utils/fs.ts'\nimport type { ResolvedConfig } from '../config/index.ts'\nimport type { CheckPackageOptions, Problem } from '@arethetypeswrong/core'\n\nconst debug = Debug('tsdown:attw')\nconst exec = promisify(child_process.exec)\n\nexport interface AttwOptions extends CheckPackageOptions {\n  /**\n   * Profiles select a set of resolution modes to require/ignore. All are evaluated but failures outside\n   * of those required are ignored.\n   *\n   * The available profiles are:\n   * - `strict`: requires all resolutions\n   * - `node16`: ignores node10 resolution failures\n   * - `esmOnly`: ignores CJS resolution failures\n   *\n   * @default 'strict'\n   */\n  profile?: 'strict' | 'node16' | 'esmOnly'\n  /**\n   * The level of the check.\n   *\n   * The available levels are:\n   * - `error`: fails the build\n   * - `warn`: warns the build\n   *\n   * @default 'warn'\n   */\n  level?: 'error' | 'warn'\n}\n\n/**\n * ATTW profiles.\n * Defines the resolution modes to ignore for each profile.\n *\n * @see https://github.com/arethetypeswrong/arethetypeswrong.github.io/blob/main/packages/cli/README.md#profiles\n */\nconst profiles: Record<Required<AttwOptions>['profile'], string[]> = {\n  strict: [],\n  node16: ['node10'],\n  esmOnly: ['node10', 'node16-cjs'],\n}\n\n/**\n * Format an ATTW problem for display\n */\nfunction formatProblem(problem: Problem): string {\n  const resolutionKind =\n    'resolutionKind' in problem ? ` (${problem.resolutionKind})` : ''\n  const entrypoint = 'entrypoint' in problem ? ` at ${problem.entrypoint}` : ''\n\n  switch (problem.kind) {\n    case 'NoResolution':\n      return `  ❌ No resolution${resolutionKind}${entrypoint}`\n\n    case 'UntypedResolution':\n      return `  ⚠️  Untyped resolution${resolutionKind}${entrypoint}`\n\n    case 'FalseESM':\n      return `  🔄 False ESM: Types indicate ESM (${problem.typesModuleKind}) but implementation is CJS (${problem.implementationModuleKind})\\n     Types: ${problem.typesFileName} | Implementation: ${problem.implementationFileName}`\n\n    case 'FalseCJS':\n      return `  🔄 False CJS: Types indicate CJS (${problem.typesModuleKind}) but implementation is ESM (${problem.implementationModuleKind})\\n     Types: ${problem.typesFileName} | Implementation: ${problem.implementationFileName}`\n\n    case 'CJSResolvesToESM':\n      return `  ⚡ CJS resolves to ESM${resolutionKind}${entrypoint}`\n\n    case 'NamedExports': {\n      const missingExports =\n        problem.missing?.length > 0\n          ? ` Missing: ${problem.missing.join(', ')}`\n          : ''\n      const allMissing = problem.isMissingAllNamed\n        ? ' (all named exports missing)'\n        : ''\n      return `  📤 Named exports problem${allMissing}${missingExports}\\n     Types: ${problem.typesFileName} | Implementation: ${problem.implementationFileName}`\n    }\n\n    case 'FallbackCondition':\n      return `  🎯 Fallback condition used${resolutionKind}${entrypoint}`\n\n    case 'FalseExportDefault':\n      return `  🎭 False export default\\n     Types: ${problem.typesFileName} | Implementation: ${problem.implementationFileName}`\n\n    case 'MissingExportEquals':\n      return `  📝 Missing export equals\\n     Types: ${problem.typesFileName} | Implementation: ${problem.implementationFileName}`\n\n    case 'InternalResolutionError':\n      return `  💥 Internal resolution error in ${problem.fileName} (${problem.resolutionOption})\\n     Module: ${problem.moduleSpecifier} | Mode: ${problem.resolutionMode}`\n\n    case 'UnexpectedModuleSyntax':\n      return `  📋 Unexpected module syntax in ${problem.fileName}\\n     Expected: ${problem.moduleKind} | Found: ${problem.syntax === 99 ? 'ESM' : 'CJS'}`\n\n    case 'CJSOnlyExportsDefault':\n      return `  🏷️  CJS only exports default in ${problem.fileName}`\n\n    default:\n      return `  ❓ Unknown problem: ${JSON.stringify(problem)}`\n  }\n}\n\nexport async function attw(options: ResolvedConfig): Promise<void> {\n  if (!options.attw) return\n  if (!options.pkg) {\n    options.logger.warn('attw is enabled but package.json is not found')\n    return\n  }\n  const {\n    profile = 'strict',\n    level = 'warn',\n    ...attwOptions\n  } = options.attw === true ? {} : options.attw\n\n  const t = performance.now()\n  debug('Running attw check')\n\n  const tempDir = await mkdtemp(path.join(tmpdir(), 'tsdown-attw-'))\n\n  let attwCore: typeof import('@arethetypeswrong/core')\n  try {\n    attwCore = await import('@arethetypeswrong/core')\n  } catch {\n    options.logger.error(\n      `ATTW check requires ${blue`@arethetypeswrong/core`} to be installed.`,\n    )\n    return\n  }\n\n  try {\n    const { stdout: tarballInfo } = await exec(\n      `npm pack --json ----pack-destination ${tempDir}`,\n      { encoding: 'utf8', cwd: options.cwd },\n    )\n    const parsed = JSON.parse(tarballInfo)\n    if (!Array.isArray(parsed) || !parsed[0]?.filename) {\n      throw new Error('Invalid npm pack output format')\n    }\n    const tarballPath = path.join(tempDir, parsed[0].filename as string)\n    const tarball = await readFile(tarballPath)\n\n    const pkg = attwCore.createPackageFromTarballData(tarball)\n    const checkResult = await attwCore.checkPackage(pkg, attwOptions)\n\n    if (checkResult.types !== false && checkResult.problems.length) {\n      const problems = checkResult.problems.filter((problem) => {\n        // Only apply profile filter to problems that have resolutionKind\n        if ('resolutionKind' in problem) {\n          return !profiles[profile]?.includes(problem.resolutionKind)\n        }\n        // Include all other problem types\n        return true\n      })\n      if (problems.length) {\n        const problemList = problems.map(formatProblem).join('\\n')\n        const problemMessage = `Are the types wrong problems found:\\n${problemList}`\n\n        if (level === 'error') {\n          throw new Error(problemMessage)\n        }\n\n        options.logger.warn(problemMessage)\n      }\n    } else {\n      options.logger.success(\n        `No Are the types wrong problems found`,\n        dim`(${Math.round(performance.now() - t)}ms)`,\n      )\n    }\n  } catch (error) {\n    options.logger.error('ATTW check failed:', error)\n    debug('Found errors, setting exit code to 1')\n    process.exitCode = 1\n  } finally {\n    await fsRemove(tempDir)\n  }\n}\n"}
{"timestamp":1761897884954,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.ts","content":"import child_process from 'node:child_process'\nimport { mkdtemp, readFile } from 'node:fs/promises'\nimport { tmpdir } from 'node:os'\nimport path from 'node:path'\nimport process from 'node:process'\nimport { promisify } from 'node:util'\nimport { blue, dim } from 'ansis'\nimport Debug from 'debug'\nimport { fsRemove } from '../utils/fs.ts'\nimport type { ResolvedConfig } from '../config/index.ts'\nimport type { CheckPackageOptions, Problem } from '@arethetypeswrong/core'\n\nconst debug = Debug('tsdown:attw')\nconst exec = promisify(child_process.exec)\n\nexport interface AttwOptions extends CheckPackageOptions {\n  /**\n   * Profiles select a set of resolution modes to require/ignore. All are evaluated but failures outside\n   * of those required are ignored.\n   *\n   * The available profiles are:\n   * - `strict`: requires all resolutions\n   * - `node16`: ignores node10 resolution failures\n   * - `esmOnly`: ignores CJS resolution failures\n   *\n   * @default 'strict'\n   */\n  profile?: 'strict' | 'node16' | 'esmOnly'\n  /**\n   * The level of the check.\n   *\n   * The available levels are:\n   * - `error`: fails the build\n   * - `warn`: warns the build\n   *\n   * @default 'warn'\n   */\n  level?: 'error' | 'warn'\n}\n\n/**\n * ATTW profiles.\n * Defines the resolution modes to ignore for each profile.\n *\n * @see https://github.com/arethetypeswrong/arethetypeswrong.github.io/blob/main/packages/cli/README.md#profiles\n */\nconst profiles: Record<Required<AttwOptions>['profile'], string[]> = {\n  strict: [],\n  node16: ['node10'],\n  esmOnly: ['node10', 'node16-cjs'],\n}\n\n/**\n * Format an ATTW problem for display\n */\nfunction formatProblem(problem: Problem): string {\n  const resolutionKind =\n    'resolutionKind' in problem ? ` (${problem.resolutionKind})` : ''\n  const entrypoint = 'entrypoint' in problem ? ` at ${problem.entrypoint}` : ''\n\n  switch (problem.kind) {\n    case 'NoResolution':\n      return `  ❌ No resolution${resolutionKind}${entrypoint}`\n\n    case 'UntypedResolution':\n      return `  ⚠️  Untyped resolution${resolutionKind}${entrypoint}`\n\n    case 'FalseESM':\n      return `  🔄 False ESM: Types indicate ESM (${problem.typesModuleKind}) but implementation is CJS (${problem.implementationModuleKind})\\n     Types: ${problem.typesFileName} | Implementation: ${problem.implementationFileName}`\n\n    case 'FalseCJS':\n      return `  🔄 False CJS: Types indicate CJS (${problem.typesModuleKind}) but implementation is ESM (${problem.implementationModuleKind})\\n     Types: ${problem.typesFileName} | Implementation: ${problem.implementationFileName}`\n\n    case 'CJSResolvesToESM':\n      return `  ⚡ CJS resolves to ESM${resolutionKind}${entrypoint}`\n\n    case 'NamedExports': {\n      const missingExports =\n        problem.missing?.length > 0\n          ? ` Missing: ${problem.missing.join(', ')}`\n          : ''\n      const allMissing = problem.isMissingAllNamed\n        ? ' (all named exports missing)'\n        : ''\n      return `  📤 Named exports problem${allMissing}${missingExports}\\n     Types: ${problem.typesFileName} | Implementation: ${problem.implementationFileName}`\n    }\n\n    case 'FallbackCondition':\n      return `  🎯 Fallback condition used${resolutionKind}${entrypoint}`\n\n    case 'FalseExportDefault':\n      return `  🎭 False export default\\n     Types: ${problem.typesFileName} | Implementation: ${problem.implementationFileName}`\n\n    case 'MissingExportEquals':\n      return `  📝 Missing export equals\\n     Types: ${problem.typesFileName} | Implementation: ${problem.implementationFileName}`\n\n    case 'InternalResolutionError':\n      return `  💥 Internal resolution error in ${problem.fileName} (${problem.resolutionOption})\\n     Module: ${problem.moduleSpecifier} | Mode: ${problem.resolutionMode}`\n\n    case 'UnexpectedModuleSyntax':\n      return `  📋 Unexpected module syntax in ${problem.fileName}\\n     Expected: ${problem.moduleKind} | Found: ${problem.syntax === 99 ? 'ESM' : 'CJS'}`\n\n    case 'CJSOnlyExportsDefault':\n      return `  🏷️  CJS only exports default in ${problem.fileName}`\n\n    default:\n      return `  ❓ Unknown problem: ${JSON.stringify(problem)}`\n  }\n}\n\nexport async function attw(options: ResolvedConfig): Promise<void> {\n  if (!options.attw) return\n  if (!options.pkg) {\n    options.logger.warn('attw is enabled but package.json is not found')\n    return\n  }\n  const {\n    profile = 'strict',\n    level = 'warn',\n    ...attwOptions\n  } = options.attw === true ? {} : options.attw\n\n  const t = performance.now()\n  debug('Running attw check')\n\n  const tempDir = await mkdtemp(path.join(tmpdir(), 'tsdown-attw-'))\n\n  let attwCore: typeof import('@arethetypeswrong/core')\n  try {\n    attwCore = await import('@arethetypeswrong/core')\n  } catch {\n    options.logger.error(\n      `ATTW check requires ${blue`@arethetypeswrong/core`} to be installed.`,\n    )\n    return\n  }\n\n  try {\n    const { stdout: tarballInfo } = await exec(\n      `npm pack --json ----pack-destination ${tempDir}`,\n      { encoding: 'utf8', cwd: options.cwd },\n    )\n    const parsed = JSON.parse(tarballInfo)\n    if (!Array.isArray(parsed) || !parsed[0]?.filename) {\n      throw new Error('Invalid npm pack output format')\n    }\n    const tarballPath = path.join(tempDir, parsed[0].filename as string)\n    const tarball = await readFile(tarballPath)\n\n    const pkg = attwCore.createPackageFromTarballData(tarball)\n    const checkResult = await attwCore.checkPackage(pkg, attwOptions)\n\n    if (checkResult.types !== false && checkResult.problems.length) {\n      const problems = checkResult.problems.filter((problem) => {\n        // Only apply profile filter to problems that have resolutionKind\n        if ('resolutionKind' in problem) {\n          return !profiles[profile]?.includes(problem.resolutionKind)\n        }\n        // Include all other problem types\n        return true\n      })\n      if (problems.length) {\n        const problemList = problems.map(formatProblem).join('\\n')\n        const problemMessage = `Are the types wrong problems found:\\n${problemList}`\n\n        if (level === 'error') {\n          throw new Error(problemMessage)\n        }\n\n        options.logger.warn(problemMessage)\n      }\n    } else {\n      options.logger.success(\n        `No Are the types wrong problems found`,\n        dim`(${Math.round(performance.now() - t)}ms)`,\n      )\n    }\n  } catch (error) {\n    options.logger.error('ATTW check failed:', error)\n    debug('Found errors, setting exit code to 1')\n    process.exitCode = 1\n  } finally {\n    await fsRemove(tempDir)\n  }\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"5989b8bb-a092-4437-959b-4152d41e4151","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884955,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"a15d25d5-0961-4d6c-8ea7-7a8b63052112","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884955,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/clean.ts","content":"import path from 'node:path'\nimport Debug from 'debug'\nimport { glob } from 'tinyglobby'\nimport { fsRemove } from '../utils/fs.ts'\nimport { slash } from '../utils/general.ts'\nimport { globalLogger } from '../utils/logger.ts'\nimport type { ResolvedConfig, UserConfig } from '../config/index.ts'\n\nconst debug = Debug('tsdown:clean')\n\nconst RE_LAST_SLASH = /[/\\\\]$/\n\nexport async function cleanOutDir(configs: ResolvedConfig[]): Promise<void> {\n  const removes = new Set<string>()\n\n  for (const config of configs) {\n    if (!config.clean.length) continue\n    const files = await glob(config.clean, {\n      cwd: config.cwd,\n      absolute: true,\n      onlyFiles: false,\n    })\n\n    const normalizedOutDir = config.outDir.replace(RE_LAST_SLASH, '')\n    for (const file of files) {\n      const normalizedFile = file.replace(RE_LAST_SLASH, '')\n      if (normalizedFile !== normalizedOutDir) {\n        removes.add(file)\n      }\n    }\n  }\n  if (!removes.size) return\n\n  globalLogger.info(`Cleaning ${removes.size} files`)\n  await Promise.all(\n    [...removes].map(async (file) => {\n      debug('Removing', file)\n      await fsRemove(file)\n    }),\n  )\n  debug('Removed %d files', removes.size)\n}\n\nexport function resolveClean(\n  clean: UserConfig['clean'],\n  outDir: string,\n  cwd: string,\n): string[] {\n  if (clean === true) {\n    clean = [slash(outDir)]\n  } else if (!clean) {\n    clean = []\n  }\n\n  if (clean.some((item) => path.resolve(item) === cwd)) {\n    throw new Error(\n      'Cannot clean the current working directory. Please specify a different path to clean option.',\n    )\n  }\n\n  return clean\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"d39c3c32-a190-4f23-b183-59aa32879651","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884955,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/cli.ts","module_request":"./index.ts","import_kind":"dynamic-import","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"8db3598a-d9f4-40b9-8baf-7368ea73e846","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884955,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","content":"import path from 'node:path'\nimport process from 'node:process'\nimport { blue } from 'ansis'\nimport Debug from 'debug'\nimport { glob } from 'tinyglobby'\nimport { resolveClean } from '../features/clean.ts'\nimport { resolveEntry } from '../features/entry.ts'\nimport { hasExportsTypes } from '../features/exports.ts'\nimport { resolveTarget } from '../features/target.ts'\nimport { resolveTsconfig } from '../features/tsconfig.ts'\nimport { matchPattern, resolveRegex, slash, toArray } from '../utils/general.ts'\nimport { createLogger } from '../utils/logger.ts'\nimport { normalizeFormat, readPackageJson } from '../utils/package.ts'\nimport type { Awaitable } from '../utils/types.ts'\nimport { loadConfigFile, loadViteConfig } from './config.ts'\nimport type { InlineConfig, ResolvedConfig, UserConfig } from './types.ts'\n\nexport * from './types.ts'\n\nconst debug = Debug('tsdown:options')\n\nconst DEFAULT_EXCLUDE_WORKSPACE = [\n  '**/node_modules/**',\n  '**/dist/**',\n  '**/test?(s)/**',\n  '**/t?(e)mp/**',\n]\n\n// InlineConfig (CLI)\n//  -> loadConfigFile: InlineConfig + UserConfig[]\n//  -> resolveWorkspace: InlineConfig + UserConfig[]\n//  -> UserConfig[]\n//  -> ResolvedConfig[]\n//  -> build\n\n// resolved configs count = 1 (inline config) * root config count * workspace count * sub config count\n\nexport async function resolveConfig(inlineConfig: InlineConfig): Promise<{\n  configs: ResolvedConfig[]\n  files: string[]\n}> {\n  debug('inline config %O', inlineConfig)\n\n  const { configs: rootConfigs, file } = await loadConfigFile(inlineConfig)\n  const files: string[] = []\n  if (file) {\n    files.push(file)\n    debug('loaded root user config file %s', file)\n    debug('root user configs %O', rootConfigs)\n  } else {\n    debug('no root user config file found')\n  }\n\n  const configs: ResolvedConfig[] = (\n    await Promise.all(\n      rootConfigs.map(async (rootConfig): Promise<ResolvedConfig[]> => {\n        const { configs: workspaceConfigs, files: workspaceFiles } =\n          await resolveWorkspace(rootConfig, inlineConfig)\n        if (workspaceFiles) {\n          files.push(...workspaceFiles)\n        }\n        return Promise.all(\n          workspaceConfigs\n            .filter((config) => !config.workspace || config.entry)\n            .map((config) => resolveUserConfig(config)),\n        )\n      }),\n    )\n  ).flat()\n  debug('resolved configs %O', configs)\n  return { configs, files }\n}\n\nasync function resolveWorkspace(\n  config: UserConfig,\n  inlineConfig: InlineConfig,\n): Promise<{ configs: UserConfig[]; files?: string[] }> {\n  const normalized = { ...config, ...inlineConfig }\n  const rootCwd = normalized.cwd || process.cwd()\n  let { workspace } = normalized\n  if (!workspace) return { configs: [normalized], files: [] }\n\n  if (workspace === true) {\n    workspace = {}\n  } else if (typeof workspace === 'string' || Array.isArray(workspace)) {\n    workspace = { include: workspace }\n  }\n\n  let {\n    include: packages = 'auto',\n    exclude = DEFAULT_EXCLUDE_WORKSPACE,\n    config: workspaceConfig,\n  } = workspace\n  if (packages === 'auto') {\n    packages = (\n      await glob('**/package.json', {\n        ignore: exclude,\n        cwd: rootCwd,\n        expandDirectories: false,\n      })\n    )\n      .filter((file) => file !== 'package.json') // exclude root package.json\n      .map((file) => slash(path.resolve(rootCwd, file, '..')))\n  } else {\n    packages = (\n      await glob(packages, {\n        ignore: exclude,\n        cwd: rootCwd,\n        onlyDirectories: true,\n        absolute: true,\n        expandDirectories: false,\n      })\n    ).map((file) => slash(path.resolve(file)))\n  }\n\n  if (packages.length === 0) {\n    throw new Error('No workspace packages found, please check your config')\n  }\n\n  if (inlineConfig.filter) {\n    inlineConfig.filter = resolveRegex(inlineConfig.filter)\n    packages = packages.filter((path) => {\n      return typeof inlineConfig.filter === 'string'\n        ? path.includes(inlineConfig.filter)\n        : Array.isArray(inlineConfig.filter)\n          ? inlineConfig.filter.some((filter) => path.includes(filter))\n          : inlineConfig.filter!.test(path)\n    })\n    if (packages.length === 0) {\n      throw new Error('No packages matched the filters')\n    }\n  }\n\n  const files: string[] = []\n  const configs = (\n    await Promise.all(\n      packages.map(async (cwd) => {\n        debug('loading workspace config %s', cwd)\n        const { configs, file } = await loadConfigFile(\n          {\n            ...inlineConfig,\n            config: workspaceConfig,\n            cwd,\n          },\n          cwd,\n        )\n        if (file) {\n          debug('loaded workspace config file %s', file)\n          files.push(file)\n        } else {\n          debug('no workspace config file found in %s', cwd)\n        }\n        return configs.map(\n          (config): UserConfig => ({\n            ...normalized,\n            cwd,\n            ...config,\n          }),\n        )\n      }),\n    )\n  ).flat()\n\n  return { configs, files }\n}\n\nasync function resolveUserConfig(\n  userConfig: UserConfig,\n): Promise<ResolvedConfig> {\n  let {\n    entry,\n    format = ['es'],\n    plugins = [],\n    clean = true,\n    silent = false,\n    logLevel = silent ? 'silent' : 'info',\n    failOnWarn = false,\n    customLogger,\n    treeshake = true,\n    platform = 'node',\n    outDir = 'dist',\n    sourcemap = false,\n    dts,\n    unused = false,\n    watch = false,\n    ignoreWatch,\n    shims = false,\n    skipNodeModulesBundle = false,\n    publint = false,\n    attw = false,\n    fromVite,\n    alias,\n    tsconfig,\n    report = true,\n    target,\n    env = {},\n    copy,\n    publicDir,\n    hash,\n    cwd = process.cwd(),\n    name,\n    workspace,\n    external,\n    noExternal,\n    exports = false,\n    bundle,\n    unbundle = typeof bundle === 'boolean' ? !bundle : false,\n    removeNodeProtocol,\n    nodeProtocol,\n    cjsDefault = true,\n    globImport = true,\n    inlineOnly,\n    fixedExtension = platform === 'node',\n  } = userConfig\n\n  const logger = createLogger(logLevel, { customLogger, failOnWarn })\n\n  if (typeof bundle === 'boolean') {\n    logger.warn('`bundle` option is deprecated. Use `unbundle` instead.')\n  }\n\n  if (removeNodeProtocol && nodeProtocol) {\n    throw new TypeError(\n      '`removeNodeProtocol` is deprecated. Please only use `nodeProtocol` instead.',\n    )\n  }\n\n  // Resolve nodeProtocol option with backward compatibility for removeNodeProtocol\n  nodeProtocol =\n    nodeProtocol ??\n    // `removeNodeProtocol: true` means stripping the `node:` protocol which equals to `nodeProtocol: 'strip'`\n    // `removeNodeProtocol: false` means keeping the `node:` protocol which equals to `nodeProtocol: false` (ignore it)\n    (removeNodeProtocol ? 'strip' : false)\n\n  outDir = path.resolve(cwd, outDir)\n  clean = resolveClean(clean, outDir, cwd)\n\n  const pkg = await readPackageJson(cwd)\n  if (workspace) {\n    name ||= pkg?.name\n  }\n  entry = await resolveEntry(logger, entry, cwd, name)\n  if (dts == null) {\n    dts = !!(pkg?.types || pkg?.typings || hasExportsTypes(pkg))\n  }\n  target = resolveTarget(logger, target, pkg, name)\n  tsconfig = await resolveTsconfig(logger, tsconfig, cwd, name)\n  if (typeof external === 'string') {\n    external = resolveRegex(external)\n  }\n  if (typeof noExternal === 'string') {\n    noExternal = resolveRegex(noExternal)\n  }\n\n  if (publint === true) publint = {}\n  if (attw === true) attw = {}\n  if (exports === true) exports = {}\n\n  if (publicDir) {\n    if (copy) {\n      throw new TypeError(\n        '`publicDir` is deprecated. Cannot be used with `copy`',\n      )\n    } else {\n      logger.warn(\n        `${blue`publicDir`} is deprecated. Use ${blue`copy`} instead.`,\n      )\n    }\n  }\n\n  if (fromVite) {\n    const viteUserConfig = await loadViteConfig(\n      fromVite === true ? 'vite' : fromVite,\n      cwd,\n    )\n    if (viteUserConfig) {\n      const viteAlias = viteUserConfig.resolve?.alias\n\n      if ((Array.isArray as (arg: any) => arg is readonly any[])(viteAlias)) {\n        throw new TypeError(\n          'Unsupported resolve.alias in Vite config. Use object instead of array',\n        )\n      }\n      if (viteAlias) {\n        alias = { ...alias, ...viteAlias }\n      }\n\n      if (viteUserConfig.plugins) {\n        plugins = [viteUserConfig.plugins as any, plugins]\n      }\n    }\n  }\n\n  ignoreWatch = toArray(ignoreWatch).map((ignore) => {\n    ignore = resolveRegex(ignore)\n    if (typeof ignore === 'string') {\n      return path.resolve(cwd, ignore)\n    }\n    return ignore\n  })\n\n  if (noExternal != null && typeof noExternal !== 'function') {\n    const noExternalPatterns = toArray(noExternal)\n    noExternal = (id) => matchPattern(id, noExternalPatterns)\n  }\n  if (inlineOnly != null) {\n    inlineOnly = toArray(inlineOnly)\n  }\n\n  const config: ResolvedConfig = {\n    ...userConfig,\n    entry,\n    plugins,\n    format: normalizeFormat(format),\n    target,\n    outDir,\n    clean,\n    logger,\n    treeshake,\n    platform,\n    sourcemap,\n    dts: dts === true ? {} : dts,\n    report: report === true ? {} : report,\n    unused,\n    watch,\n    ignoreWatch,\n    shims,\n    skipNodeModulesBundle,\n    publint,\n    attw,\n    alias,\n    tsconfig,\n    cwd,\n    env,\n    pkg,\n    copy: publicDir || copy,\n    hash: hash ?? true,\n    name,\n    external,\n    noExternal,\n    exports,\n    unbundle,\n    nodeProtocol,\n    cjsDefault,\n    globImport,\n    inlineOnly,\n    fixedExtension,\n  }\n\n  return config\n}\n\nexport async function mergeUserOptions<T extends object, A extends unknown[]>(\n  defaults: T,\n  user:\n    | T\n    | undefined\n    | null\n    | ((options: T, ...args: A) => Awaitable<T | void | null>),\n  args: A,\n): Promise<T> {\n  const userOutputOptions =\n    typeof user === 'function' ? await user(defaults, ...args) : user\n  return { ...defaults, ...userOutputOptions }\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"9dec58b1-2ead-4c74-9e63-ee66d3cbdeca","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884957,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/cli.ts","module_request":"./migrate.ts","import_kind":"dynamic-import","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"1bf4a62b-87c7-468d-bb00-bb764a61c342","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884957,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"1bf4a62b-87c7-468d-bb00-bb764a61c342","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884957,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/cli.ts","module_request":"./migrate.ts","import_kind":"dynamic-import","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"d9e6423b-c8ef-4a0f-bc08-a2335adbcb82","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884957,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"ba01e3f2-470f-4e55-be07-f9379569e794","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884957,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/cli.ts","module_request":"node:process","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"b61a86d3-af84-4a02-92b9-1f961ba0aa2c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884957,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"b6a58710-0243-4002-af21-a976b5c521cc","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884957,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/cli.ts","module_request":"ansis","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"24d73ed9-92a4-4ff1-b081-b6407b08b83b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884958,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"77a70e4c-b643-465f-b9ec-2d00ed873c97","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884958,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/cli.ts","module_request":"cac","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"f7e78810-5024-4283-9335-a5568f649538","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884958,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"f8a67c01-cdff-451f-85ef-7fb905c92129","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884958,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/cli.ts","module_request":"debug","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"05b164b3-2af3-4ed7-8518-75ffc07918ff","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884958,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"2326f00f-3550-4b70-9007-15fcce4f760f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884958,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/cli.ts","module_request":"rolldown","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"02a84a2f-06c0-463c-80c0-6fad56ca15cc","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884958,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"82c629f2-c2d9-4225-8007-70ce2bb13197","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884958,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/cli.ts","module_request":"../package.json","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"893ff883-c7e6-4b6d-9fe3-8571fa5d2390","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884959,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"77fe6645-1c9c-4c4c-9d7b-61499d30014b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884959,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/cli.ts","module_request":"./utils/general.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"f3ef2d81-ccb6-4318-9b8d-8bd13d01977e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884959,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"4dc14309-1c30-4c57-ab4c-5cddba8b1c79","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884959,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/cli.ts","module_request":"./utils/logger.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"0564fa89-01ec-4fde-a033-afa0dcb56f5a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884959,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"8db3598a-d9f4-40b9-8baf-7368ea73e846","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884959,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/copy.ts","content":"import path from 'node:path'\nimport { fsCopy } from '../utils/fs.ts'\nimport { toArray } from '../utils/general.ts'\nimport type { ResolvedConfig } from '../config/index.ts'\nimport type { Arrayable, Awaitable } from '../utils/types.ts'\n\nexport interface CopyEntry {\n  from: string\n  to: string\n}\nexport type CopyOptions = Arrayable<string | CopyEntry>\nexport type CopyOptionsFn = (options: ResolvedConfig) => Awaitable<CopyOptions>\n\nexport async function copy(options: ResolvedConfig): Promise<void> {\n  if (!options.copy) return\n\n  const copy: CopyOptions =\n    typeof options.copy === 'function'\n      ? await options.copy(options)\n      : options.copy\n\n  await Promise.all(\n    toArray(copy).map((dir) => {\n      const from = typeof dir === 'string' ? dir : dir.from\n      const to =\n        typeof dir === 'string'\n          ? path.resolve(options.outDir, path.basename(from))\n          : dir.to\n      return cp(options.cwd, from, to)\n    }),\n  )\n}\n\nfunction cp(cwd: string, from: string, to: string): Promise<void> {\n  return fsCopy(path.resolve(cwd, from), path.resolve(cwd, to))\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"f09c3af6-3fe4-46b9-90c2-8dcf9ad0c3b8","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884959,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/cli.ts","module_request":"./index.ts","import_kind":"dynamic-import","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"9f0bffca-fef5-4542-9444-2f22f0e85122","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884960,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/copy.ts","content":"import path from 'node:path'\nimport { fsCopy } from '../utils/fs.ts'\nimport { toArray } from '../utils/general.ts'\nimport type { ResolvedConfig } from '../config/index.ts'\nimport type { Arrayable, Awaitable } from '../utils/types.ts'\n\nexport interface CopyEntry {\n  from: string\n  to: string\n}\nexport type CopyOptions = Arrayable<string | CopyEntry>\nexport type CopyOptionsFn = (options: ResolvedConfig) => Awaitable<CopyOptions>\n\nexport async function copy(options: ResolvedConfig): Promise<void> {\n  if (!options.copy) return\n\n  const copy: CopyOptions =\n    typeof options.copy === 'function'\n      ? await options.copy(options)\n      : options.copy\n\n  await Promise.all(\n    toArray(copy).map((dir) => {\n      const from = typeof dir === 'string' ? dir : dir.from\n      const to =\n        typeof dir === 'string'\n          ? path.resolve(options.outDir, path.basename(from))\n          : dir.to\n      return cp(options.cwd, from, to)\n    }),\n  )\n}\n\nfunction cp(cwd: string, from: string, to: string): Promise<void> {\n  return fsCopy(path.resolve(cwd, from), path.resolve(cwd, to))\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"f09c3af6-3fe4-46b9-90c2-8dcf9ad0c3b8","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884960,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"d9e6423b-c8ef-4a0f-bc08-a2335adbcb82","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884960,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/cli.ts","module_request":"./migrate.ts","import_kind":"dynamic-import","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"cb4eb365-0391-4369-bb30-c531803f8172","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884960,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"b61a86d3-af84-4a02-92b9-1f961ba0aa2c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884960,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/copy.ts","content":"import path from 'node:path'\nimport { fsCopy } from '../utils/fs.ts'\nimport { toArray } from '../utils/general.ts'\nimport type { ResolvedConfig } from '../config/index.ts'\nimport type { Arrayable, Awaitable } from '../utils/types.ts'\n\nexport interface CopyEntry {\n  from: string\n  to: string\n}\nexport type CopyOptions = Arrayable<string | CopyEntry>\nexport type CopyOptionsFn = (options: ResolvedConfig) => Awaitable<CopyOptions>\n\nexport async function copy(options: ResolvedConfig): Promise<void> {\n  if (!options.copy) return\n\n  const copy: CopyOptions =\n    typeof options.copy === 'function'\n      ? await options.copy(options)\n      : options.copy\n\n  await Promise.all(\n    toArray(copy).map((dir) => {\n      const from = typeof dir === 'string' ? dir : dir.from\n      const to =\n        typeof dir === 'string'\n          ? path.resolve(options.outDir, path.basename(from))\n          : dir.to\n      return cp(options.cwd, from, to)\n    }),\n  )\n}\n\nfunction cp(cwd: string, from: string, to: string): Promise<void> {\n  return fsCopy(path.resolve(cwd, from), path.resolve(cwd, to))\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"e472483b-abdc-42df-9b41-1dd67fd0bd11","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884960,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/cli.ts","module_request":"node:process","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"dfcb7816-f5fe-431a-90d4-834a2f36798a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884961,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.ts","content":"import child_process from 'node:child_process'\nimport { mkdtemp, readFile } from 'node:fs/promises'\nimport { tmpdir } from 'node:os'\nimport path from 'node:path'\nimport process from 'node:process'\nimport { promisify } from 'node:util'\nimport { blue, dim } from 'ansis'\nimport Debug from 'debug'\nimport { fsRemove } from '../utils/fs.ts'\nimport type { ResolvedConfig } from '../config/index.ts'\nimport type { CheckPackageOptions, Problem } from '@arethetypeswrong/core'\n\nconst debug = Debug('tsdown:attw')\nconst exec = promisify(child_process.exec)\n\nexport interface AttwOptions extends CheckPackageOptions {\n  /**\n   * Profiles select a set of resolution modes to require/ignore. All are evaluated but failures outside\n   * of those required are ignored.\n   *\n   * The available profiles are:\n   * - `strict`: requires all resolutions\n   * - `node16`: ignores node10 resolution failures\n   * - `esmOnly`: ignores CJS resolution failures\n   *\n   * @default 'strict'\n   */\n  profile?: 'strict' | 'node16' | 'esmOnly'\n  /**\n   * The level of the check.\n   *\n   * The available levels are:\n   * - `error`: fails the build\n   * - `warn`: warns the build\n   *\n   * @default 'warn'\n   */\n  level?: 'error' | 'warn'\n}\n\n/**\n * ATTW profiles.\n * Defines the resolution modes to ignore for each profile.\n *\n * @see https://github.com/arethetypeswrong/arethetypeswrong.github.io/blob/main/packages/cli/README.md#profiles\n */\nconst profiles: Record<Required<AttwOptions>['profile'], string[]> = {\n  strict: [],\n  node16: ['node10'],\n  esmOnly: ['node10', 'node16-cjs'],\n}\n\n/**\n * Format an ATTW problem for display\n */\nfunction formatProblem(problem: Problem): string {\n  const resolutionKind =\n    'resolutionKind' in problem ? ` (${problem.resolutionKind})` : ''\n  const entrypoint = 'entrypoint' in problem ? ` at ${problem.entrypoint}` : ''\n\n  switch (problem.kind) {\n    case 'NoResolution':\n      return `  ❌ No resolution${resolutionKind}${entrypoint}`\n\n    case 'UntypedResolution':\n      return `  ⚠️  Untyped resolution${resolutionKind}${entrypoint}`\n\n    case 'FalseESM':\n      return `  🔄 False ESM: Types indicate ESM (${problem.typesModuleKind}) but implementation is CJS (${problem.implementationModuleKind})\\n     Types: ${problem.typesFileName} | Implementation: ${problem.implementationFileName}`\n\n    case 'FalseCJS':\n      return `  🔄 False CJS: Types indicate CJS (${problem.typesModuleKind}) but implementation is ESM (${problem.implementationModuleKind})\\n     Types: ${problem.typesFileName} | Implementation: ${problem.implementationFileName}`\n\n    case 'CJSResolvesToESM':\n      return `  ⚡ CJS resolves to ESM${resolutionKind}${entrypoint}`\n\n    case 'NamedExports': {\n      const missingExports =\n        problem.missing?.length > 0\n          ? ` Missing: ${problem.missing.join(', ')}`\n          : ''\n      const allMissing = problem.isMissingAllNamed\n        ? ' (all named exports missing)'\n        : ''\n      return `  📤 Named exports problem${allMissing}${missingExports}\\n     Types: ${problem.typesFileName} | Implementation: ${problem.implementationFileName}`\n    }\n\n    case 'FallbackCondition':\n      return `  🎯 Fallback condition used${resolutionKind}${entrypoint}`\n\n    case 'FalseExportDefault':\n      return `  🎭 False export default\\n     Types: ${problem.typesFileName} | Implementation: ${problem.implementationFileName}`\n\n    case 'MissingExportEquals':\n      return `  📝 Missing export equals\\n     Types: ${problem.typesFileName} | Implementation: ${problem.implementationFileName}`\n\n    case 'InternalResolutionError':\n      return `  💥 Internal resolution error in ${problem.fileName} (${problem.resolutionOption})\\n     Module: ${problem.moduleSpecifier} | Mode: ${problem.resolutionMode}`\n\n    case 'UnexpectedModuleSyntax':\n      return `  📋 Unexpected module syntax in ${problem.fileName}\\n     Expected: ${problem.moduleKind} | Found: ${problem.syntax === 99 ? 'ESM' : 'CJS'}`\n\n    case 'CJSOnlyExportsDefault':\n      return `  🏷️  CJS only exports default in ${problem.fileName}`\n\n    default:\n      return `  ❓ Unknown problem: ${JSON.stringify(problem)}`\n  }\n}\n\nexport async function attw(options: ResolvedConfig): Promise<void> {\n  if (!options.attw) return\n  if (!options.pkg) {\n    options.logger.warn('attw is enabled but package.json is not found')\n    return\n  }\n  const {\n    profile = 'strict',\n    level = 'warn',\n    ...attwOptions\n  } = options.attw === true ? {} : options.attw\n\n  const t = performance.now()\n  debug('Running attw check')\n\n  const tempDir = await mkdtemp(path.join(tmpdir(), 'tsdown-attw-'))\n\n  let attwCore: typeof import('@arethetypeswrong/core')\n  try {\n    attwCore = await import('@arethetypeswrong/core')\n  } catch {\n    options.logger.error(\n      `ATTW check requires ${blue`@arethetypeswrong/core`} to be installed.`,\n    )\n    return\n  }\n\n  try {\n    const { stdout: tarballInfo } = await exec(\n      `npm pack --json ----pack-destination ${tempDir}`,\n      { encoding: 'utf8', cwd: options.cwd },\n    )\n    const parsed = JSON.parse(tarballInfo)\n    if (!Array.isArray(parsed) || !parsed[0]?.filename) {\n      throw new Error('Invalid npm pack output format')\n    }\n    const tarballPath = path.join(tempDir, parsed[0].filename as string)\n    const tarball = await readFile(tarballPath)\n\n    const pkg = attwCore.createPackageFromTarballData(tarball)\n    const checkResult = await attwCore.checkPackage(pkg, attwOptions)\n\n    if (checkResult.types !== false && checkResult.problems.length) {\n      const problems = checkResult.problems.filter((problem) => {\n        // Only apply profile filter to problems that have resolutionKind\n        if ('resolutionKind' in problem) {\n          return !profiles[profile]?.includes(problem.resolutionKind)\n        }\n        // Include all other problem types\n        return true\n      })\n      if (problems.length) {\n        const problemList = problems.map(formatProblem).join('\\n')\n        const problemMessage = `Are the types wrong problems found:\\n${problemList}`\n\n        if (level === 'error') {\n          throw new Error(problemMessage)\n        }\n\n        options.logger.warn(problemMessage)\n      }\n    } else {\n      options.logger.success(\n        `No Are the types wrong problems found`,\n        dim`(${Math.round(performance.now() - t)}ms)`,\n      )\n    }\n  } catch (error) {\n    options.logger.error('ATTW check failed:', error)\n    debug('Found errors, setting exit code to 1')\n    process.exitCode = 1\n  } finally {\n    await fsRemove(tempDir)\n  }\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"5989b8bb-a092-4437-959b-4152d41e4151","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884961,"action":"HookResolveIdCallEnd","resolved_id":"ansis","is_external":true,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"24d73ed9-92a4-4ff1-b081-b6407b08b83b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884961,"action":"HookResolveIdCallEnd","resolved_id":"cac","is_external":true,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"f7e78810-5024-4283-9335-a5568f649538","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884962,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.ts","content":"import child_process from 'node:child_process'\nimport { mkdtemp, readFile } from 'node:fs/promises'\nimport { tmpdir } from 'node:os'\nimport path from 'node:path'\nimport process from 'node:process'\nimport { promisify } from 'node:util'\nimport { blue, dim } from 'ansis'\nimport Debug from 'debug'\nimport { fsRemove } from '../utils/fs.ts'\nimport type { ResolvedConfig } from '../config/index.ts'\nimport type { CheckPackageOptions, Problem } from '@arethetypeswrong/core'\n\nconst debug = Debug('tsdown:attw')\nconst exec = promisify(child_process.exec)\n\nexport interface AttwOptions extends CheckPackageOptions {\n  /**\n   * Profiles select a set of resolution modes to require/ignore. All are evaluated but failures outside\n   * of those required are ignored.\n   *\n   * The available profiles are:\n   * - `strict`: requires all resolutions\n   * - `node16`: ignores node10 resolution failures\n   * - `esmOnly`: ignores CJS resolution failures\n   *\n   * @default 'strict'\n   */\n  profile?: 'strict' | 'node16' | 'esmOnly'\n  /**\n   * The level of the check.\n   *\n   * The available levels are:\n   * - `error`: fails the build\n   * - `warn`: warns the build\n   *\n   * @default 'warn'\n   */\n  level?: 'error' | 'warn'\n}\n\n/**\n * ATTW profiles.\n * Defines the resolution modes to ignore for each profile.\n *\n * @see https://github.com/arethetypeswrong/arethetypeswrong.github.io/blob/main/packages/cli/README.md#profiles\n */\nconst profiles: Record<Required<AttwOptions>['profile'], string[]> = {\n  strict: [],\n  node16: ['node10'],\n  esmOnly: ['node10', 'node16-cjs'],\n}\n\n/**\n * Format an ATTW problem for display\n */\nfunction formatProblem(problem: Problem): string {\n  const resolutionKind =\n    'resolutionKind' in problem ? ` (${problem.resolutionKind})` : ''\n  const entrypoint = 'entrypoint' in problem ? ` at ${problem.entrypoint}` : ''\n\n  switch (problem.kind) {\n    case 'NoResolution':\n      return `  ❌ No resolution${resolutionKind}${entrypoint}`\n\n    case 'UntypedResolution':\n      return `  ⚠️  Untyped resolution${resolutionKind}${entrypoint}`\n\n    case 'FalseESM':\n      return `  🔄 False ESM: Types indicate ESM (${problem.typesModuleKind}) but implementation is CJS (${problem.implementationModuleKind})\\n     Types: ${problem.typesFileName} | Implementation: ${problem.implementationFileName}`\n\n    case 'FalseCJS':\n      return `  🔄 False CJS: Types indicate CJS (${problem.typesModuleKind}) but implementation is ESM (${problem.implementationModuleKind})\\n     Types: ${problem.typesFileName} | Implementation: ${problem.implementationFileName}`\n\n    case 'CJSResolvesToESM':\n      return `  ⚡ CJS resolves to ESM${resolutionKind}${entrypoint}`\n\n    case 'NamedExports': {\n      const missingExports =\n        problem.missing?.length > 0\n          ? ` Missing: ${problem.missing.join(', ')}`\n          : ''\n      const allMissing = problem.isMissingAllNamed\n        ? ' (all named exports missing)'\n        : ''\n      return `  📤 Named exports problem${allMissing}${missingExports}\\n     Types: ${problem.typesFileName} | Implementation: ${problem.implementationFileName}`\n    }\n\n    case 'FallbackCondition':\n      return `  🎯 Fallback condition used${resolutionKind}${entrypoint}`\n\n    case 'FalseExportDefault':\n      return `  🎭 False export default\\n     Types: ${problem.typesFileName} | Implementation: ${problem.implementationFileName}`\n\n    case 'MissingExportEquals':\n      return `  📝 Missing export equals\\n     Types: ${problem.typesFileName} | Implementation: ${problem.implementationFileName}`\n\n    case 'InternalResolutionError':\n      return `  💥 Internal resolution error in ${problem.fileName} (${problem.resolutionOption})\\n     Module: ${problem.moduleSpecifier} | Mode: ${problem.resolutionMode}`\n\n    case 'UnexpectedModuleSyntax':\n      return `  📋 Unexpected module syntax in ${problem.fileName}\\n     Expected: ${problem.moduleKind} | Found: ${problem.syntax === 99 ? 'ESM' : 'CJS'}`\n\n    case 'CJSOnlyExportsDefault':\n      return `  🏷️  CJS only exports default in ${problem.fileName}`\n\n    default:\n      return `  ❓ Unknown problem: ${JSON.stringify(problem)}`\n  }\n}\n\nexport async function attw(options: ResolvedConfig): Promise<void> {\n  if (!options.attw) return\n  if (!options.pkg) {\n    options.logger.warn('attw is enabled but package.json is not found')\n    return\n  }\n  const {\n    profile = 'strict',\n    level = 'warn',\n    ...attwOptions\n  } = options.attw === true ? {} : options.attw\n\n  const t = performance.now()\n  debug('Running attw check')\n\n  const tempDir = await mkdtemp(path.join(tmpdir(), 'tsdown-attw-'))\n\n  let attwCore: typeof import('@arethetypeswrong/core')\n  try {\n    attwCore = await import('@arethetypeswrong/core')\n  } catch {\n    options.logger.error(\n      `ATTW check requires ${blue`@arethetypeswrong/core`} to be installed.`,\n    )\n    return\n  }\n\n  try {\n    const { stdout: tarballInfo } = await exec(\n      `npm pack --json ----pack-destination ${tempDir}`,\n      { encoding: 'utf8', cwd: options.cwd },\n    )\n    const parsed = JSON.parse(tarballInfo)\n    if (!Array.isArray(parsed) || !parsed[0]?.filename) {\n      throw new Error('Invalid npm pack output format')\n    }\n    const tarballPath = path.join(tempDir, parsed[0].filename as string)\n    const tarball = await readFile(tarballPath)\n\n    const pkg = attwCore.createPackageFromTarballData(tarball)\n    const checkResult = await attwCore.checkPackage(pkg, attwOptions)\n\n    if (checkResult.types !== false && checkResult.problems.length) {\n      const problems = checkResult.problems.filter((problem) => {\n        // Only apply profile filter to problems that have resolutionKind\n        if ('resolutionKind' in problem) {\n          return !profiles[profile]?.includes(problem.resolutionKind)\n        }\n        // Include all other problem types\n        return true\n      })\n      if (problems.length) {\n        const problemList = problems.map(formatProblem).join('\\n')\n        const problemMessage = `Are the types wrong problems found:\\n${problemList}`\n\n        if (level === 'error') {\n          throw new Error(problemMessage)\n        }\n\n        options.logger.warn(problemMessage)\n      }\n    } else {\n      options.logger.success(\n        `No Are the types wrong problems found`,\n        dim`(${Math.round(performance.now() - t)}ms)`,\n      )\n    }\n  } catch (error) {\n    options.logger.error('ATTW check failed:', error)\n    debug('Found errors, setting exit code to 1')\n    process.exitCode = 1\n  } finally {\n    await fsRemove(tempDir)\n  }\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"660e2817-51a2-4b12-bb51-8c50625bdf36","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884962,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"a2f62694-245c-4699-a357-4f5ed5915417","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884962,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/node-protocol.ts","module_request":"node:module","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"a4e012fe-9982-408b-8323-3d727fdc670c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884963,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.ts","content":"import child_process from 'node:child_process'\nimport { mkdtemp, readFile } from 'node:fs/promises'\nimport { tmpdir } from 'node:os'\nimport path from 'node:path'\nimport process from 'node:process'\nimport { promisify } from 'node:util'\nimport { blue, dim } from 'ansis'\nimport Debug from 'debug'\nimport { fsRemove } from '../utils/fs.ts'\nimport type { ResolvedConfig } from '../config/index.ts'\nimport type { CheckPackageOptions, Problem } from '@arethetypeswrong/core'\n\nconst debug = Debug('tsdown:attw')\nconst exec = promisify(child_process.exec)\n\nexport interface AttwOptions extends CheckPackageOptions {\n  /**\n   * Profiles select a set of resolution modes to require/ignore. All are evaluated but failures outside\n   * of those required are ignored.\n   *\n   * The available profiles are:\n   * - `strict`: requires all resolutions\n   * - `node16`: ignores node10 resolution failures\n   * - `esmOnly`: ignores CJS resolution failures\n   *\n   * @default 'strict'\n   */\n  profile?: 'strict' | 'node16' | 'esmOnly'\n  /**\n   * The level of the check.\n   *\n   * The available levels are:\n   * - `error`: fails the build\n   * - `warn`: warns the build\n   *\n   * @default 'warn'\n   */\n  level?: 'error' | 'warn'\n}\n\n/**\n * ATTW profiles.\n * Defines the resolution modes to ignore for each profile.\n *\n * @see https://github.com/arethetypeswrong/arethetypeswrong.github.io/blob/main/packages/cli/README.md#profiles\n */\nconst profiles: Record<Required<AttwOptions>['profile'], string[]> = {\n  strict: [],\n  node16: ['node10'],\n  esmOnly: ['node10', 'node16-cjs'],\n}\n\n/**\n * Format an ATTW problem for display\n */\nfunction formatProblem(problem: Problem): string {\n  const resolutionKind =\n    'resolutionKind' in problem ? ` (${problem.resolutionKind})` : ''\n  const entrypoint = 'entrypoint' in problem ? ` at ${problem.entrypoint}` : ''\n\n  switch (problem.kind) {\n    case 'NoResolution':\n      return `  ❌ No resolution${resolutionKind}${entrypoint}`\n\n    case 'UntypedResolution':\n      return `  ⚠️  Untyped resolution${resolutionKind}${entrypoint}`\n\n    case 'FalseESM':\n      return `  🔄 False ESM: Types indicate ESM (${problem.typesModuleKind}) but implementation is CJS (${problem.implementationModuleKind})\\n     Types: ${problem.typesFileName} | Implementation: ${problem.implementationFileName}`\n\n    case 'FalseCJS':\n      return `  🔄 False CJS: Types indicate CJS (${problem.typesModuleKind}) but implementation is ESM (${problem.implementationModuleKind})\\n     Types: ${problem.typesFileName} | Implementation: ${problem.implementationFileName}`\n\n    case 'CJSResolvesToESM':\n      return `  ⚡ CJS resolves to ESM${resolutionKind}${entrypoint}`\n\n    case 'NamedExports': {\n      const missingExports =\n        problem.missing?.length > 0\n          ? ` Missing: ${problem.missing.join(', ')}`\n          : ''\n      const allMissing = problem.isMissingAllNamed\n        ? ' (all named exports missing)'\n        : ''\n      return `  📤 Named exports problem${allMissing}${missingExports}\\n     Types: ${problem.typesFileName} | Implementation: ${problem.implementationFileName}`\n    }\n\n    case 'FallbackCondition':\n      return `  🎯 Fallback condition used${resolutionKind}${entrypoint}`\n\n    case 'FalseExportDefault':\n      return `  🎭 False export default\\n     Types: ${problem.typesFileName} | Implementation: ${problem.implementationFileName}`\n\n    case 'MissingExportEquals':\n      return `  📝 Missing export equals\\n     Types: ${problem.typesFileName} | Implementation: ${problem.implementationFileName}`\n\n    case 'InternalResolutionError':\n      return `  💥 Internal resolution error in ${problem.fileName} (${problem.resolutionOption})\\n     Module: ${problem.moduleSpecifier} | Mode: ${problem.resolutionMode}`\n\n    case 'UnexpectedModuleSyntax':\n      return `  📋 Unexpected module syntax in ${problem.fileName}\\n     Expected: ${problem.moduleKind} | Found: ${problem.syntax === 99 ? 'ESM' : 'CJS'}`\n\n    case 'CJSOnlyExportsDefault':\n      return `  🏷️  CJS only exports default in ${problem.fileName}`\n\n    default:\n      return `  ❓ Unknown problem: ${JSON.stringify(problem)}`\n  }\n}\n\nexport async function attw(options: ResolvedConfig): Promise<void> {\n  if (!options.attw) return\n  if (!options.pkg) {\n    options.logger.warn('attw is enabled but package.json is not found')\n    return\n  }\n  const {\n    profile = 'strict',\n    level = 'warn',\n    ...attwOptions\n  } = options.attw === true ? {} : options.attw\n\n  const t = performance.now()\n  debug('Running attw check')\n\n  const tempDir = await mkdtemp(path.join(tmpdir(), 'tsdown-attw-'))\n\n  let attwCore: typeof import('@arethetypeswrong/core')\n  try {\n    attwCore = await import('@arethetypeswrong/core')\n  } catch {\n    options.logger.error(\n      `ATTW check requires ${blue`@arethetypeswrong/core`} to be installed.`,\n    )\n    return\n  }\n\n  try {\n    const { stdout: tarballInfo } = await exec(\n      `npm pack --json ----pack-destination ${tempDir}`,\n      { encoding: 'utf8', cwd: options.cwd },\n    )\n    const parsed = JSON.parse(tarballInfo)\n    if (!Array.isArray(parsed) || !parsed[0]?.filename) {\n      throw new Error('Invalid npm pack output format')\n    }\n    const tarballPath = path.join(tempDir, parsed[0].filename as string)\n    const tarball = await readFile(tarballPath)\n\n    const pkg = attwCore.createPackageFromTarballData(tarball)\n    const checkResult = await attwCore.checkPackage(pkg, attwOptions)\n\n    if (checkResult.types !== false && checkResult.problems.length) {\n      const problems = checkResult.problems.filter((problem) => {\n        // Only apply profile filter to problems that have resolutionKind\n        if ('resolutionKind' in problem) {\n          return !profiles[profile]?.includes(problem.resolutionKind)\n        }\n        // Include all other problem types\n        return true\n      })\n      if (problems.length) {\n        const problemList = problems.map(formatProblem).join('\\n')\n        const problemMessage = `Are the types wrong problems found:\\n${problemList}`\n\n        if (level === 'error') {\n          throw new Error(problemMessage)\n        }\n\n        options.logger.warn(problemMessage)\n      }\n    } else {\n      options.logger.success(\n        `No Are the types wrong problems found`,\n        dim`(${Math.round(performance.now() - t)}ms)`,\n      )\n    }\n  } catch (error) {\n    options.logger.error('ATTW check failed:', error)\n    debug('Found errors, setting exit code to 1')\n    process.exitCode = 1\n  } finally {\n    await fsRemove(tempDir)\n  }\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"660e2817-51a2-4b12-bb51-8c50625bdf36","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884963,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/clean.ts","content":"import path from 'node:path'\nimport Debug from 'debug'\nimport { glob } from 'tinyglobby'\nimport { fsRemove } from '../utils/fs.ts'\nimport { slash } from '../utils/general.ts'\nimport { globalLogger } from '../utils/logger.ts'\nimport type { ResolvedConfig, UserConfig } from '../config/index.ts'\n\nconst debug = Debug('tsdown:clean')\n\nconst RE_LAST_SLASH = /[/\\\\]$/\n\nexport async function cleanOutDir(configs: ResolvedConfig[]): Promise<void> {\n  const removes = new Set<string>()\n\n  for (const config of configs) {\n    if (!config.clean.length) continue\n    const files = await glob(config.clean, {\n      cwd: config.cwd,\n      absolute: true,\n      onlyFiles: false,\n    })\n\n    const normalizedOutDir = config.outDir.replace(RE_LAST_SLASH, '')\n    for (const file of files) {\n      const normalizedFile = file.replace(RE_LAST_SLASH, '')\n      if (normalizedFile !== normalizedOutDir) {\n        removes.add(file)\n      }\n    }\n  }\n  if (!removes.size) return\n\n  globalLogger.info(`Cleaning ${removes.size} files`)\n  await Promise.all(\n    [...removes].map(async (file) => {\n      debug('Removing', file)\n      await fsRemove(file)\n    }),\n  )\n  debug('Removed %d files', removes.size)\n}\n\nexport function resolveClean(\n  clean: UserConfig['clean'],\n  outDir: string,\n  cwd: string,\n): string[] {\n  if (clean === true) {\n    clean = [slash(outDir)]\n  } else if (!clean) {\n    clean = []\n  }\n\n  if (clean.some((item) => path.resolve(item) === cwd)) {\n    throw new Error(\n      'Cannot clean the current working directory. Please specify a different path to clean option.',\n    )\n  }\n\n  return clean\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"d39c3c32-a190-4f23-b183-59aa32879651","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884964,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/clean.ts","content":"import path from 'node:path'\nimport Debug from 'debug'\nimport { glob } from 'tinyglobby'\nimport { fsRemove } from '../utils/fs.ts'\nimport { slash } from '../utils/general.ts'\nimport { globalLogger } from '../utils/logger.ts'\nimport type { ResolvedConfig, UserConfig } from '../config/index.ts'\n\nconst debug = Debug('tsdown:clean')\n\nconst RE_LAST_SLASH = /[/\\\\]$/\n\nexport async function cleanOutDir(configs: ResolvedConfig[]): Promise<void> {\n  const removes = new Set<string>()\n\n  for (const config of configs) {\n    if (!config.clean.length) continue\n    const files = await glob(config.clean, {\n      cwd: config.cwd,\n      absolute: true,\n      onlyFiles: false,\n    })\n\n    const normalizedOutDir = config.outDir.replace(RE_LAST_SLASH, '')\n    for (const file of files) {\n      const normalizedFile = file.replace(RE_LAST_SLASH, '')\n      if (normalizedFile !== normalizedOutDir) {\n        removes.add(file)\n      }\n    }\n  }\n  if (!removes.size) return\n\n  globalLogger.info(`Cleaning ${removes.size} files`)\n  await Promise.all(\n    [...removes].map(async (file) => {\n      debug('Removing', file)\n      await fsRemove(file)\n    }),\n  )\n  debug('Removed %d files', removes.size)\n}\n\nexport function resolveClean(\n  clean: UserConfig['clean'],\n  outDir: string,\n  cwd: string,\n): string[] {\n  if (clean === true) {\n    clean = [slash(outDir)]\n  } else if (!clean) {\n    clean = []\n  }\n\n  if (clean.some((item) => path.resolve(item) === cwd)) {\n    throw new Error(\n      'Cannot clean the current working directory. Please specify a different path to clean option.',\n    )\n  }\n\n  return clean\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"b6cff585-c5ce-49c3-843f-7b58baf30edd","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884964,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/clean.ts","content":"import path from 'node:path'\nimport Debug from 'debug'\nimport { glob } from 'tinyglobby'\nimport { fsRemove } from '../utils/fs.ts'\nimport { slash } from '../utils/general.ts'\nimport { globalLogger } from '../utils/logger.ts'\nimport type { ResolvedConfig, UserConfig } from '../config/index.ts'\n\nconst debug = Debug('tsdown:clean')\n\nconst RE_LAST_SLASH = /[/\\\\]$/\n\nexport async function cleanOutDir(configs: ResolvedConfig[]): Promise<void> {\n  const removes = new Set<string>()\n\n  for (const config of configs) {\n    if (!config.clean.length) continue\n    const files = await glob(config.clean, {\n      cwd: config.cwd,\n      absolute: true,\n      onlyFiles: false,\n    })\n\n    const normalizedOutDir = config.outDir.replace(RE_LAST_SLASH, '')\n    for (const file of files) {\n      const normalizedFile = file.replace(RE_LAST_SLASH, '')\n      if (normalizedFile !== normalizedOutDir) {\n        removes.add(file)\n      }\n    }\n  }\n  if (!removes.size) return\n\n  globalLogger.info(`Cleaning ${removes.size} files`)\n  await Promise.all(\n    [...removes].map(async (file) => {\n      debug('Removing', file)\n      await fsRemove(file)\n    }),\n  )\n  debug('Removed %d files', removes.size)\n}\n\nexport function resolveClean(\n  clean: UserConfig['clean'],\n  outDir: string,\n  cwd: string,\n): string[] {\n  if (clean === true) {\n    clean = [slash(outDir)]\n  } else if (!clean) {\n    clean = []\n  }\n\n  if (clean.some((item) => path.resolve(item) === cwd)) {\n    throw new Error(\n      'Cannot clean the current working directory. Please specify a different path to clean option.',\n    )\n  }\n\n  return clean\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"b6cff585-c5ce-49c3-843f-7b58baf30edd","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884964,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/clean.ts","content":"import path from 'node:path'\nimport Debug from 'debug'\nimport { glob } from 'tinyglobby'\nimport { fsRemove } from '../utils/fs.ts'\nimport { slash } from '../utils/general.ts'\nimport { globalLogger } from '../utils/logger.ts'\nimport type { ResolvedConfig, UserConfig } from '../config/index.ts'\n\nconst debug = Debug('tsdown:clean')\n\nconst RE_LAST_SLASH = /[/\\\\]$/\n\nexport async function cleanOutDir(configs: ResolvedConfig[]): Promise<void> {\n  const removes = new Set<string>()\n\n  for (const config of configs) {\n    if (!config.clean.length) continue\n    const files = await glob(config.clean, {\n      cwd: config.cwd,\n      absolute: true,\n      onlyFiles: false,\n    })\n\n    const normalizedOutDir = config.outDir.replace(RE_LAST_SLASH, '')\n    for (const file of files) {\n      const normalizedFile = file.replace(RE_LAST_SLASH, '')\n      if (normalizedFile !== normalizedOutDir) {\n        removes.add(file)\n      }\n    }\n  }\n  if (!removes.size) return\n\n  globalLogger.info(`Cleaning ${removes.size} files`)\n  await Promise.all(\n    [...removes].map(async (file) => {\n      debug('Removing', file)\n      await fsRemove(file)\n    }),\n  )\n  debug('Removed %d files', removes.size)\n}\n\nexport function resolveClean(\n  clean: UserConfig['clean'],\n  outDir: string,\n  cwd: string,\n): string[] {\n  if (clean === true) {\n    clean = [slash(outDir)]\n  } else if (!clean) {\n    clean = []\n  }\n\n  if (clean.some((item) => path.resolve(item) === cwd)) {\n    throw new Error(\n      'Cannot clean the current working directory. Please specify a different path to clean option.',\n    )\n  }\n\n  return clean\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"c6765780-d74a-446b-aedb-86fad88a9301","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884965,"action":"HookResolveIdCallEnd","resolved_id":"debug","is_external":true,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"05b164b3-2af3-4ed7-8518-75ffc07918ff","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884965,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/copy.ts","content":"import path from 'node:path'\nimport { fsCopy } from '../utils/fs.ts'\nimport { toArray } from '../utils/general.ts'\nimport type { ResolvedConfig } from '../config/index.ts'\nimport type { Arrayable, Awaitable } from '../utils/types.ts'\n\nexport interface CopyEntry {\n  from: string\n  to: string\n}\nexport type CopyOptions = Arrayable<string | CopyEntry>\nexport type CopyOptionsFn = (options: ResolvedConfig) => Awaitable<CopyOptions>\n\nexport async function copy(options: ResolvedConfig): Promise<void> {\n  if (!options.copy) return\n\n  const copy: CopyOptions =\n    typeof options.copy === 'function'\n      ? await options.copy(options)\n      : options.copy\n\n  await Promise.all(\n    toArray(copy).map((dir) => {\n      const from = typeof dir === 'string' ? dir : dir.from\n      const to =\n        typeof dir === 'string'\n          ? path.resolve(options.outDir, path.basename(from))\n          : dir.to\n      return cp(options.cwd, from, to)\n    }),\n  )\n}\n\nfunction cp(cwd: string, from: string, to: string): Promise<void> {\n  return fsCopy(path.resolve(cwd, from), path.resolve(cwd, to))\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"e472483b-abdc-42df-9b41-1dd67fd0bd11","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884965,"action":"HookResolveIdCallEnd","resolved_id":"rolldown","is_external":true,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"02a84a2f-06c0-463c-80c0-6fad56ca15cc","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884965,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/copy.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"5d6ea5f4-0b5c-43d2-89b7-4af18deba74e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884965,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"5d6ea5f4-0b5c-43d2-89b7-4af18deba74e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884965,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/copy.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"3b46bc86-9ede-4921-b346-2247163a2981","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884966,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/copy.ts","module_request":"../utils/fs.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"6f4737f1-d003-4232-98b6-5f8f625cdfa5","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884966,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/watch.ts","content":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"cd8ed2bc-63af-4aab-a096-3d81d0d6a5ac","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884966,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"6f4737f1-d003-4232-98b6-5f8f625cdfa5","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884966,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/copy.ts","module_request":"../utils/fs.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"6109343f-4684-4aea-9deb-b0f57b645a40","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884966,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/copy.ts","module_request":"../utils/general.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"d4be15cc-bba5-4d03-862e-e2163823f6cb","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884966,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"d4be15cc-bba5-4d03-862e-e2163823f6cb","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884966,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/copy.ts","module_request":"../utils/general.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"d0b2f59f-c13b-40a2-ae9b-e2c842150b43","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884967,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"3b46bc86-9ede-4921-b346-2247163a2981","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884967,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/watch.ts","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"447bd85d-62bf-4534-ab11-adea034cc882","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884967,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/watch.ts","content":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"447bd85d-62bf-4534-ab11-adea034cc882","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884967,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/watch.ts","plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"bce0c055-97c0-4abd-9cda-d3da6606305b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884967,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/watch.ts","content":null,"plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"bce0c055-97c0-4abd-9cda-d3da6606305b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884967,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"a4e012fe-9982-408b-8323-3d727fdc670c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884967,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/node-protocol.ts","module_request":"node:module","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"63133811-0bf5-4933-a0a7-3e4b67d228ad","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884967,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/hooks.ts","plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"8ee95438-6ced-47c0-8c1b-3d39634a482b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884968,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.ts","content":"import child_process from 'node:child_process'\nimport { mkdtemp, readFile } from 'node:fs/promises'\nimport { tmpdir } from 'node:os'\nimport path from 'node:path'\nimport process from 'node:process'\nimport { promisify } from 'node:util'\nimport { blue, dim } from 'ansis'\nimport Debug from 'debug'\nimport { fsRemove } from '../utils/fs.ts'\nimport type { ResolvedConfig } from '../config/index.ts'\nimport type { CheckPackageOptions, Problem } from '@arethetypeswrong/core'\n\nconst debug = Debug('tsdown:attw')\nconst exec = promisify(child_process.exec)\n\nexport interface AttwOptions extends CheckPackageOptions {\n  /**\n   * Profiles select a set of resolution modes to require/ignore. All are evaluated but failures outside\n   * of those required are ignored.\n   *\n   * The available profiles are:\n   * - `strict`: requires all resolutions\n   * - `node16`: ignores node10 resolution failures\n   * - `esmOnly`: ignores CJS resolution failures\n   *\n   * @default 'strict'\n   */\n  profile?: 'strict' | 'node16' | 'esmOnly'\n  /**\n   * The level of the check.\n   *\n   * The available levels are:\n   * - `error`: fails the build\n   * - `warn`: warns the build\n   *\n   * @default 'warn'\n   */\n  level?: 'error' | 'warn'\n}\n\n/**\n * ATTW profiles.\n * Defines the resolution modes to ignore for each profile.\n *\n * @see https://github.com/arethetypeswrong/arethetypeswrong.github.io/blob/main/packages/cli/README.md#profiles\n */\nconst profiles: Record<Required<AttwOptions>['profile'], string[]> = {\n  strict: [],\n  node16: ['node10'],\n  esmOnly: ['node10', 'node16-cjs'],\n}\n\n/**\n * Format an ATTW problem for display\n */\nfunction formatProblem(problem: Problem): string {\n  const resolutionKind =\n    'resolutionKind' in problem ? ` (${problem.resolutionKind})` : ''\n  const entrypoint = 'entrypoint' in problem ? ` at ${problem.entrypoint}` : ''\n\n  switch (problem.kind) {\n    case 'NoResolution':\n      return `  ❌ No resolution${resolutionKind}${entrypoint}`\n\n    case 'UntypedResolution':\n      return `  ⚠️  Untyped resolution${resolutionKind}${entrypoint}`\n\n    case 'FalseESM':\n      return `  🔄 False ESM: Types indicate ESM (${problem.typesModuleKind}) but implementation is CJS (${problem.implementationModuleKind})\\n     Types: ${problem.typesFileName} | Implementation: ${problem.implementationFileName}`\n\n    case 'FalseCJS':\n      return `  🔄 False CJS: Types indicate CJS (${problem.typesModuleKind}) but implementation is ESM (${problem.implementationModuleKind})\\n     Types: ${problem.typesFileName} | Implementation: ${problem.implementationFileName}`\n\n    case 'CJSResolvesToESM':\n      return `  ⚡ CJS resolves to ESM${resolutionKind}${entrypoint}`\n\n    case 'NamedExports': {\n      const missingExports =\n        problem.missing?.length > 0\n          ? ` Missing: ${problem.missing.join(', ')}`\n          : ''\n      const allMissing = problem.isMissingAllNamed\n        ? ' (all named exports missing)'\n        : ''\n      return `  📤 Named exports problem${allMissing}${missingExports}\\n     Types: ${problem.typesFileName} | Implementation: ${problem.implementationFileName}`\n    }\n\n    case 'FallbackCondition':\n      return `  🎯 Fallback condition used${resolutionKind}${entrypoint}`\n\n    case 'FalseExportDefault':\n      return `  🎭 False export default\\n     Types: ${problem.typesFileName} | Implementation: ${problem.implementationFileName}`\n\n    case 'MissingExportEquals':\n      return `  📝 Missing export equals\\n     Types: ${problem.typesFileName} | Implementation: ${problem.implementationFileName}`\n\n    case 'InternalResolutionError':\n      return `  💥 Internal resolution error in ${problem.fileName} (${problem.resolutionOption})\\n     Module: ${problem.moduleSpecifier} | Mode: ${problem.resolutionMode}`\n\n    case 'UnexpectedModuleSyntax':\n      return `  📋 Unexpected module syntax in ${problem.fileName}\\n     Expected: ${problem.moduleKind} | Found: ${problem.syntax === 99 ? 'ESM' : 'CJS'}`\n\n    case 'CJSOnlyExportsDefault':\n      return `  🏷️  CJS only exports default in ${problem.fileName}`\n\n    default:\n      return `  ❓ Unknown problem: ${JSON.stringify(problem)}`\n  }\n}\n\nexport async function attw(options: ResolvedConfig): Promise<void> {\n  if (!options.attw) return\n  if (!options.pkg) {\n    options.logger.warn('attw is enabled but package.json is not found')\n    return\n  }\n  const {\n    profile = 'strict',\n    level = 'warn',\n    ...attwOptions\n  } = options.attw === true ? {} : options.attw\n\n  const t = performance.now()\n  debug('Running attw check')\n\n  const tempDir = await mkdtemp(path.join(tmpdir(), 'tsdown-attw-'))\n\n  let attwCore: typeof import('@arethetypeswrong/core')\n  try {\n    attwCore = await import('@arethetypeswrong/core')\n  } catch {\n    options.logger.error(\n      `ATTW check requires ${blue`@arethetypeswrong/core`} to be installed.`,\n    )\n    return\n  }\n\n  try {\n    const { stdout: tarballInfo } = await exec(\n      `npm pack --json ----pack-destination ${tempDir}`,\n      { encoding: 'utf8', cwd: options.cwd },\n    )\n    const parsed = JSON.parse(tarballInfo)\n    if (!Array.isArray(parsed) || !parsed[0]?.filename) {\n      throw new Error('Invalid npm pack output format')\n    }\n    const tarballPath = path.join(tempDir, parsed[0].filename as string)\n    const tarball = await readFile(tarballPath)\n\n    const pkg = attwCore.createPackageFromTarballData(tarball)\n    const checkResult = await attwCore.checkPackage(pkg, attwOptions)\n\n    if (checkResult.types !== false && checkResult.problems.length) {\n      const problems = checkResult.problems.filter((problem) => {\n        // Only apply profile filter to problems that have resolutionKind\n        if ('resolutionKind' in problem) {\n          return !profiles[profile]?.includes(problem.resolutionKind)\n        }\n        // Include all other problem types\n        return true\n      })\n      if (problems.length) {\n        const problemList = problems.map(formatProblem).join('\\n')\n        const problemMessage = `Are the types wrong problems found:\\n${problemList}`\n\n        if (level === 'error') {\n          throw new Error(problemMessage)\n        }\n\n        options.logger.warn(problemMessage)\n      }\n    } else {\n      options.logger.success(\n        `No Are the types wrong problems found`,\n        dim`(${Math.round(performance.now() - t)}ms)`,\n      )\n    }\n  } catch (error) {\n    options.logger.error('ATTW check failed:', error)\n    debug('Found errors, setting exit code to 1')\n    process.exitCode = 1\n  } finally {\n    await fsRemove(tempDir)\n  }\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"eb4520d3-e5f9-4a48-ac21-287a28ca8846","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884968,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/hooks.ts","content":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"8ee95438-6ced-47c0-8c1b-3d39634a482b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884969,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/clean.ts","content":"import path from 'node:path'\nimport Debug from 'debug'\nimport { glob } from 'tinyglobby'\nimport { fsRemove } from '../utils/fs.ts'\nimport { slash } from '../utils/general.ts'\nimport { globalLogger } from '../utils/logger.ts'\nimport type { ResolvedConfig, UserConfig } from '../config/index.ts'\n\nconst debug = Debug('tsdown:clean')\n\nconst RE_LAST_SLASH = /[/\\\\]$/\n\nexport async function cleanOutDir(configs: ResolvedConfig[]): Promise<void> {\n  const removes = new Set<string>()\n\n  for (const config of configs) {\n    if (!config.clean.length) continue\n    const files = await glob(config.clean, {\n      cwd: config.cwd,\n      absolute: true,\n      onlyFiles: false,\n    })\n\n    const normalizedOutDir = config.outDir.replace(RE_LAST_SLASH, '')\n    for (const file of files) {\n      const normalizedFile = file.replace(RE_LAST_SLASH, '')\n      if (normalizedFile !== normalizedOutDir) {\n        removes.add(file)\n      }\n    }\n  }\n  if (!removes.size) return\n\n  globalLogger.info(`Cleaning ${removes.size} files`)\n  await Promise.all(\n    [...removes].map(async (file) => {\n      debug('Removing', file)\n      await fsRemove(file)\n    }),\n  )\n  debug('Removed %d files', removes.size)\n}\n\nexport function resolveClean(\n  clean: UserConfig['clean'],\n  outDir: string,\n  cwd: string,\n): string[] {\n  if (clean === true) {\n    clean = [slash(outDir)]\n  } else if (!clean) {\n    clean = []\n  }\n\n  if (clean.some((item) => path.resolve(item) === cwd)) {\n    throw new Error(\n      'Cannot clean the current working directory. Please specify a different path to clean option.',\n    )\n  }\n\n  return clean\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"c6765780-d74a-446b-aedb-86fad88a9301","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884969,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/hooks.ts","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"164ee297-4a57-44ac-b69b-c104610f8f3e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884969,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/external.ts","module_request":"node:module","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"d1626f82-702b-434d-85f0-89675e7f18ed","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884969,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/hooks.ts","content":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"164ee297-4a57-44ac-b69b-c104610f8f3e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884969,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/clean.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"73a82204-050c-49d3-b451-74a4771c3b69","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884969,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"73a82204-050c-49d3-b451-74a4771c3b69","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884970,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/clean.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"94c01f39-9040-46c2-ad6f-5d690a61c147","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884970,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/clean.ts","module_request":"debug","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"a1e7d2c3-2c61-4e5d-ab43-ad9acc9d9747","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884970,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"a1e7d2c3-2c61-4e5d-ab43-ad9acc9d9747","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884970,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/clean.ts","module_request":"debug","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"8a499439-d02d-4277-aee5-857d89cfb894","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884970,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/clean.ts","module_request":"tinyglobby","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"4037a875-d79a-4ec9-871d-55cf36719b2f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884970,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"4037a875-d79a-4ec9-871d-55cf36719b2f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884970,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/clean.ts","module_request":"tinyglobby","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"12d95924-0831-4142-9cbf-8f0f3437da2f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884970,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/clean.ts","module_request":"../utils/fs.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"a1edb14e-e9c0-40f6-ac05-f5c52f3e1f35","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884971,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"a1edb14e-e9c0-40f6-ac05-f5c52f3e1f35","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884971,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"893ff883-c7e6-4b6d-9fe3-8571fa5d2390","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884971,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/cli.ts","module_request":"../package.json","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"d58b4a9f-9be0-4835-bcf0-0fb7efe17f1f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884971,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"f3ef2d81-ccb6-4318-9b8d-8bd13d01977e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884971,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/cli.ts","module_request":"./utils/general.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"a5564440-4316-4bd2-b90a-bf62eb059a45","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884971,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"0564fa89-01ec-4fde-a033-afa0dcb56f5a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884971,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/cli.ts","module_request":"./utils/logger.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"895aa88d-bb6d-4217-a67a-6e32c7204ef2","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884972,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"9f0bffca-fef5-4542-9444-2f22f0e85122","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884972,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/cli.ts","module_request":"./index.ts","import_kind":"dynamic-import","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"dd0f867e-511e-4d8b-9b97-dc65cc00211c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884972,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"cb4eb365-0391-4369-bb30-c531803f8172","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884972,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/cli.ts","module_request":"./migrate.ts","import_kind":"dynamic-import","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"508fe426-3dec-47b7-999d-2563ba5c6bf7","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884972,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"dfcb7816-f5fe-431a-90d4-834a2f36798a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884972,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/cli.ts","module_request":"node:process","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"c00adfd1-3184-4bfb-8973-467237d7c679","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884972,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"c00adfd1-3184-4bfb-8973-467237d7c679","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884972,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"d58b4a9f-9be0-4835-bcf0-0fb7efe17f1f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884973,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/cli.ts","module_request":"../package.json","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"5caa836f-0b28-483b-b602-aaa6d5a0c5be","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884973,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"5caa836f-0b28-483b-b602-aaa6d5a0c5be","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884973,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/clean.ts","module_request":"../utils/fs.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"c9d47ee5-4243-4282-b3f0-dc8f909ddd4d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884973,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"a5564440-4316-4bd2-b90a-bf62eb059a45","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884973,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/cli.ts","module_request":"./utils/general.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"c29b250a-a417-4719-b8cc-cbe68faa2d45","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884973,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"c29b250a-a417-4719-b8cc-cbe68faa2d45","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884973,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"895aa88d-bb6d-4217-a67a-6e32c7204ef2","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884974,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/cli.ts","module_request":"./utils/logger.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"92b9d118-e7ad-4589-8907-54ba123e6512","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884974,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"92b9d118-e7ad-4589-8907-54ba123e6512","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884974,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"dd0f867e-511e-4d8b-9b97-dc65cc00211c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884974,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/cli.ts","module_request":"./index.ts","import_kind":"dynamic-import","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"857f0c29-6794-4250-b7e8-3d8790c72178","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884974,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"857f0c29-6794-4250-b7e8-3d8790c72178","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884974,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"508fe426-3dec-47b7-999d-2563ba5c6bf7","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884974,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/cli.ts","module_request":"./migrate.ts","import_kind":"dynamic-import","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"35598c82-bec6-4617-b24e-09636911b82d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884975,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"35598c82-bec6-4617-b24e-09636911b82d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884975,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/clean.ts","module_request":"../utils/general.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"5ef284cc-1d73-4e1c-b62a-25f7bfb50f18","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884975,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"5ef284cc-1d73-4e1c-b62a-25f7bfb50f18","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884975,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/clean.ts","module_request":"../utils/general.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"f85c348d-22a9-4f27-80c2-ea7f467bf9a1","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884975,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/clean.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"cfc2e112-c57b-46a1-aebb-8a2148d4699b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884975,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"cfc2e112-c57b-46a1-aebb-8a2148d4699b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884975,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/clean.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"690ec894-ee4d-451a-b2d3-9de81f7f9017","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884976,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/cjs.ts","content":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"0047667e-f9c2-4452-9f40-0b133821c0a0","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884976,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"94c01f39-9040-46c2-ad6f-5d690a61c147","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884976,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/clean.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"d11c267f-9bbb-43ef-9404-91edf68bda0d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884976,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"507bf996-6f5c-4c23-9c95-9317cc2b08d2","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884976,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"8a499439-d02d-4277-aee5-857d89cfb894","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884976,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","module_request":"../utils/general.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"23344d2c-423e-4d47-b67b-a91c12fef071","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884976,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/clean.ts","module_request":"debug","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"2a221362-6729-458c-9cb4-65b92d13308f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884976,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"f444b366-1fac-4bb5-8143-58225a274083","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884977,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"12d95924-0831-4142-9cbf-8f0f3437da2f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884977,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/exports.ts","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"1c068af0-a063-4931-a3a6-9bb825b4e1bd","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884977,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/exports.ts","content":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"1c068af0-a063-4931-a3a6-9bb825b4e1bd","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884977,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/exports.ts","plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"4d3f44e8-2731-4731-83ee-c3e6753ebb96","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884977,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/exports.ts","content":null,"plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"4d3f44e8-2731-4731-83ee-c3e6753ebb96","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884977,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"451a9c4d-b72f-4466-9d6a-78965f504664","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884977,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/external.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"c549ee0a-be04-421c-9244-62d20e3af6ee","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884978,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"deab184c-d51f-4921-a67d-992a7413e91f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884978,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/external.ts","module_request":"ansis","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"7085e4bf-278d-421f-b639-29ba91f7c1d8","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884978,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"4abaae6b-e7e2-4641-ba7a-c373e3389308","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884978,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/external.ts","module_request":"debug","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"6ab9ee61-ca01-4852-bd2c-8e7ad2f7f089","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884978,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"956dadd5-b9ae-49e8-8951-ec6f4e2fca09","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884978,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/external.ts","module_request":"rolldown-plugin-dts/filename","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"9b7ef178-586f-44ba-a06e-d314e8958c7c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884978,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"4fde69d1-a900-4866-8cb5-ff9b0f41280a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884979,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/external.ts","module_request":"../index.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"f3e9a7b0-bc6e-4ad5-9176-a07384d91187","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884979,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"0408ba18-a587-4530-9c1d-4b81012f6cf5","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884979,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/external.ts","module_request":"../utils/general.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"695091b9-a962-4099-9007-b09eac51fe8f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884979,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"d1626f82-702b-434d-85f0-89675e7f18ed","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884979,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/external.ts","module_request":"node:module","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"d043f43b-d78d-4dbd-a875-17ef8a0fe7b6","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884979,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"c549ee0a-be04-421c-9244-62d20e3af6ee","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884979,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/external.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"2d55744d-e3dd-4a44-89c1-f248756b88bd","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884980,"action":"HookResolveIdCallEnd","resolved_id":"ansis","is_external":true,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"7085e4bf-278d-421f-b639-29ba91f7c1d8","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884980,"action":"HookResolveIdCallEnd","resolved_id":"debug","is_external":true,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"6ab9ee61-ca01-4852-bd2c-8e7ad2f7f089","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884980,"action":"HookResolveIdCallEnd","resolved_id":"rolldown-plugin-dts/filename","is_external":true,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"9b7ef178-586f-44ba-a06e-d314e8958c7c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884980,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"f3e9a7b0-bc6e-4ad5-9176-a07384d91187","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884980,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/external.ts","module_request":"../index.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"3a803466-c3c8-4667-8392-8b106f3e18b4","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884980,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"695091b9-a962-4099-9007-b09eac51fe8f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884980,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/external.ts","module_request":"../utils/general.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"cadf509f-f54a-41f4-908b-b4c249435deb","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884980,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"d043f43b-d78d-4dbd-a875-17ef8a0fe7b6","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884981,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/external.ts","module_request":"node:module","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"eba18464-598e-4a67-bed1-a12d32e768e6","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884981,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"eba18464-598e-4a67-bed1-a12d32e768e6","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884981,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"2d55744d-e3dd-4a44-89c1-f248756b88bd","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884981,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/external.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"486f7957-6ef3-44f1-b014-b7810ea9349e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884981,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"486f7957-6ef3-44f1-b014-b7810ea9349e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884981,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"3a803466-c3c8-4667-8392-8b106f3e18b4","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884981,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/external.ts","module_request":"../index.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"c6146b05-f6a2-4db4-bf71-b6a61bcc3e03","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884981,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"c6146b05-f6a2-4db4-bf71-b6a61bcc3e03","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884982,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"cadf509f-f54a-41f4-908b-b4c249435deb","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884982,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/external.ts","module_request":"../utils/general.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"f059e544-6415-47a7-b438-494bee4e6a8a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884982,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"f059e544-6415-47a7-b438-494bee4e6a8a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884982,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"5c865634-7872-4c19-ac52-4cd8df357a2a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884982,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"5c865634-7872-4c19-ac52-4cd8df357a2a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884982,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"c768ecb2-5f73-43d0-bca5-e70373e66d68","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884982,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"node:process","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"63be1656-5919-465e-b89b-1bd118f824ab","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884982,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"63be1656-5919-465e-b89b-1bd118f824ab","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884983,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"node:process","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"257b6ab8-7908-4291-b568-a5153365106e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884983,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"ansis","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"b00bf58e-5a3f-4251-a87a-a7c0475447d3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884983,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"b00bf58e-5a3f-4251-a87a-a7c0475447d3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884983,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/watch.ts","content":"import path from 'node:path'\nimport { blue } from 'ansis'\nimport { RE_NODE_MODULES } from 'rolldown-plugin-dts/filename'\nimport {\n  globalContext,\n  invalidateContextFile,\n} from 'rolldown-plugin-dts/tsc-context'\nimport { debounce, toArray } from '../utils/general.ts'\nimport type { ResolvedConfig } from '../config/index.ts'\nimport type { FSWatcher } from 'chokidar'\n\nconst endsWithConfig =\n  /[\\\\/](?:(?:package|tsconfig)\\.json|pnpm-(?:workspace|lock)\\.yaml|tsdown\\.config.*)$/\n\nexport async function watchBuild(\n  options: ResolvedConfig,\n  configFiles: string[],\n  rebuild: () => Promise<void>,\n  restart: () => Promise<void>,\n): Promise<FSWatcher> {\n  if (typeof options.watch === 'boolean' && options.outDir === options.cwd) {\n    throw new Error(\n      `Watch is enabled, but output directory is the same as the current working directory.` +\n        `Please specify a different watch directory using ${blue`watch`} option,` +\n        `or set ${blue`outDir`} to a different directory.`,\n    )\n  }\n\n  const files = toArray(\n    typeof options.watch === 'boolean' ? options.cwd : options.watch,\n  )\n  options.logger.info(`Watching for changes in ${files.join(', ')}`)\n  files.push(...configFiles)\n\n  const { watch } = await import('chokidar')\n  const debouncedOnChange = debounce(onChange, 100)\n\n  const watcher = watch(files, {\n    cwd: options.cwd,\n    ignoreInitial: true,\n    ignorePermissionErrors: true,\n    ignored: [\n      /[\\\\/]\\.git[\\\\/]/,\n      RE_NODE_MODULES,\n      options.outDir,\n      ...options.ignoreWatch,\n    ],\n  })\n\n  let pending: string[] = []\n  let pendingPromise: Promise<void> | undefined\n  watcher.on('all', (type, file) => {\n    pending.push(path.resolve(options.cwd, file))\n    debouncedOnChange()\n  })\n\n  return watcher\n\n  async function onChange() {\n    await pendingPromise\n\n    if (!pending.length) {\n      return\n    }\n\n    for (const file of pending) {\n      invalidateContextFile(globalContext, file)\n    }\n\n    const configRelated = pending.some(\n      (file) => configFiles.includes(file) || endsWithConfig.test(file),\n    )\n\n    if (configRelated) {\n      options.logger.info(`Restarting due to config change...`)\n      pendingPromise = restart()\n    } else {\n      options.logger.info(`Change detected: ${pending.join(', ')}`)\n      pendingPromise = rebuild()\n    }\n    pending = []\n    await pendingPromise\n  }\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"22162c99-b6ac-4f33-aab6-6f007e2f85e3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884983,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"ansis","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"d9ea9280-41a8-42bd-9d48-df0c73f2ffcd","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884984,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.ts","content":"import child_process from 'node:child_process'\nimport { mkdtemp, readFile } from 'node:fs/promises'\nimport { tmpdir } from 'node:os'\nimport path from 'node:path'\nimport process from 'node:process'\nimport { promisify } from 'node:util'\nimport { blue, dim } from 'ansis'\nimport Debug from 'debug'\nimport { fsRemove } from '../utils/fs.ts'\nimport type { ResolvedConfig } from '../config/index.ts'\nimport type { CheckPackageOptions, Problem } from '@arethetypeswrong/core'\n\nconst debug = Debug('tsdown:attw')\nconst exec = promisify(child_process.exec)\n\nexport interface AttwOptions extends CheckPackageOptions {\n  /**\n   * Profiles select a set of resolution modes to require/ignore. All are evaluated but failures outside\n   * of those required are ignored.\n   *\n   * The available profiles are:\n   * - `strict`: requires all resolutions\n   * - `node16`: ignores node10 resolution failures\n   * - `esmOnly`: ignores CJS resolution failures\n   *\n   * @default 'strict'\n   */\n  profile?: 'strict' | 'node16' | 'esmOnly'\n  /**\n   * The level of the check.\n   *\n   * The available levels are:\n   * - `error`: fails the build\n   * - `warn`: warns the build\n   *\n   * @default 'warn'\n   */\n  level?: 'error' | 'warn'\n}\n\n/**\n * ATTW profiles.\n * Defines the resolution modes to ignore for each profile.\n *\n * @see https://github.com/arethetypeswrong/arethetypeswrong.github.io/blob/main/packages/cli/README.md#profiles\n */\nconst profiles: Record<Required<AttwOptions>['profile'], string[]> = {\n  strict: [],\n  node16: ['node10'],\n  esmOnly: ['node10', 'node16-cjs'],\n}\n\n/**\n * Format an ATTW problem for display\n */\nfunction formatProblem(problem: Problem): string {\n  const resolutionKind =\n    'resolutionKind' in problem ? ` (${problem.resolutionKind})` : ''\n  const entrypoint = 'entrypoint' in problem ? ` at ${problem.entrypoint}` : ''\n\n  switch (problem.kind) {\n    case 'NoResolution':\n      return `  ❌ No resolution${resolutionKind}${entrypoint}`\n\n    case 'UntypedResolution':\n      return `  ⚠️  Untyped resolution${resolutionKind}${entrypoint}`\n\n    case 'FalseESM':\n      return `  🔄 False ESM: Types indicate ESM (${problem.typesModuleKind}) but implementation is CJS (${problem.implementationModuleKind})\\n     Types: ${problem.typesFileName} | Implementation: ${problem.implementationFileName}`\n\n    case 'FalseCJS':\n      return `  🔄 False CJS: Types indicate CJS (${problem.typesModuleKind}) but implementation is ESM (${problem.implementationModuleKind})\\n     Types: ${problem.typesFileName} | Implementation: ${problem.implementationFileName}`\n\n    case 'CJSResolvesToESM':\n      return `  ⚡ CJS resolves to ESM${resolutionKind}${entrypoint}`\n\n    case 'NamedExports': {\n      const missingExports =\n        problem.missing?.length > 0\n          ? ` Missing: ${problem.missing.join(', ')}`\n          : ''\n      const allMissing = problem.isMissingAllNamed\n        ? ' (all named exports missing)'\n        : ''\n      return `  📤 Named exports problem${allMissing}${missingExports}\\n     Types: ${problem.typesFileName} | Implementation: ${problem.implementationFileName}`\n    }\n\n    case 'FallbackCondition':\n      return `  🎯 Fallback condition used${resolutionKind}${entrypoint}`\n\n    case 'FalseExportDefault':\n      return `  🎭 False export default\\n     Types: ${problem.typesFileName} | Implementation: ${problem.implementationFileName}`\n\n    case 'MissingExportEquals':\n      return `  📝 Missing export equals\\n     Types: ${problem.typesFileName} | Implementation: ${problem.implementationFileName}`\n\n    case 'InternalResolutionError':\n      return `  💥 Internal resolution error in ${problem.fileName} (${problem.resolutionOption})\\n     Module: ${problem.moduleSpecifier} | Mode: ${problem.resolutionMode}`\n\n    case 'UnexpectedModuleSyntax':\n      return `  📋 Unexpected module syntax in ${problem.fileName}\\n     Expected: ${problem.moduleKind} | Found: ${problem.syntax === 99 ? 'ESM' : 'CJS'}`\n\n    case 'CJSOnlyExportsDefault':\n      return `  🏷️  CJS only exports default in ${problem.fileName}`\n\n    default:\n      return `  ❓ Unknown problem: ${JSON.stringify(problem)}`\n  }\n}\n\nexport async function attw(options: ResolvedConfig): Promise<void> {\n  if (!options.attw) return\n  if (!options.pkg) {\n    options.logger.warn('attw is enabled but package.json is not found')\n    return\n  }\n  const {\n    profile = 'strict',\n    level = 'warn',\n    ...attwOptions\n  } = options.attw === true ? {} : options.attw\n\n  const t = performance.now()\n  debug('Running attw check')\n\n  const tempDir = await mkdtemp(path.join(tmpdir(), 'tsdown-attw-'))\n\n  let attwCore: typeof import('@arethetypeswrong/core')\n  try {\n    attwCore = await import('@arethetypeswrong/core')\n  } catch {\n    options.logger.error(\n      `ATTW check requires ${blue`@arethetypeswrong/core`} to be installed.`,\n    )\n    return\n  }\n\n  try {\n    const { stdout: tarballInfo } = await exec(\n      `npm pack --json ----pack-destination ${tempDir}`,\n      { encoding: 'utf8', cwd: options.cwd },\n    )\n    const parsed = JSON.parse(tarballInfo)\n    if (!Array.isArray(parsed) || !parsed[0]?.filename) {\n      throw new Error('Invalid npm pack output format')\n    }\n    const tarballPath = path.join(tempDir, parsed[0].filename as string)\n    const tarball = await readFile(tarballPath)\n\n    const pkg = attwCore.createPackageFromTarballData(tarball)\n    const checkResult = await attwCore.checkPackage(pkg, attwOptions)\n\n    if (checkResult.types !== false && checkResult.problems.length) {\n      const problems = checkResult.problems.filter((problem) => {\n        // Only apply profile filter to problems that have resolutionKind\n        if ('resolutionKind' in problem) {\n          return !profiles[profile]?.includes(problem.resolutionKind)\n        }\n        // Include all other problem types\n        return true\n      })\n      if (problems.length) {\n        const problemList = problems.map(formatProblem).join('\\n')\n        const problemMessage = `Are the types wrong problems found:\\n${problemList}`\n\n        if (level === 'error') {\n          throw new Error(problemMessage)\n        }\n\n        options.logger.warn(problemMessage)\n      }\n    } else {\n      options.logger.success(\n        `No Are the types wrong problems found`,\n        dim`(${Math.round(performance.now() - t)}ms)`,\n      )\n    }\n  } catch (error) {\n    options.logger.error('ATTW check failed:', error)\n    debug('Found errors, setting exit code to 1')\n    process.exitCode = 1\n  } finally {\n    await fsRemove(tempDir)\n  }\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"eb4520d3-e5f9-4a48-ac21-287a28ca8846","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884984,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"debug","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"2610831e-0d27-4ace-9464-6db384ee99e6","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884984,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"f444b366-1fac-4bb5-8143-58225a274083","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884985,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"2610831e-0d27-4ace-9464-6db384ee99e6","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884985,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"debug","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"124a0c1c-7c13-4a89-b6c2-edf3f0648564","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884985,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"tinyglobby","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"07f27957-9e00-4aa7-b044-65d0e8c1eda6","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884985,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"69f8bfd5-95e7-4bf5-80ec-e9fbeb63c500","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884985,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"cd51ce8c-64d0-4120-b8cc-1fbd204c1291","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884985,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","module_request":"node:buffer","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"8378c077-7ad7-46b2-89b3-60d9f49cba56","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884985,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.ts","module_request":"node:child_process","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"57478349-a6a9-4149-ae0f-830fceca5bc3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884986,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"236e77df-a7bd-4390-8a0d-a98dfaca38a5","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884986,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"c4aa33c5-4b89-4a46-ad4c-972831b789da","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884986,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"10d2f862-bfe7-4636-bd0e-a87eeb85c159","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884986,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","module_request":"node:util","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"d812940b-0310-4831-b26d-1ac03bc643cc","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884986,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"aad716f9-5cce-4fb5-9a39-1b16fa099340","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884986,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"63133811-0bf5-4933-a0a7-3e4b67d228ad","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884986,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","module_request":"node:zlib","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"d3cc3b59-47a5-4721-9e73-129d69269f75","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884987,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"83e4764f-0a43-4e19-a574-7e0e101f1e88","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884987,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","module_request":"ansis","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"25d020fb-5817-42ad-b76d-4908c839225a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884987,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"467dc631-f274-4207-97bd-c3ef338b80af","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884987,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","module_request":"debug","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"3314b6a2-0088-4266-8fc3-2200c4564682","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884987,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"a4a8a98e-76fd-4d4d-a438-1fb975ad25d0","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884987,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","module_request":"rolldown-plugin-dts/filename","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"908f0042-a873-435c-a082-f477f53a0c56","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884987,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"b59fc9a8-21be-425f-ae2f-23418acbc2db","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884988,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","module_request":"../utils/format.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"a365ff3a-4bc0-4a67-a94d-58dea5ef3e00","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884988,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"23344d2c-423e-4d47-b67b-a91c12fef071","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884988,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","module_request":"../utils/general.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"9242f43f-f2ca-45db-aade-c32cd5e71495","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884988,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"69f8bfd5-95e7-4bf5-80ec-e9fbeb63c500","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884988,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"b82cf02f-ebcb-4fbf-866f-4ebb1f28ec1a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884988,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/clean.ts","module_request":"tinyglobby","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"3c352f04-54b6-41ea-b594-48a7cc22ea1f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"action":"StringRef","id":"a989f576c68a8531ebbf2233488991b92340eebfe90dbf0bb6fd6c1db3ad8a84","content":"import { readFile, writeFile } from 'node:fs/promises'\nimport path from 'node:path'\nimport { RE_DTS } from 'rolldown-plugin-dts/filename'\nimport { slash } from '../utils/general.ts'\nimport type { NormalizedFormat, ResolvedConfig } from '../config/index.ts'\nimport type { Awaitable } from '../utils/types.ts'\nimport type { PackageJson } from 'pkg-types'\nimport type { OutputAsset, OutputChunk } from 'rolldown'\n\nexport type TsdownChunks = Partial<\n  Record<NormalizedFormat, Array<OutputChunk | OutputAsset>>\n>\n\nexport interface ExportsOptions {\n  /**\n   * Generate exports that link to source code during development.\n   * - string: add as a custom condition.\n   * - true: all conditions point to source files, and add dist exports to `publishConfig`.\n   */\n  devExports?: boolean | string\n\n  /**\n   * Exports for all files.\n   */\n  all?: boolean\n\n  customExports?: (\n    exports: Record<string, any>,\n    context: {\n      pkg: PackageJson\n      chunks: TsdownChunks\n      outDir: string\n      isPublish: boolean\n    },\n  ) => Awaitable<Record<string, any>>\n}\n\nexport async function writeExports(\n  options: ResolvedConfig,\n  chunks: TsdownChunks,\n): Promise<void> {\n  if (!options.exports) return\n\n  const { outDir, pkg } = options\n  if (!pkg) {\n    throw new Error('`package.json` not found, cannot write exports')\n  }\n\n  const { publishExports, ...generated } = await generateExports(\n    pkg,\n    outDir,\n    chunks,\n    options.exports,\n  )\n\n  const updatedPkg = {\n    ...pkg,\n    ...generated,\n    packageJsonPath: undefined,\n  }\n\n  if (publishExports) {\n    updatedPkg.publishConfig ||= {}\n    updatedPkg.publishConfig.exports = publishExports\n  }\n\n  const original = await readFile(pkg.packageJsonPath, 'utf8')\n  let contents = JSON.stringify(\n    updatedPkg,\n    null,\n    original.includes('\\t') ? '\\t' : 2,\n  )\n  if (original.endsWith('\\n')) contents += '\\n'\n  if (contents !== original) {\n    await writeFile(pkg.packageJsonPath, contents, 'utf8')\n  }\n}\n\ntype SubExport = Partial<Record<'cjs' | 'es' | 'src', string>>\n\nexport async function generateExports(\n  pkg: PackageJson,\n  outDir: string,\n  chunks: TsdownChunks,\n  { devExports, all, customExports }: ExportsOptions,\n): Promise<{\n  main: string | undefined\n  module: string | undefined\n  types: string | undefined\n  exports: Record<string, any>\n  publishExports?: Record<string, any>\n}> {\n  const pkgJsonPath = pkg.packageJsonPath as string\n  const pkgRoot = path.dirname(pkgJsonPath)\n  const outDirRelative = slash(path.relative(pkgRoot, outDir))\n\n  let main: string | undefined,\n    module: string | undefined,\n    cjsTypes: string | undefined,\n    esmTypes: string | undefined\n  const exportsMap: Map<string, SubExport> = new Map()\n\n  for (const [format, chunksByFormat] of Object.entries(chunks) as [\n    NormalizedFormat,\n    (OutputChunk | OutputAsset)[],\n  ][]) {\n    if (format !== 'es' && format !== 'cjs') continue\n\n    const onlyOneEntry =\n      chunksByFormat.filter(\n        (chunk) =>\n          chunk.type === 'chunk' &&\n          chunk.isEntry &&\n          !RE_DTS.test(chunk.fileName),\n      ).length === 1\n    for (const chunk of chunksByFormat) {\n      if (chunk.type !== 'chunk' || !chunk.isEntry) continue\n\n      const normalizedName = slash(chunk.fileName)\n      const ext = path.extname(chunk.fileName)\n      let name = normalizedName.slice(0, -ext.length)\n\n      const isDts = name.endsWith('.d')\n      if (isDts) {\n        name = name.slice(0, -2)\n      }\n      const isIndex = onlyOneEntry || name === 'index'\n      const distFile = `${outDirRelative ? `./${outDirRelative}` : '.'}/${normalizedName}`\n\n      if (isIndex) {\n        name = '.'\n        if (format === 'cjs') {\n          if (isDts) {\n            cjsTypes = distFile\n          } else {\n            main = distFile\n          }\n        } else if (format === 'es') {\n          if (isDts) {\n            esmTypes = distFile\n          } else {\n            module = distFile\n          }\n        }\n      } else if (name.endsWith('/index')) {\n        name = `./${name.slice(0, -6)}`\n      } else {\n        name = `./${name}`\n      }\n\n      let subExport = exportsMap.get(name)\n      if (!subExport) {\n        subExport = {}\n        exportsMap.set(name, subExport)\n      }\n\n      if (!isDts) {\n        subExport[format] = distFile\n        if (chunk.facadeModuleId && !subExport.src) {\n          subExport.src = `./${slash(path.relative(pkgRoot, chunk.facadeModuleId))}`\n        }\n      }\n    }\n  }\n\n  const sortedExportsMap = Array.from(exportsMap.entries()).toSorted(\n    ([a], [b]) => {\n      if (a === 'index') return -1\n      return a.localeCompare(b)\n    },\n  )\n\n  let exports: Record<string, any> = Object.fromEntries(\n    sortedExportsMap.map(([name, subExport]) => [\n      name,\n      genSubExport(devExports, subExport),\n    ]),\n  )\n  exportMeta(exports, all)\n  if (customExports) {\n    exports = await customExports(exports, {\n      pkg,\n      outDir,\n      chunks,\n      isPublish: false,\n    })\n  }\n\n  let publishExports: Record<string, any> | undefined\n  if (devExports) {\n    publishExports = Object.fromEntries(\n      sortedExportsMap.map(([name, subExport]) => [\n        name,\n        genSubExport(false, subExport),\n      ]),\n    )\n    exportMeta(publishExports, all)\n    if (customExports) {\n      publishExports = await customExports(publishExports, {\n        pkg,\n        outDir,\n        chunks,\n        isPublish: true,\n      })\n    }\n  }\n\n  return {\n    main: main || module || pkg.main,\n    module: module || pkg.module,\n    types: cjsTypes || esmTypes || pkg.types,\n    exports,\n    publishExports,\n  }\n}\n\nfunction genSubExport(\n  devExports: string | boolean | undefined,\n  { src, es, cjs }: SubExport,\n) {\n  if (devExports === true) {\n    return src!\n  }\n\n  let value: any\n  const dualFormat = es && cjs\n  if (!dualFormat && !devExports) {\n    value = cjs || es\n  } else {\n    value = {}\n    if (typeof devExports === 'string') {\n      value[devExports] = src\n    }\n    if (es) value[dualFormat ? 'import' : 'default'] = es\n    if (cjs) value[dualFormat ? 'require' : 'default'] = cjs\n  }\n\n  return value\n}\n\nfunction exportMeta(exports: Record<string, any>, all?: boolean) {\n  if (all) {\n    exports['./*'] = './*'\n  } else {\n    exports['./package.json'] = './package.json'\n  }\n}\n\nexport function hasExportsTypes(pkg?: PackageJson): boolean {\n  const exports = pkg?.exports\n  if (!exports) return false\n\n  if (\n    typeof exports === 'object' &&\n    exports !== null &&\n    !Array.isArray(exports)\n  ) {\n    // Check if exports.types exists\n    if ('types' in exports) {\n      return true\n    }\n\n    // Check if exports['.'].types exists\n    if ('.' in exports) {\n      const mainExport = exports['.']\n      if (\n        typeof mainExport === 'object' &&\n        mainExport !== null &&\n        'types' in mainExport\n      ) {\n        return true\n      }\n    }\n  }\n\n  return false\n}\n"}
{"timestamp":1761897884989,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/exports.ts","content":"import { readFile, writeFile } from 'node:fs/promises'\nimport path from 'node:path'\nimport { RE_DTS } from 'rolldown-plugin-dts/filename'\nimport { slash } from '../utils/general.ts'\nimport type { NormalizedFormat, ResolvedConfig } from '../config/index.ts'\nimport type { Awaitable } from '../utils/types.ts'\nimport type { PackageJson } from 'pkg-types'\nimport type { OutputAsset, OutputChunk } from 'rolldown'\n\nexport type TsdownChunks = Partial<\n  Record<NormalizedFormat, Array<OutputChunk | OutputAsset>>\n>\n\nexport interface ExportsOptions {\n  /**\n   * Generate exports that link to source code during development.\n   * - string: add as a custom condition.\n   * - true: all conditions point to source files, and add dist exports to `publishConfig`.\n   */\n  devExports?: boolean | string\n\n  /**\n   * Exports for all files.\n   */\n  all?: boolean\n\n  customExports?: (\n    exports: Record<string, any>,\n    context: {\n      pkg: PackageJson\n      chunks: TsdownChunks\n      outDir: string\n      isPublish: boolean\n    },\n  ) => Awaitable<Record<string, any>>\n}\n\nexport async function writeExports(\n  options: ResolvedConfig,\n  chunks: TsdownChunks,\n): Promise<void> {\n  if (!options.exports) return\n\n  const { outDir, pkg } = options\n  if (!pkg) {\n    throw new Error('`package.json` not found, cannot write exports')\n  }\n\n  const { publishExports, ...generated } = await generateExports(\n    pkg,\n    outDir,\n    chunks,\n    options.exports,\n  )\n\n  const updatedPkg = {\n    ...pkg,\n    ...generated,\n    packageJsonPath: undefined,\n  }\n\n  if (publishExports) {\n    updatedPkg.publishConfig ||= {}\n    updatedPkg.publishConfig.exports = publishExports\n  }\n\n  const original = await readFile(pkg.packageJsonPath, 'utf8')\n  let contents = JSON.stringify(\n    updatedPkg,\n    null,\n    original.includes('\\t') ? '\\t' : 2,\n  )\n  if (original.endsWith('\\n')) contents += '\\n'\n  if (contents !== original) {\n    await writeFile(pkg.packageJsonPath, contents, 'utf8')\n  }\n}\n\ntype SubExport = Partial<Record<'cjs' | 'es' | 'src', string>>\n\nexport async function generateExports(\n  pkg: PackageJson,\n  outDir: string,\n  chunks: TsdownChunks,\n  { devExports, all, customExports }: ExportsOptions,\n): Promise<{\n  main: string | undefined\n  module: string | undefined\n  types: string | undefined\n  exports: Record<string, any>\n  publishExports?: Record<string, any>\n}> {\n  const pkgJsonPath = pkg.packageJsonPath as string\n  const pkgRoot = path.dirname(pkgJsonPath)\n  const outDirRelative = slash(path.relative(pkgRoot, outDir))\n\n  let main: string | undefined,\n    module: string | undefined,\n    cjsTypes: string | undefined,\n    esmTypes: string | undefined\n  const exportsMap: Map<string, SubExport> = new Map()\n\n  for (const [format, chunksByFormat] of Object.entries(chunks) as [\n    NormalizedFormat,\n    (OutputChunk | OutputAsset)[],\n  ][]) {\n    if (format !== 'es' && format !== 'cjs') continue\n\n    const onlyOneEntry =\n      chunksByFormat.filter(\n        (chunk) =>\n          chunk.type === 'chunk' &&\n          chunk.isEntry &&\n          !RE_DTS.test(chunk.fileName),\n      ).length === 1\n    for (const chunk of chunksByFormat) {\n      if (chunk.type !== 'chunk' || !chunk.isEntry) continue\n\n      const normalizedName = slash(chunk.fileName)\n      const ext = path.extname(chunk.fileName)\n      let name = normalizedName.slice(0, -ext.length)\n\n      const isDts = name.endsWith('.d')\n      if (isDts) {\n        name = name.slice(0, -2)\n      }\n      const isIndex = onlyOneEntry || name === 'index'\n      const distFile = `${outDirRelative ? `./${outDirRelative}` : '.'}/${normalizedName}`\n\n      if (isIndex) {\n        name = '.'\n        if (format === 'cjs') {\n          if (isDts) {\n            cjsTypes = distFile\n          } else {\n            main = distFile\n          }\n        } else if (format === 'es') {\n          if (isDts) {\n            esmTypes = distFile\n          } else {\n            module = distFile\n          }\n        }\n      } else if (name.endsWith('/index')) {\n        name = `./${name.slice(0, -6)}`\n      } else {\n        name = `./${name}`\n      }\n\n      let subExport = exportsMap.get(name)\n      if (!subExport) {\n        subExport = {}\n        exportsMap.set(name, subExport)\n      }\n\n      if (!isDts) {\n        subExport[format] = distFile\n        if (chunk.facadeModuleId && !subExport.src) {\n          subExport.src = `./${slash(path.relative(pkgRoot, chunk.facadeModuleId))}`\n        }\n      }\n    }\n  }\n\n  const sortedExportsMap = Array.from(exportsMap.entries()).toSorted(\n    ([a], [b]) => {\n      if (a === 'index') return -1\n      return a.localeCompare(b)\n    },\n  )\n\n  let exports: Record<string, any> = Object.fromEntries(\n    sortedExportsMap.map(([name, subExport]) => [\n      name,\n      genSubExport(devExports, subExport),\n    ]),\n  )\n  exportMeta(exports, all)\n  if (customExports) {\n    exports = await customExports(exports, {\n      pkg,\n      outDir,\n      chunks,\n      isPublish: false,\n    })\n  }\n\n  let publishExports: Record<string, any> | undefined\n  if (devExports) {\n    publishExports = Object.fromEntries(\n      sortedExportsMap.map(([name, subExport]) => [\n        name,\n        genSubExport(false, subExport),\n      ]),\n    )\n    exportMeta(publishExports, all)\n    if (customExports) {\n      publishExports = await customExports(publishExports, {\n        pkg,\n        outDir,\n        chunks,\n        isPublish: true,\n      })\n    }\n  }\n\n  return {\n    main: main || module || pkg.main,\n    module: module || pkg.module,\n    types: cjsTypes || esmTypes || pkg.types,\n    exports,\n    publishExports,\n  }\n}\n\nfunction genSubExport(\n  devExports: string | boolean | undefined,\n  { src, es, cjs }: SubExport,\n) {\n  if (devExports === true) {\n    return src!\n  }\n\n  let value: any\n  const dualFormat = es && cjs\n  if (!dualFormat && !devExports) {\n    value = cjs || es\n  } else {\n    value = {}\n    if (typeof devExports === 'string') {\n      value[devExports] = src\n    }\n    if (es) value[dualFormat ? 'import' : 'default'] = es\n    if (cjs) value[dualFormat ? 'require' : 'default'] = cjs\n  }\n\n  return value\n}\n\nfunction exportMeta(exports: Record<string, any>, all?: boolean) {\n  if (all) {\n    exports['./*'] = './*'\n  } else {\n    exports['./package.json'] = './package.json'\n  }\n}\n\nexport function hasExportsTypes(pkg?: PackageJson): boolean {\n  const exports = pkg?.exports\n  if (!exports) return false\n\n  if (\n    typeof exports === 'object' &&\n    exports !== null &&\n    !Array.isArray(exports)\n  ) {\n    // Check if exports.types exists\n    if ('types' in exports) {\n      return true\n    }\n\n    // Check if exports['.'].types exists\n    if ('.' in exports) {\n      const mainExport = exports['.']\n      if (\n        typeof mainExport === 'object' &&\n        mainExport !== null &&\n        'types' in mainExport\n      ) {\n        return true\n      }\n    }\n  }\n\n  return false\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"c0c4f77f-73ba-48cb-b4ce-e6c9e30e6b68","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884990,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"c9d47ee5-4243-4282-b3f0-dc8f909ddd4d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884990,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"8378c077-7ad7-46b2-89b3-60d9f49cba56","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884991,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","module_request":"node:buffer","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"87272af1-ccd3-44a7-b7a0-1fca1c883cd7","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884991,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"c4aa33c5-4b89-4a46-ad4c-972831b789da","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884991,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/clean.ts","module_request":"../utils/fs.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"80edeada-ca0e-4974-b25b-32d976d66637","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884991,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"f85c348d-22a9-4f27-80c2-ea7f467bf9a1","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884991,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/clean.ts","module_request":"../utils/general.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"47ae5f13-b61d-4100-922d-8feab0fc82d7","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884991,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"690ec894-ee4d-451a-b2d3-9de81f7f9017","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884991,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"aa7f614b-2794-411e-b0dc-b7eca02248c7","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884992,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"d812940b-0310-4831-b26d-1ac03bc643cc","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884992,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","module_request":"node:util","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"bc1121a2-a9d4-4edf-9a36-71206e453439","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884992,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"d3cc3b59-47a5-4721-9e73-129d69269f75","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884992,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","module_request":"node:zlib","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"2bbf151f-3a3f-41b8-82ff-a8301a78a623","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884992,"action":"HookResolveIdCallEnd","resolved_id":"ansis","is_external":true,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"25d020fb-5817-42ad-b76d-4908c839225a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884992,"action":"HookResolveIdCallEnd","resolved_id":"debug","is_external":true,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"3314b6a2-0088-4266-8fc3-2200c4564682","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884992,"action":"HookResolveIdCallEnd","resolved_id":"rolldown-plugin-dts/filename","is_external":true,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"908f0042-a873-435c-a082-f477f53a0c56","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884992,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"a365ff3a-4bc0-4a67-a94d-58dea5ef3e00","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884993,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","module_request":"../utils/format.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"c35f5564-1e5f-4a57-a84e-2d209a396a2a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884993,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"9242f43f-f2ca-45db-aade-c32cd5e71495","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884993,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","module_request":"../utils/general.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"c3e1457f-f6f4-4666-beb6-bf13c3869a0d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884993,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"b82cf02f-ebcb-4fbf-866f-4ebb1f28ec1a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884993,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"73c3cf15-947e-4faa-ad92-77c5469f0374","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884993,"action":"HookResolveIdCallEnd","resolved_id":"/Users/kevin/Developer/open-source/tsdown/src/features/external.d.ts","is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"f8dde3fb-d611-4177-a5d3-fa6d9402d5ce","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884993,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/cjs.ts","plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"255b814e-2af9-4d59-bf18-70f0c87120d1","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884993,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"87272af1-ccd3-44a7-b7a0-1fca1c883cd7","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884994,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","module_request":"node:buffer","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"3cbd062f-00d1-4bf1-a09c-703ca3b486d2","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884994,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"3cbd062f-00d1-4bf1-a09c-703ca3b486d2","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884994,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"aa7f614b-2794-411e-b0dc-b7eca02248c7","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884994,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"09818e29-70d4-41df-addb-f73300f6b6d3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884994,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"09818e29-70d4-41df-addb-f73300f6b6d3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884994,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"bc1121a2-a9d4-4edf-9a36-71206e453439","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884994,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","module_request":"node:util","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"8d72c8d4-9ab1-40dd-a4ef-ab04a97a8e8f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884994,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"8d72c8d4-9ab1-40dd-a4ef-ab04a97a8e8f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884995,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"2bbf151f-3a3f-41b8-82ff-a8301a78a623","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884995,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","module_request":"node:zlib","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"13a030de-c44a-4bc2-a173-89ea5d5f679f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884995,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"13a030de-c44a-4bc2-a173-89ea5d5f679f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884995,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"c35f5564-1e5f-4a57-a84e-2d209a396a2a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884995,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","module_request":"../utils/format.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"913b9d20-b9e6-4f30-ba1a-877e33910964","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884995,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"913b9d20-b9e6-4f30-ba1a-877e33910964","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884995,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"57478349-a6a9-4149-ae0f-830fceca5bc3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884996,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.ts","module_request":"node:child_process","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"240253b9-0e52-43af-8791-9c6f11e4589c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884996,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"c3e1457f-f6f4-4666-beb6-bf13c3869a0d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884996,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","module_request":"../utils/general.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"31cae724-7bbc-4aa5-85c5-0a6850b36bf5","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884996,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"31cae724-7bbc-4aa5-85c5-0a6850b36bf5","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884996,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"73c3cf15-947e-4faa-ad92-77c5469f0374","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884996,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"902613a7-6d9d-4ecc-a7c0-4034a87cac29","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884996,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"902613a7-6d9d-4ecc-a7c0-4034a87cac29","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884996,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"07f27957-9e00-4aa7-b044-65d0e8c1eda6","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884997,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"tinyglobby","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"b2cdcb71-2c7f-44e3-9779-cb99ffdd67da","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884997,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"../features/clean.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"47c81279-38bd-4be6-ae9a-a8661c2cbbbe","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884997,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"47c81279-38bd-4be6-ae9a-a8661c2cbbbe","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884997,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"../features/clean.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"009978df-2641-4ab4-a94d-c416759eb379","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884997,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/hooks.ts","plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"172268db-52bc-43a1-955d-655854963841","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884997,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"../features/entry.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"34b36822-6a40-4605-8a55-493593c2af19","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884997,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"34b36822-6a40-4605-8a55-493593c2af19","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884998,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"../features/entry.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"ea69f744-e0c8-48b2-b1bd-9ec9efc4fee0","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884998,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/utils/logger.ts","module_request":"./general.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"db81238c-4378-4de1-bb0f-51d2bee7a93b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884998,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"../features/exports.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"1ff14f68-1a03-48bc-a8f1-115adece75e0","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884998,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"1ff14f68-1a03-48bc-a8f1-115adece75e0","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884998,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"../features/exports.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"7aec06f4-5f90-4f7a-b829-9b15a43ee251","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884998,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"../features/target.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"05419d0c-2265-4aee-8cd4-2017793f0fee","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884998,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"05419d0c-2265-4aee-8cd4-2017793f0fee","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884998,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"../features/target.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"433baf32-ffcd-4eda-830c-8c03c99370d2","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884999,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"../features/tsconfig.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"74d76101-ad36-427a-85b0-20826f5e8943","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884999,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"74d76101-ad36-427a-85b0-20826f5e8943","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884999,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"../features/tsconfig.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"5861fe44-ad73-4425-a18d-f6660129a569","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884999,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"bb66507e-9437-46aa-8a47-6d5fc259216f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884999,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"../utils/general.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"6b6547c2-a75a-430d-8820-7809ff8d0f1c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884999,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"6b6547c2-a75a-430d-8820-7809ff8d0f1c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897884999,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"../utils/general.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"2e542604-a970-4be7-8db8-3a4782872fd9","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885000,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"7c62464c-22a2-4d24-aa5a-4d32f6a97cec","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885000,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"7c62464c-22a2-4d24-aa5a-4d32f6a97cec","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885000,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"a722166d-d109-4e42-b459-7c18761e25c8","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885000,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"../utils/package.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"d2652ea2-7ce2-4ca0-b207-1b93c5252eca","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885000,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"d2652ea2-7ce2-4ca0-b207-1b93c5252eca","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885000,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"../utils/package.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"b7bee75d-2784-4c6a-b50b-f35723dd5edd","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885000,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"./config.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"d3345344-3886-4ae1-a95c-65b764807ea0","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885001,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"d3345344-3886-4ae1-a95c-65b764807ea0","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885001,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/utils/logger.ts","module_request":"ansis","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"4a4e9bbf-0f15-4c86-b7fe-5aae3a41c29a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885001,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"db81238c-4378-4de1-bb0f-51d2bee7a93b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885001,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/utils/logger.ts","module_request":"./general.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"62abaf36-8811-4858-be88-9da0a9eee04c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885001,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"./config.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"c00fbcef-a3c0-49f0-a7ce-15f6b1f48033","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885001,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"./types.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"9b196e05-d981-4064-a879-3c80b57e8b4c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885001,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"9b196e05-d981-4064-a879-3c80b57e8b4c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885002,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"./types.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"06d6c1f7-8570-42fb-bc6a-adf7f3ae1e76","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885002,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"c768ecb2-5f73-43d0-bca5-e70373e66d68","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885002,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"de34a310-cb1d-4c96-acb5-d4f5ca4ac04c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885002,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"257b6ab8-7908-4291-b568-a5153365106e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885002,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"node:process","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"33700a41-d692-4a8b-a9fb-bc907b78ee2e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885002,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"d9ea9280-41a8-42bd-9d48-df0c73f2ffcd","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885002,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"ansis","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"ed46ab77-73cc-42f6-bbd1-5729f403dde8","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885002,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"124a0c1c-7c13-4a89-b6c2-edf3f0648564","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885003,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"debug","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"99699e98-5d8a-4553-8c91-e1500a4c0182","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885003,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"b2cdcb71-2c7f-44e3-9779-cb99ffdd67da","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885003,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"tinyglobby","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"74c40c64-69f6-4eea-8432-73ee9f797bc7","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885003,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"009978df-2641-4ab4-a94d-c416759eb379","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885003,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"../features/clean.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"532ae65f-468b-4463-9f28-ddb277f997eb","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885003,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/watch.ts","content":"import path from 'node:path'\nimport { blue } from 'ansis'\nimport { RE_NODE_MODULES } from 'rolldown-plugin-dts/filename'\nimport {\n  globalContext,\n  invalidateContextFile,\n} from 'rolldown-plugin-dts/tsc-context'\nimport { debounce, toArray } from '../utils/general.ts'\nimport type { ResolvedConfig } from '../config/index.ts'\nimport type { FSWatcher } from 'chokidar'\n\nconst endsWithConfig =\n  /[\\\\/](?:(?:package|tsconfig)\\.json|pnpm-(?:workspace|lock)\\.yaml|tsdown\\.config.*)$/\n\nexport async function watchBuild(\n  options: ResolvedConfig,\n  configFiles: string[],\n  rebuild: () => Promise<void>,\n  restart: () => Promise<void>,\n): Promise<FSWatcher> {\n  if (typeof options.watch === 'boolean' && options.outDir === options.cwd) {\n    throw new Error(\n      `Watch is enabled, but output directory is the same as the current working directory.` +\n        `Please specify a different watch directory using ${blue`watch`} option,` +\n        `or set ${blue`outDir`} to a different directory.`,\n    )\n  }\n\n  const files = toArray(\n    typeof options.watch === 'boolean' ? options.cwd : options.watch,\n  )\n  options.logger.info(`Watching for changes in ${files.join(', ')}`)\n  files.push(...configFiles)\n\n  const { watch } = await import('chokidar')\n  const debouncedOnChange = debounce(onChange, 100)\n\n  const watcher = watch(files, {\n    cwd: options.cwd,\n    ignoreInitial: true,\n    ignorePermissionErrors: true,\n    ignored: [\n      /[\\\\/]\\.git[\\\\/]/,\n      RE_NODE_MODULES,\n      options.outDir,\n      ...options.ignoreWatch,\n    ],\n  })\n\n  let pending: string[] = []\n  let pendingPromise: Promise<void> | undefined\n  watcher.on('all', (type, file) => {\n    pending.push(path.resolve(options.cwd, file))\n    debouncedOnChange()\n  })\n\n  return watcher\n\n  async function onChange() {\n    await pendingPromise\n\n    if (!pending.length) {\n      return\n    }\n\n    for (const file of pending) {\n      invalidateContextFile(globalContext, file)\n    }\n\n    const configRelated = pending.some(\n      (file) => configFiles.includes(file) || endsWithConfig.test(file),\n    )\n\n    if (configRelated) {\n      options.logger.info(`Restarting due to config change...`)\n      pendingPromise = restart()\n    } else {\n      options.logger.info(`Change detected: ${pending.join(', ')}`)\n      pendingPromise = rebuild()\n    }\n    pending = []\n    await pendingPromise\n  }\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"22162c99-b6ac-4f33-aab6-6f007e2f85e3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885004,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"ea69f744-e0c8-48b2-b1bd-9ec9efc4fee0","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885004,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/watch.ts","content":"import path from 'node:path'\nimport { blue } from 'ansis'\nimport { RE_NODE_MODULES } from 'rolldown-plugin-dts/filename'\nimport {\n  globalContext,\n  invalidateContextFile,\n} from 'rolldown-plugin-dts/tsc-context'\nimport { debounce, toArray } from '../utils/general.ts'\nimport type { ResolvedConfig } from '../config/index.ts'\nimport type { FSWatcher } from 'chokidar'\n\nconst endsWithConfig =\n  /[\\\\/](?:(?:package|tsconfig)\\.json|pnpm-(?:workspace|lock)\\.yaml|tsdown\\.config.*)$/\n\nexport async function watchBuild(\n  options: ResolvedConfig,\n  configFiles: string[],\n  rebuild: () => Promise<void>,\n  restart: () => Promise<void>,\n): Promise<FSWatcher> {\n  if (typeof options.watch === 'boolean' && options.outDir === options.cwd) {\n    throw new Error(\n      `Watch is enabled, but output directory is the same as the current working directory.` +\n        `Please specify a different watch directory using ${blue`watch`} option,` +\n        `or set ${blue`outDir`} to a different directory.`,\n    )\n  }\n\n  const files = toArray(\n    typeof options.watch === 'boolean' ? options.cwd : options.watch,\n  )\n  options.logger.info(`Watching for changes in ${files.join(', ')}`)\n  files.push(...configFiles)\n\n  const { watch } = await import('chokidar')\n  const debouncedOnChange = debounce(onChange, 100)\n\n  const watcher = watch(files, {\n    cwd: options.cwd,\n    ignoreInitial: true,\n    ignorePermissionErrors: true,\n    ignored: [\n      /[\\\\/]\\.git[\\\\/]/,\n      RE_NODE_MODULES,\n      options.outDir,\n      ...options.ignoreWatch,\n    ],\n  })\n\n  let pending: string[] = []\n  let pendingPromise: Promise<void> | undefined\n  watcher.on('all', (type, file) => {\n    pending.push(path.resolve(options.cwd, file))\n    debouncedOnChange()\n  })\n\n  return watcher\n\n  async function onChange() {\n    await pendingPromise\n\n    if (!pending.length) {\n      return\n    }\n\n    for (const file of pending) {\n      invalidateContextFile(globalContext, file)\n    }\n\n    const configRelated = pending.some(\n      (file) => configFiles.includes(file) || endsWithConfig.test(file),\n    )\n\n    if (configRelated) {\n      options.logger.info(`Restarting due to config change...`)\n      pendingPromise = restart()\n    } else {\n      options.logger.info(`Change detected: ${pending.join(', ')}`)\n      pendingPromise = rebuild()\n    }\n    pending = []\n    await pendingPromise\n  }\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"759b5d2d-4d76-4f34-9372-d7ec5faa970e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885004,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"../features/entry.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"ccc68710-8a03-4622-ba92-8bb30eec1567","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885004,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/watch.ts","content":"import path from 'node:path'\nimport { blue } from 'ansis'\nimport { RE_NODE_MODULES } from 'rolldown-plugin-dts/filename'\nimport {\n  globalContext,\n  invalidateContextFile,\n} from 'rolldown-plugin-dts/tsc-context'\nimport { debounce, toArray } from '../utils/general.ts'\nimport type { ResolvedConfig } from '../config/index.ts'\nimport type { FSWatcher } from 'chokidar'\n\nconst endsWithConfig =\n  /[\\\\/](?:(?:package|tsconfig)\\.json|pnpm-(?:workspace|lock)\\.yaml|tsdown\\.config.*)$/\n\nexport async function watchBuild(\n  options: ResolvedConfig,\n  configFiles: string[],\n  rebuild: () => Promise<void>,\n  restart: () => Promise<void>,\n): Promise<FSWatcher> {\n  if (typeof options.watch === 'boolean' && options.outDir === options.cwd) {\n    throw new Error(\n      `Watch is enabled, but output directory is the same as the current working directory.` +\n        `Please specify a different watch directory using ${blue`watch`} option,` +\n        `or set ${blue`outDir`} to a different directory.`,\n    )\n  }\n\n  const files = toArray(\n    typeof options.watch === 'boolean' ? options.cwd : options.watch,\n  )\n  options.logger.info(`Watching for changes in ${files.join(', ')}`)\n  files.push(...configFiles)\n\n  const { watch } = await import('chokidar')\n  const debouncedOnChange = debounce(onChange, 100)\n\n  const watcher = watch(files, {\n    cwd: options.cwd,\n    ignoreInitial: true,\n    ignorePermissionErrors: true,\n    ignored: [\n      /[\\\\/]\\.git[\\\\/]/,\n      RE_NODE_MODULES,\n      options.outDir,\n      ...options.ignoreWatch,\n    ],\n  })\n\n  let pending: string[] = []\n  let pendingPromise: Promise<void> | undefined\n  watcher.on('all', (type, file) => {\n    pending.push(path.resolve(options.cwd, file))\n    debouncedOnChange()\n  })\n\n  return watcher\n\n  async function onChange() {\n    await pendingPromise\n\n    if (!pending.length) {\n      return\n    }\n\n    for (const file of pending) {\n      invalidateContextFile(globalContext, file)\n    }\n\n    const configRelated = pending.some(\n      (file) => configFiles.includes(file) || endsWithConfig.test(file),\n    )\n\n    if (configRelated) {\n      options.logger.info(`Restarting due to config change...`)\n      pendingPromise = restart()\n    } else {\n      options.logger.info(`Change detected: ${pending.join(', ')}`)\n      pendingPromise = rebuild()\n    }\n    pending = []\n    await pendingPromise\n  }\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"759b5d2d-4d76-4f34-9372-d7ec5faa970e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885005,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/watch.ts","content":"import path from 'node:path'\nimport { blue } from 'ansis'\nimport { RE_NODE_MODULES } from 'rolldown-plugin-dts/filename'\nimport {\n  globalContext,\n  invalidateContextFile,\n} from 'rolldown-plugin-dts/tsc-context'\nimport { debounce, toArray } from '../utils/general.ts'\nimport type { ResolvedConfig } from '../config/index.ts'\nimport type { FSWatcher } from 'chokidar'\n\nconst endsWithConfig =\n  /[\\\\/](?:(?:package|tsconfig)\\.json|pnpm-(?:workspace|lock)\\.yaml|tsdown\\.config.*)$/\n\nexport async function watchBuild(\n  options: ResolvedConfig,\n  configFiles: string[],\n  rebuild: () => Promise<void>,\n  restart: () => Promise<void>,\n): Promise<FSWatcher> {\n  if (typeof options.watch === 'boolean' && options.outDir === options.cwd) {\n    throw new Error(\n      `Watch is enabled, but output directory is the same as the current working directory.` +\n        `Please specify a different watch directory using ${blue`watch`} option,` +\n        `or set ${blue`outDir`} to a different directory.`,\n    )\n  }\n\n  const files = toArray(\n    typeof options.watch === 'boolean' ? options.cwd : options.watch,\n  )\n  options.logger.info(`Watching for changes in ${files.join(', ')}`)\n  files.push(...configFiles)\n\n  const { watch } = await import('chokidar')\n  const debouncedOnChange = debounce(onChange, 100)\n\n  const watcher = watch(files, {\n    cwd: options.cwd,\n    ignoreInitial: true,\n    ignorePermissionErrors: true,\n    ignored: [\n      /[\\\\/]\\.git[\\\\/]/,\n      RE_NODE_MODULES,\n      options.outDir,\n      ...options.ignoreWatch,\n    ],\n  })\n\n  let pending: string[] = []\n  let pendingPromise: Promise<void> | undefined\n  watcher.on('all', (type, file) => {\n    pending.push(path.resolve(options.cwd, file))\n    debouncedOnChange()\n  })\n\n  return watcher\n\n  async function onChange() {\n    await pendingPromise\n\n    if (!pending.length) {\n      return\n    }\n\n    for (const file of pending) {\n      invalidateContextFile(globalContext, file)\n    }\n\n    const configRelated = pending.some(\n      (file) => configFiles.includes(file) || endsWithConfig.test(file),\n    )\n\n    if (configRelated) {\n      options.logger.info(`Restarting due to config change...`)\n      pendingPromise = restart()\n    } else {\n      options.logger.info(`Change detected: ${pending.join(', ')}`)\n      pendingPromise = rebuild()\n    }\n    pending = []\n    await pendingPromise\n  }\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"f5b2d90c-d33c-4ff1-a41b-fea43ba24cbf","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885005,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"7aec06f4-5f90-4f7a-b829-9b15a43ee251","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885005,"action":"HookResolveIdCallEnd","resolved_id":"ansis","is_external":true,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"4a4e9bbf-0f15-4c86-b7fe-5aae3a41c29a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885006,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"../features/exports.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"f411435e-0176-41c5-92f8-1d2f35a09a6a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885006,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"62abaf36-8811-4858-be88-9da0a9eee04c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885006,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/utils/logger.ts","module_request":"./general.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"30b58097-5c57-461c-aa17-dc7e16b59dca","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885006,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/cjs.ts","content":null,"plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"255b814e-2af9-4d59-bf18-70f0c87120d1","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885006,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/exports.ts","content":"import { readFile, writeFile } from 'node:fs/promises'\nimport path from 'node:path'\nimport { RE_DTS } from 'rolldown-plugin-dts/filename'\nimport { slash } from '../utils/general.ts'\nimport type { NormalizedFormat, ResolvedConfig } from '../config/index.ts'\nimport type { Awaitable } from '../utils/types.ts'\nimport type { PackageJson } from 'pkg-types'\nimport type { OutputAsset, OutputChunk } from 'rolldown'\n\nexport type TsdownChunks = Partial<\n  Record<NormalizedFormat, Array<OutputChunk | OutputAsset>>\n>\n\nexport interface ExportsOptions {\n  /**\n   * Generate exports that link to source code during development.\n   * - string: add as a custom condition.\n   * - true: all conditions point to source files, and add dist exports to `publishConfig`.\n   */\n  devExports?: boolean | string\n\n  /**\n   * Exports for all files.\n   */\n  all?: boolean\n\n  customExports?: (\n    exports: Record<string, any>,\n    context: {\n      pkg: PackageJson\n      chunks: TsdownChunks\n      outDir: string\n      isPublish: boolean\n    },\n  ) => Awaitable<Record<string, any>>\n}\n\nexport async function writeExports(\n  options: ResolvedConfig,\n  chunks: TsdownChunks,\n): Promise<void> {\n  if (!options.exports) return\n\n  const { outDir, pkg } = options\n  if (!pkg) {\n    throw new Error('`package.json` not found, cannot write exports')\n  }\n\n  const { publishExports, ...generated } = await generateExports(\n    pkg,\n    outDir,\n    chunks,\n    options.exports,\n  )\n\n  const updatedPkg = {\n    ...pkg,\n    ...generated,\n    packageJsonPath: undefined,\n  }\n\n  if (publishExports) {\n    updatedPkg.publishConfig ||= {}\n    updatedPkg.publishConfig.exports = publishExports\n  }\n\n  const original = await readFile(pkg.packageJsonPath, 'utf8')\n  let contents = JSON.stringify(\n    updatedPkg,\n    null,\n    original.includes('\\t') ? '\\t' : 2,\n  )\n  if (original.endsWith('\\n')) contents += '\\n'\n  if (contents !== original) {\n    await writeFile(pkg.packageJsonPath, contents, 'utf8')\n  }\n}\n\ntype SubExport = Partial<Record<'cjs' | 'es' | 'src', string>>\n\nexport async function generateExports(\n  pkg: PackageJson,\n  outDir: string,\n  chunks: TsdownChunks,\n  { devExports, all, customExports }: ExportsOptions,\n): Promise<{\n  main: string | undefined\n  module: string | undefined\n  types: string | undefined\n  exports: Record<string, any>\n  publishExports?: Record<string, any>\n}> {\n  const pkgJsonPath = pkg.packageJsonPath as string\n  const pkgRoot = path.dirname(pkgJsonPath)\n  const outDirRelative = slash(path.relative(pkgRoot, outDir))\n\n  let main: string | undefined,\n    module: string | undefined,\n    cjsTypes: string | undefined,\n    esmTypes: string | undefined\n  const exportsMap: Map<string, SubExport> = new Map()\n\n  for (const [format, chunksByFormat] of Object.entries(chunks) as [\n    NormalizedFormat,\n    (OutputChunk | OutputAsset)[],\n  ][]) {\n    if (format !== 'es' && format !== 'cjs') continue\n\n    const onlyOneEntry =\n      chunksByFormat.filter(\n        (chunk) =>\n          chunk.type === 'chunk' &&\n          chunk.isEntry &&\n          !RE_DTS.test(chunk.fileName),\n      ).length === 1\n    for (const chunk of chunksByFormat) {\n      if (chunk.type !== 'chunk' || !chunk.isEntry) continue\n\n      const normalizedName = slash(chunk.fileName)\n      const ext = path.extname(chunk.fileName)\n      let name = normalizedName.slice(0, -ext.length)\n\n      const isDts = name.endsWith('.d')\n      if (isDts) {\n        name = name.slice(0, -2)\n      }\n      const isIndex = onlyOneEntry || name === 'index'\n      const distFile = `${outDirRelative ? `./${outDirRelative}` : '.'}/${normalizedName}`\n\n      if (isIndex) {\n        name = '.'\n        if (format === 'cjs') {\n          if (isDts) {\n            cjsTypes = distFile\n          } else {\n            main = distFile\n          }\n        } else if (format === 'es') {\n          if (isDts) {\n            esmTypes = distFile\n          } else {\n            module = distFile\n          }\n        }\n      } else if (name.endsWith('/index')) {\n        name = `./${name.slice(0, -6)}`\n      } else {\n        name = `./${name}`\n      }\n\n      let subExport = exportsMap.get(name)\n      if (!subExport) {\n        subExport = {}\n        exportsMap.set(name, subExport)\n      }\n\n      if (!isDts) {\n        subExport[format] = distFile\n        if (chunk.facadeModuleId && !subExport.src) {\n          subExport.src = `./${slash(path.relative(pkgRoot, chunk.facadeModuleId))}`\n        }\n      }\n    }\n  }\n\n  const sortedExportsMap = Array.from(exportsMap.entries()).toSorted(\n    ([a], [b]) => {\n      if (a === 'index') return -1\n      return a.localeCompare(b)\n    },\n  )\n\n  let exports: Record<string, any> = Object.fromEntries(\n    sortedExportsMap.map(([name, subExport]) => [\n      name,\n      genSubExport(devExports, subExport),\n    ]),\n  )\n  exportMeta(exports, all)\n  if (customExports) {\n    exports = await customExports(exports, {\n      pkg,\n      outDir,\n      chunks,\n      isPublish: false,\n    })\n  }\n\n  let publishExports: Record<string, any> | undefined\n  if (devExports) {\n    publishExports = Object.fromEntries(\n      sortedExportsMap.map(([name, subExport]) => [\n        name,\n        genSubExport(false, subExport),\n      ]),\n    )\n    exportMeta(publishExports, all)\n    if (customExports) {\n      publishExports = await customExports(publishExports, {\n        pkg,\n        outDir,\n        chunks,\n        isPublish: true,\n      })\n    }\n  }\n\n  return {\n    main: main || module || pkg.main,\n    module: module || pkg.module,\n    types: cjsTypes || esmTypes || pkg.types,\n    exports,\n    publishExports,\n  }\n}\n\nfunction genSubExport(\n  devExports: string | boolean | undefined,\n  { src, es, cjs }: SubExport,\n) {\n  if (devExports === true) {\n    return src!\n  }\n\n  let value: any\n  const dualFormat = es && cjs\n  if (!dualFormat && !devExports) {\n    value = cjs || es\n  } else {\n    value = {}\n    if (typeof devExports === 'string') {\n      value[devExports] = src\n    }\n    if (es) value[dualFormat ? 'import' : 'default'] = es\n    if (cjs) value[dualFormat ? 'require' : 'default'] = cjs\n  }\n\n  return value\n}\n\nfunction exportMeta(exports: Record<string, any>, all?: boolean) {\n  if (all) {\n    exports['./*'] = './*'\n  } else {\n    exports['./package.json'] = './package.json'\n  }\n}\n\nexport function hasExportsTypes(pkg?: PackageJson): boolean {\n  const exports = pkg?.exports\n  if (!exports) return false\n\n  if (\n    typeof exports === 'object' &&\n    exports !== null &&\n    !Array.isArray(exports)\n  ) {\n    // Check if exports.types exists\n    if ('types' in exports) {\n      return true\n    }\n\n    // Check if exports['.'].types exists\n    if ('.' in exports) {\n      const mainExport = exports['.']\n      if (\n        typeof mainExport === 'object' &&\n        mainExport !== null &&\n        'types' in mainExport\n      ) {\n        return true\n      }\n    }\n  }\n\n  return false\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"c0c4f77f-73ba-48cb-b4ce-e6c9e30e6b68","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885007,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/exports.ts","content":"import { readFile, writeFile } from 'node:fs/promises'\nimport path from 'node:path'\nimport { RE_DTS } from 'rolldown-plugin-dts/filename'\nimport { slash } from '../utils/general.ts'\nimport type { NormalizedFormat, ResolvedConfig } from '../config/index.ts'\nimport type { Awaitable } from '../utils/types.ts'\nimport type { PackageJson } from 'pkg-types'\nimport type { OutputAsset, OutputChunk } from 'rolldown'\n\nexport type TsdownChunks = Partial<\n  Record<NormalizedFormat, Array<OutputChunk | OutputAsset>>\n>\n\nexport interface ExportsOptions {\n  /**\n   * Generate exports that link to source code during development.\n   * - string: add as a custom condition.\n   * - true: all conditions point to source files, and add dist exports to `publishConfig`.\n   */\n  devExports?: boolean | string\n\n  /**\n   * Exports for all files.\n   */\n  all?: boolean\n\n  customExports?: (\n    exports: Record<string, any>,\n    context: {\n      pkg: PackageJson\n      chunks: TsdownChunks\n      outDir: string\n      isPublish: boolean\n    },\n  ) => Awaitable<Record<string, any>>\n}\n\nexport async function writeExports(\n  options: ResolvedConfig,\n  chunks: TsdownChunks,\n): Promise<void> {\n  if (!options.exports) return\n\n  const { outDir, pkg } = options\n  if (!pkg) {\n    throw new Error('`package.json` not found, cannot write exports')\n  }\n\n  const { publishExports, ...generated } = await generateExports(\n    pkg,\n    outDir,\n    chunks,\n    options.exports,\n  )\n\n  const updatedPkg = {\n    ...pkg,\n    ...generated,\n    packageJsonPath: undefined,\n  }\n\n  if (publishExports) {\n    updatedPkg.publishConfig ||= {}\n    updatedPkg.publishConfig.exports = publishExports\n  }\n\n  const original = await readFile(pkg.packageJsonPath, 'utf8')\n  let contents = JSON.stringify(\n    updatedPkg,\n    null,\n    original.includes('\\t') ? '\\t' : 2,\n  )\n  if (original.endsWith('\\n')) contents += '\\n'\n  if (contents !== original) {\n    await writeFile(pkg.packageJsonPath, contents, 'utf8')\n  }\n}\n\ntype SubExport = Partial<Record<'cjs' | 'es' | 'src', string>>\n\nexport async function generateExports(\n  pkg: PackageJson,\n  outDir: string,\n  chunks: TsdownChunks,\n  { devExports, all, customExports }: ExportsOptions,\n): Promise<{\n  main: string | undefined\n  module: string | undefined\n  types: string | undefined\n  exports: Record<string, any>\n  publishExports?: Record<string, any>\n}> {\n  const pkgJsonPath = pkg.packageJsonPath as string\n  const pkgRoot = path.dirname(pkgJsonPath)\n  const outDirRelative = slash(path.relative(pkgRoot, outDir))\n\n  let main: string | undefined,\n    module: string | undefined,\n    cjsTypes: string | undefined,\n    esmTypes: string | undefined\n  const exportsMap: Map<string, SubExport> = new Map()\n\n  for (const [format, chunksByFormat] of Object.entries(chunks) as [\n    NormalizedFormat,\n    (OutputChunk | OutputAsset)[],\n  ][]) {\n    if (format !== 'es' && format !== 'cjs') continue\n\n    const onlyOneEntry =\n      chunksByFormat.filter(\n        (chunk) =>\n          chunk.type === 'chunk' &&\n          chunk.isEntry &&\n          !RE_DTS.test(chunk.fileName),\n      ).length === 1\n    for (const chunk of chunksByFormat) {\n      if (chunk.type !== 'chunk' || !chunk.isEntry) continue\n\n      const normalizedName = slash(chunk.fileName)\n      const ext = path.extname(chunk.fileName)\n      let name = normalizedName.slice(0, -ext.length)\n\n      const isDts = name.endsWith('.d')\n      if (isDts) {\n        name = name.slice(0, -2)\n      }\n      const isIndex = onlyOneEntry || name === 'index'\n      const distFile = `${outDirRelative ? `./${outDirRelative}` : '.'}/${normalizedName}`\n\n      if (isIndex) {\n        name = '.'\n        if (format === 'cjs') {\n          if (isDts) {\n            cjsTypes = distFile\n          } else {\n            main = distFile\n          }\n        } else if (format === 'es') {\n          if (isDts) {\n            esmTypes = distFile\n          } else {\n            module = distFile\n          }\n        }\n      } else if (name.endsWith('/index')) {\n        name = `./${name.slice(0, -6)}`\n      } else {\n        name = `./${name}`\n      }\n\n      let subExport = exportsMap.get(name)\n      if (!subExport) {\n        subExport = {}\n        exportsMap.set(name, subExport)\n      }\n\n      if (!isDts) {\n        subExport[format] = distFile\n        if (chunk.facadeModuleId && !subExport.src) {\n          subExport.src = `./${slash(path.relative(pkgRoot, chunk.facadeModuleId))}`\n        }\n      }\n    }\n  }\n\n  const sortedExportsMap = Array.from(exportsMap.entries()).toSorted(\n    ([a], [b]) => {\n      if (a === 'index') return -1\n      return a.localeCompare(b)\n    },\n  )\n\n  let exports: Record<string, any> = Object.fromEntries(\n    sortedExportsMap.map(([name, subExport]) => [\n      name,\n      genSubExport(devExports, subExport),\n    ]),\n  )\n  exportMeta(exports, all)\n  if (customExports) {\n    exports = await customExports(exports, {\n      pkg,\n      outDir,\n      chunks,\n      isPublish: false,\n    })\n  }\n\n  let publishExports: Record<string, any> | undefined\n  if (devExports) {\n    publishExports = Object.fromEntries(\n      sortedExportsMap.map(([name, subExport]) => [\n        name,\n        genSubExport(false, subExport),\n      ]),\n    )\n    exportMeta(publishExports, all)\n    if (customExports) {\n      publishExports = await customExports(publishExports, {\n        pkg,\n        outDir,\n        chunks,\n        isPublish: true,\n      })\n    }\n  }\n\n  return {\n    main: main || module || pkg.main,\n    module: module || pkg.module,\n    types: cjsTypes || esmTypes || pkg.types,\n    exports,\n    publishExports,\n  }\n}\n\nfunction genSubExport(\n  devExports: string | boolean | undefined,\n  { src, es, cjs }: SubExport,\n) {\n  if (devExports === true) {\n    return src!\n  }\n\n  let value: any\n  const dualFormat = es && cjs\n  if (!dualFormat && !devExports) {\n    value = cjs || es\n  } else {\n    value = {}\n    if (typeof devExports === 'string') {\n      value[devExports] = src\n    }\n    if (es) value[dualFormat ? 'import' : 'default'] = es\n    if (cjs) value[dualFormat ? 'require' : 'default'] = cjs\n  }\n\n  return value\n}\n\nfunction exportMeta(exports: Record<string, any>, all?: boolean) {\n  if (all) {\n    exports['./*'] = './*'\n  } else {\n    exports['./package.json'] = './package.json'\n  }\n}\n\nexport function hasExportsTypes(pkg?: PackageJson): boolean {\n  const exports = pkg?.exports\n  if (!exports) return false\n\n  if (\n    typeof exports === 'object' &&\n    exports !== null &&\n    !Array.isArray(exports)\n  ) {\n    // Check if exports.types exists\n    if ('types' in exports) {\n      return true\n    }\n\n    // Check if exports['.'].types exists\n    if ('.' in exports) {\n      const mainExport = exports['.']\n      if (\n        typeof mainExport === 'object' &&\n        mainExport !== null &&\n        'types' in mainExport\n      ) {\n        return true\n      }\n    }\n  }\n\n  return false\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"5d2e9bfd-aa45-4e92-a550-92b5c30c5437","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885008,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/copy.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"b706497e-5163-45a1-ad9d-3cb93d9b9693","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885008,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/exports.ts","content":"import { readFile, writeFile } from 'node:fs/promises'\nimport path from 'node:path'\nimport { RE_DTS } from 'rolldown-plugin-dts/filename'\nimport { slash } from '../utils/general.ts'\nimport type { NormalizedFormat, ResolvedConfig } from '../config/index.ts'\nimport type { Awaitable } from '../utils/types.ts'\nimport type { PackageJson } from 'pkg-types'\nimport type { OutputAsset, OutputChunk } from 'rolldown'\n\nexport type TsdownChunks = Partial<\n  Record<NormalizedFormat, Array<OutputChunk | OutputAsset>>\n>\n\nexport interface ExportsOptions {\n  /**\n   * Generate exports that link to source code during development.\n   * - string: add as a custom condition.\n   * - true: all conditions point to source files, and add dist exports to `publishConfig`.\n   */\n  devExports?: boolean | string\n\n  /**\n   * Exports for all files.\n   */\n  all?: boolean\n\n  customExports?: (\n    exports: Record<string, any>,\n    context: {\n      pkg: PackageJson\n      chunks: TsdownChunks\n      outDir: string\n      isPublish: boolean\n    },\n  ) => Awaitable<Record<string, any>>\n}\n\nexport async function writeExports(\n  options: ResolvedConfig,\n  chunks: TsdownChunks,\n): Promise<void> {\n  if (!options.exports) return\n\n  const { outDir, pkg } = options\n  if (!pkg) {\n    throw new Error('`package.json` not found, cannot write exports')\n  }\n\n  const { publishExports, ...generated } = await generateExports(\n    pkg,\n    outDir,\n    chunks,\n    options.exports,\n  )\n\n  const updatedPkg = {\n    ...pkg,\n    ...generated,\n    packageJsonPath: undefined,\n  }\n\n  if (publishExports) {\n    updatedPkg.publishConfig ||= {}\n    updatedPkg.publishConfig.exports = publishExports\n  }\n\n  const original = await readFile(pkg.packageJsonPath, 'utf8')\n  let contents = JSON.stringify(\n    updatedPkg,\n    null,\n    original.includes('\\t') ? '\\t' : 2,\n  )\n  if (original.endsWith('\\n')) contents += '\\n'\n  if (contents !== original) {\n    await writeFile(pkg.packageJsonPath, contents, 'utf8')\n  }\n}\n\ntype SubExport = Partial<Record<'cjs' | 'es' | 'src', string>>\n\nexport async function generateExports(\n  pkg: PackageJson,\n  outDir: string,\n  chunks: TsdownChunks,\n  { devExports, all, customExports }: ExportsOptions,\n): Promise<{\n  main: string | undefined\n  module: string | undefined\n  types: string | undefined\n  exports: Record<string, any>\n  publishExports?: Record<string, any>\n}> {\n  const pkgJsonPath = pkg.packageJsonPath as string\n  const pkgRoot = path.dirname(pkgJsonPath)\n  const outDirRelative = slash(path.relative(pkgRoot, outDir))\n\n  let main: string | undefined,\n    module: string | undefined,\n    cjsTypes: string | undefined,\n    esmTypes: string | undefined\n  const exportsMap: Map<string, SubExport> = new Map()\n\n  for (const [format, chunksByFormat] of Object.entries(chunks) as [\n    NormalizedFormat,\n    (OutputChunk | OutputAsset)[],\n  ][]) {\n    if (format !== 'es' && format !== 'cjs') continue\n\n    const onlyOneEntry =\n      chunksByFormat.filter(\n        (chunk) =>\n          chunk.type === 'chunk' &&\n          chunk.isEntry &&\n          !RE_DTS.test(chunk.fileName),\n      ).length === 1\n    for (const chunk of chunksByFormat) {\n      if (chunk.type !== 'chunk' || !chunk.isEntry) continue\n\n      const normalizedName = slash(chunk.fileName)\n      const ext = path.extname(chunk.fileName)\n      let name = normalizedName.slice(0, -ext.length)\n\n      const isDts = name.endsWith('.d')\n      if (isDts) {\n        name = name.slice(0, -2)\n      }\n      const isIndex = onlyOneEntry || name === 'index'\n      const distFile = `${outDirRelative ? `./${outDirRelative}` : '.'}/${normalizedName}`\n\n      if (isIndex) {\n        name = '.'\n        if (format === 'cjs') {\n          if (isDts) {\n            cjsTypes = distFile\n          } else {\n            main = distFile\n          }\n        } else if (format === 'es') {\n          if (isDts) {\n            esmTypes = distFile\n          } else {\n            module = distFile\n          }\n        }\n      } else if (name.endsWith('/index')) {\n        name = `./${name.slice(0, -6)}`\n      } else {\n        name = `./${name}`\n      }\n\n      let subExport = exportsMap.get(name)\n      if (!subExport) {\n        subExport = {}\n        exportsMap.set(name, subExport)\n      }\n\n      if (!isDts) {\n        subExport[format] = distFile\n        if (chunk.facadeModuleId && !subExport.src) {\n          subExport.src = `./${slash(path.relative(pkgRoot, chunk.facadeModuleId))}`\n        }\n      }\n    }\n  }\n\n  const sortedExportsMap = Array.from(exportsMap.entries()).toSorted(\n    ([a], [b]) => {\n      if (a === 'index') return -1\n      return a.localeCompare(b)\n    },\n  )\n\n  let exports: Record<string, any> = Object.fromEntries(\n    sortedExportsMap.map(([name, subExport]) => [\n      name,\n      genSubExport(devExports, subExport),\n    ]),\n  )\n  exportMeta(exports, all)\n  if (customExports) {\n    exports = await customExports(exports, {\n      pkg,\n      outDir,\n      chunks,\n      isPublish: false,\n    })\n  }\n\n  let publishExports: Record<string, any> | undefined\n  if (devExports) {\n    publishExports = Object.fromEntries(\n      sortedExportsMap.map(([name, subExport]) => [\n        name,\n        genSubExport(false, subExport),\n      ]),\n    )\n    exportMeta(publishExports, all)\n    if (customExports) {\n      publishExports = await customExports(publishExports, {\n        pkg,\n        outDir,\n        chunks,\n        isPublish: true,\n      })\n    }\n  }\n\n  return {\n    main: main || module || pkg.main,\n    module: module || pkg.module,\n    types: cjsTypes || esmTypes || pkg.types,\n    exports,\n    publishExports,\n  }\n}\n\nfunction genSubExport(\n  devExports: string | boolean | undefined,\n  { src, es, cjs }: SubExport,\n) {\n  if (devExports === true) {\n    return src!\n  }\n\n  let value: any\n  const dualFormat = es && cjs\n  if (!dualFormat && !devExports) {\n    value = cjs || es\n  } else {\n    value = {}\n    if (typeof devExports === 'string') {\n      value[devExports] = src\n    }\n    if (es) value[dualFormat ? 'import' : 'default'] = es\n    if (cjs) value[dualFormat ? 'require' : 'default'] = cjs\n  }\n\n  return value\n}\n\nfunction exportMeta(exports: Record<string, any>, all?: boolean) {\n  if (all) {\n    exports['./*'] = './*'\n  } else {\n    exports['./package.json'] = './package.json'\n  }\n}\n\nexport function hasExportsTypes(pkg?: PackageJson): boolean {\n  const exports = pkg?.exports\n  if (!exports) return false\n\n  if (\n    typeof exports === 'object' &&\n    exports !== null &&\n    !Array.isArray(exports)\n  ) {\n    // Check if exports.types exists\n    if ('types' in exports) {\n      return true\n    }\n\n    // Check if exports['.'].types exists\n    if ('.' in exports) {\n      const mainExport = exports['.']\n      if (\n        typeof mainExport === 'object' &&\n        mainExport !== null &&\n        'types' in mainExport\n      ) {\n        return true\n      }\n    }\n  }\n\n  return false\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"5d2e9bfd-aa45-4e92-a550-92b5c30c5437","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885009,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/exports.ts","content":"import { readFile, writeFile } from 'node:fs/promises'\nimport path from 'node:path'\nimport { RE_DTS } from 'rolldown-plugin-dts/filename'\nimport { slash } from '../utils/general.ts'\nimport type { NormalizedFormat, ResolvedConfig } from '../config/index.ts'\nimport type { Awaitable } from '../utils/types.ts'\nimport type { PackageJson } from 'pkg-types'\nimport type { OutputAsset, OutputChunk } from 'rolldown'\n\nexport type TsdownChunks = Partial<\n  Record<NormalizedFormat, Array<OutputChunk | OutputAsset>>\n>\n\nexport interface ExportsOptions {\n  /**\n   * Generate exports that link to source code during development.\n   * - string: add as a custom condition.\n   * - true: all conditions point to source files, and add dist exports to `publishConfig`.\n   */\n  devExports?: boolean | string\n\n  /**\n   * Exports for all files.\n   */\n  all?: boolean\n\n  customExports?: (\n    exports: Record<string, any>,\n    context: {\n      pkg: PackageJson\n      chunks: TsdownChunks\n      outDir: string\n      isPublish: boolean\n    },\n  ) => Awaitable<Record<string, any>>\n}\n\nexport async function writeExports(\n  options: ResolvedConfig,\n  chunks: TsdownChunks,\n): Promise<void> {\n  if (!options.exports) return\n\n  const { outDir, pkg } = options\n  if (!pkg) {\n    throw new Error('`package.json` not found, cannot write exports')\n  }\n\n  const { publishExports, ...generated } = await generateExports(\n    pkg,\n    outDir,\n    chunks,\n    options.exports,\n  )\n\n  const updatedPkg = {\n    ...pkg,\n    ...generated,\n    packageJsonPath: undefined,\n  }\n\n  if (publishExports) {\n    updatedPkg.publishConfig ||= {}\n    updatedPkg.publishConfig.exports = publishExports\n  }\n\n  const original = await readFile(pkg.packageJsonPath, 'utf8')\n  let contents = JSON.stringify(\n    updatedPkg,\n    null,\n    original.includes('\\t') ? '\\t' : 2,\n  )\n  if (original.endsWith('\\n')) contents += '\\n'\n  if (contents !== original) {\n    await writeFile(pkg.packageJsonPath, contents, 'utf8')\n  }\n}\n\ntype SubExport = Partial<Record<'cjs' | 'es' | 'src', string>>\n\nexport async function generateExports(\n  pkg: PackageJson,\n  outDir: string,\n  chunks: TsdownChunks,\n  { devExports, all, customExports }: ExportsOptions,\n): Promise<{\n  main: string | undefined\n  module: string | undefined\n  types: string | undefined\n  exports: Record<string, any>\n  publishExports?: Record<string, any>\n}> {\n  const pkgJsonPath = pkg.packageJsonPath as string\n  const pkgRoot = path.dirname(pkgJsonPath)\n  const outDirRelative = slash(path.relative(pkgRoot, outDir))\n\n  let main: string | undefined,\n    module: string | undefined,\n    cjsTypes: string | undefined,\n    esmTypes: string | undefined\n  const exportsMap: Map<string, SubExport> = new Map()\n\n  for (const [format, chunksByFormat] of Object.entries(chunks) as [\n    NormalizedFormat,\n    (OutputChunk | OutputAsset)[],\n  ][]) {\n    if (format !== 'es' && format !== 'cjs') continue\n\n    const onlyOneEntry =\n      chunksByFormat.filter(\n        (chunk) =>\n          chunk.type === 'chunk' &&\n          chunk.isEntry &&\n          !RE_DTS.test(chunk.fileName),\n      ).length === 1\n    for (const chunk of chunksByFormat) {\n      if (chunk.type !== 'chunk' || !chunk.isEntry) continue\n\n      const normalizedName = slash(chunk.fileName)\n      const ext = path.extname(chunk.fileName)\n      let name = normalizedName.slice(0, -ext.length)\n\n      const isDts = name.endsWith('.d')\n      if (isDts) {\n        name = name.slice(0, -2)\n      }\n      const isIndex = onlyOneEntry || name === 'index'\n      const distFile = `${outDirRelative ? `./${outDirRelative}` : '.'}/${normalizedName}`\n\n      if (isIndex) {\n        name = '.'\n        if (format === 'cjs') {\n          if (isDts) {\n            cjsTypes = distFile\n          } else {\n            main = distFile\n          }\n        } else if (format === 'es') {\n          if (isDts) {\n            esmTypes = distFile\n          } else {\n            module = distFile\n          }\n        }\n      } else if (name.endsWith('/index')) {\n        name = `./${name.slice(0, -6)}`\n      } else {\n        name = `./${name}`\n      }\n\n      let subExport = exportsMap.get(name)\n      if (!subExport) {\n        subExport = {}\n        exportsMap.set(name, subExport)\n      }\n\n      if (!isDts) {\n        subExport[format] = distFile\n        if (chunk.facadeModuleId && !subExport.src) {\n          subExport.src = `./${slash(path.relative(pkgRoot, chunk.facadeModuleId))}`\n        }\n      }\n    }\n  }\n\n  const sortedExportsMap = Array.from(exportsMap.entries()).toSorted(\n    ([a], [b]) => {\n      if (a === 'index') return -1\n      return a.localeCompare(b)\n    },\n  )\n\n  let exports: Record<string, any> = Object.fromEntries(\n    sortedExportsMap.map(([name, subExport]) => [\n      name,\n      genSubExport(devExports, subExport),\n    ]),\n  )\n  exportMeta(exports, all)\n  if (customExports) {\n    exports = await customExports(exports, {\n      pkg,\n      outDir,\n      chunks,\n      isPublish: false,\n    })\n  }\n\n  let publishExports: Record<string, any> | undefined\n  if (devExports) {\n    publishExports = Object.fromEntries(\n      sortedExportsMap.map(([name, subExport]) => [\n        name,\n        genSubExport(false, subExport),\n      ]),\n    )\n    exportMeta(publishExports, all)\n    if (customExports) {\n      publishExports = await customExports(publishExports, {\n        pkg,\n        outDir,\n        chunks,\n        isPublish: true,\n      })\n    }\n  }\n\n  return {\n    main: main || module || pkg.main,\n    module: module || pkg.module,\n    types: cjsTypes || esmTypes || pkg.types,\n    exports,\n    publishExports,\n  }\n}\n\nfunction genSubExport(\n  devExports: string | boolean | undefined,\n  { src, es, cjs }: SubExport,\n) {\n  if (devExports === true) {\n    return src!\n  }\n\n  let value: any\n  const dualFormat = es && cjs\n  if (!dualFormat && !devExports) {\n    value = cjs || es\n  } else {\n    value = {}\n    if (typeof devExports === 'string') {\n      value[devExports] = src\n    }\n    if (es) value[dualFormat ? 'import' : 'default'] = es\n    if (cjs) value[dualFormat ? 'require' : 'default'] = cjs\n  }\n\n  return value\n}\n\nfunction exportMeta(exports: Record<string, any>, all?: boolean) {\n  if (all) {\n    exports['./*'] = './*'\n  } else {\n    exports['./package.json'] = './package.json'\n  }\n}\n\nexport function hasExportsTypes(pkg?: PackageJson): boolean {\n  const exports = pkg?.exports\n  if (!exports) return false\n\n  if (\n    typeof exports === 'object' &&\n    exports !== null &&\n    !Array.isArray(exports)\n  ) {\n    // Check if exports.types exists\n    if ('types' in exports) {\n      return true\n    }\n\n    // Check if exports['.'].types exists\n    if ('.' in exports) {\n      const mainExport = exports['.']\n      if (\n        typeof mainExport === 'object' &&\n        mainExport !== null &&\n        'types' in mainExport\n      ) {\n        return true\n      }\n    }\n  }\n\n  return false\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"deb65f2f-33c4-49c3-a78d-e9f59638c253","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885010,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"30b58097-5c57-461c-aa17-dc7e16b59dca","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885010,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/utils/logger.ts","module_request":"./general.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"97ee2f48-52af-4a17-a79a-2933ea5624ec","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885010,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"97ee2f48-52af-4a17-a79a-2933ea5624ec","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885010,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/hooks.ts","content":null,"plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"172268db-52bc-43a1-955d-655854963841","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885010,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/publint.ts","plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"bc67beaa-e59b-47a0-b808-af1f5f9a4196","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885010,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/cjs.ts","content":"import coerce from 'semver/functions/coerce.js'\nimport satisfies from 'semver/functions/satisfies.js'\nimport type { ResolvedConfig } from '../config/index.ts'\n\n/**\n * If the config includes the `cjs` format and\n * one of its target >= node 23.0.0 / 22.12.0,\n * warn the user about the deprecation of CommonJS.\n */\nexport function warnLegacyCJS(config: ResolvedConfig): void {\n  if (!config.format.includes('cjs') || !config.target) {\n    return\n  }\n\n  const legacy = config.target.some((t) => {\n    const version = coerce(t.split('node')[1])\n    return version && satisfies(version, '>=23.0.0 || >=22.12.0')\n  })\n\n  if (legacy) {\n    config.logger.warnOnce(\n      'We recommend using the ESM format instead of CommonJS.\\n' +\n        'The ESM format is compatible with modern platforms and runtimes, ' +\n        'and most new libraries are now distributed only in ESM format.\\n' +\n        'Learn more at https://nodejs.org/en/learn/modules/publishing-a-package#how-did-we-get-here',\n    )\n  }\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"c5d4181b-fe2f-4dd1-b095-f6f8a60c8c52","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885011,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/hooks.ts","content":"import { createHooks as create, type Hookable } from 'hookable'\nimport type { ResolvedConfig } from '../config/index.ts'\nimport type { BuildOptions } from 'rolldown'\n\nexport interface BuildContext {\n  options: ResolvedConfig\n  hooks: Hookable<TsdownHooks>\n}\n\nexport interface RolldownContext {\n  buildOptions: BuildOptions\n}\n\n/**\n * Hooks for tsdown.\n */\nexport interface TsdownHooks {\n  /**\n   * Invoked before each tsdown build starts.\n   * Use this hook to perform setup or preparation tasks.\n   */\n  'build:prepare': (ctx: BuildContext) => void | Promise<void>\n  /**\n   * Invoked before each Rolldown build.\n   * For dual-format builds, this hook is called for each format.\n   * Useful for configuring or modifying the build context before bundling.\n   */\n  'build:before': (ctx: BuildContext & RolldownContext) => void | Promise<void>\n  /**\n   * Invoked after each tsdown build completes.\n   * Use this hook for cleanup or post-processing tasks.\n   */\n  'build:done': (ctx: BuildContext) => void | Promise<void>\n}\n\nexport async function createHooks(options: ResolvedConfig): Promise<{\n  hooks: Hookable<TsdownHooks>\n  context: BuildContext\n}> {\n  const hooks = create<TsdownHooks>()\n  if (typeof options.hooks === 'object') {\n    hooks.addHooks(options.hooks)\n  } else if (typeof options.hooks === 'function') {\n    await options.hooks(hooks)\n  }\n  const context: BuildContext = {\n    options,\n    hooks,\n  }\n  return { hooks, context }\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"a90a39a9-673f-41f9-9c7a-6d3f25c030c6","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885011,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"6109343f-4684-4aea-9deb-b0f57b645a40","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885011,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/copy.ts","module_request":"../utils/fs.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"d6edba59-d6e5-4691-9cbb-2d3110d678e7","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885011,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"d0b2f59f-c13b-40a2-ae9b-e2c842150b43","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885011,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/copy.ts","module_request":"../utils/general.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"9f687466-8ca8-4a69-b157-6076ed848435","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885012,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.ts","module_request":"node:fs/promises","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"77bf2599-204a-4147-a5d1-0cbacf6fdb58","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885012,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"77bf2599-204a-4147-a5d1-0cbacf6fdb58","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885012,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.ts","module_request":"node:fs/promises","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"0f8a33b0-5cb4-4bf4-b30b-fc5f5d99aa73","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885012,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.ts","module_request":"node:os","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"af250894-5df5-4a45-b7c4-f95d04926cba","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885012,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"af250894-5df5-4a45-b7c4-f95d04926cba","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885012,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.ts","module_request":"node:os","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"d755b57e-adfc-4911-8acb-2545fca7a442","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885012,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"0296e726-932c-4b81-8fdf-f6c6347ff7ee","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885013,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"0296e726-932c-4b81-8fdf-f6c6347ff7ee","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885013,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"55411f89-d767-4ebd-aa14-958becf89fd3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885013,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.ts","module_request":"node:process","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"83747200-a3c3-4f18-8239-54370b70a9dd","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885013,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"83747200-a3c3-4f18-8239-54370b70a9dd","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885013,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.ts","module_request":"node:process","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"b518608f-e5dc-46f2-8402-676ee2410687","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885013,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.ts","module_request":"node:util","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"77e660ad-13dc-4bab-abb1-164eadcbdbbb","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885013,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"77e660ad-13dc-4bab-abb1-164eadcbdbbb","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885013,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.ts","module_request":"node:util","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"b8a0a846-046e-4788-a81c-24c8be16edb4","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885014,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.ts","module_request":"ansis","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"37fa660a-fcd7-4bd7-82d9-2d7ef7e020ee","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885014,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"37fa660a-fcd7-4bd7-82d9-2d7ef7e020ee","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885014,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.ts","module_request":"ansis","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"4db7b9f0-389f-4822-a669-c9fc1b5f4a3d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885014,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.ts","module_request":"debug","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"f6951ec2-cdde-4d8e-8af9-f8a6863df398","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885014,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"f6951ec2-cdde-4d8e-8af9-f8a6863df398","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885014,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.ts","module_request":"debug","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"066f3a28-9c6d-4c10-93db-7fac06e2d9ff","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885014,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/clean.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"8123161c-b2ad-4a52-be2a-b7be4cbec241","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885015,"action":"HookResolveIdCallEnd","resolved_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/logger.d.ts","is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"c2345c11-f919-48ae-beed-2f4cbfe1f161","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885015,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"d11c267f-9bbb-43ef-9404-91edf68bda0d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885015,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/clean.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"2464728d-fc2a-4bae-b0f1-20d4652ec85c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885015,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/node-protocol.ts","module_request":"node:module","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"bde1d07b-45d7-49a2-b809-4fdd975eda95","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885015,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/hooks.ts","content":"import { createHooks as create, type Hookable } from 'hookable'\nimport type { ResolvedConfig } from '../config/index.ts'\nimport type { BuildOptions } from 'rolldown'\n\nexport interface BuildContext {\n  options: ResolvedConfig\n  hooks: Hookable<TsdownHooks>\n}\n\nexport interface RolldownContext {\n  buildOptions: BuildOptions\n}\n\n/**\n * Hooks for tsdown.\n */\nexport interface TsdownHooks {\n  /**\n   * Invoked before each tsdown build starts.\n   * Use this hook to perform setup or preparation tasks.\n   */\n  'build:prepare': (ctx: BuildContext) => void | Promise<void>\n  /**\n   * Invoked before each Rolldown build.\n   * For dual-format builds, this hook is called for each format.\n   * Useful for configuring or modifying the build context before bundling.\n   */\n  'build:before': (ctx: BuildContext & RolldownContext) => void | Promise<void>\n  /**\n   * Invoked after each tsdown build completes.\n   * Use this hook for cleanup or post-processing tasks.\n   */\n  'build:done': (ctx: BuildContext) => void | Promise<void>\n}\n\nexport async function createHooks(options: ResolvedConfig): Promise<{\n  hooks: Hookable<TsdownHooks>\n  context: BuildContext\n}> {\n  const hooks = create<TsdownHooks>()\n  if (typeof options.hooks === 'object') {\n    hooks.addHooks(options.hooks)\n  } else if (typeof options.hooks === 'function') {\n    await options.hooks(hooks)\n  }\n  const context: BuildContext = {\n    options,\n    hooks,\n  }\n  return { hooks, context }\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"a90a39a9-673f-41f9-9c7a-6d3f25c030c6","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885015,"action":"HookResolveIdCallEnd","resolved_id":"debug","is_external":true,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"2a221362-6729-458c-9cb4-65b92d13308f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885016,"action":"HookResolveIdCallEnd","resolved_id":"tinyglobby","is_external":true,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"3c352f04-54b6-41ea-b594-48a7cc22ea1f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885016,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"80edeada-ca0e-4974-b25b-32d976d66637","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885016,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/hooks.ts","content":"import { createHooks as create, type Hookable } from 'hookable'\nimport type { ResolvedConfig } from '../config/index.ts'\nimport type { BuildOptions } from 'rolldown'\n\nexport interface BuildContext {\n  options: ResolvedConfig\n  hooks: Hookable<TsdownHooks>\n}\n\nexport interface RolldownContext {\n  buildOptions: BuildOptions\n}\n\n/**\n * Hooks for tsdown.\n */\nexport interface TsdownHooks {\n  /**\n   * Invoked before each tsdown build starts.\n   * Use this hook to perform setup or preparation tasks.\n   */\n  'build:prepare': (ctx: BuildContext) => void | Promise<void>\n  /**\n   * Invoked before each Rolldown build.\n   * For dual-format builds, this hook is called for each format.\n   * Useful for configuring or modifying the build context before bundling.\n   */\n  'build:before': (ctx: BuildContext & RolldownContext) => void | Promise<void>\n  /**\n   * Invoked after each tsdown build completes.\n   * Use this hook for cleanup or post-processing tasks.\n   */\n  'build:done': (ctx: BuildContext) => void | Promise<void>\n}\n\nexport async function createHooks(options: ResolvedConfig): Promise<{\n  hooks: Hookable<TsdownHooks>\n  context: BuildContext\n}> {\n  const hooks = create<TsdownHooks>()\n  if (typeof options.hooks === 'object') {\n    hooks.addHooks(options.hooks)\n  } else if (typeof options.hooks === 'function') {\n    await options.hooks(hooks)\n  }\n  const context: BuildContext = {\n    options,\n    hooks,\n  }\n  return { hooks, context }\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"b7f1c2ed-823d-46f7-8804-04776576fa62","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885016,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/clean.ts","module_request":"../utils/fs.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"88612ba3-3e84-4dd7-b2ec-becf29885338","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885016,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"47ae5f13-b61d-4100-922d-8feab0fc82d7","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885016,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/clean.ts","module_request":"../utils/general.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"3c16bab0-8a82-478e-863d-b6884f31bf79","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885017,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"8123161c-b2ad-4a52-be2a-b7be4cbec241","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885017,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/hooks.ts","content":"import { createHooks as create, type Hookable } from 'hookable'\nimport type { ResolvedConfig } from '../config/index.ts'\nimport type { BuildOptions } from 'rolldown'\n\nexport interface BuildContext {\n  options: ResolvedConfig\n  hooks: Hookable<TsdownHooks>\n}\n\nexport interface RolldownContext {\n  buildOptions: BuildOptions\n}\n\n/**\n * Hooks for tsdown.\n */\nexport interface TsdownHooks {\n  /**\n   * Invoked before each tsdown build starts.\n   * Use this hook to perform setup or preparation tasks.\n   */\n  'build:prepare': (ctx: BuildContext) => void | Promise<void>\n  /**\n   * Invoked before each Rolldown build.\n   * For dual-format builds, this hook is called for each format.\n   * Useful for configuring or modifying the build context before bundling.\n   */\n  'build:before': (ctx: BuildContext & RolldownContext) => void | Promise<void>\n  /**\n   * Invoked after each tsdown build completes.\n   * Use this hook for cleanup or post-processing tasks.\n   */\n  'build:done': (ctx: BuildContext) => void | Promise<void>\n}\n\nexport async function createHooks(options: ResolvedConfig): Promise<{\n  hooks: Hookable<TsdownHooks>\n  context: BuildContext\n}> {\n  const hooks = create<TsdownHooks>()\n  if (typeof options.hooks === 'object') {\n    hooks.addHooks(options.hooks)\n  } else if (typeof options.hooks === 'function') {\n    await options.hooks(hooks)\n  }\n  const context: BuildContext = {\n    options,\n    hooks,\n  }\n  return { hooks, context }\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"b7f1c2ed-823d-46f7-8804-04776576fa62","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885017,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/clean.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"4289bf6c-42e2-4343-a60b-24e096ee378e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885017,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/hooks.ts","content":"import { createHooks as create, type Hookable } from 'hookable'\nimport type { ResolvedConfig } from '../config/index.ts'\nimport type { BuildOptions } from 'rolldown'\n\nexport interface BuildContext {\n  options: ResolvedConfig\n  hooks: Hookable<TsdownHooks>\n}\n\nexport interface RolldownContext {\n  buildOptions: BuildOptions\n}\n\n/**\n * Hooks for tsdown.\n */\nexport interface TsdownHooks {\n  /**\n   * Invoked before each tsdown build starts.\n   * Use this hook to perform setup or preparation tasks.\n   */\n  'build:prepare': (ctx: BuildContext) => void | Promise<void>\n  /**\n   * Invoked before each Rolldown build.\n   * For dual-format builds, this hook is called for each format.\n   * Useful for configuring or modifying the build context before bundling.\n   */\n  'build:before': (ctx: BuildContext & RolldownContext) => void | Promise<void>\n  /**\n   * Invoked after each tsdown build completes.\n   * Use this hook for cleanup or post-processing tasks.\n   */\n  'build:done': (ctx: BuildContext) => void | Promise<void>\n}\n\nexport async function createHooks(options: ResolvedConfig): Promise<{\n  hooks: Hookable<TsdownHooks>\n  context: BuildContext\n}> {\n  const hooks = create<TsdownHooks>()\n  if (typeof options.hooks === 'object') {\n    hooks.addHooks(options.hooks)\n  } else if (typeof options.hooks === 'function') {\n    await options.hooks(hooks)\n  }\n  const context: BuildContext = {\n    options,\n    hooks,\n  }\n  return { hooks, context }\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"5a211f0f-ed60-49c1-b10e-e38f4ee5c285","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885017,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"bde1d07b-45d7-49a2-b809-4fdd975eda95","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885018,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"2464728d-fc2a-4bae-b0f1-20d4652ec85c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885018,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/node-protocol.ts","module_request":"node:module","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"eeb37314-3f2d-4ef1-96ee-1b26fe041bfd","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885018,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/clean.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"1c6ca250-58ef-4012-9304-1733c8d23543","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885018,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"eeb37314-3f2d-4ef1-96ee-1b26fe041bfd","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885018,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"1c6ca250-58ef-4012-9304-1733c8d23543","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885018,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/hooks.ts","content":"import { createHooks as create, type Hookable } from 'hookable'\nimport type { ResolvedConfig } from '../config/index.ts'\nimport type { BuildOptions } from 'rolldown'\n\nexport interface BuildContext {\n  options: ResolvedConfig\n  hooks: Hookable<TsdownHooks>\n}\n\nexport interface RolldownContext {\n  buildOptions: BuildOptions\n}\n\n/**\n * Hooks for tsdown.\n */\nexport interface TsdownHooks {\n  /**\n   * Invoked before each tsdown build starts.\n   * Use this hook to perform setup or preparation tasks.\n   */\n  'build:prepare': (ctx: BuildContext) => void | Promise<void>\n  /**\n   * Invoked before each Rolldown build.\n   * For dual-format builds, this hook is called for each format.\n   * Useful for configuring or modifying the build context before bundling.\n   */\n  'build:before': (ctx: BuildContext & RolldownContext) => void | Promise<void>\n  /**\n   * Invoked after each tsdown build completes.\n   * Use this hook for cleanup or post-processing tasks.\n   */\n  'build:done': (ctx: BuildContext) => void | Promise<void>\n}\n\nexport async function createHooks(options: ResolvedConfig): Promise<{\n  hooks: Hookable<TsdownHooks>\n  context: BuildContext\n}> {\n  const hooks = create<TsdownHooks>()\n  if (typeof options.hooks === 'object') {\n    hooks.addHooks(options.hooks)\n  } else if (typeof options.hooks === 'function') {\n    await options.hooks(hooks)\n  }\n  const context: BuildContext = {\n    options,\n    hooks,\n  }\n  return { hooks, context }\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"5a211f0f-ed60-49c1-b10e-e38f4ee5c285","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885018,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"88612ba3-3e84-4dd7-b2ec-becf29885338","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885019,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/exports.ts","content":"import { readFile, writeFile } from 'node:fs/promises'\nimport path from 'node:path'\nimport { RE_DTS } from 'rolldown-plugin-dts/filename'\nimport { slash } from '../utils/general.ts'\nimport type { NormalizedFormat, ResolvedConfig } from '../config/index.ts'\nimport type { Awaitable } from '../utils/types.ts'\nimport type { PackageJson } from 'pkg-types'\nimport type { OutputAsset, OutputChunk } from 'rolldown'\n\nexport type TsdownChunks = Partial<\n  Record<NormalizedFormat, Array<OutputChunk | OutputAsset>>\n>\n\nexport interface ExportsOptions {\n  /**\n   * Generate exports that link to source code during development.\n   * - string: add as a custom condition.\n   * - true: all conditions point to source files, and add dist exports to `publishConfig`.\n   */\n  devExports?: boolean | string\n\n  /**\n   * Exports for all files.\n   */\n  all?: boolean\n\n  customExports?: (\n    exports: Record<string, any>,\n    context: {\n      pkg: PackageJson\n      chunks: TsdownChunks\n      outDir: string\n      isPublish: boolean\n    },\n  ) => Awaitable<Record<string, any>>\n}\n\nexport async function writeExports(\n  options: ResolvedConfig,\n  chunks: TsdownChunks,\n): Promise<void> {\n  if (!options.exports) return\n\n  const { outDir, pkg } = options\n  if (!pkg) {\n    throw new Error('`package.json` not found, cannot write exports')\n  }\n\n  const { publishExports, ...generated } = await generateExports(\n    pkg,\n    outDir,\n    chunks,\n    options.exports,\n  )\n\n  const updatedPkg = {\n    ...pkg,\n    ...generated,\n    packageJsonPath: undefined,\n  }\n\n  if (publishExports) {\n    updatedPkg.publishConfig ||= {}\n    updatedPkg.publishConfig.exports = publishExports\n  }\n\n  const original = await readFile(pkg.packageJsonPath, 'utf8')\n  let contents = JSON.stringify(\n    updatedPkg,\n    null,\n    original.includes('\\t') ? '\\t' : 2,\n  )\n  if (original.endsWith('\\n')) contents += '\\n'\n  if (contents !== original) {\n    await writeFile(pkg.packageJsonPath, contents, 'utf8')\n  }\n}\n\ntype SubExport = Partial<Record<'cjs' | 'es' | 'src', string>>\n\nexport async function generateExports(\n  pkg: PackageJson,\n  outDir: string,\n  chunks: TsdownChunks,\n  { devExports, all, customExports }: ExportsOptions,\n): Promise<{\n  main: string | undefined\n  module: string | undefined\n  types: string | undefined\n  exports: Record<string, any>\n  publishExports?: Record<string, any>\n}> {\n  const pkgJsonPath = pkg.packageJsonPath as string\n  const pkgRoot = path.dirname(pkgJsonPath)\n  const outDirRelative = slash(path.relative(pkgRoot, outDir))\n\n  let main: string | undefined,\n    module: string | undefined,\n    cjsTypes: string | undefined,\n    esmTypes: string | undefined\n  const exportsMap: Map<string, SubExport> = new Map()\n\n  for (const [format, chunksByFormat] of Object.entries(chunks) as [\n    NormalizedFormat,\n    (OutputChunk | OutputAsset)[],\n  ][]) {\n    if (format !== 'es' && format !== 'cjs') continue\n\n    const onlyOneEntry =\n      chunksByFormat.filter(\n        (chunk) =>\n          chunk.type === 'chunk' &&\n          chunk.isEntry &&\n          !RE_DTS.test(chunk.fileName),\n      ).length === 1\n    for (const chunk of chunksByFormat) {\n      if (chunk.type !== 'chunk' || !chunk.isEntry) continue\n\n      const normalizedName = slash(chunk.fileName)\n      const ext = path.extname(chunk.fileName)\n      let name = normalizedName.slice(0, -ext.length)\n\n      const isDts = name.endsWith('.d')\n      if (isDts) {\n        name = name.slice(0, -2)\n      }\n      const isIndex = onlyOneEntry || name === 'index'\n      const distFile = `${outDirRelative ? `./${outDirRelative}` : '.'}/${normalizedName}`\n\n      if (isIndex) {\n        name = '.'\n        if (format === 'cjs') {\n          if (isDts) {\n            cjsTypes = distFile\n          } else {\n            main = distFile\n          }\n        } else if (format === 'es') {\n          if (isDts) {\n            esmTypes = distFile\n          } else {\n            module = distFile\n          }\n        }\n      } else if (name.endsWith('/index')) {\n        name = `./${name.slice(0, -6)}`\n      } else {\n        name = `./${name}`\n      }\n\n      let subExport = exportsMap.get(name)\n      if (!subExport) {\n        subExport = {}\n        exportsMap.set(name, subExport)\n      }\n\n      if (!isDts) {\n        subExport[format] = distFile\n        if (chunk.facadeModuleId && !subExport.src) {\n          subExport.src = `./${slash(path.relative(pkgRoot, chunk.facadeModuleId))}`\n        }\n      }\n    }\n  }\n\n  const sortedExportsMap = Array.from(exportsMap.entries()).toSorted(\n    ([a], [b]) => {\n      if (a === 'index') return -1\n      return a.localeCompare(b)\n    },\n  )\n\n  let exports: Record<string, any> = Object.fromEntries(\n    sortedExportsMap.map(([name, subExport]) => [\n      name,\n      genSubExport(devExports, subExport),\n    ]),\n  )\n  exportMeta(exports, all)\n  if (customExports) {\n    exports = await customExports(exports, {\n      pkg,\n      outDir,\n      chunks,\n      isPublish: false,\n    })\n  }\n\n  let publishExports: Record<string, any> | undefined\n  if (devExports) {\n    publishExports = Object.fromEntries(\n      sortedExportsMap.map(([name, subExport]) => [\n        name,\n        genSubExport(false, subExport),\n      ]),\n    )\n    exportMeta(publishExports, all)\n    if (customExports) {\n      publishExports = await customExports(publishExports, {\n        pkg,\n        outDir,\n        chunks,\n        isPublish: true,\n      })\n    }\n  }\n\n  return {\n    main: main || module || pkg.main,\n    module: module || pkg.module,\n    types: cjsTypes || esmTypes || pkg.types,\n    exports,\n    publishExports,\n  }\n}\n\nfunction genSubExport(\n  devExports: string | boolean | undefined,\n  { src, es, cjs }: SubExport,\n) {\n  if (devExports === true) {\n    return src!\n  }\n\n  let value: any\n  const dualFormat = es && cjs\n  if (!dualFormat && !devExports) {\n    value = cjs || es\n  } else {\n    value = {}\n    if (typeof devExports === 'string') {\n      value[devExports] = src\n    }\n    if (es) value[dualFormat ? 'import' : 'default'] = es\n    if (cjs) value[dualFormat ? 'require' : 'default'] = cjs\n  }\n\n  return value\n}\n\nfunction exportMeta(exports: Record<string, any>, all?: boolean) {\n  if (all) {\n    exports['./*'] = './*'\n  } else {\n    exports['./package.json'] = './package.json'\n  }\n}\n\nexport function hasExportsTypes(pkg?: PackageJson): boolean {\n  const exports = pkg?.exports\n  if (!exports) return false\n\n  if (\n    typeof exports === 'object' &&\n    exports !== null &&\n    !Array.isArray(exports)\n  ) {\n    // Check if exports.types exists\n    if ('types' in exports) {\n      return true\n    }\n\n    // Check if exports['.'].types exists\n    if ('.' in exports) {\n      const mainExport = exports['.']\n      if (\n        typeof mainExport === 'object' &&\n        mainExport !== null &&\n        'types' in mainExport\n      ) {\n        return true\n      }\n    }\n  }\n\n  return false\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"deb65f2f-33c4-49c3-a78d-e9f59638c253","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885019,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/clean.ts","module_request":"../utils/fs.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"d3b1d2a3-2788-404e-a051-869a7b24a053","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885020,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/format.ts","plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"88db21ec-7bd9-4ddc-8d83-38872b1f4a4e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885020,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"d3b1d2a3-2788-404e-a051-869a7b24a053","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885020,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/exports.ts","module_request":"node:fs/promises","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"b9bd0f47-1e0e-4ba4-91df-5bcbc0d83303","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885020,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"3c16bab0-8a82-478e-863d-b6884f31bf79","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885020,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"b9bd0f47-1e0e-4ba4-91df-5bcbc0d83303","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885020,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/clean.ts","module_request":"../utils/general.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"87c29d12-cedd-426d-927f-875240796fe1","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885020,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/exports.ts","module_request":"node:fs/promises","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"15957c01-cdf3-45a4-a24e-9d0c935f255e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885020,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"87c29d12-cedd-426d-927f-875240796fe1","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885021,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/exports.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"8ab67368-f74d-4c4f-bc1b-6354f4e2a21e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885021,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"4289bf6c-42e2-4343-a60b-24e096ee378e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885021,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"8ab67368-f74d-4c4f-bc1b-6354f4e2a21e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885021,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/clean.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"9c34da82-1680-4abb-b4e3-cfee18de3f79","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885021,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/exports.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"c66bdc19-45dd-4943-8505-af866d0773a9","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885021,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"9c34da82-1680-4abb-b4e3-cfee18de3f79","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885021,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/exports.ts","module_request":"rolldown-plugin-dts/filename","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"d8acac96-eff4-4b1c-aead-7da6ee04b36b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885022,"action":"HookResolveIdCallEnd","resolved_id":"/Users/kevin/Developer/open-source/tsdown/src/features/node-protocol.d.ts","is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"1d411440-c0a2-4302-8043-4d8856774276","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885022,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"d8acac96-eff4-4b1c-aead-7da6ee04b36b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885022,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"b706497e-5163-45a1-ad9d-3cb93d9b9693","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885022,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/exports.ts","module_request":"rolldown-plugin-dts/filename","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"c77d62a3-163a-4100-ab80-a6b34e9af864","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885022,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/copy.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"e7271e33-718a-4175-858b-771411ea718c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885022,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/exports.ts","module_request":"../utils/general.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"6d7c32ca-b079-4f8c-8e45-a49e09e76075","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885022,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"d6edba59-d6e5-4691-9cbb-2d3110d678e7","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885022,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"6d7c32ca-b079-4f8c-8e45-a49e09e76075","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885023,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/copy.ts","module_request":"../utils/fs.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"ab4d0f58-cf0c-4524-9db3-820725decf98","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885023,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/exports.ts","module_request":"../utils/general.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"58fc4836-e755-424b-87c3-04bc0af7bdec","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885023,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"9f687466-8ca8-4a69-b157-6076ed848435","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885023,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"15957c01-cdf3-45a4-a24e-9d0c935f255e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885023,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/copy.ts","module_request":"../utils/general.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"82f0224f-8e64-4f0e-96fd-e766eabad83d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885023,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/exports.ts","module_request":"node:fs/promises","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"18bdbbbc-d804-4bda-9df7-85aaef1c3f61","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885023,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"e7271e33-718a-4175-858b-771411ea718c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885023,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"c66bdc19-45dd-4943-8505-af866d0773a9","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885024,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/copy.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"4d1638f6-d53e-4a57-ad24-36f3df0540f1","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885024,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/exports.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"17ecfee0-5b3d-4cdb-b823-a04063076164","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885024,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"4d1638f6-d53e-4a57-ad24-36f3df0540f1","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885024,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"c77d62a3-163a-4100-ab80-a6b34e9af864","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885024,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"ab4d0f58-cf0c-4524-9db3-820725decf98","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885024,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/exports.ts","module_request":"rolldown-plugin-dts/filename","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"5c751a6e-170a-43d6-905a-0fd1196dad71","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885024,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"58fc4836-e755-424b-87c3-04bc0af7bdec","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885024,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/exports.ts","module_request":"../utils/general.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"954cdeb8-5fee-43f3-b3e6-ef6ff3ec2a92","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885025,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"18bdbbbc-d804-4bda-9df7-85aaef1c3f61","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885025,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/exports.ts","module_request":"node:fs/promises","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"0334f0f3-f59a-4174-a37c-b269e2b0e1a2","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885025,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"17ecfee0-5b3d-4cdb-b823-a04063076164","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885025,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/exports.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"be62e113-9b81-47dd-9c8d-a68227a3920c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885025,"action":"HookResolveIdCallEnd","resolved_id":"rolldown-plugin-dts/filename","is_external":true,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"5c751a6e-170a-43d6-905a-0fd1196dad71","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885025,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"954cdeb8-5fee-43f3-b3e6-ef6ff3ec2a92","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885025,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/exports.ts","module_request":"../utils/general.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"d55afc5d-8273-4832-923e-410a738db02f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885025,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"0334f0f3-f59a-4174-a37c-b269e2b0e1a2","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885026,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/exports.ts","module_request":"node:fs/promises","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"0bc1eeef-2461-4264-8f73-3fe97e5dec50","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885026,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"0bc1eeef-2461-4264-8f73-3fe97e5dec50","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885026,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"be62e113-9b81-47dd-9c8d-a68227a3920c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885026,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/copy.ts","module_request":"../utils/fs.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"72b0b7eb-3ffa-43cf-8a32-db3f2007d7cf","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885026,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"72b0b7eb-3ffa-43cf-8a32-db3f2007d7cf","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885026,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"82f0224f-8e64-4f0e-96fd-e766eabad83d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885026,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/copy.ts","module_request":"../utils/general.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"7dcb9011-5233-4360-8837-f3a8dc6d6e23","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885027,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"7dcb9011-5233-4360-8837-f3a8dc6d6e23","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885027,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.ts","module_request":"../utils/fs.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"6804da07-afa7-4620-bebd-4b219cb93b3c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885027,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"6804da07-afa7-4620-bebd-4b219cb93b3c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885027,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.ts","module_request":"../utils/fs.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"4196f0e0-e70d-4ec9-8481-eb320f4ad108","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885027,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.ts","module_request":"@arethetypeswrong/core","import_kind":"dynamic-import","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"4081e023-60cc-4334-b0a9-072e03ec03c7","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885027,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"4081e023-60cc-4334-b0a9-072e03ec03c7","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885027,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.ts","module_request":"@arethetypeswrong/core","import_kind":"dynamic-import","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"7a588b73-5768-434f-8c5a-2c7820e00745","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885028,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"d39d3ec7-8e33-4d28-b8fd-684c6d13bd34","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885028,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"240253b9-0e52-43af-8791-9c6f11e4589c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885028,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.ts","module_request":"node:child_process","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"29e1c6c5-d872-49ff-a366-81ddf581a828","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885028,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"0f8a33b0-5cb4-4bf4-b30b-fc5f5d99aa73","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885028,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.ts","module_request":"node:fs/promises","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"8a20aa8c-2af7-4815-af60-4d40157ca1ca","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885028,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"d755b57e-adfc-4911-8acb-2545fca7a442","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885028,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.ts","module_request":"node:os","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"1c5c11bd-7ea6-4ec6-90af-d826eedacc04","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885028,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"55411f89-d767-4ebd-aa14-958becf89fd3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885029,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","content":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"d39d3ec7-8e33-4d28-b8fd-684c6d13bd34","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885029,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/cjs.ts","content":"import coerce from 'semver/functions/coerce.js'\nimport satisfies from 'semver/functions/satisfies.js'\nimport type { ResolvedConfig } from '../config/index.ts'\n\n/**\n * If the config includes the `cjs` format and\n * one of its target >= node 23.0.0 / 22.12.0,\n * warn the user about the deprecation of CommonJS.\n */\nexport function warnLegacyCJS(config: ResolvedConfig): void {\n  if (!config.format.includes('cjs') || !config.target) {\n    return\n  }\n\n  const legacy = config.target.some((t) => {\n    const version = coerce(t.split('node')[1])\n    return version && satisfies(version, '>=23.0.0 || >=22.12.0')\n  })\n\n  if (legacy) {\n    config.logger.warnOnce(\n      'We recommend using the ESM format instead of CommonJS.\\n' +\n        'The ESM format is compatible with modern platforms and runtimes, ' +\n        'and most new libraries are now distributed only in ESM format.\\n' +\n        'Learn more at https://nodejs.org/en/learn/modules/publishing-a-package#how-did-we-get-here',\n    )\n  }\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"c5d4181b-fe2f-4dd1-b095-f6f8a60c8c52","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885029,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"5e1e7b61-cac2-4152-b86a-139b6bb0f702","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885029,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/cjs.ts","content":"import coerce from 'semver/functions/coerce.js'\nimport satisfies from 'semver/functions/satisfies.js'\nimport type { ResolvedConfig } from '../config/index.ts'\n\n/**\n * If the config includes the `cjs` format and\n * one of its target >= node 23.0.0 / 22.12.0,\n * warn the user about the deprecation of CommonJS.\n */\nexport function warnLegacyCJS(config: ResolvedConfig): void {\n  if (!config.format.includes('cjs') || !config.target) {\n    return\n  }\n\n  const legacy = config.target.some((t) => {\n    const version = coerce(t.split('node')[1])\n    return version && satisfies(version, '>=23.0.0 || >=22.12.0')\n  })\n\n  if (legacy) {\n    config.logger.warnOnce(\n      'We recommend using the ESM format instead of CommonJS.\\n' +\n        'The ESM format is compatible with modern platforms and runtimes, ' +\n        'and most new libraries are now distributed only in ESM format.\\n' +\n        'Learn more at https://nodejs.org/en/learn/modules/publishing-a-package#how-did-we-get-here',\n    )\n  }\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"83108819-4743-41d4-805a-3a72b227c891","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885029,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","content":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"5e1e7b61-cac2-4152-b86a-139b6bb0f702","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885029,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/cjs.ts","content":"import coerce from 'semver/functions/coerce.js'\nimport satisfies from 'semver/functions/satisfies.js'\nimport type { ResolvedConfig } from '../config/index.ts'\n\n/**\n * If the config includes the `cjs` format and\n * one of its target >= node 23.0.0 / 22.12.0,\n * warn the user about the deprecation of CommonJS.\n */\nexport function warnLegacyCJS(config: ResolvedConfig): void {\n  if (!config.format.includes('cjs') || !config.target) {\n    return\n  }\n\n  const legacy = config.target.some((t) => {\n    const version = coerce(t.split('node')[1])\n    return version && satisfies(version, '>=23.0.0 || >=22.12.0')\n  })\n\n  if (legacy) {\n    config.logger.warnOnce(\n      'We recommend using the ESM format instead of CommonJS.\\n' +\n        'The ESM format is compatible with modern platforms and runtimes, ' +\n        'and most new libraries are now distributed only in ESM format.\\n' +\n        'Learn more at https://nodejs.org/en/learn/modules/publishing-a-package#how-did-we-get-here',\n    )\n  }\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"83108819-4743-41d4-805a-3a72b227c891","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885030,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/cjs.ts","content":"import coerce from 'semver/functions/coerce.js'\nimport satisfies from 'semver/functions/satisfies.js'\nimport type { ResolvedConfig } from '../config/index.ts'\n\n/**\n * If the config includes the `cjs` format and\n * one of its target >= node 23.0.0 / 22.12.0,\n * warn the user about the deprecation of CommonJS.\n */\nexport function warnLegacyCJS(config: ResolvedConfig): void {\n  if (!config.format.includes('cjs') || !config.target) {\n    return\n  }\n\n  const legacy = config.target.some((t) => {\n    const version = coerce(t.split('node')[1])\n    return version && satisfies(version, '>=23.0.0 || >=22.12.0')\n  })\n\n  if (legacy) {\n    config.logger.warnOnce(\n      'We recommend using the ESM format instead of CommonJS.\\n' +\n        'The ESM format is compatible with modern platforms and runtimes, ' +\n        'and most new libraries are now distributed only in ESM format.\\n' +\n        'Learn more at https://nodejs.org/en/learn/modules/publishing-a-package#how-did-we-get-here',\n    )\n  }\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"78cee702-aea0-46bf-9bf1-b9e96d25ac84","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885030,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/shortcuts.ts","plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"519f3a8b-8854-4191-8f90-7104022345d6","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885030,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/shortcuts.ts","content":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"519f3a8b-8854-4191-8f90-7104022345d6","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885030,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/shortcuts.ts","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"1474dce7-65b4-4180-90bb-356a0cb4dd97","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885030,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/hooks.ts","module_request":"hookable","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"c24ebffc-8ab6-4e34-8e28-3d6cef4bad8d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885030,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"c24ebffc-8ab6-4e34-8e28-3d6cef4bad8d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885030,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/hooks.ts","module_request":"hookable","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"10e20348-9fcc-45f5-aafd-1109d8cd1684","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885031,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/cjs.ts","content":"import coerce from 'semver/functions/coerce.js'\nimport satisfies from 'semver/functions/satisfies.js'\nimport type { ResolvedConfig } from '../config/index.ts'\n\n/**\n * If the config includes the `cjs` format and\n * one of its target >= node 23.0.0 / 22.12.0,\n * warn the user about the deprecation of CommonJS.\n */\nexport function warnLegacyCJS(config: ResolvedConfig): void {\n  if (!config.format.includes('cjs') || !config.target) {\n    return\n  }\n\n  const legacy = config.target.some((t) => {\n    const version = coerce(t.split('node')[1])\n    return version && satisfies(version, '>=23.0.0 || >=22.12.0')\n  })\n\n  if (legacy) {\n    config.logger.warnOnce(\n      'We recommend using the ESM format instead of CommonJS.\\n' +\n        'The ESM format is compatible with modern platforms and runtimes, ' +\n        'and most new libraries are now distributed only in ESM format.\\n' +\n        'Learn more at https://nodejs.org/en/learn/modules/publishing-a-package#how-did-we-get-here',\n    )\n  }\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"78cee702-aea0-46bf-9bf1-b9e96d25ac84","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885031,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/shortcuts.ts","content":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"1474dce7-65b4-4180-90bb-356a0cb4dd97","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885031,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/cjs.ts","module_request":"semver/functions/coerce.js","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"bcfdba2d-af1f-4918-b488-8277a0a14945","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885031,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"bcfdba2d-af1f-4918-b488-8277a0a14945","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885031,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/cjs.ts","module_request":"semver/functions/coerce.js","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"3ac34f5e-664c-4fac-840b-336b84925f55","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885032,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/publint.ts","content":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"bc67beaa-e59b-47a0-b808-af1f5f9a4196","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885032,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/publint.ts","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"4b509eea-ad70-441d-a50e-ba1e63178ff6","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885032,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/publint.ts","content":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"4b509eea-ad70-441d-a50e-ba1e63178ff6","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885032,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/cjs.ts","module_request":"semver/functions/satisfies.js","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"f9698aa3-87a7-4bc2-a757-7ca1d00a0ff8","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885032,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"f9698aa3-87a7-4bc2-a757-7ca1d00a0ff8","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885032,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/cjs.ts","module_request":"semver/functions/satisfies.js","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"fe9d01ca-d459-4790-a2d4-bd77d861e3aa","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885032,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"10e20348-9fcc-45f5-aafd-1109d8cd1684","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885032,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/hooks.ts","module_request":"hookable","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"82f916b3-6202-4589-a6c6-267c015e50ac","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885033,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"3ac34f5e-664c-4fac-840b-336b84925f55","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885033,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/cjs.ts","module_request":"semver/functions/coerce.js","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"2b9517a0-e1c8-4723-80ee-15f1515e5309","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885033,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"fe9d01ca-d459-4790-a2d4-bd77d861e3aa","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885033,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/exports.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"16116130-3ba9-4da8-a261-c955589cc690","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885033,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"16116130-3ba9-4da8-a261-c955589cc690","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885033,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"d55afc5d-8273-4832-923e-410a738db02f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885033,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/exports.ts","module_request":"../utils/general.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"890be55a-0c71-466d-b9fb-86ff25a48b25","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885033,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"890be55a-0c71-466d-b9fb-86ff25a48b25","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885034,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/cjs.ts","module_request":"semver/functions/satisfies.js","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"71d67a2c-03b2-42c5-b3e8-adcfe09dcfed","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885034,"action":"HookResolveIdCallEnd","resolved_id":"semver/functions/coerce.js","is_external":true,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"2b9517a0-e1c8-4723-80ee-15f1515e5309","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885034,"action":"HookResolveIdCallEnd","resolved_id":"semver/functions/satisfies.js","is_external":true,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"71d67a2c-03b2-42c5-b3e8-adcfe09dcfed","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885034,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/format.ts","content":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"88db21ec-7bd9-4ddc-8d83-38872b1f4a4e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885034,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/format.ts","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"4801b960-afff-409b-892f-122bc24c40e2","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885034,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/format.ts","content":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"4801b960-afff-409b-892f-122bc24c40e2","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885034,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/format.ts","plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"e7453341-064a-4fde-b755-4036fe430af0","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885034,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/format.ts","content":null,"plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"e7453341-064a-4fde-b755-4036fe430af0","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885035,"action":"HookResolveIdCallEnd","resolved_id":"/Users/kevin/Developer/open-source/tsdown/src/features/report.d.ts","is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"1fb936da-1f36-4a5d-a9bf-8595e50b70a0","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885035,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/package.json","plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"bf5ad737-a31d-4c6a-83eb-f81802fd06b7","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885035,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/package.json","content":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"bf5ad737-a31d-4c6a-83eb-f81802fd06b7","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885035,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/package.json","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"ec91acfa-4945-4b87-8fe4-5d528e40f702","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885035,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/package.json","content":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"ec91acfa-4945-4b87-8fe4-5d528e40f702","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885035,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/package.json","plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"e3c6a301-8105-435b-8d55-56f7dfbb9e68","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885035,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/package.json","content":null,"plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"e3c6a301-8105-435b-8d55-56f7dfbb9e68","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885035,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/format.ts","content":"export function formatBytes(bytes: number): string | undefined {\n  if (bytes === Infinity) return undefined\n  return `${(bytes / 1000).toFixed(2)} kB`\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"1b54da6b-5e1e-4898-bb30-59c0981b0727","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885035,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/node-protocol.d.ts","plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"aad80e19-d30a-4973-8f93-c75b68756ad4","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885036,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/node-protocol.d.ts","content":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"aad80e19-d30a-4973-8f93-c75b68756ad4","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885036,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/node-protocol.d.ts","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"3d83d669-96b0-4f16-817c-2aa54b4f85a5","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885036,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/format.ts","content":"export function formatBytes(bytes: number): string | undefined {\n  if (bytes === Infinity) return undefined\n  return `${(bytes / 1000).toFixed(2)} kB`\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"1b54da6b-5e1e-4898-bb30-59c0981b0727","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885036,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/format.ts","content":"export function formatBytes(bytes: number): string | undefined {\n  if (bytes === Infinity) return undefined\n  return `${(bytes / 1000).toFixed(2)} kB`\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"7f605210-9d23-431b-89ea-e5bbd69c9063","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885036,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/format.ts","content":"export function formatBytes(bytes: number): string | undefined {\n  if (bytes === Infinity) return undefined\n  return `${(bytes / 1000).toFixed(2)} kB`\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"7f605210-9d23-431b-89ea-e5bbd69c9063","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885036,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/format.ts","content":"export function formatBytes(bytes: number): string | undefined {\n  if (bytes === Infinity) return undefined\n  return `${(bytes / 1000).toFixed(2)} kB`\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"2da60629-da07-4313-86d8-25929106e2ae","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885036,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/node-protocol.d.ts","content":"import type { Plugin } from \"rolldown\";\n/**\n* The `node:` protocol was added in Node.js v14.18.0.\n* @see https://nodejs.org/api/esm.html#node-imports\n*/\nexport declare function NodeProtocolPlugin(nodeProtocolOption: \"strip\" | true): Plugin;\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"3d83d669-96b0-4f16-817c-2aa54b4f85a5","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885036,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/node-protocol.d.ts","content":"import type { Plugin } from \"rolldown\";\n/**\n* The `node:` protocol was added in Node.js v14.18.0.\n* @see https://nodejs.org/api/esm.html#node-imports\n*/\nexport declare function NodeProtocolPlugin(nodeProtocolOption: \"strip\" | true): Plugin;\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"49a9b357-0cd8-4e48-8b42-1da861eee973","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885037,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/node-protocol.d.ts","content":"import type { Plugin } from \"rolldown\";\n/**\n* The `node:` protocol was added in Node.js v14.18.0.\n* @see https://nodejs.org/api/esm.html#node-imports\n*/\nexport declare function NodeProtocolPlugin(nodeProtocolOption: \"strip\" | true): Plugin;\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"49a9b357-0cd8-4e48-8b42-1da861eee973","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885037,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/node-protocol.d.ts","content":"import type { Plugin } from \"rolldown\";\n/**\n* The `node:` protocol was added in Node.js v14.18.0.\n* @see https://nodejs.org/api/esm.html#node-imports\n*/\nexport declare function NodeProtocolPlugin(nodeProtocolOption: \"strip\" | true): Plugin;\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"bf968781-c77c-41ee-a74f-ef6b2554527c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885037,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/external.d.ts","plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"37ad85f1-7a24-4222-9696-95b28911a57a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885037,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/external.d.ts","content":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"37ad85f1-7a24-4222-9696-95b28911a57a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885037,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/external.d.ts","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"4a2e384b-f5d7-4cac-97bc-1a862e7defd0","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885037,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/format.ts","content":"export function formatBytes(bytes: number): string | undefined {\n  if (bytes === Infinity) return undefined\n  return `${(bytes / 1000).toFixed(2)} kB`\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"2da60629-da07-4313-86d8-25929106e2ae","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885037,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/shortcuts.ts","plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"cc90ba2f-643f-4b71-9adb-7659d39b14c2","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885038,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/shebang.d.ts","plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"81a4401f-c083-4179-8d40-08e2fb966a5e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885038,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/shebang.d.ts","content":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"81a4401f-c083-4179-8d40-08e2fb966a5e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885038,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/shebang.d.ts","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"3f5d3ea4-fa02-4cb2-9a34-8c90c219e487","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885038,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/shortcuts.ts","content":null,"plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"cc90ba2f-643f-4b71-9adb-7659d39b14c2","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885038,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/node-protocol.d.ts","content":"import { Plugin } from \"rolldown\";\nexport var NodeProtocolPlugin = [7, () => [Plugin]];","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"bf968781-c77c-41ee-a74f-ef6b2554527c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885038,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/migrate.ts","plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"0b3981c0-ef84-4126-8a2c-8914b2950ddd","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885038,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/migrate.ts","content":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"0b3981c0-ef84-4126-8a2c-8914b2950ddd","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885038,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/migrate.ts","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"db340742-1334-4836-b50e-e820aaee78bc","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885039,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/migrate.ts","content":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"db340742-1334-4836-b50e-e820aaee78bc","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885039,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/migrate.ts","plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"384e479d-09b7-4c4e-bbaf-f1a44034cf0b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885039,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/migrate.ts","content":null,"plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"384e479d-09b7-4c4e-bbaf-f1a44034cf0b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885039,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/general.ts","plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"829f2127-f587-477a-b4af-4091229d2a73","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885039,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/general.ts","content":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"829f2127-f587-477a-b4af-4091229d2a73","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885039,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/general.ts","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"6af33150-3a01-43d9-a753-e7e9a8184e07","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885039,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/general.ts","content":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"6af33150-3a01-43d9-a753-e7e9a8184e07","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885039,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/general.ts","plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"f86cb6d1-c911-4e11-b437-ceedcd29989e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885039,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/general.ts","content":null,"plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"f86cb6d1-c911-4e11-b437-ceedcd29989e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885040,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/shebang.d.ts","content":"import { type Logger } from \"../utils/logger.ts\";\nimport type { Plugin } from \"rolldown\";\nexport declare function ShebangPlugin(logger: Logger, cwd: string, name?: string, isMultiFormat?: boolean): Plugin;\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"3f5d3ea4-fa02-4cb2-9a34-8c90c219e487","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885040,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/shebang.d.ts","content":"import { type Logger } from \"../utils/logger.ts\";\nimport type { Plugin } from \"rolldown\";\nexport declare function ShebangPlugin(logger: Logger, cwd: string, name?: string, isMultiFormat?: boolean): Plugin;\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"e0cd71c2-d59a-4f35-b64a-389b94febda0","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885040,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/shebang.d.ts","content":"import { type Logger } from \"../utils/logger.ts\";\nimport type { Plugin } from \"rolldown\";\nexport declare function ShebangPlugin(logger: Logger, cwd: string, name?: string, isMultiFormat?: boolean): Plugin;\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"e0cd71c2-d59a-4f35-b64a-389b94febda0","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885040,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/shebang.d.ts","content":"import { type Logger } from \"../utils/logger.ts\";\nimport type { Plugin } from \"rolldown\";\nexport declare function ShebangPlugin(logger: Logger, cwd: string, name?: string, isMultiFormat?: boolean): Plugin;\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"8deacb37-2190-4aee-a68a-b6246e11b7cf","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885040,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/shortcuts.ts","content":"import process from 'node:process'\nimport readline from 'node:readline'\nimport { bold, dim } from 'ansis'\nimport { globalLogger } from '../utils/logger.ts'\n\n// Copied from https://github.com/vitejs/vite/blob/main/packages/vite/src/node/shortcuts.ts - MIT License\n\nexport interface Shortcut {\n  key: string\n  description: string\n  action: () => void | Promise<void>\n}\n\nexport function shortcuts(restart: () => void): () => void {\n  let actionRunning = false\n  async function onInput(input: string) {\n    if (actionRunning) return\n    const SHORTCUTS: Shortcut[] = [\n      {\n        key: 'r',\n        description: 'reload config and rebuild',\n        action() {\n          restart()\n        },\n      },\n      {\n        key: 'c',\n        description: 'clear console',\n        action() {\n          console.clear()\n        },\n      },\n      {\n        key: 'q',\n        description: 'quit',\n        action() {\n          process.exit(0)\n        },\n      },\n    ]\n\n    if (input === 'h') {\n      const loggedKeys = new Set<string>()\n      globalLogger.info('  Shortcuts')\n\n      for (const shortcut of SHORTCUTS) {\n        if (loggedKeys.has(shortcut.key)) continue\n        loggedKeys.add(shortcut.key)\n\n        if (shortcut.action == null) continue\n\n        globalLogger.info(\n          dim`  press ` +\n            bold`${shortcut.key} + enter` +\n            dim` to ${shortcut.description}`,\n        )\n      }\n\n      return\n    }\n\n    const shortcut = SHORTCUTS.find((shortcut) => shortcut.key === input)\n    if (!shortcut) return\n\n    actionRunning = true\n    await shortcut.action()\n    actionRunning = false\n  }\n\n  const rl = readline.createInterface({\n    input: process.stdin,\n  })\n  rl.on('line', onInput)\n  return () => rl.close()\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"deccb388-4d92-430b-b0dd-7524b1d40282","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885040,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/node-protocol.d.ts","content":"import { Plugin } from \"rolldown\";\nexport var NodeProtocolPlugin = [7, () => [Plugin]];","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"915ece90-6392-41e5-b453-dddd4da4d5b4","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885041,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/migrate.ts","content":"import { existsSync } from 'node:fs'\nimport { readFile, unlink, writeFile } from 'node:fs/promises'\nimport process from 'node:process'\nimport { createInterface } from 'node:readline/promises'\nimport { bold, green, underline } from 'ansis'\nimport pkg from '../package.json' with { type: 'json' }\nimport { globalLogger } from './utils/logger.ts'\n\nexport async function migrate({\n  cwd,\n  dryRun,\n}: {\n  cwd?: string\n  dryRun?: boolean\n}): Promise<void> {\n  if (dryRun) {\n    globalLogger.info('Dry run enabled. No changes were made.')\n  } else {\n    const rl = createInterface({\n      input: process.stdin,\n      output: process.stdout,\n    })\n\n    globalLogger.warn(\n      `\\n\\n` +\n        `Before proceeding, review the migration guide at ${underline`https://tsdown.dev/guide/migrate-from-tsup`}, as this process will modify your files.\\n` +\n        `Uncommitted changes will be lost. Use the ${green`--dry-run`} flag to preview changes without applying them.`,\n    )\n    const input = await rl.question(bold`Continue? (Y/n) `)\n    rl.close()\n\n    const confirm = input.toLowerCase() === 'y' || input === ''\n    if (!confirm) {\n      globalLogger.error('Migration cancelled.')\n      process.exitCode = 1\n      return\n    }\n  }\n\n  if (cwd) process.chdir(cwd)\n\n  let migrated = await migratePackageJson(dryRun)\n  if (await migrateTsupConfig(dryRun)) {\n    migrated = true\n  }\n  if (migrated) {\n    globalLogger.success(\n      'Migration completed. Remember to run install command with your package manager.',\n    )\n  } else {\n    globalLogger.error('No migration performed.')\n    process.exitCode = 1\n  }\n}\n\nconst DEP_FIELDS = {\n  dependencies: `^${pkg.version}`,\n  devDependencies: `^${pkg.version}`,\n  peerDependencies: '*',\n} as const\nasync function migratePackageJson(dryRun?: boolean): Promise<boolean> {\n  if (!existsSync('package.json')) {\n    globalLogger.error('No package.json found')\n    return false\n  }\n\n  const pkgRaw = await readFile('package.json', 'utf8')\n  let pkg = JSON.parse(pkgRaw)\n  let found = false\n\n  for (const [field, semver] of Object.entries(DEP_FIELDS)) {\n    if (pkg[field]?.tsup) {\n      globalLogger.info(`Migrating \\`${field}\\` to tsdown.`)\n      found = true\n      pkg[field] = renameKey(pkg[field], 'tsup', 'tsdown', semver)\n    }\n  }\n\n  if (pkg.scripts) {\n    for (const key of Object.keys(pkg.scripts)) {\n      if (pkg.scripts[key].includes('tsup')) {\n        globalLogger.info(`Migrating \\`${key}\\` script to tsdown`)\n        found = true\n        pkg.scripts[key] = pkg.scripts[key].replaceAll(\n          /tsup(?:-node)?/g,\n          'tsdown',\n        )\n      }\n    }\n  }\n  if (pkg.tsup) {\n    globalLogger.info('Migrating `tsup` field in package.json to `tsdown`.')\n    found = true\n    pkg = renameKey(pkg, 'tsup', 'tsdown')\n  }\n\n  if (!found) {\n    globalLogger.warn('No tsup-related fields found in package.json')\n    return false\n  }\n\n  const pkgStr = `${JSON.stringify(pkg, null, pkgRaw.includes('\\t') ? '\\t' : 2)}\\n`\n  if (dryRun) {\n    const { createPatch } = await import('diff')\n    globalLogger.info('[dry-run] package.json:')\n    console.info(createPatch('package.json', pkgRaw, pkgStr))\n  } else {\n    await writeFile('package.json', pkgStr)\n    globalLogger.success('Migrated `package.json`')\n  }\n  return true\n}\n\nconst TSUP_FILES = [\n  'tsup.config.ts',\n  'tsup.config.cts',\n  'tsup.config.mts',\n  'tsup.config.js',\n  'tsup.config.cjs',\n  'tsup.config.mjs',\n  'tsup.config.json',\n]\nasync function migrateTsupConfig(dryRun?: boolean): Promise<boolean> {\n  let found = false\n\n  for (const file of TSUP_FILES) {\n    if (!existsSync(file)) continue\n    globalLogger.info(`Found \\`${file}\\``)\n    found = true\n\n    const tsupConfigRaw = await readFile(file, 'utf8')\n    const tsupConfig = tsupConfigRaw\n      .replaceAll(/\\btsup\\b/g, 'tsdown')\n      .replaceAll(/\\bTSUP\\b/g, 'TSDOWN')\n\n    const renamed = file.replaceAll('tsup', 'tsdown')\n    if (dryRun) {\n      const { createTwoFilesPatch } = await import('diff')\n      globalLogger.info(`[dry-run] ${file} -> ${renamed}:`)\n      console.info(\n        createTwoFilesPatch(file, renamed, tsupConfigRaw, tsupConfig),\n      )\n    } else {\n      await writeFile(renamed, tsupConfig, 'utf8')\n      await unlink(file)\n      globalLogger.success(`Migrated \\`${file}\\` to \\`${renamed}\\``)\n    }\n  }\n\n  if (!found) {\n    globalLogger.warn('No tsup config found')\n  }\n\n  return found\n}\n\n// rename key but keep order\nfunction renameKey(\n  obj: Record<string, any>,\n  oldKey: string,\n  newKey: string,\n  newValue?: any,\n) {\n  const newObj: Record<string, any> = {}\n  for (const key of Object.keys(obj)) {\n    if (key === oldKey) {\n      newObj[newKey] = newValue || obj[oldKey]\n    } else {\n      newObj[key] = obj[key]\n    }\n  }\n  return newObj\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"641643c0-07e6-4acc-8128-f2f2d9dc2c31","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885041,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/report.d.ts","plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"882559e9-73d6-468a-b21b-cdfdb1db3a65","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885041,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/general.ts","content":"export function toArray<T>(\n  val: T | T[] | null | undefined,\n  defaultValue?: T,\n): T[] {\n  if (Array.isArray(val)) {\n    return val\n  } else if (val == null) {\n    if (defaultValue) return [defaultValue]\n    return []\n  } else {\n    return [val]\n  }\n}\n\nexport function resolveComma<T extends string>(arr: T[]): T[] {\n  return arr.flatMap((format) => format.split(',') as T[])\n}\n\nexport function resolveRegex<T>(str: T): T | RegExp {\n  if (\n    typeof str === 'string' &&\n    str.length > 2 &&\n    str[0] === '/' &&\n    str.at(-1) === '/'\n  ) {\n    return new RegExp(str.slice(1, -1))\n  }\n  return str\n}\n\nexport function debounce<T extends (...args: any[]) => any>(\n  fn: T,\n  wait: number,\n): T {\n  let timeout: ReturnType<typeof setTimeout> | undefined\n  return function (this: any, ...args: any[]) {\n    if (timeout) clearTimeout(timeout)\n    timeout = setTimeout(() => {\n      timeout = undefined\n      fn.apply(this, args)\n    }, wait)\n  } as T\n}\n\nexport function slash(string: string): string {\n  return string.replaceAll('\\\\', '/')\n}\n\nexport const noop = <T>(v: T): T => v\n\nexport function matchPattern(\n  id: string,\n  patterns: (string | RegExp)[],\n): boolean {\n  return patterns.some((pattern) => {\n    if (pattern instanceof RegExp) {\n      pattern.lastIndex = 0\n      return pattern.test(id)\n    }\n    return id === pattern\n  })\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"1de99b58-ca9f-40b5-85f2-cb49d2d8a5cb","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885042,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/report.d.ts","content":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"882559e9-73d6-468a-b21b-cdfdb1db3a65","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885042,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/shebang.d.ts","content":"import { Logger } from \"../utils/logger.ts\";\nimport { Plugin } from \"rolldown\";\nexport var ShebangPlugin = [8, () => [Logger, Plugin]];","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"8deacb37-2190-4aee-a68a-b6246e11b7cf","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885042,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/shebang.d.ts","content":"import { Logger } from \"../utils/logger.ts\";\nimport { Plugin } from \"rolldown\";\nexport var ShebangPlugin = [8, () => [Logger, Plugin]];","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"e53d626c-396f-4855-ad20-8c9fe619b9ec","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885042,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/watch.ts","content":"import path from 'node:path'\nimport { blue } from 'ansis'\nimport { RE_NODE_MODULES } from 'rolldown-plugin-dts/filename'\nimport {\n  globalContext,\n  invalidateContextFile,\n} from 'rolldown-plugin-dts/tsc-context'\nimport { debounce, toArray } from '../utils/general.ts'\nimport type { ResolvedConfig } from '../config/index.ts'\nimport type { FSWatcher } from 'chokidar'\n\nconst endsWithConfig =\n  /[\\\\/](?:(?:package|tsconfig)\\.json|pnpm-(?:workspace|lock)\\.yaml|tsdown\\.config.*)$/\n\nexport async function watchBuild(\n  options: ResolvedConfig,\n  configFiles: string[],\n  rebuild: () => Promise<void>,\n  restart: () => Promise<void>,\n): Promise<FSWatcher> {\n  if (typeof options.watch === 'boolean' && options.outDir === options.cwd) {\n    throw new Error(\n      `Watch is enabled, but output directory is the same as the current working directory.` +\n        `Please specify a different watch directory using ${blue`watch`} option,` +\n        `or set ${blue`outDir`} to a different directory.`,\n    )\n  }\n\n  const files = toArray(\n    typeof options.watch === 'boolean' ? options.cwd : options.watch,\n  )\n  options.logger.info(`Watching for changes in ${files.join(', ')}`)\n  files.push(...configFiles)\n\n  const { watch } = await import('chokidar')\n  const debouncedOnChange = debounce(onChange, 100)\n\n  const watcher = watch(files, {\n    cwd: options.cwd,\n    ignoreInitial: true,\n    ignorePermissionErrors: true,\n    ignored: [\n      /[\\\\/]\\.git[\\\\/]/,\n      RE_NODE_MODULES,\n      options.outDir,\n      ...options.ignoreWatch,\n    ],\n  })\n\n  let pending: string[] = []\n  let pendingPromise: Promise<void> | undefined\n  watcher.on('all', (type, file) => {\n    pending.push(path.resolve(options.cwd, file))\n    debouncedOnChange()\n  })\n\n  return watcher\n\n  async function onChange() {\n    await pendingPromise\n\n    if (!pending.length) {\n      return\n    }\n\n    for (const file of pending) {\n      invalidateContextFile(globalContext, file)\n    }\n\n    const configRelated = pending.some(\n      (file) => configFiles.includes(file) || endsWithConfig.test(file),\n    )\n\n    if (configRelated) {\n      options.logger.info(`Restarting due to config change...`)\n      pendingPromise = restart()\n    } else {\n      options.logger.info(`Change detected: ${pending.join(', ')}`)\n      pendingPromise = rebuild()\n    }\n    pending = []\n    await pendingPromise\n  }\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"f5b2d90c-d33c-4ff1-a41b-fea43ba24cbf","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885042,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/node-protocol.d.ts","content":"import { Plugin } from \"rolldown\";\nexport var NodeProtocolPlugin = [7, () => [Plugin]];","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"915ece90-6392-41e5-b453-dddd4da4d5b4","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885043,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"79c80125-4048-41fd-9541-896d6a8bc008","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885043,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","content":null,"plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"79c80125-4048-41fd-9541-896d6a8bc008","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885043,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/node-protocol.d.ts","module_request":"rolldown","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"474875ff-d504-4c37-83ff-5a7ba0ebe637","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885043,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"474875ff-d504-4c37-83ff-5a7ba0ebe637","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885043,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/node-protocol.d.ts","module_request":"rolldown","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"f396ddb0-6e32-4cb0-afa1-707331bdfe16","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885043,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/shortcuts.ts","content":"import process from 'node:process'\nimport readline from 'node:readline'\nimport { bold, dim } from 'ansis'\nimport { globalLogger } from '../utils/logger.ts'\n\n// Copied from https://github.com/vitejs/vite/blob/main/packages/vite/src/node/shortcuts.ts - MIT License\n\nexport interface Shortcut {\n  key: string\n  description: string\n  action: () => void | Promise<void>\n}\n\nexport function shortcuts(restart: () => void): () => void {\n  let actionRunning = false\n  async function onInput(input: string) {\n    if (actionRunning) return\n    const SHORTCUTS: Shortcut[] = [\n      {\n        key: 'r',\n        description: 'reload config and rebuild',\n        action() {\n          restart()\n        },\n      },\n      {\n        key: 'c',\n        description: 'clear console',\n        action() {\n          console.clear()\n        },\n      },\n      {\n        key: 'q',\n        description: 'quit',\n        action() {\n          process.exit(0)\n        },\n      },\n    ]\n\n    if (input === 'h') {\n      const loggedKeys = new Set<string>()\n      globalLogger.info('  Shortcuts')\n\n      for (const shortcut of SHORTCUTS) {\n        if (loggedKeys.has(shortcut.key)) continue\n        loggedKeys.add(shortcut.key)\n\n        if (shortcut.action == null) continue\n\n        globalLogger.info(\n          dim`  press ` +\n            bold`${shortcut.key} + enter` +\n            dim` to ${shortcut.description}`,\n        )\n      }\n\n      return\n    }\n\n    const shortcut = SHORTCUTS.find((shortcut) => shortcut.key === input)\n    if (!shortcut) return\n\n    actionRunning = true\n    await shortcut.action()\n    actionRunning = false\n  }\n\n  const rl = readline.createInterface({\n    input: process.stdin,\n  })\n  rl.on('line', onInput)\n  return () => rl.close()\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"deccb388-4d92-430b-b0dd-7524b1d40282","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885044,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/shortcuts.ts","content":"import process from 'node:process'\nimport readline from 'node:readline'\nimport { bold, dim } from 'ansis'\nimport { globalLogger } from '../utils/logger.ts'\n\n// Copied from https://github.com/vitejs/vite/blob/main/packages/vite/src/node/shortcuts.ts - MIT License\n\nexport interface Shortcut {\n  key: string\n  description: string\n  action: () => void | Promise<void>\n}\n\nexport function shortcuts(restart: () => void): () => void {\n  let actionRunning = false\n  async function onInput(input: string) {\n    if (actionRunning) return\n    const SHORTCUTS: Shortcut[] = [\n      {\n        key: 'r',\n        description: 'reload config and rebuild',\n        action() {\n          restart()\n        },\n      },\n      {\n        key: 'c',\n        description: 'clear console',\n        action() {\n          console.clear()\n        },\n      },\n      {\n        key: 'q',\n        description: 'quit',\n        action() {\n          process.exit(0)\n        },\n      },\n    ]\n\n    if (input === 'h') {\n      const loggedKeys = new Set<string>()\n      globalLogger.info('  Shortcuts')\n\n      for (const shortcut of SHORTCUTS) {\n        if (loggedKeys.has(shortcut.key)) continue\n        loggedKeys.add(shortcut.key)\n\n        if (shortcut.action == null) continue\n\n        globalLogger.info(\n          dim`  press ` +\n            bold`${shortcut.key} + enter` +\n            dim` to ${shortcut.description}`,\n        )\n      }\n\n      return\n    }\n\n    const shortcut = SHORTCUTS.find((shortcut) => shortcut.key === input)\n    if (!shortcut) return\n\n    actionRunning = true\n    await shortcut.action()\n    actionRunning = false\n  }\n\n  const rl = readline.createInterface({\n    input: process.stdin,\n  })\n  rl.on('line', onInput)\n  return () => rl.close()\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"7d80a9d7-60f8-4ef7-94e6-8239341c2671","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885044,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/shortcuts.ts","content":"import process from 'node:process'\nimport readline from 'node:readline'\nimport { bold, dim } from 'ansis'\nimport { globalLogger } from '../utils/logger.ts'\n\n// Copied from https://github.com/vitejs/vite/blob/main/packages/vite/src/node/shortcuts.ts - MIT License\n\nexport interface Shortcut {\n  key: string\n  description: string\n  action: () => void | Promise<void>\n}\n\nexport function shortcuts(restart: () => void): () => void {\n  let actionRunning = false\n  async function onInput(input: string) {\n    if (actionRunning) return\n    const SHORTCUTS: Shortcut[] = [\n      {\n        key: 'r',\n        description: 'reload config and rebuild',\n        action() {\n          restart()\n        },\n      },\n      {\n        key: 'c',\n        description: 'clear console',\n        action() {\n          console.clear()\n        },\n      },\n      {\n        key: 'q',\n        description: 'quit',\n        action() {\n          process.exit(0)\n        },\n      },\n    ]\n\n    if (input === 'h') {\n      const loggedKeys = new Set<string>()\n      globalLogger.info('  Shortcuts')\n\n      for (const shortcut of SHORTCUTS) {\n        if (loggedKeys.has(shortcut.key)) continue\n        loggedKeys.add(shortcut.key)\n\n        if (shortcut.action == null) continue\n\n        globalLogger.info(\n          dim`  press ` +\n            bold`${shortcut.key} + enter` +\n            dim` to ${shortcut.description}`,\n        )\n      }\n\n      return\n    }\n\n    const shortcut = SHORTCUTS.find((shortcut) => shortcut.key === input)\n    if (!shortcut) return\n\n    actionRunning = true\n    await shortcut.action()\n    actionRunning = false\n  }\n\n  const rl = readline.createInterface({\n    input: process.stdin,\n  })\n  rl.on('line', onInput)\n  return () => rl.close()\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"7d80a9d7-60f8-4ef7-94e6-8239341c2671","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885044,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/shortcuts.ts","content":"import process from 'node:process'\nimport readline from 'node:readline'\nimport { bold, dim } from 'ansis'\nimport { globalLogger } from '../utils/logger.ts'\n\n// Copied from https://github.com/vitejs/vite/blob/main/packages/vite/src/node/shortcuts.ts - MIT License\n\nexport interface Shortcut {\n  key: string\n  description: string\n  action: () => void | Promise<void>\n}\n\nexport function shortcuts(restart: () => void): () => void {\n  let actionRunning = false\n  async function onInput(input: string) {\n    if (actionRunning) return\n    const SHORTCUTS: Shortcut[] = [\n      {\n        key: 'r',\n        description: 'reload config and rebuild',\n        action() {\n          restart()\n        },\n      },\n      {\n        key: 'c',\n        description: 'clear console',\n        action() {\n          console.clear()\n        },\n      },\n      {\n        key: 'q',\n        description: 'quit',\n        action() {\n          process.exit(0)\n        },\n      },\n    ]\n\n    if (input === 'h') {\n      const loggedKeys = new Set<string>()\n      globalLogger.info('  Shortcuts')\n\n      for (const shortcut of SHORTCUTS) {\n        if (loggedKeys.has(shortcut.key)) continue\n        loggedKeys.add(shortcut.key)\n\n        if (shortcut.action == null) continue\n\n        globalLogger.info(\n          dim`  press ` +\n            bold`${shortcut.key} + enter` +\n            dim` to ${shortcut.description}`,\n        )\n      }\n\n      return\n    }\n\n    const shortcut = SHORTCUTS.find((shortcut) => shortcut.key === input)\n    if (!shortcut) return\n\n    actionRunning = true\n    await shortcut.action()\n    actionRunning = false\n  }\n\n  const rl = readline.createInterface({\n    input: process.stdin,\n  })\n  rl.on('line', onInput)\n  return () => rl.close()\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"17317f7e-64fa-4aad-83a0-5981871d9e3d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885045,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/migrate.ts","content":"import { existsSync } from 'node:fs'\nimport { readFile, unlink, writeFile } from 'node:fs/promises'\nimport process from 'node:process'\nimport { createInterface } from 'node:readline/promises'\nimport { bold, green, underline } from 'ansis'\nimport pkg from '../package.json' with { type: 'json' }\nimport { globalLogger } from './utils/logger.ts'\n\nexport async function migrate({\n  cwd,\n  dryRun,\n}: {\n  cwd?: string\n  dryRun?: boolean\n}): Promise<void> {\n  if (dryRun) {\n    globalLogger.info('Dry run enabled. No changes were made.')\n  } else {\n    const rl = createInterface({\n      input: process.stdin,\n      output: process.stdout,\n    })\n\n    globalLogger.warn(\n      `\\n\\n` +\n        `Before proceeding, review the migration guide at ${underline`https://tsdown.dev/guide/migrate-from-tsup`}, as this process will modify your files.\\n` +\n        `Uncommitted changes will be lost. Use the ${green`--dry-run`} flag to preview changes without applying them.`,\n    )\n    const input = await rl.question(bold`Continue? (Y/n) `)\n    rl.close()\n\n    const confirm = input.toLowerCase() === 'y' || input === ''\n    if (!confirm) {\n      globalLogger.error('Migration cancelled.')\n      process.exitCode = 1\n      return\n    }\n  }\n\n  if (cwd) process.chdir(cwd)\n\n  let migrated = await migratePackageJson(dryRun)\n  if (await migrateTsupConfig(dryRun)) {\n    migrated = true\n  }\n  if (migrated) {\n    globalLogger.success(\n      'Migration completed. Remember to run install command with your package manager.',\n    )\n  } else {\n    globalLogger.error('No migration performed.')\n    process.exitCode = 1\n  }\n}\n\nconst DEP_FIELDS = {\n  dependencies: `^${pkg.version}`,\n  devDependencies: `^${pkg.version}`,\n  peerDependencies: '*',\n} as const\nasync function migratePackageJson(dryRun?: boolean): Promise<boolean> {\n  if (!existsSync('package.json')) {\n    globalLogger.error('No package.json found')\n    return false\n  }\n\n  const pkgRaw = await readFile('package.json', 'utf8')\n  let pkg = JSON.parse(pkgRaw)\n  let found = false\n\n  for (const [field, semver] of Object.entries(DEP_FIELDS)) {\n    if (pkg[field]?.tsup) {\n      globalLogger.info(`Migrating \\`${field}\\` to tsdown.`)\n      found = true\n      pkg[field] = renameKey(pkg[field], 'tsup', 'tsdown', semver)\n    }\n  }\n\n  if (pkg.scripts) {\n    for (const key of Object.keys(pkg.scripts)) {\n      if (pkg.scripts[key].includes('tsup')) {\n        globalLogger.info(`Migrating \\`${key}\\` script to tsdown`)\n        found = true\n        pkg.scripts[key] = pkg.scripts[key].replaceAll(\n          /tsup(?:-node)?/g,\n          'tsdown',\n        )\n      }\n    }\n  }\n  if (pkg.tsup) {\n    globalLogger.info('Migrating `tsup` field in package.json to `tsdown`.')\n    found = true\n    pkg = renameKey(pkg, 'tsup', 'tsdown')\n  }\n\n  if (!found) {\n    globalLogger.warn('No tsup-related fields found in package.json')\n    return false\n  }\n\n  const pkgStr = `${JSON.stringify(pkg, null, pkgRaw.includes('\\t') ? '\\t' : 2)}\\n`\n  if (dryRun) {\n    const { createPatch } = await import('diff')\n    globalLogger.info('[dry-run] package.json:')\n    console.info(createPatch('package.json', pkgRaw, pkgStr))\n  } else {\n    await writeFile('package.json', pkgStr)\n    globalLogger.success('Migrated `package.json`')\n  }\n  return true\n}\n\nconst TSUP_FILES = [\n  'tsup.config.ts',\n  'tsup.config.cts',\n  'tsup.config.mts',\n  'tsup.config.js',\n  'tsup.config.cjs',\n  'tsup.config.mjs',\n  'tsup.config.json',\n]\nasync function migrateTsupConfig(dryRun?: boolean): Promise<boolean> {\n  let found = false\n\n  for (const file of TSUP_FILES) {\n    if (!existsSync(file)) continue\n    globalLogger.info(`Found \\`${file}\\``)\n    found = true\n\n    const tsupConfigRaw = await readFile(file, 'utf8')\n    const tsupConfig = tsupConfigRaw\n      .replaceAll(/\\btsup\\b/g, 'tsdown')\n      .replaceAll(/\\bTSUP\\b/g, 'TSDOWN')\n\n    const renamed = file.replaceAll('tsup', 'tsdown')\n    if (dryRun) {\n      const { createTwoFilesPatch } = await import('diff')\n      globalLogger.info(`[dry-run] ${file} -> ${renamed}:`)\n      console.info(\n        createTwoFilesPatch(file, renamed, tsupConfigRaw, tsupConfig),\n      )\n    } else {\n      await writeFile(renamed, tsupConfig, 'utf8')\n      await unlink(file)\n      globalLogger.success(`Migrated \\`${file}\\` to \\`${renamed}\\``)\n    }\n  }\n\n  if (!found) {\n    globalLogger.warn('No tsup config found')\n  }\n\n  return found\n}\n\n// rename key but keep order\nfunction renameKey(\n  obj: Record<string, any>,\n  oldKey: string,\n  newKey: string,\n  newValue?: any,\n) {\n  const newObj: Record<string, any> = {}\n  for (const key of Object.keys(obj)) {\n    if (key === oldKey) {\n      newObj[newKey] = newValue || obj[oldKey]\n    } else {\n      newObj[key] = obj[key]\n    }\n  }\n  return newObj\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"641643c0-07e6-4acc-8128-f2f2d9dc2c31","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885045,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/general.ts","content":"export function toArray<T>(\n  val: T | T[] | null | undefined,\n  defaultValue?: T,\n): T[] {\n  if (Array.isArray(val)) {\n    return val\n  } else if (val == null) {\n    if (defaultValue) return [defaultValue]\n    return []\n  } else {\n    return [val]\n  }\n}\n\nexport function resolveComma<T extends string>(arr: T[]): T[] {\n  return arr.flatMap((format) => format.split(',') as T[])\n}\n\nexport function resolveRegex<T>(str: T): T | RegExp {\n  if (\n    typeof str === 'string' &&\n    str.length > 2 &&\n    str[0] === '/' &&\n    str.at(-1) === '/'\n  ) {\n    return new RegExp(str.slice(1, -1))\n  }\n  return str\n}\n\nexport function debounce<T extends (...args: any[]) => any>(\n  fn: T,\n  wait: number,\n): T {\n  let timeout: ReturnType<typeof setTimeout> | undefined\n  return function (this: any, ...args: any[]) {\n    if (timeout) clearTimeout(timeout)\n    timeout = setTimeout(() => {\n      timeout = undefined\n      fn.apply(this, args)\n    }, wait)\n  } as T\n}\n\nexport function slash(string: string): string {\n  return string.replaceAll('\\\\', '/')\n}\n\nexport const noop = <T>(v: T): T => v\n\nexport function matchPattern(\n  id: string,\n  patterns: (string | RegExp)[],\n): boolean {\n  return patterns.some((pattern) => {\n    if (pattern instanceof RegExp) {\n      pattern.lastIndex = 0\n      return pattern.test(id)\n    }\n    return id === pattern\n  })\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"1de99b58-ca9f-40b5-85f2-cb49d2d8a5cb","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885046,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/general.ts","content":"export function toArray<T>(\n  val: T | T[] | null | undefined,\n  defaultValue?: T,\n): T[] {\n  if (Array.isArray(val)) {\n    return val\n  } else if (val == null) {\n    if (defaultValue) return [defaultValue]\n    return []\n  } else {\n    return [val]\n  }\n}\n\nexport function resolveComma<T extends string>(arr: T[]): T[] {\n  return arr.flatMap((format) => format.split(',') as T[])\n}\n\nexport function resolveRegex<T>(str: T): T | RegExp {\n  if (\n    typeof str === 'string' &&\n    str.length > 2 &&\n    str[0] === '/' &&\n    str.at(-1) === '/'\n  ) {\n    return new RegExp(str.slice(1, -1))\n  }\n  return str\n}\n\nexport function debounce<T extends (...args: any[]) => any>(\n  fn: T,\n  wait: number,\n): T {\n  let timeout: ReturnType<typeof setTimeout> | undefined\n  return function (this: any, ...args: any[]) {\n    if (timeout) clearTimeout(timeout)\n    timeout = setTimeout(() => {\n      timeout = undefined\n      fn.apply(this, args)\n    }, wait)\n  } as T\n}\n\nexport function slash(string: string): string {\n  return string.replaceAll('\\\\', '/')\n}\n\nexport const noop = <T>(v: T): T => v\n\nexport function matchPattern(\n  id: string,\n  patterns: (string | RegExp)[],\n): boolean {\n  return patterns.some((pattern) => {\n    if (pattern instanceof RegExp) {\n      pattern.lastIndex = 0\n      return pattern.test(id)\n    }\n    return id === pattern\n  })\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"5566729e-333d-43bd-b6eb-2ca547208eb0","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885046,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/general.ts","content":"export function toArray<T>(\n  val: T | T[] | null | undefined,\n  defaultValue?: T,\n): T[] {\n  if (Array.isArray(val)) {\n    return val\n  } else if (val == null) {\n    if (defaultValue) return [defaultValue]\n    return []\n  } else {\n    return [val]\n  }\n}\n\nexport function resolveComma<T extends string>(arr: T[]): T[] {\n  return arr.flatMap((format) => format.split(',') as T[])\n}\n\nexport function resolveRegex<T>(str: T): T | RegExp {\n  if (\n    typeof str === 'string' &&\n    str.length > 2 &&\n    str[0] === '/' &&\n    str.at(-1) === '/'\n  ) {\n    return new RegExp(str.slice(1, -1))\n  }\n  return str\n}\n\nexport function debounce<T extends (...args: any[]) => any>(\n  fn: T,\n  wait: number,\n): T {\n  let timeout: ReturnType<typeof setTimeout> | undefined\n  return function (this: any, ...args: any[]) {\n    if (timeout) clearTimeout(timeout)\n    timeout = setTimeout(() => {\n      timeout = undefined\n      fn.apply(this, args)\n    }, wait)\n  } as T\n}\n\nexport function slash(string: string): string {\n  return string.replaceAll('\\\\', '/')\n}\n\nexport const noop = <T>(v: T): T => v\n\nexport function matchPattern(\n  id: string,\n  patterns: (string | RegExp)[],\n): boolean {\n  return patterns.some((pattern) => {\n    if (pattern instanceof RegExp) {\n      pattern.lastIndex = 0\n      return pattern.test(id)\n    }\n    return id === pattern\n  })\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"5566729e-333d-43bd-b6eb-2ca547208eb0","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885046,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/general.ts","content":"export function toArray<T>(\n  val: T | T[] | null | undefined,\n  defaultValue?: T,\n): T[] {\n  if (Array.isArray(val)) {\n    return val\n  } else if (val == null) {\n    if (defaultValue) return [defaultValue]\n    return []\n  } else {\n    return [val]\n  }\n}\n\nexport function resolveComma<T extends string>(arr: T[]): T[] {\n  return arr.flatMap((format) => format.split(',') as T[])\n}\n\nexport function resolveRegex<T>(str: T): T | RegExp {\n  if (\n    typeof str === 'string' &&\n    str.length > 2 &&\n    str[0] === '/' &&\n    str.at(-1) === '/'\n  ) {\n    return new RegExp(str.slice(1, -1))\n  }\n  return str\n}\n\nexport function debounce<T extends (...args: any[]) => any>(\n  fn: T,\n  wait: number,\n): T {\n  let timeout: ReturnType<typeof setTimeout> | undefined\n  return function (this: any, ...args: any[]) {\n    if (timeout) clearTimeout(timeout)\n    timeout = setTimeout(() => {\n      timeout = undefined\n      fn.apply(this, args)\n    }, wait)\n  } as T\n}\n\nexport function slash(string: string): string {\n  return string.replaceAll('\\\\', '/')\n}\n\nexport const noop = <T>(v: T): T => v\n\nexport function matchPattern(\n  id: string,\n  patterns: (string | RegExp)[],\n): boolean {\n  return patterns.some((pattern) => {\n    if (pattern instanceof RegExp) {\n      pattern.lastIndex = 0\n      return pattern.test(id)\n    }\n    return id === pattern\n  })\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"51c532ef-3ae0-482e-816d-481002109197","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885047,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/shebang.d.ts","content":"import { Logger } from \"../utils/logger.ts\";\nimport { Plugin } from \"rolldown\";\nexport var ShebangPlugin = [8, () => [Logger, Plugin]];","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"e53d626c-396f-4855-ad20-8c9fe619b9ec","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885047,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/package.json","content":"{\n  \"name\": \"tsdown\",\n  \"version\": \"0.15.12\",\n  \"packageManager\": \"pnpm@10.20.0\",\n  \"description\": \"The Elegant Bundler for Libraries\",\n  \"type\": \"module\",\n  \"license\": \"MIT\",\n  \"homepage\": \"https://github.com/rolldown/tsdown#readme\",\n  \"bugs\": {\n    \"url\": \"https://github.com/rolldown/tsdown/issues\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/rolldown/tsdown.git\"\n  },\n  \"author\": \"Kevin Deng <sxzz@sxzz.moe>\",\n  \"funding\": \"https://github.com/sponsors/sxzz\",\n  \"files\": [\n    \"client.d.ts\",\n    \"dist\",\n    \"esm-shims.js\"\n  ],\n  \"main\": \"./dist/index.mjs\",\n  \"module\": \"./dist/index.mjs\",\n  \"types\": \"./dist/index.d.mts\",\n  \"exports\": {\n    \".\": \"./dist/index.mjs\",\n    \"./config\": \"./dist/config.mjs\",\n    \"./plugins\": \"./dist/plugins.mjs\",\n    \"./run\": \"./dist/run.mjs\",\n    \"./package.json\": \"./package.json\",\n    \"./client\": \"./client.d.ts\"\n  },\n  \"typesVersions\": {\n    \"*\": {\n      \"*\": [\n        \"./dist/*\",\n        \"./*\"\n      ]\n    }\n  },\n  \"bin\": {\n    \"tsdown\": \"./dist/run.mjs\"\n  },\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"scripts\": {\n    \"lint\": \"eslint --cache --max-warnings 0 .\",\n    \"lint:fix\": \"pnpm run lint --fix\",\n    \"build\": \"unrun ./src/run.ts\",\n    \"dev\": \"unrun ./src/run.ts\",\n    \"test\": \"vitest\",\n    \"typecheck\": \"tsc --noEmit\",\n    \"format\": \"prettier --cache --write .\",\n    \"release\": \"bumpp -r\",\n    \"prepublishOnly\": \"pnpm run build\",\n    \"docs:dev\": \"pnpm -C docs run dev\",\n    \"docs:build\": \"pnpm -C docs run build\",\n    \"docs:preview\": \"pnpm -C docs run preview\",\n    \"docs:generate\": \"pnpm -C docs run generate\"\n  },\n  \"peerDependencies\": {\n    \"@arethetypeswrong/core\": \"^0.18.1\",\n    \"publint\": \"^0.3.0\",\n    \"typescript\": \"^5.0.0\",\n    \"unplugin-lightningcss\": \"^0.4.0\",\n    \"unplugin-unused\": \"^0.5.0\",\n    \"unrun\": \"^0.2.1\"\n  },\n  \"peerDependenciesMeta\": {\n    \"@arethetypeswrong/core\": {\n      \"optional\": true\n    },\n    \"publint\": {\n      \"optional\": true\n    },\n    \"typescript\": {\n      \"optional\": true\n    },\n    \"unplugin-lightningcss\": {\n      \"optional\": true\n    },\n    \"unplugin-unused\": {\n      \"optional\": true\n    },\n    \"unrun\": {\n      \"optional\": true\n    }\n  },\n  \"dependencies\": {\n    \"ansis\": \"catalog:prod\",\n    \"cac\": \"catalog:prod\",\n    \"chokidar\": \"catalog:prod\",\n    \"debug\": \"catalog:prod\",\n    \"diff\": \"catalog:prod\",\n    \"empathic\": \"catalog:prod\",\n    \"hookable\": \"catalog:prod\",\n    \"rolldown\": \"catalog:prod\",\n    \"rolldown-plugin-dts\": \"catalog:prod\",\n    \"semver\": \"catalog:prod\",\n    \"tinyexec\": \"catalog:prod\",\n    \"tinyglobby\": \"catalog:prod\",\n    \"tree-kill\": \"catalog:prod\",\n    \"unconfig\": \"catalog:prod\"\n  },\n  \"devDependencies\": {\n    \"@arethetypeswrong/core\": \"catalog:peer\",\n    \"@sxzz/eslint-config\": \"catalog:dev\",\n    \"@sxzz/prettier-config\": \"catalog:dev\",\n    \"@sxzz/test-utils\": \"catalog:dev\",\n    \"@types/debug\": \"catalog:dev\",\n    \"@types/node\": \"catalog:dev\",\n    \"@types/semver\": \"catalog:dev\",\n    \"@unocss/eslint-plugin\": \"catalog:docs\",\n    \"@vueuse/core\": \"catalog:docs\",\n    \"bumpp\": \"catalog:dev\",\n    \"eslint\": \"catalog:dev\",\n    \"lightningcss\": \"catalog:dev\",\n    \"oxfmt\": \"catalog:dev\",\n    \"pkg-types\": \"catalog:dev\",\n    \"prettier\": \"catalog:dev\",\n    \"publint\": \"catalog:peer\",\n    \"rolldown-plugin-require-cjs\": \"catalog:dev\",\n    \"typescript\": \"catalog:dev\",\n    \"unocss\": \"catalog:docs\",\n    \"unplugin-lightningcss\": \"catalog:peer\",\n    \"unplugin-unused\": \"catalog:peer\",\n    \"unrun\": \"catalog:peer\",\n    \"vite\": \"catalog:docs\",\n    \"vitest\": \"catalog:dev\"\n  },\n  \"engines\": {\n    \"node\": \">=20.19.0\"\n  },\n  \"prettier\": \"@sxzz/prettier-config\"\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"a264b1b2-385c-4c9b-8e74-51ee1bbe3892","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885049,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/shebang.d.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"df44b3a8-984b-4f35-98fa-1bd2fcbb898c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"action":"StringRef","id":"f16856d4f74eaf4ce0f0ccf427f63385dc56c89b12fe67928bcdc95dffd8d354","content":"import { mkdtemp, writeFile } from 'node:fs/promises'\nimport { tmpdir } from 'node:os'\nimport { join } from 'node:path'\nimport util, { type InspectOptionsStylized } from 'node:util'\nimport Debug from 'debug'\nimport {\n  VERSION as rolldownVersion,\n  type BuildOptions,\n  type InputOptions,\n  type OutputOptions,\n  type RolldownPluginOption,\n} from 'rolldown'\nimport { importGlobPlugin } from 'rolldown/experimental'\nimport pkg from '../../package.json' with { type: 'json' }\nimport {\n  mergeUserOptions,\n  type DtsOptions,\n  type NormalizedFormat,\n  type ResolvedConfig,\n} from '../config/index.ts'\nimport { lowestCommonAncestor } from '../utils/fs.ts'\nimport { LogLevels } from '../utils/logger.ts'\nimport { ExternalPlugin } from './external.ts'\nimport { LightningCSSPlugin } from './lightningcss.ts'\nimport { NodeProtocolPlugin } from './node-protocol.ts'\nimport { resolveChunkAddon, resolveChunkFilename } from './output.ts'\nimport { ReportPlugin } from './report.ts'\nimport { ShebangPlugin } from './shebang.ts'\nimport { getShimsInject } from './shims.ts'\n\nconst debug = Debug('tsdown:rolldown')\n\nexport async function getBuildOptions(\n  config: ResolvedConfig,\n  format: NormalizedFormat,\n  isMultiFormat?: boolean,\n  cjsDts: boolean = false,\n): Promise<BuildOptions> {\n  const inputOptions = await resolveInputOptions(\n    config,\n    format,\n    cjsDts,\n    isMultiFormat,\n  )\n\n  const outputOptions: OutputOptions = await resolveOutputOptions(\n    inputOptions,\n    config,\n    format,\n    cjsDts,\n  )\n\n  const rolldownConfig: BuildOptions = {\n    ...inputOptions,\n    output: outputOptions,\n  }\n  debug(\n    'rolldown config with format \"%s\" %O',\n    cjsDts ? 'cjs dts' : format,\n    rolldownConfig,\n  )\n\n  return rolldownConfig\n}\n\nexport async function resolveInputOptions(\n  config: ResolvedConfig,\n  format: NormalizedFormat,\n  cjsDts: boolean,\n  isMultiFormat?: boolean,\n): Promise<InputOptions> {\n  const {\n    entry,\n    external,\n    plugins: userPlugins,\n    platform,\n    alias,\n    treeshake,\n    dts,\n    unused,\n    target,\n    shims,\n    tsconfig,\n    cwd,\n    report,\n    env,\n    nodeProtocol,\n    loader,\n    name,\n    logger,\n    cjsDefault,\n    banner,\n    footer,\n    globImport,\n  } = config\n\n  const plugins: RolldownPluginOption = []\n\n  if (nodeProtocol) {\n    plugins.push(NodeProtocolPlugin(nodeProtocol))\n  }\n\n  if (config.pkg || config.skipNodeModulesBundle) {\n    plugins.push(ExternalPlugin(config))\n  }\n\n  if (dts) {\n    const { dts: dtsPlugin } = await import('rolldown-plugin-dts')\n    const options: DtsOptions = {\n      tsconfig,\n      banner: resolveChunkAddon(banner, format, true),\n      footer: resolveChunkAddon(footer, format, true),\n      ...dts,\n    }\n\n    if (format === 'es') {\n      plugins.push(dtsPlugin(options))\n    } else if (cjsDts) {\n      plugins.push(\n        dtsPlugin({\n          ...options,\n          emitDtsOnly: true,\n          cjsDefault,\n        }),\n      )\n    }\n  }\n  if (!cjsDts) {\n    if (unused) {\n      const { Unused } = await import('unplugin-unused')\n      plugins.push(Unused.rolldown(unused === true ? {} : unused))\n    }\n    if (target) {\n      plugins.push(\n        // Use Lightning CSS to handle CSS input. This is a temporary solution\n        // until Rolldown supports CSS syntax lowering natively.\n        await LightningCSSPlugin({ target }),\n      )\n    }\n    plugins.push(ShebangPlugin(logger, cwd, name, isMultiFormat))\n    if (globImport) {\n      plugins.push(importGlobPlugin())\n    }\n  }\n\n  if (report && LogLevels[logger.level] >= 3 /* info */) {\n    plugins.push(ReportPlugin(report, logger, cwd, cjsDts, name, isMultiFormat))\n  }\n\n  if (!cjsDts) {\n    plugins.push(userPlugins)\n  }\n\n  const define = {\n    ...config.define,\n    ...Object.keys(env).reduce((acc, key) => {\n      const value = JSON.stringify(env[key])\n      acc[`process.env.${key}`] = value\n      acc[`import.meta.env.${key}`] = value\n      return acc\n    }, Object.create(null)),\n  }\n  const inject = shims && !cjsDts ? getShimsInject(format, platform) : undefined\n\n  const inputOptions = await mergeUserOptions(\n    {\n      input: entry,\n      cwd,\n      external,\n      resolve: {\n        alias,\n      },\n      tsconfig: tsconfig || undefined,\n      treeshake,\n      platform: cjsDts || format === 'cjs' ? 'node' : platform,\n      transform: {\n        target,\n        define,\n        inject,\n      },\n      plugins,\n      moduleTypes: loader,\n      logLevel: logger.level === 'error' ? 'silent' : logger.level,\n      onLog: cjsDefault\n        ? (level, log, defaultHandler) => {\n            // suppress mixed export warnings if cjsDefault is enabled\n            if (log.code === 'MIXED_EXPORT') return\n            defaultHandler(level, log)\n          }\n        : undefined,\n    },\n    config.inputOptions,\n    [format, { cjsDts }],\n  )\n\n  return inputOptions\n}\n\nexport async function resolveOutputOptions(\n  inputOptions: InputOptions,\n  config: ResolvedConfig,\n  format: NormalizedFormat,\n  cjsDts: boolean,\n): Promise<OutputOptions> {\n  const {\n    entry,\n    outDir,\n    sourcemap,\n    minify,\n    unbundle,\n    banner,\n    footer,\n    cjsDefault,\n  } = config\n\n  const [entryFileNames, chunkFileNames] = resolveChunkFilename(\n    config,\n    inputOptions,\n    format,\n  )\n  const outputOptions: OutputOptions = await mergeUserOptions(\n    {\n      format: cjsDts ? 'es' : format,\n      name: config.globalName,\n      sourcemap,\n      dir: outDir,\n      exports: cjsDefault ? 'auto' : 'named',\n      minify: !cjsDts && minify,\n      entryFileNames,\n      chunkFileNames,\n      preserveModules: unbundle,\n      preserveModulesRoot: unbundle\n        ? lowestCommonAncestor(...Object.values(entry))\n        : undefined,\n      banner: resolveChunkAddon(banner, format),\n      footer: resolveChunkAddon(footer, format),\n    },\n    config.outputOptions,\n    [format, { cjsDts }],\n  )\n  return outputOptions\n}\n\nexport async function getDebugRolldownDir(): Promise<string | undefined> {\n  if (!debug.enabled) return\n  return await mkdtemp(join(tmpdir(), 'tsdown-config-'))\n}\n\nexport async function debugBuildOptions(\n  dir: string,\n  name: string | undefined,\n  format: NormalizedFormat,\n  buildOptions: BuildOptions,\n): Promise<void> {\n  const outFile = join(dir, `tsdown.config.${format}.js`)\n\n  handlePluginInspect(buildOptions.plugins)\n  const serialized = util.formatWithOptions(\n    {\n      depth: null,\n      maxArrayLength: null,\n      maxStringLength: null,\n    },\n    buildOptions,\n  )\n  const code = `/*\nAuto-generated rolldown config for tsdown debug purposes\ntsdown v${pkg.version}, rolldown v${rolldownVersion}\nGenerated on ${new Date().toISOString()}\nPackage name: ${name || 'not specified'}\n*/\n\nexport default ${serialized}\\n`\n  await writeFile(outFile, code)\n  debug(\n    'Wrote debug rolldown config for \"%s\" (%s) -> %s',\n    name || 'default name',\n    format,\n    outFile,\n  )\n}\n\nfunction handlePluginInspect(plugins: RolldownPluginOption) {\n  if (Array.isArray(plugins)) {\n    for (const plugin of plugins) {\n      handlePluginInspect(plugin)\n    }\n  } else if (\n    typeof plugins === 'object' &&\n    plugins !== null &&\n    'name' in plugins\n  ) {\n    ;(plugins as any)[util.inspect.custom] = function (\n      depth: number,\n      options: InspectOptionsStylized,\n      inspect: typeof util.inspect,\n    ) {\n      if ('_options' in plugins) {\n        return inspect(\n          { name: plugins.name, options: (plugins as any)._options },\n          options,\n        )\n      } else {\n        return `\"rolldown plugin: ${plugins.name}\"`\n      }\n    }\n  }\n}\n"}
{"timestamp":1761897885050,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","content":"import { mkdtemp, writeFile } from 'node:fs/promises'\nimport { tmpdir } from 'node:os'\nimport { join } from 'node:path'\nimport util, { type InspectOptionsStylized } from 'node:util'\nimport Debug from 'debug'\nimport {\n  VERSION as rolldownVersion,\n  type BuildOptions,\n  type InputOptions,\n  type OutputOptions,\n  type RolldownPluginOption,\n} from 'rolldown'\nimport { importGlobPlugin } from 'rolldown/experimental'\nimport pkg from '../../package.json' with { type: 'json' }\nimport {\n  mergeUserOptions,\n  type DtsOptions,\n  type NormalizedFormat,\n  type ResolvedConfig,\n} from '../config/index.ts'\nimport { lowestCommonAncestor } from '../utils/fs.ts'\nimport { LogLevels } from '../utils/logger.ts'\nimport { ExternalPlugin } from './external.ts'\nimport { LightningCSSPlugin } from './lightningcss.ts'\nimport { NodeProtocolPlugin } from './node-protocol.ts'\nimport { resolveChunkAddon, resolveChunkFilename } from './output.ts'\nimport { ReportPlugin } from './report.ts'\nimport { ShebangPlugin } from './shebang.ts'\nimport { getShimsInject } from './shims.ts'\n\nconst debug = Debug('tsdown:rolldown')\n\nexport async function getBuildOptions(\n  config: ResolvedConfig,\n  format: NormalizedFormat,\n  isMultiFormat?: boolean,\n  cjsDts: boolean = false,\n): Promise<BuildOptions> {\n  const inputOptions = await resolveInputOptions(\n    config,\n    format,\n    cjsDts,\n    isMultiFormat,\n  )\n\n  const outputOptions: OutputOptions = await resolveOutputOptions(\n    inputOptions,\n    config,\n    format,\n    cjsDts,\n  )\n\n  const rolldownConfig: BuildOptions = {\n    ...inputOptions,\n    output: outputOptions,\n  }\n  debug(\n    'rolldown config with format \"%s\" %O',\n    cjsDts ? 'cjs dts' : format,\n    rolldownConfig,\n  )\n\n  return rolldownConfig\n}\n\nexport async function resolveInputOptions(\n  config: ResolvedConfig,\n  format: NormalizedFormat,\n  cjsDts: boolean,\n  isMultiFormat?: boolean,\n): Promise<InputOptions> {\n  const {\n    entry,\n    external,\n    plugins: userPlugins,\n    platform,\n    alias,\n    treeshake,\n    dts,\n    unused,\n    target,\n    shims,\n    tsconfig,\n    cwd,\n    report,\n    env,\n    nodeProtocol,\n    loader,\n    name,\n    logger,\n    cjsDefault,\n    banner,\n    footer,\n    globImport,\n  } = config\n\n  const plugins: RolldownPluginOption = []\n\n  if (nodeProtocol) {\n    plugins.push(NodeProtocolPlugin(nodeProtocol))\n  }\n\n  if (config.pkg || config.skipNodeModulesBundle) {\n    plugins.push(ExternalPlugin(config))\n  }\n\n  if (dts) {\n    const { dts: dtsPlugin } = await import('rolldown-plugin-dts')\n    const options: DtsOptions = {\n      tsconfig,\n      banner: resolveChunkAddon(banner, format, true),\n      footer: resolveChunkAddon(footer, format, true),\n      ...dts,\n    }\n\n    if (format === 'es') {\n      plugins.push(dtsPlugin(options))\n    } else if (cjsDts) {\n      plugins.push(\n        dtsPlugin({\n          ...options,\n          emitDtsOnly: true,\n          cjsDefault,\n        }),\n      )\n    }\n  }\n  if (!cjsDts) {\n    if (unused) {\n      const { Unused } = await import('unplugin-unused')\n      plugins.push(Unused.rolldown(unused === true ? {} : unused))\n    }\n    if (target) {\n      plugins.push(\n        // Use Lightning CSS to handle CSS input. This is a temporary solution\n        // until Rolldown supports CSS syntax lowering natively.\n        await LightningCSSPlugin({ target }),\n      )\n    }\n    plugins.push(ShebangPlugin(logger, cwd, name, isMultiFormat))\n    if (globImport) {\n      plugins.push(importGlobPlugin())\n    }\n  }\n\n  if (report && LogLevels[logger.level] >= 3 /* info */) {\n    plugins.push(ReportPlugin(report, logger, cwd, cjsDts, name, isMultiFormat))\n  }\n\n  if (!cjsDts) {\n    plugins.push(userPlugins)\n  }\n\n  const define = {\n    ...config.define,\n    ...Object.keys(env).reduce((acc, key) => {\n      const value = JSON.stringify(env[key])\n      acc[`process.env.${key}`] = value\n      acc[`import.meta.env.${key}`] = value\n      return acc\n    }, Object.create(null)),\n  }\n  const inject = shims && !cjsDts ? getShimsInject(format, platform) : undefined\n\n  const inputOptions = await mergeUserOptions(\n    {\n      input: entry,\n      cwd,\n      external,\n      resolve: {\n        alias,\n      },\n      tsconfig: tsconfig || undefined,\n      treeshake,\n      platform: cjsDts || format === 'cjs' ? 'node' : platform,\n      transform: {\n        target,\n        define,\n        inject,\n      },\n      plugins,\n      moduleTypes: loader,\n      logLevel: logger.level === 'error' ? 'silent' : logger.level,\n      onLog: cjsDefault\n        ? (level, log, defaultHandler) => {\n            // suppress mixed export warnings if cjsDefault is enabled\n            if (log.code === 'MIXED_EXPORT') return\n            defaultHandler(level, log)\n          }\n        : undefined,\n    },\n    config.inputOptions,\n    [format, { cjsDts }],\n  )\n\n  return inputOptions\n}\n\nexport async function resolveOutputOptions(\n  inputOptions: InputOptions,\n  config: ResolvedConfig,\n  format: NormalizedFormat,\n  cjsDts: boolean,\n): Promise<OutputOptions> {\n  const {\n    entry,\n    outDir,\n    sourcemap,\n    minify,\n    unbundle,\n    banner,\n    footer,\n    cjsDefault,\n  } = config\n\n  const [entryFileNames, chunkFileNames] = resolveChunkFilename(\n    config,\n    inputOptions,\n    format,\n  )\n  const outputOptions: OutputOptions = await mergeUserOptions(\n    {\n      format: cjsDts ? 'es' : format,\n      name: config.globalName,\n      sourcemap,\n      dir: outDir,\n      exports: cjsDefault ? 'auto' : 'named',\n      minify: !cjsDts && minify,\n      entryFileNames,\n      chunkFileNames,\n      preserveModules: unbundle,\n      preserveModulesRoot: unbundle\n        ? lowestCommonAncestor(...Object.values(entry))\n        : undefined,\n      banner: resolveChunkAddon(banner, format),\n      footer: resolveChunkAddon(footer, format),\n    },\n    config.outputOptions,\n    [format, { cjsDts }],\n  )\n  return outputOptions\n}\n\nexport async function getDebugRolldownDir(): Promise<string | undefined> {\n  if (!debug.enabled) return\n  return await mkdtemp(join(tmpdir(), 'tsdown-config-'))\n}\n\nexport async function debugBuildOptions(\n  dir: string,\n  name: string | undefined,\n  format: NormalizedFormat,\n  buildOptions: BuildOptions,\n): Promise<void> {\n  const outFile = join(dir, `tsdown.config.${format}.js`)\n\n  handlePluginInspect(buildOptions.plugins)\n  const serialized = util.formatWithOptions(\n    {\n      depth: null,\n      maxArrayLength: null,\n      maxStringLength: null,\n    },\n    buildOptions,\n  )\n  const code = `/*\nAuto-generated rolldown config for tsdown debug purposes\ntsdown v${pkg.version}, rolldown v${rolldownVersion}\nGenerated on ${new Date().toISOString()}\nPackage name: ${name || 'not specified'}\n*/\n\nexport default ${serialized}\\n`\n  await writeFile(outFile, code)\n  debug(\n    'Wrote debug rolldown config for \"%s\" (%s) -> %s',\n    name || 'default name',\n    format,\n    outFile,\n  )\n}\n\nfunction handlePluginInspect(plugins: RolldownPluginOption) {\n  if (Array.isArray(plugins)) {\n    for (const plugin of plugins) {\n      handlePluginInspect(plugin)\n    }\n  } else if (\n    typeof plugins === 'object' &&\n    plugins !== null &&\n    'name' in plugins\n  ) {\n    ;(plugins as any)[util.inspect.custom] = function (\n      depth: number,\n      options: InspectOptionsStylized,\n      inspect: typeof util.inspect,\n    ) {\n      if ('_options' in plugins) {\n        return inspect(\n          { name: plugins.name, options: (plugins as any)._options },\n          options,\n        )\n      } else {\n        return `\"rolldown plugin: ${plugins.name}\"`\n      }\n    }\n  }\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"686dcfec-b3f0-4524-8c93-fe1e907e91f8","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885051,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"df44b3a8-984b-4f35-98fa-1bd2fcbb898c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885051,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/publint.ts","plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"016551f5-2c85-4d60-bbac-3598430344d9","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885051,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/shebang.d.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"9752aa27-257a-440a-9688-8be1c511a815","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885051,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/shebang.d.ts","module_request":"rolldown","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"5a7f0eff-5245-4ac7-abdb-df05d122ad06","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885052,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"5a7f0eff-5245-4ac7-abdb-df05d122ad06","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885052,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/shortcuts.ts","content":"import process from 'node:process'\nimport readline from 'node:readline'\nimport { bold, dim } from 'ansis'\nimport { globalLogger } from '../utils/logger.ts'\n\n// Copied from https://github.com/vitejs/vite/blob/main/packages/vite/src/node/shortcuts.ts - MIT License\n\nexport interface Shortcut {\n  key: string\n  description: string\n  action: () => void | Promise<void>\n}\n\nexport function shortcuts(restart: () => void): () => void {\n  let actionRunning = false\n  async function onInput(input: string) {\n    if (actionRunning) return\n    const SHORTCUTS: Shortcut[] = [\n      {\n        key: 'r',\n        description: 'reload config and rebuild',\n        action() {\n          restart()\n        },\n      },\n      {\n        key: 'c',\n        description: 'clear console',\n        action() {\n          console.clear()\n        },\n      },\n      {\n        key: 'q',\n        description: 'quit',\n        action() {\n          process.exit(0)\n        },\n      },\n    ]\n\n    if (input === 'h') {\n      const loggedKeys = new Set<string>()\n      globalLogger.info('  Shortcuts')\n\n      for (const shortcut of SHORTCUTS) {\n        if (loggedKeys.has(shortcut.key)) continue\n        loggedKeys.add(shortcut.key)\n\n        if (shortcut.action == null) continue\n\n        globalLogger.info(\n          dim`  press ` +\n            bold`${shortcut.key} + enter` +\n            dim` to ${shortcut.description}`,\n        )\n      }\n\n      return\n    }\n\n    const shortcut = SHORTCUTS.find((shortcut) => shortcut.key === input)\n    if (!shortcut) return\n\n    actionRunning = true\n    await shortcut.action()\n    actionRunning = false\n  }\n\n  const rl = readline.createInterface({\n    input: process.stdin,\n  })\n  rl.on('line', onInput)\n  return () => rl.close()\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"17317f7e-64fa-4aad-83a0-5981871d9e3d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885052,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/shebang.d.ts","module_request":"rolldown","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"664e8989-dba4-4b93-b919-0fdeacd129ee","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885052,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/general.ts","content":"export function toArray<T>(\n  val: T | T[] | null | undefined,\n  defaultValue?: T,\n): T[] {\n  if (Array.isArray(val)) {\n    return val\n  } else if (val == null) {\n    if (defaultValue) return [defaultValue]\n    return []\n  } else {\n    return [val]\n  }\n}\n\nexport function resolveComma<T extends string>(arr: T[]): T[] {\n  return arr.flatMap((format) => format.split(',') as T[])\n}\n\nexport function resolveRegex<T>(str: T): T | RegExp {\n  if (\n    typeof str === 'string' &&\n    str.length > 2 &&\n    str[0] === '/' &&\n    str.at(-1) === '/'\n  ) {\n    return new RegExp(str.slice(1, -1))\n  }\n  return str\n}\n\nexport function debounce<T extends (...args: any[]) => any>(\n  fn: T,\n  wait: number,\n): T {\n  let timeout: ReturnType<typeof setTimeout> | undefined\n  return function (this: any, ...args: any[]) {\n    if (timeout) clearTimeout(timeout)\n    timeout = setTimeout(() => {\n      timeout = undefined\n      fn.apply(this, args)\n    }, wait)\n  } as T\n}\n\nexport function slash(string: string): string {\n  return string.replaceAll('\\\\', '/')\n}\n\nexport const noop = <T>(v: T): T => v\n\nexport function matchPattern(\n  id: string,\n  patterns: (string | RegExp)[],\n): boolean {\n  return patterns.some((pattern) => {\n    if (pattern instanceof RegExp) {\n      pattern.lastIndex = 0\n      return pattern.test(id)\n    }\n    return id === pattern\n  })\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"51c532ef-3ae0-482e-816d-481002109197","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885053,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/shortcuts.ts","module_request":"node:process","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"480c04fd-1c3d-4542-b636-a3697ca98aa2","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885053,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"480c04fd-1c3d-4542-b636-a3697ca98aa2","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885053,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/shortcuts.ts","module_request":"node:process","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"f73d99a3-d4d6-418e-97ff-2003ae88dd95","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885053,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/package.json","content":"{\n  \"name\": \"tsdown\",\n  \"version\": \"0.15.12\",\n  \"packageManager\": \"pnpm@10.20.0\",\n  \"description\": \"The Elegant Bundler for Libraries\",\n  \"type\": \"module\",\n  \"license\": \"MIT\",\n  \"homepage\": \"https://github.com/rolldown/tsdown#readme\",\n  \"bugs\": {\n    \"url\": \"https://github.com/rolldown/tsdown/issues\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/rolldown/tsdown.git\"\n  },\n  \"author\": \"Kevin Deng <sxzz@sxzz.moe>\",\n  \"funding\": \"https://github.com/sponsors/sxzz\",\n  \"files\": [\n    \"client.d.ts\",\n    \"dist\",\n    \"esm-shims.js\"\n  ],\n  \"main\": \"./dist/index.mjs\",\n  \"module\": \"./dist/index.mjs\",\n  \"types\": \"./dist/index.d.mts\",\n  \"exports\": {\n    \".\": \"./dist/index.mjs\",\n    \"./config\": \"./dist/config.mjs\",\n    \"./plugins\": \"./dist/plugins.mjs\",\n    \"./run\": \"./dist/run.mjs\",\n    \"./package.json\": \"./package.json\",\n    \"./client\": \"./client.d.ts\"\n  },\n  \"typesVersions\": {\n    \"*\": {\n      \"*\": [\n        \"./dist/*\",\n        \"./*\"\n      ]\n    }\n  },\n  \"bin\": {\n    \"tsdown\": \"./dist/run.mjs\"\n  },\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"scripts\": {\n    \"lint\": \"eslint --cache --max-warnings 0 .\",\n    \"lint:fix\": \"pnpm run lint --fix\",\n    \"build\": \"unrun ./src/run.ts\",\n    \"dev\": \"unrun ./src/run.ts\",\n    \"test\": \"vitest\",\n    \"typecheck\": \"tsc --noEmit\",\n    \"format\": \"prettier --cache --write .\",\n    \"release\": \"bumpp -r\",\n    \"prepublishOnly\": \"pnpm run build\",\n    \"docs:dev\": \"pnpm -C docs run dev\",\n    \"docs:build\": \"pnpm -C docs run build\",\n    \"docs:preview\": \"pnpm -C docs run preview\",\n    \"docs:generate\": \"pnpm -C docs run generate\"\n  },\n  \"peerDependencies\": {\n    \"@arethetypeswrong/core\": \"^0.18.1\",\n    \"publint\": \"^0.3.0\",\n    \"typescript\": \"^5.0.0\",\n    \"unplugin-lightningcss\": \"^0.4.0\",\n    \"unplugin-unused\": \"^0.5.0\",\n    \"unrun\": \"^0.2.1\"\n  },\n  \"peerDependenciesMeta\": {\n    \"@arethetypeswrong/core\": {\n      \"optional\": true\n    },\n    \"publint\": {\n      \"optional\": true\n    },\n    \"typescript\": {\n      \"optional\": true\n    },\n    \"unplugin-lightningcss\": {\n      \"optional\": true\n    },\n    \"unplugin-unused\": {\n      \"optional\": true\n    },\n    \"unrun\": {\n      \"optional\": true\n    }\n  },\n  \"dependencies\": {\n    \"ansis\": \"catalog:prod\",\n    \"cac\": \"catalog:prod\",\n    \"chokidar\": \"catalog:prod\",\n    \"debug\": \"catalog:prod\",\n    \"diff\": \"catalog:prod\",\n    \"empathic\": \"catalog:prod\",\n    \"hookable\": \"catalog:prod\",\n    \"rolldown\": \"catalog:prod\",\n    \"rolldown-plugin-dts\": \"catalog:prod\",\n    \"semver\": \"catalog:prod\",\n    \"tinyexec\": \"catalog:prod\",\n    \"tinyglobby\": \"catalog:prod\",\n    \"tree-kill\": \"catalog:prod\",\n    \"unconfig\": \"catalog:prod\"\n  },\n  \"devDependencies\": {\n    \"@arethetypeswrong/core\": \"catalog:peer\",\n    \"@sxzz/eslint-config\": \"catalog:dev\",\n    \"@sxzz/prettier-config\": \"catalog:dev\",\n    \"@sxzz/test-utils\": \"catalog:dev\",\n    \"@types/debug\": \"catalog:dev\",\n    \"@types/node\": \"catalog:dev\",\n    \"@types/semver\": \"catalog:dev\",\n    \"@unocss/eslint-plugin\": \"catalog:docs\",\n    \"@vueuse/core\": \"catalog:docs\",\n    \"bumpp\": \"catalog:dev\",\n    \"eslint\": \"catalog:dev\",\n    \"lightningcss\": \"catalog:dev\",\n    \"oxfmt\": \"catalog:dev\",\n    \"pkg-types\": \"catalog:dev\",\n    \"prettier\": \"catalog:dev\",\n    \"publint\": \"catalog:peer\",\n    \"rolldown-plugin-require-cjs\": \"catalog:dev\",\n    \"typescript\": \"catalog:dev\",\n    \"unocss\": \"catalog:docs\",\n    \"unplugin-lightningcss\": \"catalog:peer\",\n    \"unplugin-unused\": \"catalog:peer\",\n    \"unrun\": \"catalog:peer\",\n    \"vite\": \"catalog:docs\",\n    \"vitest\": \"catalog:dev\"\n  },\n  \"engines\": {\n    \"node\": \">=20.19.0\"\n  },\n  \"prettier\": \"@sxzz/prettier-config\"\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"a264b1b2-385c-4c9b-8e74-51ee1bbe3892","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885056,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/shortcuts.ts","module_request":"node:readline","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"e8f58488-fc6b-4a00-9f58-1b1fc7229c49","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885056,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"e8f58488-fc6b-4a00-9f58-1b1fc7229c49","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885056,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/package.json","content":"{\n  \"name\": \"tsdown\",\n  \"version\": \"0.15.12\",\n  \"packageManager\": \"pnpm@10.20.0\",\n  \"description\": \"The Elegant Bundler for Libraries\",\n  \"type\": \"module\",\n  \"license\": \"MIT\",\n  \"homepage\": \"https://github.com/rolldown/tsdown#readme\",\n  \"bugs\": {\n    \"url\": \"https://github.com/rolldown/tsdown/issues\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/rolldown/tsdown.git\"\n  },\n  \"author\": \"Kevin Deng <sxzz@sxzz.moe>\",\n  \"funding\": \"https://github.com/sponsors/sxzz\",\n  \"files\": [\n    \"client.d.ts\",\n    \"dist\",\n    \"esm-shims.js\"\n  ],\n  \"main\": \"./dist/index.mjs\",\n  \"module\": \"./dist/index.mjs\",\n  \"types\": \"./dist/index.d.mts\",\n  \"exports\": {\n    \".\": \"./dist/index.mjs\",\n    \"./config\": \"./dist/config.mjs\",\n    \"./plugins\": \"./dist/plugins.mjs\",\n    \"./run\": \"./dist/run.mjs\",\n    \"./package.json\": \"./package.json\",\n    \"./client\": \"./client.d.ts\"\n  },\n  \"typesVersions\": {\n    \"*\": {\n      \"*\": [\n        \"./dist/*\",\n        \"./*\"\n      ]\n    }\n  },\n  \"bin\": {\n    \"tsdown\": \"./dist/run.mjs\"\n  },\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"scripts\": {\n    \"lint\": \"eslint --cache --max-warnings 0 .\",\n    \"lint:fix\": \"pnpm run lint --fix\",\n    \"build\": \"unrun ./src/run.ts\",\n    \"dev\": \"unrun ./src/run.ts\",\n    \"test\": \"vitest\",\n    \"typecheck\": \"tsc --noEmit\",\n    \"format\": \"prettier --cache --write .\",\n    \"release\": \"bumpp -r\",\n    \"prepublishOnly\": \"pnpm run build\",\n    \"docs:dev\": \"pnpm -C docs run dev\",\n    \"docs:build\": \"pnpm -C docs run build\",\n    \"docs:preview\": \"pnpm -C docs run preview\",\n    \"docs:generate\": \"pnpm -C docs run generate\"\n  },\n  \"peerDependencies\": {\n    \"@arethetypeswrong/core\": \"^0.18.1\",\n    \"publint\": \"^0.3.0\",\n    \"typescript\": \"^5.0.0\",\n    \"unplugin-lightningcss\": \"^0.4.0\",\n    \"unplugin-unused\": \"^0.5.0\",\n    \"unrun\": \"^0.2.1\"\n  },\n  \"peerDependenciesMeta\": {\n    \"@arethetypeswrong/core\": {\n      \"optional\": true\n    },\n    \"publint\": {\n      \"optional\": true\n    },\n    \"typescript\": {\n      \"optional\": true\n    },\n    \"unplugin-lightningcss\": {\n      \"optional\": true\n    },\n    \"unplugin-unused\": {\n      \"optional\": true\n    },\n    \"unrun\": {\n      \"optional\": true\n    }\n  },\n  \"dependencies\": {\n    \"ansis\": \"catalog:prod\",\n    \"cac\": \"catalog:prod\",\n    \"chokidar\": \"catalog:prod\",\n    \"debug\": \"catalog:prod\",\n    \"diff\": \"catalog:prod\",\n    \"empathic\": \"catalog:prod\",\n    \"hookable\": \"catalog:prod\",\n    \"rolldown\": \"catalog:prod\",\n    \"rolldown-plugin-dts\": \"catalog:prod\",\n    \"semver\": \"catalog:prod\",\n    \"tinyexec\": \"catalog:prod\",\n    \"tinyglobby\": \"catalog:prod\",\n    \"tree-kill\": \"catalog:prod\",\n    \"unconfig\": \"catalog:prod\"\n  },\n  \"devDependencies\": {\n    \"@arethetypeswrong/core\": \"catalog:peer\",\n    \"@sxzz/eslint-config\": \"catalog:dev\",\n    \"@sxzz/prettier-config\": \"catalog:dev\",\n    \"@sxzz/test-utils\": \"catalog:dev\",\n    \"@types/debug\": \"catalog:dev\",\n    \"@types/node\": \"catalog:dev\",\n    \"@types/semver\": \"catalog:dev\",\n    \"@unocss/eslint-plugin\": \"catalog:docs\",\n    \"@vueuse/core\": \"catalog:docs\",\n    \"bumpp\": \"catalog:dev\",\n    \"eslint\": \"catalog:dev\",\n    \"lightningcss\": \"catalog:dev\",\n    \"oxfmt\": \"catalog:dev\",\n    \"pkg-types\": \"catalog:dev\",\n    \"prettier\": \"catalog:dev\",\n    \"publint\": \"catalog:peer\",\n    \"rolldown-plugin-require-cjs\": \"catalog:dev\",\n    \"typescript\": \"catalog:dev\",\n    \"unocss\": \"catalog:docs\",\n    \"unplugin-lightningcss\": \"catalog:peer\",\n    \"unplugin-unused\": \"catalog:peer\",\n    \"unrun\": \"catalog:peer\",\n    \"vite\": \"catalog:docs\",\n    \"vitest\": \"catalog:dev\"\n  },\n  \"engines\": {\n    \"node\": \">=20.19.0\"\n  },\n  \"prettier\": \"@sxzz/prettier-config\"\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"2833ee6f-dbbd-4ed6-92b2-e9896fa62894","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885058,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/shortcuts.ts","module_request":"node:readline","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"29a5564b-521b-4429-8167-52d5e1b177c2","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885058,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/package.json","content":"{\n  \"name\": \"tsdown\",\n  \"version\": \"0.15.12\",\n  \"packageManager\": \"pnpm@10.20.0\",\n  \"description\": \"The Elegant Bundler for Libraries\",\n  \"type\": \"module\",\n  \"license\": \"MIT\",\n  \"homepage\": \"https://github.com/rolldown/tsdown#readme\",\n  \"bugs\": {\n    \"url\": \"https://github.com/rolldown/tsdown/issues\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/rolldown/tsdown.git\"\n  },\n  \"author\": \"Kevin Deng <sxzz@sxzz.moe>\",\n  \"funding\": \"https://github.com/sponsors/sxzz\",\n  \"files\": [\n    \"client.d.ts\",\n    \"dist\",\n    \"esm-shims.js\"\n  ],\n  \"main\": \"./dist/index.mjs\",\n  \"module\": \"./dist/index.mjs\",\n  \"types\": \"./dist/index.d.mts\",\n  \"exports\": {\n    \".\": \"./dist/index.mjs\",\n    \"./config\": \"./dist/config.mjs\",\n    \"./plugins\": \"./dist/plugins.mjs\",\n    \"./run\": \"./dist/run.mjs\",\n    \"./package.json\": \"./package.json\",\n    \"./client\": \"./client.d.ts\"\n  },\n  \"typesVersions\": {\n    \"*\": {\n      \"*\": [\n        \"./dist/*\",\n        \"./*\"\n      ]\n    }\n  },\n  \"bin\": {\n    \"tsdown\": \"./dist/run.mjs\"\n  },\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"scripts\": {\n    \"lint\": \"eslint --cache --max-warnings 0 .\",\n    \"lint:fix\": \"pnpm run lint --fix\",\n    \"build\": \"unrun ./src/run.ts\",\n    \"dev\": \"unrun ./src/run.ts\",\n    \"test\": \"vitest\",\n    \"typecheck\": \"tsc --noEmit\",\n    \"format\": \"prettier --cache --write .\",\n    \"release\": \"bumpp -r\",\n    \"prepublishOnly\": \"pnpm run build\",\n    \"docs:dev\": \"pnpm -C docs run dev\",\n    \"docs:build\": \"pnpm -C docs run build\",\n    \"docs:preview\": \"pnpm -C docs run preview\",\n    \"docs:generate\": \"pnpm -C docs run generate\"\n  },\n  \"peerDependencies\": {\n    \"@arethetypeswrong/core\": \"^0.18.1\",\n    \"publint\": \"^0.3.0\",\n    \"typescript\": \"^5.0.0\",\n    \"unplugin-lightningcss\": \"^0.4.0\",\n    \"unplugin-unused\": \"^0.5.0\",\n    \"unrun\": \"^0.2.1\"\n  },\n  \"peerDependenciesMeta\": {\n    \"@arethetypeswrong/core\": {\n      \"optional\": true\n    },\n    \"publint\": {\n      \"optional\": true\n    },\n    \"typescript\": {\n      \"optional\": true\n    },\n    \"unplugin-lightningcss\": {\n      \"optional\": true\n    },\n    \"unplugin-unused\": {\n      \"optional\": true\n    },\n    \"unrun\": {\n      \"optional\": true\n    }\n  },\n  \"dependencies\": {\n    \"ansis\": \"catalog:prod\",\n    \"cac\": \"catalog:prod\",\n    \"chokidar\": \"catalog:prod\",\n    \"debug\": \"catalog:prod\",\n    \"diff\": \"catalog:prod\",\n    \"empathic\": \"catalog:prod\",\n    \"hookable\": \"catalog:prod\",\n    \"rolldown\": \"catalog:prod\",\n    \"rolldown-plugin-dts\": \"catalog:prod\",\n    \"semver\": \"catalog:prod\",\n    \"tinyexec\": \"catalog:prod\",\n    \"tinyglobby\": \"catalog:prod\",\n    \"tree-kill\": \"catalog:prod\",\n    \"unconfig\": \"catalog:prod\"\n  },\n  \"devDependencies\": {\n    \"@arethetypeswrong/core\": \"catalog:peer\",\n    \"@sxzz/eslint-config\": \"catalog:dev\",\n    \"@sxzz/prettier-config\": \"catalog:dev\",\n    \"@sxzz/test-utils\": \"catalog:dev\",\n    \"@types/debug\": \"catalog:dev\",\n    \"@types/node\": \"catalog:dev\",\n    \"@types/semver\": \"catalog:dev\",\n    \"@unocss/eslint-plugin\": \"catalog:docs\",\n    \"@vueuse/core\": \"catalog:docs\",\n    \"bumpp\": \"catalog:dev\",\n    \"eslint\": \"catalog:dev\",\n    \"lightningcss\": \"catalog:dev\",\n    \"oxfmt\": \"catalog:dev\",\n    \"pkg-types\": \"catalog:dev\",\n    \"prettier\": \"catalog:dev\",\n    \"publint\": \"catalog:peer\",\n    \"rolldown-plugin-require-cjs\": \"catalog:dev\",\n    \"typescript\": \"catalog:dev\",\n    \"unocss\": \"catalog:docs\",\n    \"unplugin-lightningcss\": \"catalog:peer\",\n    \"unplugin-unused\": \"catalog:peer\",\n    \"unrun\": \"catalog:peer\",\n    \"vite\": \"catalog:docs\",\n    \"vitest\": \"catalog:dev\"\n  },\n  \"engines\": {\n    \"node\": \">=20.19.0\"\n  },\n  \"prettier\": \"@sxzz/prettier-config\"\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"2833ee6f-dbbd-4ed6-92b2-e9896fa62894","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885060,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/shortcuts.ts","module_request":"ansis","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"b2494ef0-f9ef-4d5a-b260-2761e921c29a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885060,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"b2494ef0-f9ef-4d5a-b260-2761e921c29a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885060,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/shortcuts.ts","module_request":"ansis","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"c80a819e-d229-425f-bd95-18534f9bf8c7","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885060,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/shortcuts.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"1883a8ad-8da7-417c-b0c5-979a392513f0","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885060,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"1883a8ad-8da7-417c-b0c5-979a392513f0","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885061,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/shortcuts.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"0742b42f-2308-4217-9371-ac1f5f5b96f1","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885061,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/external.d.ts","content":"import type { ResolvedConfig } from \"../config/index.ts\";\nimport type { PackageJson } from \"pkg-types\";\nimport type { Plugin } from \"rolldown\";\nexport declare function ExternalPlugin({ pkg, noExternal, inlineOnly, skipNodeModulesBundle }: ResolvedConfig): Plugin;\nexport declare function getProductionDeps(pkg: PackageJson): Set<string>;\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"4a2e384b-f5d7-4cac-97bc-1a862e7defd0","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885061,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","content":"import { mkdtemp, writeFile } from 'node:fs/promises'\nimport { tmpdir } from 'node:os'\nimport { join } from 'node:path'\nimport util, { type InspectOptionsStylized } from 'node:util'\nimport Debug from 'debug'\nimport {\n  VERSION as rolldownVersion,\n  type BuildOptions,\n  type InputOptions,\n  type OutputOptions,\n  type RolldownPluginOption,\n} from 'rolldown'\nimport { importGlobPlugin } from 'rolldown/experimental'\nimport pkg from '../../package.json' with { type: 'json' }\nimport {\n  mergeUserOptions,\n  type DtsOptions,\n  type NormalizedFormat,\n  type ResolvedConfig,\n} from '../config/index.ts'\nimport { lowestCommonAncestor } from '../utils/fs.ts'\nimport { LogLevels } from '../utils/logger.ts'\nimport { ExternalPlugin } from './external.ts'\nimport { LightningCSSPlugin } from './lightningcss.ts'\nimport { NodeProtocolPlugin } from './node-protocol.ts'\nimport { resolveChunkAddon, resolveChunkFilename } from './output.ts'\nimport { ReportPlugin } from './report.ts'\nimport { ShebangPlugin } from './shebang.ts'\nimport { getShimsInject } from './shims.ts'\n\nconst debug = Debug('tsdown:rolldown')\n\nexport async function getBuildOptions(\n  config: ResolvedConfig,\n  format: NormalizedFormat,\n  isMultiFormat?: boolean,\n  cjsDts: boolean = false,\n): Promise<BuildOptions> {\n  const inputOptions = await resolveInputOptions(\n    config,\n    format,\n    cjsDts,\n    isMultiFormat,\n  )\n\n  const outputOptions: OutputOptions = await resolveOutputOptions(\n    inputOptions,\n    config,\n    format,\n    cjsDts,\n  )\n\n  const rolldownConfig: BuildOptions = {\n    ...inputOptions,\n    output: outputOptions,\n  }\n  debug(\n    'rolldown config with format \"%s\" %O',\n    cjsDts ? 'cjs dts' : format,\n    rolldownConfig,\n  )\n\n  return rolldownConfig\n}\n\nexport async function resolveInputOptions(\n  config: ResolvedConfig,\n  format: NormalizedFormat,\n  cjsDts: boolean,\n  isMultiFormat?: boolean,\n): Promise<InputOptions> {\n  const {\n    entry,\n    external,\n    plugins: userPlugins,\n    platform,\n    alias,\n    treeshake,\n    dts,\n    unused,\n    target,\n    shims,\n    tsconfig,\n    cwd,\n    report,\n    env,\n    nodeProtocol,\n    loader,\n    name,\n    logger,\n    cjsDefault,\n    banner,\n    footer,\n    globImport,\n  } = config\n\n  const plugins: RolldownPluginOption = []\n\n  if (nodeProtocol) {\n    plugins.push(NodeProtocolPlugin(nodeProtocol))\n  }\n\n  if (config.pkg || config.skipNodeModulesBundle) {\n    plugins.push(ExternalPlugin(config))\n  }\n\n  if (dts) {\n    const { dts: dtsPlugin } = await import('rolldown-plugin-dts')\n    const options: DtsOptions = {\n      tsconfig,\n      banner: resolveChunkAddon(banner, format, true),\n      footer: resolveChunkAddon(footer, format, true),\n      ...dts,\n    }\n\n    if (format === 'es') {\n      plugins.push(dtsPlugin(options))\n    } else if (cjsDts) {\n      plugins.push(\n        dtsPlugin({\n          ...options,\n          emitDtsOnly: true,\n          cjsDefault,\n        }),\n      )\n    }\n  }\n  if (!cjsDts) {\n    if (unused) {\n      const { Unused } = await import('unplugin-unused')\n      plugins.push(Unused.rolldown(unused === true ? {} : unused))\n    }\n    if (target) {\n      plugins.push(\n        // Use Lightning CSS to handle CSS input. This is a temporary solution\n        // until Rolldown supports CSS syntax lowering natively.\n        await LightningCSSPlugin({ target }),\n      )\n    }\n    plugins.push(ShebangPlugin(logger, cwd, name, isMultiFormat))\n    if (globImport) {\n      plugins.push(importGlobPlugin())\n    }\n  }\n\n  if (report && LogLevels[logger.level] >= 3 /* info */) {\n    plugins.push(ReportPlugin(report, logger, cwd, cjsDts, name, isMultiFormat))\n  }\n\n  if (!cjsDts) {\n    plugins.push(userPlugins)\n  }\n\n  const define = {\n    ...config.define,\n    ...Object.keys(env).reduce((acc, key) => {\n      const value = JSON.stringify(env[key])\n      acc[`process.env.${key}`] = value\n      acc[`import.meta.env.${key}`] = value\n      return acc\n    }, Object.create(null)),\n  }\n  const inject = shims && !cjsDts ? getShimsInject(format, platform) : undefined\n\n  const inputOptions = await mergeUserOptions(\n    {\n      input: entry,\n      cwd,\n      external,\n      resolve: {\n        alias,\n      },\n      tsconfig: tsconfig || undefined,\n      treeshake,\n      platform: cjsDts || format === 'cjs' ? 'node' : platform,\n      transform: {\n        target,\n        define,\n        inject,\n      },\n      plugins,\n      moduleTypes: loader,\n      logLevel: logger.level === 'error' ? 'silent' : logger.level,\n      onLog: cjsDefault\n        ? (level, log, defaultHandler) => {\n            // suppress mixed export warnings if cjsDefault is enabled\n            if (log.code === 'MIXED_EXPORT') return\n            defaultHandler(level, log)\n          }\n        : undefined,\n    },\n    config.inputOptions,\n    [format, { cjsDts }],\n  )\n\n  return inputOptions\n}\n\nexport async function resolveOutputOptions(\n  inputOptions: InputOptions,\n  config: ResolvedConfig,\n  format: NormalizedFormat,\n  cjsDts: boolean,\n): Promise<OutputOptions> {\n  const {\n    entry,\n    outDir,\n    sourcemap,\n    minify,\n    unbundle,\n    banner,\n    footer,\n    cjsDefault,\n  } = config\n\n  const [entryFileNames, chunkFileNames] = resolveChunkFilename(\n    config,\n    inputOptions,\n    format,\n  )\n  const outputOptions: OutputOptions = await mergeUserOptions(\n    {\n      format: cjsDts ? 'es' : format,\n      name: config.globalName,\n      sourcemap,\n      dir: outDir,\n      exports: cjsDefault ? 'auto' : 'named',\n      minify: !cjsDts && minify,\n      entryFileNames,\n      chunkFileNames,\n      preserveModules: unbundle,\n      preserveModulesRoot: unbundle\n        ? lowestCommonAncestor(...Object.values(entry))\n        : undefined,\n      banner: resolveChunkAddon(banner, format),\n      footer: resolveChunkAddon(footer, format),\n    },\n    config.outputOptions,\n    [format, { cjsDts }],\n  )\n  return outputOptions\n}\n\nexport async function getDebugRolldownDir(): Promise<string | undefined> {\n  if (!debug.enabled) return\n  return await mkdtemp(join(tmpdir(), 'tsdown-config-'))\n}\n\nexport async function debugBuildOptions(\n  dir: string,\n  name: string | undefined,\n  format: NormalizedFormat,\n  buildOptions: BuildOptions,\n): Promise<void> {\n  const outFile = join(dir, `tsdown.config.${format}.js`)\n\n  handlePluginInspect(buildOptions.plugins)\n  const serialized = util.formatWithOptions(\n    {\n      depth: null,\n      maxArrayLength: null,\n      maxStringLength: null,\n    },\n    buildOptions,\n  )\n  const code = `/*\nAuto-generated rolldown config for tsdown debug purposes\ntsdown v${pkg.version}, rolldown v${rolldownVersion}\nGenerated on ${new Date().toISOString()}\nPackage name: ${name || 'not specified'}\n*/\n\nexport default ${serialized}\\n`\n  await writeFile(outFile, code)\n  debug(\n    'Wrote debug rolldown config for \"%s\" (%s) -> %s',\n    name || 'default name',\n    format,\n    outFile,\n  )\n}\n\nfunction handlePluginInspect(plugins: RolldownPluginOption) {\n  if (Array.isArray(plugins)) {\n    for (const plugin of plugins) {\n      handlePluginInspect(plugin)\n    }\n  } else if (\n    typeof plugins === 'object' &&\n    plugins !== null &&\n    'name' in plugins\n  ) {\n    ;(plugins as any)[util.inspect.custom] = function (\n      depth: number,\n      options: InspectOptionsStylized,\n      inspect: typeof util.inspect,\n    ) {\n      if ('_options' in plugins) {\n        return inspect(\n          { name: plugins.name, options: (plugins as any)._options },\n          options,\n        )\n      } else {\n        return `\"rolldown plugin: ${plugins.name}\"`\n      }\n    }\n  }\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"686dcfec-b3f0-4524-8c93-fe1e907e91f8","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885062,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/external.d.ts","content":"import type { ResolvedConfig } from \"../config/index.ts\";\nimport type { PackageJson } from \"pkg-types\";\nimport type { Plugin } from \"rolldown\";\nexport declare function ExternalPlugin({ pkg, noExternal, inlineOnly, skipNodeModulesBundle }: ResolvedConfig): Plugin;\nexport declare function getProductionDeps(pkg: PackageJson): Set<string>;\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"7659660a-fad9-4fac-aac2-c4c667b9db79","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885062,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","content":"import { mkdtemp, writeFile } from 'node:fs/promises'\nimport { tmpdir } from 'node:os'\nimport { join } from 'node:path'\nimport util, { type InspectOptionsStylized } from 'node:util'\nimport Debug from 'debug'\nimport {\n  VERSION as rolldownVersion,\n  type BuildOptions,\n  type InputOptions,\n  type OutputOptions,\n  type RolldownPluginOption,\n} from 'rolldown'\nimport { importGlobPlugin } from 'rolldown/experimental'\nimport pkg from '../../package.json' with { type: 'json' }\nimport {\n  mergeUserOptions,\n  type DtsOptions,\n  type NormalizedFormat,\n  type ResolvedConfig,\n} from '../config/index.ts'\nimport { lowestCommonAncestor } from '../utils/fs.ts'\nimport { LogLevels } from '../utils/logger.ts'\nimport { ExternalPlugin } from './external.ts'\nimport { LightningCSSPlugin } from './lightningcss.ts'\nimport { NodeProtocolPlugin } from './node-protocol.ts'\nimport { resolveChunkAddon, resolveChunkFilename } from './output.ts'\nimport { ReportPlugin } from './report.ts'\nimport { ShebangPlugin } from './shebang.ts'\nimport { getShimsInject } from './shims.ts'\n\nconst debug = Debug('tsdown:rolldown')\n\nexport async function getBuildOptions(\n  config: ResolvedConfig,\n  format: NormalizedFormat,\n  isMultiFormat?: boolean,\n  cjsDts: boolean = false,\n): Promise<BuildOptions> {\n  const inputOptions = await resolveInputOptions(\n    config,\n    format,\n    cjsDts,\n    isMultiFormat,\n  )\n\n  const outputOptions: OutputOptions = await resolveOutputOptions(\n    inputOptions,\n    config,\n    format,\n    cjsDts,\n  )\n\n  const rolldownConfig: BuildOptions = {\n    ...inputOptions,\n    output: outputOptions,\n  }\n  debug(\n    'rolldown config with format \"%s\" %O',\n    cjsDts ? 'cjs dts' : format,\n    rolldownConfig,\n  )\n\n  return rolldownConfig\n}\n\nexport async function resolveInputOptions(\n  config: ResolvedConfig,\n  format: NormalizedFormat,\n  cjsDts: boolean,\n  isMultiFormat?: boolean,\n): Promise<InputOptions> {\n  const {\n    entry,\n    external,\n    plugins: userPlugins,\n    platform,\n    alias,\n    treeshake,\n    dts,\n    unused,\n    target,\n    shims,\n    tsconfig,\n    cwd,\n    report,\n    env,\n    nodeProtocol,\n    loader,\n    name,\n    logger,\n    cjsDefault,\n    banner,\n    footer,\n    globImport,\n  } = config\n\n  const plugins: RolldownPluginOption = []\n\n  if (nodeProtocol) {\n    plugins.push(NodeProtocolPlugin(nodeProtocol))\n  }\n\n  if (config.pkg || config.skipNodeModulesBundle) {\n    plugins.push(ExternalPlugin(config))\n  }\n\n  if (dts) {\n    const { dts: dtsPlugin } = await import('rolldown-plugin-dts')\n    const options: DtsOptions = {\n      tsconfig,\n      banner: resolveChunkAddon(banner, format, true),\n      footer: resolveChunkAddon(footer, format, true),\n      ...dts,\n    }\n\n    if (format === 'es') {\n      plugins.push(dtsPlugin(options))\n    } else if (cjsDts) {\n      plugins.push(\n        dtsPlugin({\n          ...options,\n          emitDtsOnly: true,\n          cjsDefault,\n        }),\n      )\n    }\n  }\n  if (!cjsDts) {\n    if (unused) {\n      const { Unused } = await import('unplugin-unused')\n      plugins.push(Unused.rolldown(unused === true ? {} : unused))\n    }\n    if (target) {\n      plugins.push(\n        // Use Lightning CSS to handle CSS input. This is a temporary solution\n        // until Rolldown supports CSS syntax lowering natively.\n        await LightningCSSPlugin({ target }),\n      )\n    }\n    plugins.push(ShebangPlugin(logger, cwd, name, isMultiFormat))\n    if (globImport) {\n      plugins.push(importGlobPlugin())\n    }\n  }\n\n  if (report && LogLevels[logger.level] >= 3 /* info */) {\n    plugins.push(ReportPlugin(report, logger, cwd, cjsDts, name, isMultiFormat))\n  }\n\n  if (!cjsDts) {\n    plugins.push(userPlugins)\n  }\n\n  const define = {\n    ...config.define,\n    ...Object.keys(env).reduce((acc, key) => {\n      const value = JSON.stringify(env[key])\n      acc[`process.env.${key}`] = value\n      acc[`import.meta.env.${key}`] = value\n      return acc\n    }, Object.create(null)),\n  }\n  const inject = shims && !cjsDts ? getShimsInject(format, platform) : undefined\n\n  const inputOptions = await mergeUserOptions(\n    {\n      input: entry,\n      cwd,\n      external,\n      resolve: {\n        alias,\n      },\n      tsconfig: tsconfig || undefined,\n      treeshake,\n      platform: cjsDts || format === 'cjs' ? 'node' : platform,\n      transform: {\n        target,\n        define,\n        inject,\n      },\n      plugins,\n      moduleTypes: loader,\n      logLevel: logger.level === 'error' ? 'silent' : logger.level,\n      onLog: cjsDefault\n        ? (level, log, defaultHandler) => {\n            // suppress mixed export warnings if cjsDefault is enabled\n            if (log.code === 'MIXED_EXPORT') return\n            defaultHandler(level, log)\n          }\n        : undefined,\n    },\n    config.inputOptions,\n    [format, { cjsDts }],\n  )\n\n  return inputOptions\n}\n\nexport async function resolveOutputOptions(\n  inputOptions: InputOptions,\n  config: ResolvedConfig,\n  format: NormalizedFormat,\n  cjsDts: boolean,\n): Promise<OutputOptions> {\n  const {\n    entry,\n    outDir,\n    sourcemap,\n    minify,\n    unbundle,\n    banner,\n    footer,\n    cjsDefault,\n  } = config\n\n  const [entryFileNames, chunkFileNames] = resolveChunkFilename(\n    config,\n    inputOptions,\n    format,\n  )\n  const outputOptions: OutputOptions = await mergeUserOptions(\n    {\n      format: cjsDts ? 'es' : format,\n      name: config.globalName,\n      sourcemap,\n      dir: outDir,\n      exports: cjsDefault ? 'auto' : 'named',\n      minify: !cjsDts && minify,\n      entryFileNames,\n      chunkFileNames,\n      preserveModules: unbundle,\n      preserveModulesRoot: unbundle\n        ? lowestCommonAncestor(...Object.values(entry))\n        : undefined,\n      banner: resolveChunkAddon(banner, format),\n      footer: resolveChunkAddon(footer, format),\n    },\n    config.outputOptions,\n    [format, { cjsDts }],\n  )\n  return outputOptions\n}\n\nexport async function getDebugRolldownDir(): Promise<string | undefined> {\n  if (!debug.enabled) return\n  return await mkdtemp(join(tmpdir(), 'tsdown-config-'))\n}\n\nexport async function debugBuildOptions(\n  dir: string,\n  name: string | undefined,\n  format: NormalizedFormat,\n  buildOptions: BuildOptions,\n): Promise<void> {\n  const outFile = join(dir, `tsdown.config.${format}.js`)\n\n  handlePluginInspect(buildOptions.plugins)\n  const serialized = util.formatWithOptions(\n    {\n      depth: null,\n      maxArrayLength: null,\n      maxStringLength: null,\n    },\n    buildOptions,\n  )\n  const code = `/*\nAuto-generated rolldown config for tsdown debug purposes\ntsdown v${pkg.version}, rolldown v${rolldownVersion}\nGenerated on ${new Date().toISOString()}\nPackage name: ${name || 'not specified'}\n*/\n\nexport default ${serialized}\\n`\n  await writeFile(outFile, code)\n  debug(\n    'Wrote debug rolldown config for \"%s\" (%s) -> %s',\n    name || 'default name',\n    format,\n    outFile,\n  )\n}\n\nfunction handlePluginInspect(plugins: RolldownPluginOption) {\n  if (Array.isArray(plugins)) {\n    for (const plugin of plugins) {\n      handlePluginInspect(plugin)\n    }\n  } else if (\n    typeof plugins === 'object' &&\n    plugins !== null &&\n    'name' in plugins\n  ) {\n    ;(plugins as any)[util.inspect.custom] = function (\n      depth: number,\n      options: InspectOptionsStylized,\n      inspect: typeof util.inspect,\n    ) {\n      if ('_options' in plugins) {\n        return inspect(\n          { name: plugins.name, options: (plugins as any)._options },\n          options,\n        )\n      } else {\n        return `\"rolldown plugin: ${plugins.name}\"`\n      }\n    }\n  }\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"c712c5f4-ed89-47c9-ba5d-89584d5c7853","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885063,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","content":"import { mkdtemp, writeFile } from 'node:fs/promises'\nimport { tmpdir } from 'node:os'\nimport { join } from 'node:path'\nimport util, { type InspectOptionsStylized } from 'node:util'\nimport Debug from 'debug'\nimport {\n  VERSION as rolldownVersion,\n  type BuildOptions,\n  type InputOptions,\n  type OutputOptions,\n  type RolldownPluginOption,\n} from 'rolldown'\nimport { importGlobPlugin } from 'rolldown/experimental'\nimport pkg from '../../package.json' with { type: 'json' }\nimport {\n  mergeUserOptions,\n  type DtsOptions,\n  type NormalizedFormat,\n  type ResolvedConfig,\n} from '../config/index.ts'\nimport { lowestCommonAncestor } from '../utils/fs.ts'\nimport { LogLevels } from '../utils/logger.ts'\nimport { ExternalPlugin } from './external.ts'\nimport { LightningCSSPlugin } from './lightningcss.ts'\nimport { NodeProtocolPlugin } from './node-protocol.ts'\nimport { resolveChunkAddon, resolveChunkFilename } from './output.ts'\nimport { ReportPlugin } from './report.ts'\nimport { ShebangPlugin } from './shebang.ts'\nimport { getShimsInject } from './shims.ts'\n\nconst debug = Debug('tsdown:rolldown')\n\nexport async function getBuildOptions(\n  config: ResolvedConfig,\n  format: NormalizedFormat,\n  isMultiFormat?: boolean,\n  cjsDts: boolean = false,\n): Promise<BuildOptions> {\n  const inputOptions = await resolveInputOptions(\n    config,\n    format,\n    cjsDts,\n    isMultiFormat,\n  )\n\n  const outputOptions: OutputOptions = await resolveOutputOptions(\n    inputOptions,\n    config,\n    format,\n    cjsDts,\n  )\n\n  const rolldownConfig: BuildOptions = {\n    ...inputOptions,\n    output: outputOptions,\n  }\n  debug(\n    'rolldown config with format \"%s\" %O',\n    cjsDts ? 'cjs dts' : format,\n    rolldownConfig,\n  )\n\n  return rolldownConfig\n}\n\nexport async function resolveInputOptions(\n  config: ResolvedConfig,\n  format: NormalizedFormat,\n  cjsDts: boolean,\n  isMultiFormat?: boolean,\n): Promise<InputOptions> {\n  const {\n    entry,\n    external,\n    plugins: userPlugins,\n    platform,\n    alias,\n    treeshake,\n    dts,\n    unused,\n    target,\n    shims,\n    tsconfig,\n    cwd,\n    report,\n    env,\n    nodeProtocol,\n    loader,\n    name,\n    logger,\n    cjsDefault,\n    banner,\n    footer,\n    globImport,\n  } = config\n\n  const plugins: RolldownPluginOption = []\n\n  if (nodeProtocol) {\n    plugins.push(NodeProtocolPlugin(nodeProtocol))\n  }\n\n  if (config.pkg || config.skipNodeModulesBundle) {\n    plugins.push(ExternalPlugin(config))\n  }\n\n  if (dts) {\n    const { dts: dtsPlugin } = await import('rolldown-plugin-dts')\n    const options: DtsOptions = {\n      tsconfig,\n      banner: resolveChunkAddon(banner, format, true),\n      footer: resolveChunkAddon(footer, format, true),\n      ...dts,\n    }\n\n    if (format === 'es') {\n      plugins.push(dtsPlugin(options))\n    } else if (cjsDts) {\n      plugins.push(\n        dtsPlugin({\n          ...options,\n          emitDtsOnly: true,\n          cjsDefault,\n        }),\n      )\n    }\n  }\n  if (!cjsDts) {\n    if (unused) {\n      const { Unused } = await import('unplugin-unused')\n      plugins.push(Unused.rolldown(unused === true ? {} : unused))\n    }\n    if (target) {\n      plugins.push(\n        // Use Lightning CSS to handle CSS input. This is a temporary solution\n        // until Rolldown supports CSS syntax lowering natively.\n        await LightningCSSPlugin({ target }),\n      )\n    }\n    plugins.push(ShebangPlugin(logger, cwd, name, isMultiFormat))\n    if (globImport) {\n      plugins.push(importGlobPlugin())\n    }\n  }\n\n  if (report && LogLevels[logger.level] >= 3 /* info */) {\n    plugins.push(ReportPlugin(report, logger, cwd, cjsDts, name, isMultiFormat))\n  }\n\n  if (!cjsDts) {\n    plugins.push(userPlugins)\n  }\n\n  const define = {\n    ...config.define,\n    ...Object.keys(env).reduce((acc, key) => {\n      const value = JSON.stringify(env[key])\n      acc[`process.env.${key}`] = value\n      acc[`import.meta.env.${key}`] = value\n      return acc\n    }, Object.create(null)),\n  }\n  const inject = shims && !cjsDts ? getShimsInject(format, platform) : undefined\n\n  const inputOptions = await mergeUserOptions(\n    {\n      input: entry,\n      cwd,\n      external,\n      resolve: {\n        alias,\n      },\n      tsconfig: tsconfig || undefined,\n      treeshake,\n      platform: cjsDts || format === 'cjs' ? 'node' : platform,\n      transform: {\n        target,\n        define,\n        inject,\n      },\n      plugins,\n      moduleTypes: loader,\n      logLevel: logger.level === 'error' ? 'silent' : logger.level,\n      onLog: cjsDefault\n        ? (level, log, defaultHandler) => {\n            // suppress mixed export warnings if cjsDefault is enabled\n            if (log.code === 'MIXED_EXPORT') return\n            defaultHandler(level, log)\n          }\n        : undefined,\n    },\n    config.inputOptions,\n    [format, { cjsDts }],\n  )\n\n  return inputOptions\n}\n\nexport async function resolveOutputOptions(\n  inputOptions: InputOptions,\n  config: ResolvedConfig,\n  format: NormalizedFormat,\n  cjsDts: boolean,\n): Promise<OutputOptions> {\n  const {\n    entry,\n    outDir,\n    sourcemap,\n    minify,\n    unbundle,\n    banner,\n    footer,\n    cjsDefault,\n  } = config\n\n  const [entryFileNames, chunkFileNames] = resolveChunkFilename(\n    config,\n    inputOptions,\n    format,\n  )\n  const outputOptions: OutputOptions = await mergeUserOptions(\n    {\n      format: cjsDts ? 'es' : format,\n      name: config.globalName,\n      sourcemap,\n      dir: outDir,\n      exports: cjsDefault ? 'auto' : 'named',\n      minify: !cjsDts && minify,\n      entryFileNames,\n      chunkFileNames,\n      preserveModules: unbundle,\n      preserveModulesRoot: unbundle\n        ? lowestCommonAncestor(...Object.values(entry))\n        : undefined,\n      banner: resolveChunkAddon(banner, format),\n      footer: resolveChunkAddon(footer, format),\n    },\n    config.outputOptions,\n    [format, { cjsDts }],\n  )\n  return outputOptions\n}\n\nexport async function getDebugRolldownDir(): Promise<string | undefined> {\n  if (!debug.enabled) return\n  return await mkdtemp(join(tmpdir(), 'tsdown-config-'))\n}\n\nexport async function debugBuildOptions(\n  dir: string,\n  name: string | undefined,\n  format: NormalizedFormat,\n  buildOptions: BuildOptions,\n): Promise<void> {\n  const outFile = join(dir, `tsdown.config.${format}.js`)\n\n  handlePluginInspect(buildOptions.plugins)\n  const serialized = util.formatWithOptions(\n    {\n      depth: null,\n      maxArrayLength: null,\n      maxStringLength: null,\n    },\n    buildOptions,\n  )\n  const code = `/*\nAuto-generated rolldown config for tsdown debug purposes\ntsdown v${pkg.version}, rolldown v${rolldownVersion}\nGenerated on ${new Date().toISOString()}\nPackage name: ${name || 'not specified'}\n*/\n\nexport default ${serialized}\\n`\n  await writeFile(outFile, code)\n  debug(\n    'Wrote debug rolldown config for \"%s\" (%s) -> %s',\n    name || 'default name',\n    format,\n    outFile,\n  )\n}\n\nfunction handlePluginInspect(plugins: RolldownPluginOption) {\n  if (Array.isArray(plugins)) {\n    for (const plugin of plugins) {\n      handlePluginInspect(plugin)\n    }\n  } else if (\n    typeof plugins === 'object' &&\n    plugins !== null &&\n    'name' in plugins\n  ) {\n    ;(plugins as any)[util.inspect.custom] = function (\n      depth: number,\n      options: InspectOptionsStylized,\n      inspect: typeof util.inspect,\n    ) {\n      if ('_options' in plugins) {\n        return inspect(\n          { name: plugins.name, options: (plugins as any)._options },\n          options,\n        )\n      } else {\n        return `\"rolldown plugin: ${plugins.name}\"`\n      }\n    }\n  }\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"c712c5f4-ed89-47c9-ba5d-89584d5c7853","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885064,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/watch.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"f94c1f2d-5c5e-483e-812a-03f1402ede1a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885064,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","content":"import { mkdtemp, writeFile } from 'node:fs/promises'\nimport { tmpdir } from 'node:os'\nimport { join } from 'node:path'\nimport util, { type InspectOptionsStylized } from 'node:util'\nimport Debug from 'debug'\nimport {\n  VERSION as rolldownVersion,\n  type BuildOptions,\n  type InputOptions,\n  type OutputOptions,\n  type RolldownPluginOption,\n} from 'rolldown'\nimport { importGlobPlugin } from 'rolldown/experimental'\nimport pkg from '../../package.json' with { type: 'json' }\nimport {\n  mergeUserOptions,\n  type DtsOptions,\n  type NormalizedFormat,\n  type ResolvedConfig,\n} from '../config/index.ts'\nimport { lowestCommonAncestor } from '../utils/fs.ts'\nimport { LogLevels } from '../utils/logger.ts'\nimport { ExternalPlugin } from './external.ts'\nimport { LightningCSSPlugin } from './lightningcss.ts'\nimport { NodeProtocolPlugin } from './node-protocol.ts'\nimport { resolveChunkAddon, resolveChunkFilename } from './output.ts'\nimport { ReportPlugin } from './report.ts'\nimport { ShebangPlugin } from './shebang.ts'\nimport { getShimsInject } from './shims.ts'\n\nconst debug = Debug('tsdown:rolldown')\n\nexport async function getBuildOptions(\n  config: ResolvedConfig,\n  format: NormalizedFormat,\n  isMultiFormat?: boolean,\n  cjsDts: boolean = false,\n): Promise<BuildOptions> {\n  const inputOptions = await resolveInputOptions(\n    config,\n    format,\n    cjsDts,\n    isMultiFormat,\n  )\n\n  const outputOptions: OutputOptions = await resolveOutputOptions(\n    inputOptions,\n    config,\n    format,\n    cjsDts,\n  )\n\n  const rolldownConfig: BuildOptions = {\n    ...inputOptions,\n    output: outputOptions,\n  }\n  debug(\n    'rolldown config with format \"%s\" %O',\n    cjsDts ? 'cjs dts' : format,\n    rolldownConfig,\n  )\n\n  return rolldownConfig\n}\n\nexport async function resolveInputOptions(\n  config: ResolvedConfig,\n  format: NormalizedFormat,\n  cjsDts: boolean,\n  isMultiFormat?: boolean,\n): Promise<InputOptions> {\n  const {\n    entry,\n    external,\n    plugins: userPlugins,\n    platform,\n    alias,\n    treeshake,\n    dts,\n    unused,\n    target,\n    shims,\n    tsconfig,\n    cwd,\n    report,\n    env,\n    nodeProtocol,\n    loader,\n    name,\n    logger,\n    cjsDefault,\n    banner,\n    footer,\n    globImport,\n  } = config\n\n  const plugins: RolldownPluginOption = []\n\n  if (nodeProtocol) {\n    plugins.push(NodeProtocolPlugin(nodeProtocol))\n  }\n\n  if (config.pkg || config.skipNodeModulesBundle) {\n    plugins.push(ExternalPlugin(config))\n  }\n\n  if (dts) {\n    const { dts: dtsPlugin } = await import('rolldown-plugin-dts')\n    const options: DtsOptions = {\n      tsconfig,\n      banner: resolveChunkAddon(banner, format, true),\n      footer: resolveChunkAddon(footer, format, true),\n      ...dts,\n    }\n\n    if (format === 'es') {\n      plugins.push(dtsPlugin(options))\n    } else if (cjsDts) {\n      plugins.push(\n        dtsPlugin({\n          ...options,\n          emitDtsOnly: true,\n          cjsDefault,\n        }),\n      )\n    }\n  }\n  if (!cjsDts) {\n    if (unused) {\n      const { Unused } = await import('unplugin-unused')\n      plugins.push(Unused.rolldown(unused === true ? {} : unused))\n    }\n    if (target) {\n      plugins.push(\n        // Use Lightning CSS to handle CSS input. This is a temporary solution\n        // until Rolldown supports CSS syntax lowering natively.\n        await LightningCSSPlugin({ target }),\n      )\n    }\n    plugins.push(ShebangPlugin(logger, cwd, name, isMultiFormat))\n    if (globImport) {\n      plugins.push(importGlobPlugin())\n    }\n  }\n\n  if (report && LogLevels[logger.level] >= 3 /* info */) {\n    plugins.push(ReportPlugin(report, logger, cwd, cjsDts, name, isMultiFormat))\n  }\n\n  if (!cjsDts) {\n    plugins.push(userPlugins)\n  }\n\n  const define = {\n    ...config.define,\n    ...Object.keys(env).reduce((acc, key) => {\n      const value = JSON.stringify(env[key])\n      acc[`process.env.${key}`] = value\n      acc[`import.meta.env.${key}`] = value\n      return acc\n    }, Object.create(null)),\n  }\n  const inject = shims && !cjsDts ? getShimsInject(format, platform) : undefined\n\n  const inputOptions = await mergeUserOptions(\n    {\n      input: entry,\n      cwd,\n      external,\n      resolve: {\n        alias,\n      },\n      tsconfig: tsconfig || undefined,\n      treeshake,\n      platform: cjsDts || format === 'cjs' ? 'node' : platform,\n      transform: {\n        target,\n        define,\n        inject,\n      },\n      plugins,\n      moduleTypes: loader,\n      logLevel: logger.level === 'error' ? 'silent' : logger.level,\n      onLog: cjsDefault\n        ? (level, log, defaultHandler) => {\n            // suppress mixed export warnings if cjsDefault is enabled\n            if (log.code === 'MIXED_EXPORT') return\n            defaultHandler(level, log)\n          }\n        : undefined,\n    },\n    config.inputOptions,\n    [format, { cjsDts }],\n  )\n\n  return inputOptions\n}\n\nexport async function resolveOutputOptions(\n  inputOptions: InputOptions,\n  config: ResolvedConfig,\n  format: NormalizedFormat,\n  cjsDts: boolean,\n): Promise<OutputOptions> {\n  const {\n    entry,\n    outDir,\n    sourcemap,\n    minify,\n    unbundle,\n    banner,\n    footer,\n    cjsDefault,\n  } = config\n\n  const [entryFileNames, chunkFileNames] = resolveChunkFilename(\n    config,\n    inputOptions,\n    format,\n  )\n  const outputOptions: OutputOptions = await mergeUserOptions(\n    {\n      format: cjsDts ? 'es' : format,\n      name: config.globalName,\n      sourcemap,\n      dir: outDir,\n      exports: cjsDefault ? 'auto' : 'named',\n      minify: !cjsDts && minify,\n      entryFileNames,\n      chunkFileNames,\n      preserveModules: unbundle,\n      preserveModulesRoot: unbundle\n        ? lowestCommonAncestor(...Object.values(entry))\n        : undefined,\n      banner: resolveChunkAddon(banner, format),\n      footer: resolveChunkAddon(footer, format),\n    },\n    config.outputOptions,\n    [format, { cjsDts }],\n  )\n  return outputOptions\n}\n\nexport async function getDebugRolldownDir(): Promise<string | undefined> {\n  if (!debug.enabled) return\n  return await mkdtemp(join(tmpdir(), 'tsdown-config-'))\n}\n\nexport async function debugBuildOptions(\n  dir: string,\n  name: string | undefined,\n  format: NormalizedFormat,\n  buildOptions: BuildOptions,\n): Promise<void> {\n  const outFile = join(dir, `tsdown.config.${format}.js`)\n\n  handlePluginInspect(buildOptions.plugins)\n  const serialized = util.formatWithOptions(\n    {\n      depth: null,\n      maxArrayLength: null,\n      maxStringLength: null,\n    },\n    buildOptions,\n  )\n  const code = `/*\nAuto-generated rolldown config for tsdown debug purposes\ntsdown v${pkg.version}, rolldown v${rolldownVersion}\nGenerated on ${new Date().toISOString()}\nPackage name: ${name || 'not specified'}\n*/\n\nexport default ${serialized}\\n`\n  await writeFile(outFile, code)\n  debug(\n    'Wrote debug rolldown config for \"%s\" (%s) -> %s',\n    name || 'default name',\n    format,\n    outFile,\n  )\n}\n\nfunction handlePluginInspect(plugins: RolldownPluginOption) {\n  if (Array.isArray(plugins)) {\n    for (const plugin of plugins) {\n      handlePluginInspect(plugin)\n    }\n  } else if (\n    typeof plugins === 'object' &&\n    plugins !== null &&\n    'name' in plugins\n  ) {\n    ;(plugins as any)[util.inspect.custom] = function (\n      depth: number,\n      options: InspectOptionsStylized,\n      inspect: typeof util.inspect,\n    ) {\n      if ('_options' in plugins) {\n        return inspect(\n          { name: plugins.name, options: (plugins as any)._options },\n          options,\n        )\n      } else {\n        return `\"rolldown plugin: ${plugins.name}\"`\n      }\n    }\n  }\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"8df35582-d4c4-4da7-96b4-7aee03c1e548","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885065,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"f94c1f2d-5c5e-483e-812a-03f1402ede1a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885066,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"f73d99a3-d4d6-418e-97ff-2003ae88dd95","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885066,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/watch.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"8fa3a21f-56c8-4cb8-ae63-7e432c25e788","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885066,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/watch.ts","module_request":"ansis","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"04b98f59-5397-47cd-afaf-7a7508f9700f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885066,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"433baf32-ffcd-4eda-830c-8c03c99370d2","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885066,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"../features/target.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"29fd3f26-2947-4ef8-8016-e462b3d5e50d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885066,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"04b98f59-5397-47cd-afaf-7a7508f9700f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885067,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"5861fe44-ad73-4425-a18d-f6660129a569","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885067,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/watch.ts","module_request":"ansis","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"74fbf664-c044-4544-ac28-bd2b193b8e38","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885067,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"../features/tsconfig.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"b97e7bc9-8aa4-42a3-a0dc-8638e139c8b5","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885067,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/watch.ts","module_request":"rolldown-plugin-dts/filename","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"01375896-1ed7-4c75-a443-92f58f6cffdd","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885067,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"2e542604-a970-4be7-8db8-3a4782872fd9","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885068,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"../utils/general.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"56738ad9-a836-485e-9920-0e35968c203b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885068,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"a722166d-d109-4e42-b459-7c18761e25c8","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885068,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/package.json","content":"{\n  \"name\": \"tsdown\",\n  \"version\": \"0.15.12\",\n  \"packageManager\": \"pnpm@10.20.0\",\n  \"description\": \"The Elegant Bundler for Libraries\",\n  \"type\": \"module\",\n  \"license\": \"MIT\",\n  \"homepage\": \"https://github.com/rolldown/tsdown#readme\",\n  \"bugs\": {\n    \"url\": \"https://github.com/rolldown/tsdown/issues\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/rolldown/tsdown.git\"\n  },\n  \"author\": \"Kevin Deng <sxzz@sxzz.moe>\",\n  \"funding\": \"https://github.com/sponsors/sxzz\",\n  \"files\": [\n    \"client.d.ts\",\n    \"dist\",\n    \"esm-shims.js\"\n  ],\n  \"main\": \"./dist/index.mjs\",\n  \"module\": \"./dist/index.mjs\",\n  \"types\": \"./dist/index.d.mts\",\n  \"exports\": {\n    \".\": \"./dist/index.mjs\",\n    \"./config\": \"./dist/config.mjs\",\n    \"./plugins\": \"./dist/plugins.mjs\",\n    \"./run\": \"./dist/run.mjs\",\n    \"./package.json\": \"./package.json\",\n    \"./client\": \"./client.d.ts\"\n  },\n  \"typesVersions\": {\n    \"*\": {\n      \"*\": [\n        \"./dist/*\",\n        \"./*\"\n      ]\n    }\n  },\n  \"bin\": {\n    \"tsdown\": \"./dist/run.mjs\"\n  },\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"scripts\": {\n    \"lint\": \"eslint --cache --max-warnings 0 .\",\n    \"lint:fix\": \"pnpm run lint --fix\",\n    \"build\": \"unrun ./src/run.ts\",\n    \"dev\": \"unrun ./src/run.ts\",\n    \"test\": \"vitest\",\n    \"typecheck\": \"tsc --noEmit\",\n    \"format\": \"prettier --cache --write .\",\n    \"release\": \"bumpp -r\",\n    \"prepublishOnly\": \"pnpm run build\",\n    \"docs:dev\": \"pnpm -C docs run dev\",\n    \"docs:build\": \"pnpm -C docs run build\",\n    \"docs:preview\": \"pnpm -C docs run preview\",\n    \"docs:generate\": \"pnpm -C docs run generate\"\n  },\n  \"peerDependencies\": {\n    \"@arethetypeswrong/core\": \"^0.18.1\",\n    \"publint\": \"^0.3.0\",\n    \"typescript\": \"^5.0.0\",\n    \"unplugin-lightningcss\": \"^0.4.0\",\n    \"unplugin-unused\": \"^0.5.0\",\n    \"unrun\": \"^0.2.1\"\n  },\n  \"peerDependenciesMeta\": {\n    \"@arethetypeswrong/core\": {\n      \"optional\": true\n    },\n    \"publint\": {\n      \"optional\": true\n    },\n    \"typescript\": {\n      \"optional\": true\n    },\n    \"unplugin-lightningcss\": {\n      \"optional\": true\n    },\n    \"unplugin-unused\": {\n      \"optional\": true\n    },\n    \"unrun\": {\n      \"optional\": true\n    }\n  },\n  \"dependencies\": {\n    \"ansis\": \"catalog:prod\",\n    \"cac\": \"catalog:prod\",\n    \"chokidar\": \"catalog:prod\",\n    \"debug\": \"catalog:prod\",\n    \"diff\": \"catalog:prod\",\n    \"empathic\": \"catalog:prod\",\n    \"hookable\": \"catalog:prod\",\n    \"rolldown\": \"catalog:prod\",\n    \"rolldown-plugin-dts\": \"catalog:prod\",\n    \"semver\": \"catalog:prod\",\n    \"tinyexec\": \"catalog:prod\",\n    \"tinyglobby\": \"catalog:prod\",\n    \"tree-kill\": \"catalog:prod\",\n    \"unconfig\": \"catalog:prod\"\n  },\n  \"devDependencies\": {\n    \"@arethetypeswrong/core\": \"catalog:peer\",\n    \"@sxzz/eslint-config\": \"catalog:dev\",\n    \"@sxzz/prettier-config\": \"catalog:dev\",\n    \"@sxzz/test-utils\": \"catalog:dev\",\n    \"@types/debug\": \"catalog:dev\",\n    \"@types/node\": \"catalog:dev\",\n    \"@types/semver\": \"catalog:dev\",\n    \"@unocss/eslint-plugin\": \"catalog:docs\",\n    \"@vueuse/core\": \"catalog:docs\",\n    \"bumpp\": \"catalog:dev\",\n    \"eslint\": \"catalog:dev\",\n    \"lightningcss\": \"catalog:dev\",\n    \"oxfmt\": \"catalog:dev\",\n    \"pkg-types\": \"catalog:dev\",\n    \"prettier\": \"catalog:dev\",\n    \"publint\": \"catalog:peer\",\n    \"rolldown-plugin-require-cjs\": \"catalog:dev\",\n    \"typescript\": \"catalog:dev\",\n    \"unocss\": \"catalog:docs\",\n    \"unplugin-lightningcss\": \"catalog:peer\",\n    \"unplugin-unused\": \"catalog:peer\",\n    \"unrun\": \"catalog:peer\",\n    \"vite\": \"catalog:docs\",\n    \"vitest\": \"catalog:dev\"\n  },\n  \"engines\": {\n    \"node\": \">=20.19.0\"\n  },\n  \"prettier\": \"@sxzz/prettier-config\"\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"c341733f-e79b-4926-81ae-d77cc37aa7e9","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885070,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/package.json","content":"{\n  \"name\": \"tsdown\",\n  \"version\": \"0.15.12\",\n  \"packageManager\": \"pnpm@10.20.0\",\n  \"description\": \"The Elegant Bundler for Libraries\",\n  \"type\": \"module\",\n  \"license\": \"MIT\",\n  \"homepage\": \"https://github.com/rolldown/tsdown#readme\",\n  \"bugs\": {\n    \"url\": \"https://github.com/rolldown/tsdown/issues\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/rolldown/tsdown.git\"\n  },\n  \"author\": \"Kevin Deng <sxzz@sxzz.moe>\",\n  \"funding\": \"https://github.com/sponsors/sxzz\",\n  \"files\": [\n    \"client.d.ts\",\n    \"dist\",\n    \"esm-shims.js\"\n  ],\n  \"main\": \"./dist/index.mjs\",\n  \"module\": \"./dist/index.mjs\",\n  \"types\": \"./dist/index.d.mts\",\n  \"exports\": {\n    \".\": \"./dist/index.mjs\",\n    \"./config\": \"./dist/config.mjs\",\n    \"./plugins\": \"./dist/plugins.mjs\",\n    \"./run\": \"./dist/run.mjs\",\n    \"./package.json\": \"./package.json\",\n    \"./client\": \"./client.d.ts\"\n  },\n  \"typesVersions\": {\n    \"*\": {\n      \"*\": [\n        \"./dist/*\",\n        \"./*\"\n      ]\n    }\n  },\n  \"bin\": {\n    \"tsdown\": \"./dist/run.mjs\"\n  },\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"scripts\": {\n    \"lint\": \"eslint --cache --max-warnings 0 .\",\n    \"lint:fix\": \"pnpm run lint --fix\",\n    \"build\": \"unrun ./src/run.ts\",\n    \"dev\": \"unrun ./src/run.ts\",\n    \"test\": \"vitest\",\n    \"typecheck\": \"tsc --noEmit\",\n    \"format\": \"prettier --cache --write .\",\n    \"release\": \"bumpp -r\",\n    \"prepublishOnly\": \"pnpm run build\",\n    \"docs:dev\": \"pnpm -C docs run dev\",\n    \"docs:build\": \"pnpm -C docs run build\",\n    \"docs:preview\": \"pnpm -C docs run preview\",\n    \"docs:generate\": \"pnpm -C docs run generate\"\n  },\n  \"peerDependencies\": {\n    \"@arethetypeswrong/core\": \"^0.18.1\",\n    \"publint\": \"^0.3.0\",\n    \"typescript\": \"^5.0.0\",\n    \"unplugin-lightningcss\": \"^0.4.0\",\n    \"unplugin-unused\": \"^0.5.0\",\n    \"unrun\": \"^0.2.1\"\n  },\n  \"peerDependenciesMeta\": {\n    \"@arethetypeswrong/core\": {\n      \"optional\": true\n    },\n    \"publint\": {\n      \"optional\": true\n    },\n    \"typescript\": {\n      \"optional\": true\n    },\n    \"unplugin-lightningcss\": {\n      \"optional\": true\n    },\n    \"unplugin-unused\": {\n      \"optional\": true\n    },\n    \"unrun\": {\n      \"optional\": true\n    }\n  },\n  \"dependencies\": {\n    \"ansis\": \"catalog:prod\",\n    \"cac\": \"catalog:prod\",\n    \"chokidar\": \"catalog:prod\",\n    \"debug\": \"catalog:prod\",\n    \"diff\": \"catalog:prod\",\n    \"empathic\": \"catalog:prod\",\n    \"hookable\": \"catalog:prod\",\n    \"rolldown\": \"catalog:prod\",\n    \"rolldown-plugin-dts\": \"catalog:prod\",\n    \"semver\": \"catalog:prod\",\n    \"tinyexec\": \"catalog:prod\",\n    \"tinyglobby\": \"catalog:prod\",\n    \"tree-kill\": \"catalog:prod\",\n    \"unconfig\": \"catalog:prod\"\n  },\n  \"devDependencies\": {\n    \"@arethetypeswrong/core\": \"catalog:peer\",\n    \"@sxzz/eslint-config\": \"catalog:dev\",\n    \"@sxzz/prettier-config\": \"catalog:dev\",\n    \"@sxzz/test-utils\": \"catalog:dev\",\n    \"@types/debug\": \"catalog:dev\",\n    \"@types/node\": \"catalog:dev\",\n    \"@types/semver\": \"catalog:dev\",\n    \"@unocss/eslint-plugin\": \"catalog:docs\",\n    \"@vueuse/core\": \"catalog:docs\",\n    \"bumpp\": \"catalog:dev\",\n    \"eslint\": \"catalog:dev\",\n    \"lightningcss\": \"catalog:dev\",\n    \"oxfmt\": \"catalog:dev\",\n    \"pkg-types\": \"catalog:dev\",\n    \"prettier\": \"catalog:dev\",\n    \"publint\": \"catalog:peer\",\n    \"rolldown-plugin-require-cjs\": \"catalog:dev\",\n    \"typescript\": \"catalog:dev\",\n    \"unocss\": \"catalog:docs\",\n    \"unplugin-lightningcss\": \"catalog:peer\",\n    \"unplugin-unused\": \"catalog:peer\",\n    \"unrun\": \"catalog:peer\",\n    \"vite\": \"catalog:docs\",\n    \"vitest\": \"catalog:dev\"\n  },\n  \"engines\": {\n    \"node\": \">=20.19.0\"\n  },\n  \"prettier\": \"@sxzz/prettier-config\"\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"c341733f-e79b-4926-81ae-d77cc37aa7e9","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885071,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/report.d.ts","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"9e067f72-8d2f-4f9a-bd4d-d1109ca057ec","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885072,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/migrate.ts","content":"import { existsSync } from 'node:fs'\nimport { readFile, unlink, writeFile } from 'node:fs/promises'\nimport process from 'node:process'\nimport { createInterface } from 'node:readline/promises'\nimport { bold, green, underline } from 'ansis'\nimport pkg from '../package.json' with { type: 'json' }\nimport { globalLogger } from './utils/logger.ts'\n\nexport async function migrate({\n  cwd,\n  dryRun,\n}: {\n  cwd?: string\n  dryRun?: boolean\n}): Promise<void> {\n  if (dryRun) {\n    globalLogger.info('Dry run enabled. No changes were made.')\n  } else {\n    const rl = createInterface({\n      input: process.stdin,\n      output: process.stdout,\n    })\n\n    globalLogger.warn(\n      `\\n\\n` +\n        `Before proceeding, review the migration guide at ${underline`https://tsdown.dev/guide/migrate-from-tsup`}, as this process will modify your files.\\n` +\n        `Uncommitted changes will be lost. Use the ${green`--dry-run`} flag to preview changes without applying them.`,\n    )\n    const input = await rl.question(bold`Continue? (Y/n) `)\n    rl.close()\n\n    const confirm = input.toLowerCase() === 'y' || input === ''\n    if (!confirm) {\n      globalLogger.error('Migration cancelled.')\n      process.exitCode = 1\n      return\n    }\n  }\n\n  if (cwd) process.chdir(cwd)\n\n  let migrated = await migratePackageJson(dryRun)\n  if (await migrateTsupConfig(dryRun)) {\n    migrated = true\n  }\n  if (migrated) {\n    globalLogger.success(\n      'Migration completed. Remember to run install command with your package manager.',\n    )\n  } else {\n    globalLogger.error('No migration performed.')\n    process.exitCode = 1\n  }\n}\n\nconst DEP_FIELDS = {\n  dependencies: `^${pkg.version}`,\n  devDependencies: `^${pkg.version}`,\n  peerDependencies: '*',\n} as const\nasync function migratePackageJson(dryRun?: boolean): Promise<boolean> {\n  if (!existsSync('package.json')) {\n    globalLogger.error('No package.json found')\n    return false\n  }\n\n  const pkgRaw = await readFile('package.json', 'utf8')\n  let pkg = JSON.parse(pkgRaw)\n  let found = false\n\n  for (const [field, semver] of Object.entries(DEP_FIELDS)) {\n    if (pkg[field]?.tsup) {\n      globalLogger.info(`Migrating \\`${field}\\` to tsdown.`)\n      found = true\n      pkg[field] = renameKey(pkg[field], 'tsup', 'tsdown', semver)\n    }\n  }\n\n  if (pkg.scripts) {\n    for (const key of Object.keys(pkg.scripts)) {\n      if (pkg.scripts[key].includes('tsup')) {\n        globalLogger.info(`Migrating \\`${key}\\` script to tsdown`)\n        found = true\n        pkg.scripts[key] = pkg.scripts[key].replaceAll(\n          /tsup(?:-node)?/g,\n          'tsdown',\n        )\n      }\n    }\n  }\n  if (pkg.tsup) {\n    globalLogger.info('Migrating `tsup` field in package.json to `tsdown`.')\n    found = true\n    pkg = renameKey(pkg, 'tsup', 'tsdown')\n  }\n\n  if (!found) {\n    globalLogger.warn('No tsup-related fields found in package.json')\n    return false\n  }\n\n  const pkgStr = `${JSON.stringify(pkg, null, pkgRaw.includes('\\t') ? '\\t' : 2)}\\n`\n  if (dryRun) {\n    const { createPatch } = await import('diff')\n    globalLogger.info('[dry-run] package.json:')\n    console.info(createPatch('package.json', pkgRaw, pkgStr))\n  } else {\n    await writeFile('package.json', pkgStr)\n    globalLogger.success('Migrated `package.json`')\n  }\n  return true\n}\n\nconst TSUP_FILES = [\n  'tsup.config.ts',\n  'tsup.config.cts',\n  'tsup.config.mts',\n  'tsup.config.js',\n  'tsup.config.cjs',\n  'tsup.config.mjs',\n  'tsup.config.json',\n]\nasync function migrateTsupConfig(dryRun?: boolean): Promise<boolean> {\n  let found = false\n\n  for (const file of TSUP_FILES) {\n    if (!existsSync(file)) continue\n    globalLogger.info(`Found \\`${file}\\``)\n    found = true\n\n    const tsupConfigRaw = await readFile(file, 'utf8')\n    const tsupConfig = tsupConfigRaw\n      .replaceAll(/\\btsup\\b/g, 'tsdown')\n      .replaceAll(/\\bTSUP\\b/g, 'TSDOWN')\n\n    const renamed = file.replaceAll('tsup', 'tsdown')\n    if (dryRun) {\n      const { createTwoFilesPatch } = await import('diff')\n      globalLogger.info(`[dry-run] ${file} -> ${renamed}:`)\n      console.info(\n        createTwoFilesPatch(file, renamed, tsupConfigRaw, tsupConfig),\n      )\n    } else {\n      await writeFile(renamed, tsupConfig, 'utf8')\n      await unlink(file)\n      globalLogger.success(`Migrated \\`${file}\\` to \\`${renamed}\\``)\n    }\n  }\n\n  if (!found) {\n    globalLogger.warn('No tsup config found')\n  }\n\n  return found\n}\n\n// rename key but keep order\nfunction renameKey(\n  obj: Record<string, any>,\n  oldKey: string,\n  newKey: string,\n  newValue?: any,\n) {\n  const newObj: Record<string, any> = {}\n  for (const key of Object.keys(obj)) {\n    if (key === oldKey) {\n      newObj[newKey] = newValue || obj[oldKey]\n    } else {\n      newObj[key] = obj[key]\n    }\n  }\n  return newObj\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"3da1886d-78e0-456d-94a5-e652cb3bb3b8","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885073,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","content":"import { mkdtemp, writeFile } from 'node:fs/promises'\nimport { tmpdir } from 'node:os'\nimport { join } from 'node:path'\nimport util, { type InspectOptionsStylized } from 'node:util'\nimport Debug from 'debug'\nimport {\n  VERSION as rolldownVersion,\n  type BuildOptions,\n  type InputOptions,\n  type OutputOptions,\n  type RolldownPluginOption,\n} from 'rolldown'\nimport { importGlobPlugin } from 'rolldown/experimental'\nimport pkg from '../../package.json' with { type: 'json' }\nimport {\n  mergeUserOptions,\n  type DtsOptions,\n  type NormalizedFormat,\n  type ResolvedConfig,\n} from '../config/index.ts'\nimport { lowestCommonAncestor } from '../utils/fs.ts'\nimport { LogLevels } from '../utils/logger.ts'\nimport { ExternalPlugin } from './external.ts'\nimport { LightningCSSPlugin } from './lightningcss.ts'\nimport { NodeProtocolPlugin } from './node-protocol.ts'\nimport { resolveChunkAddon, resolveChunkFilename } from './output.ts'\nimport { ReportPlugin } from './report.ts'\nimport { ShebangPlugin } from './shebang.ts'\nimport { getShimsInject } from './shims.ts'\n\nconst debug = Debug('tsdown:rolldown')\n\nexport async function getBuildOptions(\n  config: ResolvedConfig,\n  format: NormalizedFormat,\n  isMultiFormat?: boolean,\n  cjsDts: boolean = false,\n): Promise<BuildOptions> {\n  const inputOptions = await resolveInputOptions(\n    config,\n    format,\n    cjsDts,\n    isMultiFormat,\n  )\n\n  const outputOptions: OutputOptions = await resolveOutputOptions(\n    inputOptions,\n    config,\n    format,\n    cjsDts,\n  )\n\n  const rolldownConfig: BuildOptions = {\n    ...inputOptions,\n    output: outputOptions,\n  }\n  debug(\n    'rolldown config with format \"%s\" %O',\n    cjsDts ? 'cjs dts' : format,\n    rolldownConfig,\n  )\n\n  return rolldownConfig\n}\n\nexport async function resolveInputOptions(\n  config: ResolvedConfig,\n  format: NormalizedFormat,\n  cjsDts: boolean,\n  isMultiFormat?: boolean,\n): Promise<InputOptions> {\n  const {\n    entry,\n    external,\n    plugins: userPlugins,\n    platform,\n    alias,\n    treeshake,\n    dts,\n    unused,\n    target,\n    shims,\n    tsconfig,\n    cwd,\n    report,\n    env,\n    nodeProtocol,\n    loader,\n    name,\n    logger,\n    cjsDefault,\n    banner,\n    footer,\n    globImport,\n  } = config\n\n  const plugins: RolldownPluginOption = []\n\n  if (nodeProtocol) {\n    plugins.push(NodeProtocolPlugin(nodeProtocol))\n  }\n\n  if (config.pkg || config.skipNodeModulesBundle) {\n    plugins.push(ExternalPlugin(config))\n  }\n\n  if (dts) {\n    const { dts: dtsPlugin } = await import('rolldown-plugin-dts')\n    const options: DtsOptions = {\n      tsconfig,\n      banner: resolveChunkAddon(banner, format, true),\n      footer: resolveChunkAddon(footer, format, true),\n      ...dts,\n    }\n\n    if (format === 'es') {\n      plugins.push(dtsPlugin(options))\n    } else if (cjsDts) {\n      plugins.push(\n        dtsPlugin({\n          ...options,\n          emitDtsOnly: true,\n          cjsDefault,\n        }),\n      )\n    }\n  }\n  if (!cjsDts) {\n    if (unused) {\n      const { Unused } = await import('unplugin-unused')\n      plugins.push(Unused.rolldown(unused === true ? {} : unused))\n    }\n    if (target) {\n      plugins.push(\n        // Use Lightning CSS to handle CSS input. This is a temporary solution\n        // until Rolldown supports CSS syntax lowering natively.\n        await LightningCSSPlugin({ target }),\n      )\n    }\n    plugins.push(ShebangPlugin(logger, cwd, name, isMultiFormat))\n    if (globImport) {\n      plugins.push(importGlobPlugin())\n    }\n  }\n\n  if (report && LogLevels[logger.level] >= 3 /* info */) {\n    plugins.push(ReportPlugin(report, logger, cwd, cjsDts, name, isMultiFormat))\n  }\n\n  if (!cjsDts) {\n    plugins.push(userPlugins)\n  }\n\n  const define = {\n    ...config.define,\n    ...Object.keys(env).reduce((acc, key) => {\n      const value = JSON.stringify(env[key])\n      acc[`process.env.${key}`] = value\n      acc[`import.meta.env.${key}`] = value\n      return acc\n    }, Object.create(null)),\n  }\n  const inject = shims && !cjsDts ? getShimsInject(format, platform) : undefined\n\n  const inputOptions = await mergeUserOptions(\n    {\n      input: entry,\n      cwd,\n      external,\n      resolve: {\n        alias,\n      },\n      tsconfig: tsconfig || undefined,\n      treeshake,\n      platform: cjsDts || format === 'cjs' ? 'node' : platform,\n      transform: {\n        target,\n        define,\n        inject,\n      },\n      plugins,\n      moduleTypes: loader,\n      logLevel: logger.level === 'error' ? 'silent' : logger.level,\n      onLog: cjsDefault\n        ? (level, log, defaultHandler) => {\n            // suppress mixed export warnings if cjsDefault is enabled\n            if (log.code === 'MIXED_EXPORT') return\n            defaultHandler(level, log)\n          }\n        : undefined,\n    },\n    config.inputOptions,\n    [format, { cjsDts }],\n  )\n\n  return inputOptions\n}\n\nexport async function resolveOutputOptions(\n  inputOptions: InputOptions,\n  config: ResolvedConfig,\n  format: NormalizedFormat,\n  cjsDts: boolean,\n): Promise<OutputOptions> {\n  const {\n    entry,\n    outDir,\n    sourcemap,\n    minify,\n    unbundle,\n    banner,\n    footer,\n    cjsDefault,\n  } = config\n\n  const [entryFileNames, chunkFileNames] = resolveChunkFilename(\n    config,\n    inputOptions,\n    format,\n  )\n  const outputOptions: OutputOptions = await mergeUserOptions(\n    {\n      format: cjsDts ? 'es' : format,\n      name: config.globalName,\n      sourcemap,\n      dir: outDir,\n      exports: cjsDefault ? 'auto' : 'named',\n      minify: !cjsDts && minify,\n      entryFileNames,\n      chunkFileNames,\n      preserveModules: unbundle,\n      preserveModulesRoot: unbundle\n        ? lowestCommonAncestor(...Object.values(entry))\n        : undefined,\n      banner: resolveChunkAddon(banner, format),\n      footer: resolveChunkAddon(footer, format),\n    },\n    config.outputOptions,\n    [format, { cjsDts }],\n  )\n  return outputOptions\n}\n\nexport async function getDebugRolldownDir(): Promise<string | undefined> {\n  if (!debug.enabled) return\n  return await mkdtemp(join(tmpdir(), 'tsdown-config-'))\n}\n\nexport async function debugBuildOptions(\n  dir: string,\n  name: string | undefined,\n  format: NormalizedFormat,\n  buildOptions: BuildOptions,\n): Promise<void> {\n  const outFile = join(dir, `tsdown.config.${format}.js`)\n\n  handlePluginInspect(buildOptions.plugins)\n  const serialized = util.formatWithOptions(\n    {\n      depth: null,\n      maxArrayLength: null,\n      maxStringLength: null,\n    },\n    buildOptions,\n  )\n  const code = `/*\nAuto-generated rolldown config for tsdown debug purposes\ntsdown v${pkg.version}, rolldown v${rolldownVersion}\nGenerated on ${new Date().toISOString()}\nPackage name: ${name || 'not specified'}\n*/\n\nexport default ${serialized}\\n`\n  await writeFile(outFile, code)\n  debug(\n    'Wrote debug rolldown config for \"%s\" (%s) -> %s',\n    name || 'default name',\n    format,\n    outFile,\n  )\n}\n\nfunction handlePluginInspect(plugins: RolldownPluginOption) {\n  if (Array.isArray(plugins)) {\n    for (const plugin of plugins) {\n      handlePluginInspect(plugin)\n    }\n  } else if (\n    typeof plugins === 'object' &&\n    plugins !== null &&\n    'name' in plugins\n  ) {\n    ;(plugins as any)[util.inspect.custom] = function (\n      depth: number,\n      options: InspectOptionsStylized,\n      inspect: typeof util.inspect,\n    ) {\n      if ('_options' in plugins) {\n        return inspect(\n          { name: plugins.name, options: (plugins as any)._options },\n          options,\n        )\n      } else {\n        return `\"rolldown plugin: ${plugins.name}\"`\n      }\n    }\n  }\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"8df35582-d4c4-4da7-96b4-7aee03c1e548","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885074,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/report.d.ts","content":"import { type Logger } from \"../utils/logger.ts\";\nimport type { Plugin } from \"rolldown\";\nexport interface ReportOptions {\n\t/**\n\t* Enable/disable gzip-compressed size reporting.\n\t* Compressing large output files can be slow, so disabling this may increase build performance for large projects.\n\t*\n\t* @default true\n\t*/\n\tgzip?: boolean;\n\t/**\n\t* Enable/disable brotli-compressed size reporting.\n\t* Compressing large output files can be slow, so disabling this may increase build performance for large projects.\n\t*\n\t* @default false\n\t*/\n\tbrotli?: boolean;\n\t/**\n\t* Skip reporting compressed size for files larger than this size.\n\t* @default 1_000_000 // 1MB\n\t*/\n\tmaxCompressSize?: number;\n}\nexport declare function ReportPlugin(userOptions: ReportOptions, logger: Logger, cwd: string, cjsDts?: boolean, name?: string, isMultiFormat?: boolean): Plugin;\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"9e067f72-8d2f-4f9a-bd4d-d1109ca057ec","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885075,"action":"HookResolveIdCallEnd","resolved_id":"hookable","is_external":true,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"82f916b3-6202-4589-a6c6-267c015e50ac","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885075,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/report.d.ts","content":"import { type Logger } from \"../utils/logger.ts\";\nimport type { Plugin } from \"rolldown\";\nexport interface ReportOptions {\n\t/**\n\t* Enable/disable gzip-compressed size reporting.\n\t* Compressing large output files can be slow, so disabling this may increase build performance for large projects.\n\t*\n\t* @default true\n\t*/\n\tgzip?: boolean;\n\t/**\n\t* Enable/disable brotli-compressed size reporting.\n\t* Compressing large output files can be slow, so disabling this may increase build performance for large projects.\n\t*\n\t* @default false\n\t*/\n\tbrotli?: boolean;\n\t/**\n\t* Skip reporting compressed size for files larger than this size.\n\t* @default 1_000_000 // 1MB\n\t*/\n\tmaxCompressSize?: number;\n}\nexport declare function ReportPlugin(userOptions: ReportOptions, logger: Logger, cwd: string, cjsDts?: boolean, name?: string, isMultiFormat?: boolean): Plugin;\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"4e461eb3-17dc-45e4-b6f5-834ca86ece84","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885075,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/external.d.ts","content":"import type { ResolvedConfig } from \"../config/index.ts\";\nimport type { PackageJson } from \"pkg-types\";\nimport type { Plugin } from \"rolldown\";\nexport declare function ExternalPlugin({ pkg, noExternal, inlineOnly, skipNodeModulesBundle }: ResolvedConfig): Plugin;\nexport declare function getProductionDeps(pkg: PackageJson): Set<string>;\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"7659660a-fad9-4fac-aac2-c4c667b9db79","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885076,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/external.d.ts","content":"import type { ResolvedConfig } from \"../config/index.ts\";\nimport type { PackageJson } from \"pkg-types\";\nimport type { Plugin } from \"rolldown\";\nexport declare function ExternalPlugin({ pkg, noExternal, inlineOnly, skipNodeModulesBundle }: ResolvedConfig): Plugin;\nexport declare function getProductionDeps(pkg: PackageJson): Set<string>;\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"63e3f606-9c4b-4861-99fc-171d28967fda","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885076,"action":"HookResolveIdCallEnd","resolved_id":"rolldown","is_external":true,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"f396ddb0-6e32-4cb0-afa1-707331bdfe16","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885077,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/shortcuts.ts","module_request":"node:process","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"e794a591-08d3-4663-a7c0-cfc6df0ef30a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885077,"action":"HookResolveIdCallEnd","resolved_id":"rolldown","is_external":true,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"664e8989-dba4-4b93-b919-0fdeacd129ee","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885077,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/external.d.ts","content":"import { ResolvedConfig } from \"../config/index.ts\";\nimport { PackageJson } from \"pkg-types\";\nimport { Plugin } from \"rolldown\";\nexport var ExternalPlugin = [9, () => [pkg, noExternal, inlineOnly, skipNodeModulesBundle, ResolvedConfig, Plugin]];\nexport var getProductionDeps = [10, () => [PackageJson, Set]];","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"63e3f606-9c4b-4861-99fc-171d28967fda","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885077,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/external.d.ts","content":"import { ResolvedConfig } from \"../config/index.ts\";\nimport { PackageJson } from \"pkg-types\";\nimport { Plugin } from \"rolldown\";\nexport var ExternalPlugin = [9, () => [pkg, noExternal, inlineOnly, skipNodeModulesBundle, ResolvedConfig, Plugin]];\nexport var getProductionDeps = [10, () => [PackageJson, Set]];","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"91a21f41-4133-4190-a135-f0fd49a95955","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885077,"action":"HookResolveIdCallEnd","resolved_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/logger.d.ts","is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"9752aa27-257a-440a-9688-8be1c511a815","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885078,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/logger.d.ts","plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"94bf1ab8-34f5-484d-b874-e481806a5f9b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885078,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/external.d.ts","content":"import { ResolvedConfig } from \"../config/index.ts\";\nimport { PackageJson } from \"pkg-types\";\nimport { Plugin } from \"rolldown\";\nexport var ExternalPlugin = [9, () => [pkg, noExternal, inlineOnly, skipNodeModulesBundle, ResolvedConfig, Plugin]];\nexport var getProductionDeps = [10, () => [PackageJson, Set]];","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"91a21f41-4133-4190-a135-f0fd49a95955","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885078,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/logger.d.ts","content":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"94bf1ab8-34f5-484d-b874-e481806a5f9b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885078,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/logger.d.ts","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"1cd5717b-3cc8-4a4d-bb99-0b414c394383","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885078,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/external.d.ts","module_request":"../config/index.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"413c206d-fb3c-49e7-9192-eaf7eecc259c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885078,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"413c206d-fb3c-49e7-9192-eaf7eecc259c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885078,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/external.d.ts","module_request":"../config/index.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"cf58ff9d-345c-43af-b64f-ebff8c34f539","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885079,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/logger.d.ts","content":"import { type Ansis } from \"ansis\";\nimport type { InternalModuleFormat } from \"rolldown\";\nexport type LogType = \"error\" | \"warn\" | \"info\";\nexport type LogLevel = LogType | \"silent\";\nexport interface LoggerOptions {\n\tcustomLogger?: Logger;\n\tconsole?: Console;\n\tfailOnWarn?: boolean;\n}\nexport declare const LogLevels: Record<LogLevel, number>;\nexport interface Logger {\n\tlevel: LogLevel;\n\tinfo: (...args: any[]) => void;\n\twarn: (...args: any[]) => void;\n\twarnOnce: (...args: any[]) => void;\n\terror: (...args: any[]) => void;\n\tsuccess: (...args: any[]) => void;\n}\nexport declare function createLogger(level?: LogLevel, { customLogger, console, failOnWarn }?: LoggerOptions): Logger;\nexport declare const globalLogger: Logger;\nexport declare function prettyName(name?: string): string | undefined;\nexport declare function prettyFormat(format: InternalModuleFormat): string;\nexport declare function generateColor(name?: string): Ansis;\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"1cd5717b-3cc8-4a4d-bb99-0b414c394383","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885079,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/logger.d.ts","content":"import { type Ansis } from \"ansis\";\nimport type { InternalModuleFormat } from \"rolldown\";\nexport type LogType = \"error\" | \"warn\" | \"info\";\nexport type LogLevel = LogType | \"silent\";\nexport interface LoggerOptions {\n\tcustomLogger?: Logger;\n\tconsole?: Console;\n\tfailOnWarn?: boolean;\n}\nexport declare const LogLevels: Record<LogLevel, number>;\nexport interface Logger {\n\tlevel: LogLevel;\n\tinfo: (...args: any[]) => void;\n\twarn: (...args: any[]) => void;\n\twarnOnce: (...args: any[]) => void;\n\terror: (...args: any[]) => void;\n\tsuccess: (...args: any[]) => void;\n}\nexport declare function createLogger(level?: LogLevel, { customLogger, console, failOnWarn }?: LoggerOptions): Logger;\nexport declare const globalLogger: Logger;\nexport declare function prettyName(name?: string): string | undefined;\nexport declare function prettyFormat(format: InternalModuleFormat): string;\nexport declare function generateColor(name?: string): Ansis;\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"59274ac4-6aec-42e3-a533-b2eecf0d950f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885079,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/logger.d.ts","content":"import { type Ansis } from \"ansis\";\nimport type { InternalModuleFormat } from \"rolldown\";\nexport type LogType = \"error\" | \"warn\" | \"info\";\nexport type LogLevel = LogType | \"silent\";\nexport interface LoggerOptions {\n\tcustomLogger?: Logger;\n\tconsole?: Console;\n\tfailOnWarn?: boolean;\n}\nexport declare const LogLevels: Record<LogLevel, number>;\nexport interface Logger {\n\tlevel: LogLevel;\n\tinfo: (...args: any[]) => void;\n\twarn: (...args: any[]) => void;\n\twarnOnce: (...args: any[]) => void;\n\terror: (...args: any[]) => void;\n\tsuccess: (...args: any[]) => void;\n}\nexport declare function createLogger(level?: LogLevel, { customLogger, console, failOnWarn }?: LoggerOptions): Logger;\nexport declare const globalLogger: Logger;\nexport declare function prettyName(name?: string): string | undefined;\nexport declare function prettyFormat(format: InternalModuleFormat): string;\nexport declare function generateColor(name?: string): Ansis;\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"59274ac4-6aec-42e3-a533-b2eecf0d950f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885079,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/logger.d.ts","content":"import { type Ansis } from \"ansis\";\nimport type { InternalModuleFormat } from \"rolldown\";\nexport type LogType = \"error\" | \"warn\" | \"info\";\nexport type LogLevel = LogType | \"silent\";\nexport interface LoggerOptions {\n\tcustomLogger?: Logger;\n\tconsole?: Console;\n\tfailOnWarn?: boolean;\n}\nexport declare const LogLevels: Record<LogLevel, number>;\nexport interface Logger {\n\tlevel: LogLevel;\n\tinfo: (...args: any[]) => void;\n\twarn: (...args: any[]) => void;\n\twarnOnce: (...args: any[]) => void;\n\terror: (...args: any[]) => void;\n\tsuccess: (...args: any[]) => void;\n}\nexport declare function createLogger(level?: LogLevel, { customLogger, console, failOnWarn }?: LoggerOptions): Logger;\nexport declare const globalLogger: Logger;\nexport declare function prettyName(name?: string): string | undefined;\nexport declare function prettyFormat(format: InternalModuleFormat): string;\nexport declare function generateColor(name?: string): Ansis;\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"d1f535f8-75c0-4b97-ba70-2ad81a378503","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885080,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/migrate.ts","content":"import { existsSync } from 'node:fs'\nimport { readFile, unlink, writeFile } from 'node:fs/promises'\nimport process from 'node:process'\nimport { createInterface } from 'node:readline/promises'\nimport { bold, green, underline } from 'ansis'\nimport pkg from '../package.json' with { type: 'json' }\nimport { globalLogger } from './utils/logger.ts'\n\nexport async function migrate({\n  cwd,\n  dryRun,\n}: {\n  cwd?: string\n  dryRun?: boolean\n}): Promise<void> {\n  if (dryRun) {\n    globalLogger.info('Dry run enabled. No changes were made.')\n  } else {\n    const rl = createInterface({\n      input: process.stdin,\n      output: process.stdout,\n    })\n\n    globalLogger.warn(\n      `\\n\\n` +\n        `Before proceeding, review the migration guide at ${underline`https://tsdown.dev/guide/migrate-from-tsup`}, as this process will modify your files.\\n` +\n        `Uncommitted changes will be lost. Use the ${green`--dry-run`} flag to preview changes without applying them.`,\n    )\n    const input = await rl.question(bold`Continue? (Y/n) `)\n    rl.close()\n\n    const confirm = input.toLowerCase() === 'y' || input === ''\n    if (!confirm) {\n      globalLogger.error('Migration cancelled.')\n      process.exitCode = 1\n      return\n    }\n  }\n\n  if (cwd) process.chdir(cwd)\n\n  let migrated = await migratePackageJson(dryRun)\n  if (await migrateTsupConfig(dryRun)) {\n    migrated = true\n  }\n  if (migrated) {\n    globalLogger.success(\n      'Migration completed. Remember to run install command with your package manager.',\n    )\n  } else {\n    globalLogger.error('No migration performed.')\n    process.exitCode = 1\n  }\n}\n\nconst DEP_FIELDS = {\n  dependencies: `^${pkg.version}`,\n  devDependencies: `^${pkg.version}`,\n  peerDependencies: '*',\n} as const\nasync function migratePackageJson(dryRun?: boolean): Promise<boolean> {\n  if (!existsSync('package.json')) {\n    globalLogger.error('No package.json found')\n    return false\n  }\n\n  const pkgRaw = await readFile('package.json', 'utf8')\n  let pkg = JSON.parse(pkgRaw)\n  let found = false\n\n  for (const [field, semver] of Object.entries(DEP_FIELDS)) {\n    if (pkg[field]?.tsup) {\n      globalLogger.info(`Migrating \\`${field}\\` to tsdown.`)\n      found = true\n      pkg[field] = renameKey(pkg[field], 'tsup', 'tsdown', semver)\n    }\n  }\n\n  if (pkg.scripts) {\n    for (const key of Object.keys(pkg.scripts)) {\n      if (pkg.scripts[key].includes('tsup')) {\n        globalLogger.info(`Migrating \\`${key}\\` script to tsdown`)\n        found = true\n        pkg.scripts[key] = pkg.scripts[key].replaceAll(\n          /tsup(?:-node)?/g,\n          'tsdown',\n        )\n      }\n    }\n  }\n  if (pkg.tsup) {\n    globalLogger.info('Migrating `tsup` field in package.json to `tsdown`.')\n    found = true\n    pkg = renameKey(pkg, 'tsup', 'tsdown')\n  }\n\n  if (!found) {\n    globalLogger.warn('No tsup-related fields found in package.json')\n    return false\n  }\n\n  const pkgStr = `${JSON.stringify(pkg, null, pkgRaw.includes('\\t') ? '\\t' : 2)}\\n`\n  if (dryRun) {\n    const { createPatch } = await import('diff')\n    globalLogger.info('[dry-run] package.json:')\n    console.info(createPatch('package.json', pkgRaw, pkgStr))\n  } else {\n    await writeFile('package.json', pkgStr)\n    globalLogger.success('Migrated `package.json`')\n  }\n  return true\n}\n\nconst TSUP_FILES = [\n  'tsup.config.ts',\n  'tsup.config.cts',\n  'tsup.config.mts',\n  'tsup.config.js',\n  'tsup.config.cjs',\n  'tsup.config.mjs',\n  'tsup.config.json',\n]\nasync function migrateTsupConfig(dryRun?: boolean): Promise<boolean> {\n  let found = false\n\n  for (const file of TSUP_FILES) {\n    if (!existsSync(file)) continue\n    globalLogger.info(`Found \\`${file}\\``)\n    found = true\n\n    const tsupConfigRaw = await readFile(file, 'utf8')\n    const tsupConfig = tsupConfigRaw\n      .replaceAll(/\\btsup\\b/g, 'tsdown')\n      .replaceAll(/\\bTSUP\\b/g, 'TSDOWN')\n\n    const renamed = file.replaceAll('tsup', 'tsdown')\n    if (dryRun) {\n      const { createTwoFilesPatch } = await import('diff')\n      globalLogger.info(`[dry-run] ${file} -> ${renamed}:`)\n      console.info(\n        createTwoFilesPatch(file, renamed, tsupConfigRaw, tsupConfig),\n      )\n    } else {\n      await writeFile(renamed, tsupConfig, 'utf8')\n      await unlink(file)\n      globalLogger.success(`Migrated \\`${file}\\` to \\`${renamed}\\``)\n    }\n  }\n\n  if (!found) {\n    globalLogger.warn('No tsup config found')\n  }\n\n  return found\n}\n\n// rename key but keep order\nfunction renameKey(\n  obj: Record<string, any>,\n  oldKey: string,\n  newKey: string,\n  newValue?: any,\n) {\n  const newObj: Record<string, any> = {}\n  for (const key of Object.keys(obj)) {\n    if (key === oldKey) {\n      newObj[newKey] = newValue || obj[oldKey]\n    } else {\n      newObj[key] = obj[key]\n    }\n  }\n  return newObj\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"3da1886d-78e0-456d-94a5-e652cb3bb3b8","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885081,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/logger.d.ts","content":"import { Ansis } from \"ansis\";\nimport { InternalModuleFormat } from \"rolldown\";\nexport var LogType = [11, () => []];\nexport var LogLevel = [12, () => [LogType]];\nexport var LoggerOptions = [13, () => [Logger, Console]];\nexport var LogLevels = [14, () => [LogLevel, Record]];\nexport var Logger = [15, () => [LogLevel]];\nexport var createLogger = [16, () => [LogLevel, customLogger, console, failOnWarn, LoggerOptions, Logger]];\nexport var globalLogger = [17, () => [Logger]];\nexport var prettyName = [18, () => []];\nexport var prettyFormat = [19, () => [InternalModuleFormat]];\nexport var generateColor = [20, () => [Ansis]];","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"d1f535f8-75c0-4b97-ba70-2ad81a378503","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885082,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/logger.d.ts","content":"import { Ansis } from \"ansis\";\nimport { InternalModuleFormat } from \"rolldown\";\nexport var LogType = [11, () => []];\nexport var LogLevel = [12, () => [LogType]];\nexport var LoggerOptions = [13, () => [Logger, Console]];\nexport var LogLevels = [14, () => [LogLevel, Record]];\nexport var Logger = [15, () => [LogLevel]];\nexport var createLogger = [16, () => [LogLevel, customLogger, console, failOnWarn, LoggerOptions, Logger]];\nexport var globalLogger = [17, () => [Logger]];\nexport var prettyName = [18, () => []];\nexport var prettyFormat = [19, () => [InternalModuleFormat]];\nexport var generateColor = [20, () => [Ansis]];","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"45c767cf-1f52-40b4-b1d6-86bb1cffdfc0","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885082,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/migrate.ts","content":"import { existsSync } from 'node:fs'\nimport { readFile, unlink, writeFile } from 'node:fs/promises'\nimport process from 'node:process'\nimport { createInterface } from 'node:readline/promises'\nimport { bold, green, underline } from 'ansis'\nimport pkg from '../package.json' with { type: 'json' }\nimport { globalLogger } from './utils/logger.ts'\n\nexport async function migrate({\n  cwd,\n  dryRun,\n}: {\n  cwd?: string\n  dryRun?: boolean\n}): Promise<void> {\n  if (dryRun) {\n    globalLogger.info('Dry run enabled. No changes were made.')\n  } else {\n    const rl = createInterface({\n      input: process.stdin,\n      output: process.stdout,\n    })\n\n    globalLogger.warn(\n      `\\n\\n` +\n        `Before proceeding, review the migration guide at ${underline`https://tsdown.dev/guide/migrate-from-tsup`}, as this process will modify your files.\\n` +\n        `Uncommitted changes will be lost. Use the ${green`--dry-run`} flag to preview changes without applying them.`,\n    )\n    const input = await rl.question(bold`Continue? (Y/n) `)\n    rl.close()\n\n    const confirm = input.toLowerCase() === 'y' || input === ''\n    if (!confirm) {\n      globalLogger.error('Migration cancelled.')\n      process.exitCode = 1\n      return\n    }\n  }\n\n  if (cwd) process.chdir(cwd)\n\n  let migrated = await migratePackageJson(dryRun)\n  if (await migrateTsupConfig(dryRun)) {\n    migrated = true\n  }\n  if (migrated) {\n    globalLogger.success(\n      'Migration completed. Remember to run install command with your package manager.',\n    )\n  } else {\n    globalLogger.error('No migration performed.')\n    process.exitCode = 1\n  }\n}\n\nconst DEP_FIELDS = {\n  dependencies: `^${pkg.version}`,\n  devDependencies: `^${pkg.version}`,\n  peerDependencies: '*',\n} as const\nasync function migratePackageJson(dryRun?: boolean): Promise<boolean> {\n  if (!existsSync('package.json')) {\n    globalLogger.error('No package.json found')\n    return false\n  }\n\n  const pkgRaw = await readFile('package.json', 'utf8')\n  let pkg = JSON.parse(pkgRaw)\n  let found = false\n\n  for (const [field, semver] of Object.entries(DEP_FIELDS)) {\n    if (pkg[field]?.tsup) {\n      globalLogger.info(`Migrating \\`${field}\\` to tsdown.`)\n      found = true\n      pkg[field] = renameKey(pkg[field], 'tsup', 'tsdown', semver)\n    }\n  }\n\n  if (pkg.scripts) {\n    for (const key of Object.keys(pkg.scripts)) {\n      if (pkg.scripts[key].includes('tsup')) {\n        globalLogger.info(`Migrating \\`${key}\\` script to tsdown`)\n        found = true\n        pkg.scripts[key] = pkg.scripts[key].replaceAll(\n          /tsup(?:-node)?/g,\n          'tsdown',\n        )\n      }\n    }\n  }\n  if (pkg.tsup) {\n    globalLogger.info('Migrating `tsup` field in package.json to `tsdown`.')\n    found = true\n    pkg = renameKey(pkg, 'tsup', 'tsdown')\n  }\n\n  if (!found) {\n    globalLogger.warn('No tsup-related fields found in package.json')\n    return false\n  }\n\n  const pkgStr = `${JSON.stringify(pkg, null, pkgRaw.includes('\\t') ? '\\t' : 2)}\\n`\n  if (dryRun) {\n    const { createPatch } = await import('diff')\n    globalLogger.info('[dry-run] package.json:')\n    console.info(createPatch('package.json', pkgRaw, pkgStr))\n  } else {\n    await writeFile('package.json', pkgStr)\n    globalLogger.success('Migrated `package.json`')\n  }\n  return true\n}\n\nconst TSUP_FILES = [\n  'tsup.config.ts',\n  'tsup.config.cts',\n  'tsup.config.mts',\n  'tsup.config.js',\n  'tsup.config.cjs',\n  'tsup.config.mjs',\n  'tsup.config.json',\n]\nasync function migrateTsupConfig(dryRun?: boolean): Promise<boolean> {\n  let found = false\n\n  for (const file of TSUP_FILES) {\n    if (!existsSync(file)) continue\n    globalLogger.info(`Found \\`${file}\\``)\n    found = true\n\n    const tsupConfigRaw = await readFile(file, 'utf8')\n    const tsupConfig = tsupConfigRaw\n      .replaceAll(/\\btsup\\b/g, 'tsdown')\n      .replaceAll(/\\bTSUP\\b/g, 'TSDOWN')\n\n    const renamed = file.replaceAll('tsup', 'tsdown')\n    if (dryRun) {\n      const { createTwoFilesPatch } = await import('diff')\n      globalLogger.info(`[dry-run] ${file} -> ${renamed}:`)\n      console.info(\n        createTwoFilesPatch(file, renamed, tsupConfigRaw, tsupConfig),\n      )\n    } else {\n      await writeFile(renamed, tsupConfig, 'utf8')\n      await unlink(file)\n      globalLogger.success(`Migrated \\`${file}\\` to \\`${renamed}\\``)\n    }\n  }\n\n  if (!found) {\n    globalLogger.warn('No tsup config found')\n  }\n\n  return found\n}\n\n// rename key but keep order\nfunction renameKey(\n  obj: Record<string, any>,\n  oldKey: string,\n  newKey: string,\n  newValue?: any,\n) {\n  const newObj: Record<string, any> = {}\n  for (const key of Object.keys(obj)) {\n    if (key === oldKey) {\n      newObj[newKey] = newValue || obj[oldKey]\n    } else {\n      newObj[key] = obj[key]\n    }\n  }\n  return newObj\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"4b1b9d44-f2bd-4d17-8ccd-d01a44cb38d3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885083,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/logger.d.ts","content":"import { Ansis } from \"ansis\";\nimport { InternalModuleFormat } from \"rolldown\";\nexport var LogType = [11, () => []];\nexport var LogLevel = [12, () => [LogType]];\nexport var LoggerOptions = [13, () => [Logger, Console]];\nexport var LogLevels = [14, () => [LogLevel, Record]];\nexport var Logger = [15, () => [LogLevel]];\nexport var createLogger = [16, () => [LogLevel, customLogger, console, failOnWarn, LoggerOptions, Logger]];\nexport var globalLogger = [17, () => [Logger]];\nexport var prettyName = [18, () => []];\nexport var prettyFormat = [19, () => [InternalModuleFormat]];\nexport var generateColor = [20, () => [Ansis]];","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"45c767cf-1f52-40b4-b1d6-86bb1cffdfc0","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885083,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/report.d.ts","content":"import { type Logger } from \"../utils/logger.ts\";\nimport type { Plugin } from \"rolldown\";\nexport interface ReportOptions {\n\t/**\n\t* Enable/disable gzip-compressed size reporting.\n\t* Compressing large output files can be slow, so disabling this may increase build performance for large projects.\n\t*\n\t* @default true\n\t*/\n\tgzip?: boolean;\n\t/**\n\t* Enable/disable brotli-compressed size reporting.\n\t* Compressing large output files can be slow, so disabling this may increase build performance for large projects.\n\t*\n\t* @default false\n\t*/\n\tbrotli?: boolean;\n\t/**\n\t* Skip reporting compressed size for files larger than this size.\n\t* @default 1_000_000 // 1MB\n\t*/\n\tmaxCompressSize?: number;\n}\nexport declare function ReportPlugin(userOptions: ReportOptions, logger: Logger, cwd: string, cjsDts?: boolean, name?: string, isMultiFormat?: boolean): Plugin;\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"4e461eb3-17dc-45e4-b6f5-834ca86ece84","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885083,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/utils/logger.d.ts","module_request":"ansis","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"367ce6c1-e15f-4130-9718-109a436c7b17","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885084,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/migrate.ts","content":"import { existsSync } from 'node:fs'\nimport { readFile, unlink, writeFile } from 'node:fs/promises'\nimport process from 'node:process'\nimport { createInterface } from 'node:readline/promises'\nimport { bold, green, underline } from 'ansis'\nimport pkg from '../package.json' with { type: 'json' }\nimport { globalLogger } from './utils/logger.ts'\n\nexport async function migrate({\n  cwd,\n  dryRun,\n}: {\n  cwd?: string\n  dryRun?: boolean\n}): Promise<void> {\n  if (dryRun) {\n    globalLogger.info('Dry run enabled. No changes were made.')\n  } else {\n    const rl = createInterface({\n      input: process.stdin,\n      output: process.stdout,\n    })\n\n    globalLogger.warn(\n      `\\n\\n` +\n        `Before proceeding, review the migration guide at ${underline`https://tsdown.dev/guide/migrate-from-tsup`}, as this process will modify your files.\\n` +\n        `Uncommitted changes will be lost. Use the ${green`--dry-run`} flag to preview changes without applying them.`,\n    )\n    const input = await rl.question(bold`Continue? (Y/n) `)\n    rl.close()\n\n    const confirm = input.toLowerCase() === 'y' || input === ''\n    if (!confirm) {\n      globalLogger.error('Migration cancelled.')\n      process.exitCode = 1\n      return\n    }\n  }\n\n  if (cwd) process.chdir(cwd)\n\n  let migrated = await migratePackageJson(dryRun)\n  if (await migrateTsupConfig(dryRun)) {\n    migrated = true\n  }\n  if (migrated) {\n    globalLogger.success(\n      'Migration completed. Remember to run install command with your package manager.',\n    )\n  } else {\n    globalLogger.error('No migration performed.')\n    process.exitCode = 1\n  }\n}\n\nconst DEP_FIELDS = {\n  dependencies: `^${pkg.version}`,\n  devDependencies: `^${pkg.version}`,\n  peerDependencies: '*',\n} as const\nasync function migratePackageJson(dryRun?: boolean): Promise<boolean> {\n  if (!existsSync('package.json')) {\n    globalLogger.error('No package.json found')\n    return false\n  }\n\n  const pkgRaw = await readFile('package.json', 'utf8')\n  let pkg = JSON.parse(pkgRaw)\n  let found = false\n\n  for (const [field, semver] of Object.entries(DEP_FIELDS)) {\n    if (pkg[field]?.tsup) {\n      globalLogger.info(`Migrating \\`${field}\\` to tsdown.`)\n      found = true\n      pkg[field] = renameKey(pkg[field], 'tsup', 'tsdown', semver)\n    }\n  }\n\n  if (pkg.scripts) {\n    for (const key of Object.keys(pkg.scripts)) {\n      if (pkg.scripts[key].includes('tsup')) {\n        globalLogger.info(`Migrating \\`${key}\\` script to tsdown`)\n        found = true\n        pkg.scripts[key] = pkg.scripts[key].replaceAll(\n          /tsup(?:-node)?/g,\n          'tsdown',\n        )\n      }\n    }\n  }\n  if (pkg.tsup) {\n    globalLogger.info('Migrating `tsup` field in package.json to `tsdown`.')\n    found = true\n    pkg = renameKey(pkg, 'tsup', 'tsdown')\n  }\n\n  if (!found) {\n    globalLogger.warn('No tsup-related fields found in package.json')\n    return false\n  }\n\n  const pkgStr = `${JSON.stringify(pkg, null, pkgRaw.includes('\\t') ? '\\t' : 2)}\\n`\n  if (dryRun) {\n    const { createPatch } = await import('diff')\n    globalLogger.info('[dry-run] package.json:')\n    console.info(createPatch('package.json', pkgRaw, pkgStr))\n  } else {\n    await writeFile('package.json', pkgStr)\n    globalLogger.success('Migrated `package.json`')\n  }\n  return true\n}\n\nconst TSUP_FILES = [\n  'tsup.config.ts',\n  'tsup.config.cts',\n  'tsup.config.mts',\n  'tsup.config.js',\n  'tsup.config.cjs',\n  'tsup.config.mjs',\n  'tsup.config.json',\n]\nasync function migrateTsupConfig(dryRun?: boolean): Promise<boolean> {\n  let found = false\n\n  for (const file of TSUP_FILES) {\n    if (!existsSync(file)) continue\n    globalLogger.info(`Found \\`${file}\\``)\n    found = true\n\n    const tsupConfigRaw = await readFile(file, 'utf8')\n    const tsupConfig = tsupConfigRaw\n      .replaceAll(/\\btsup\\b/g, 'tsdown')\n      .replaceAll(/\\bTSUP\\b/g, 'TSDOWN')\n\n    const renamed = file.replaceAll('tsup', 'tsdown')\n    if (dryRun) {\n      const { createTwoFilesPatch } = await import('diff')\n      globalLogger.info(`[dry-run] ${file} -> ${renamed}:`)\n      console.info(\n        createTwoFilesPatch(file, renamed, tsupConfigRaw, tsupConfig),\n      )\n    } else {\n      await writeFile(renamed, tsupConfig, 'utf8')\n      await unlink(file)\n      globalLogger.success(`Migrated \\`${file}\\` to \\`${renamed}\\``)\n    }\n  }\n\n  if (!found) {\n    globalLogger.warn('No tsup config found')\n  }\n\n  return found\n}\n\n// rename key but keep order\nfunction renameKey(\n  obj: Record<string, any>,\n  oldKey: string,\n  newKey: string,\n  newValue?: any,\n) {\n  const newObj: Record<string, any> = {}\n  for (const key of Object.keys(obj)) {\n    if (key === oldKey) {\n      newObj[newKey] = newValue || obj[oldKey]\n    } else {\n      newObj[key] = obj[key]\n    }\n  }\n  return newObj\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"4b1b9d44-f2bd-4d17-8ccd-d01a44cb38d3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885084,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"367ce6c1-e15f-4130-9718-109a436c7b17","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885084,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/utils/logger.d.ts","module_request":"ansis","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"afdc4b11-d758-4421-928b-fb1c4659970c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885084,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/utils/logger.d.ts","module_request":"rolldown","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"17ea6179-b2f7-46d2-a55c-e9ac92cb3bb6","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885085,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"17ea6179-b2f7-46d2-a55c-e9ac92cb3bb6","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885085,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/utils/logger.d.ts","module_request":"rolldown","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"0802c654-e17b-483b-842d-e94f756fcba5","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885085,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/migrate.ts","module_request":"node:fs","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"6d58d5b6-cca7-44aa-a1b0-0c3e6b6b771c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885085,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/external.d.ts","module_request":"pkg-types","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"2af2fb0c-0ebf-4730-8e37-76df05c65cd3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885085,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"2af2fb0c-0ebf-4730-8e37-76df05c65cd3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885086,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/external.d.ts","module_request":"pkg-types","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"3943c762-813b-4f43-9fbb-2b4f7ca641ac","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885086,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"01375896-1ed7-4c75-a443-92f58f6cffdd","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885086,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/external.d.ts","module_request":"rolldown","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"669ed82b-8663-4c4b-a016-982d299bd52f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885087,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/watch.ts","module_request":"rolldown-plugin-dts/filename","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"b6bef5f1-1698-4024-9625-cda6495cf10f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885087,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"12f4b5fa-c29c-422e-b4c0-30173ccc022c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885087,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/watch.ts","module_request":"rolldown-plugin-dts/tsc-context","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"d2fd7fe0-e66a-4225-80c7-b68b0c140c66","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885087,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"d2fd7fe0-e66a-4225-80c7-b68b0c140c66","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885088,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"55c519e8-54ab-48b5-a2d3-d4bd0bbea35f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885088,"action":"HookResolveIdCallEnd","resolved_id":"ansis","is_external":true,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"afdc4b11-d758-4421-928b-fb1c4659970c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885088,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"b7bee75d-2784-4c6a-b50b-f35723dd5edd","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885088,"action":"HookResolveIdCallEnd","resolved_id":"rolldown","is_external":true,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"0802c654-e17b-483b-842d-e94f756fcba5","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885088,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"../utils/package.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"ed0fcee5-a57c-4236-abc0-4eb859a09a86","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885088,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/publint.ts","content":null,"plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"016551f5-2c85-4d60-bbac-3598430344d9","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885088,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"c00fbcef-a3c0-49f0-a7ce-15f6b1f48033","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885089,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/publint.ts","content":"import path from 'node:path'\nimport process from 'node:process'\nimport { dim } from 'ansis'\nimport Debug from 'debug'\nimport { prettyName } from '../utils/logger.ts'\nimport type { ResolvedConfig } from '../config/index.ts'\n\nconst debug = Debug('tsdown:publint')\n\nexport async function publint(options: ResolvedConfig): Promise<void> {\n  if (!options.publint) return\n  if (!options.pkg) {\n    options.logger.warn(\n      prettyName(options.name),\n      'publint is enabled but package.json is not found',\n    )\n    return\n  }\n\n  const t = performance.now()\n  debug('Running publint')\n  const { publint } = await import('publint')\n  const { formatMessage } = await import('publint/utils')\n  const { messages } = await publint({\n    ...(options.publint === true ? {} : options.publint),\n    pkgDir: path.dirname(options.pkg.packageJsonPath),\n  })\n  debug('Found %d issues', messages.length)\n\n  if (!messages.length) {\n    options.logger.success(\n      prettyName(options.name),\n      `No publint issues found`,\n      dim`(${Math.round(performance.now() - t)}ms)`,\n    )\n  }\n  let hasError = false\n  for (const message of messages) {\n    hasError ||= message.type === 'error'\n    const formattedMessage = formatMessage(message, options.pkg)\n    const logType = (\n      { error: 'error', warning: 'warn', suggestion: 'info' } as const\n    )[message.type]\n    options.logger[logType](prettyName(options.name), formattedMessage)\n  }\n  if (hasError) {\n    debug('Found errors, setting exit code to 1')\n    process.exitCode = 1\n  }\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"a76564e7-83e2-4289-a7dc-04b1ddc319f5","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885089,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"./config.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"97f9b012-9b8b-46fb-8ddf-ee91ac3e01ff","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885089,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/publint.ts","content":"import path from 'node:path'\nimport process from 'node:process'\nimport { dim } from 'ansis'\nimport Debug from 'debug'\nimport { prettyName } from '../utils/logger.ts'\nimport type { ResolvedConfig } from '../config/index.ts'\n\nconst debug = Debug('tsdown:publint')\n\nexport async function publint(options: ResolvedConfig): Promise<void> {\n  if (!options.publint) return\n  if (!options.pkg) {\n    options.logger.warn(\n      prettyName(options.name),\n      'publint is enabled but package.json is not found',\n    )\n    return\n  }\n\n  const t = performance.now()\n  debug('Running publint')\n  const { publint } = await import('publint')\n  const { formatMessage } = await import('publint/utils')\n  const { messages } = await publint({\n    ...(options.publint === true ? {} : options.publint),\n    pkgDir: path.dirname(options.pkg.packageJsonPath),\n  })\n  debug('Found %d issues', messages.length)\n\n  if (!messages.length) {\n    options.logger.success(\n      prettyName(options.name),\n      `No publint issues found`,\n      dim`(${Math.round(performance.now() - t)}ms)`,\n    )\n  }\n  let hasError = false\n  for (const message of messages) {\n    hasError ||= message.type === 'error'\n    const formattedMessage = formatMessage(message, options.pkg)\n    const logType = (\n      { error: 'error', warning: 'warn', suggestion: 'info' } as const\n    )[message.type]\n    options.logger[logType](prettyName(options.name), formattedMessage)\n  }\n  if (hasError) {\n    debug('Found errors, setting exit code to 1')\n    process.exitCode = 1\n  }\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"a76564e7-83e2-4289-a7dc-04b1ddc319f5","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885089,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"06d6c1f7-8570-42fb-bc6a-adf7f3ae1e76","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885089,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/publint.ts","content":"import path from 'node:path'\nimport process from 'node:process'\nimport { dim } from 'ansis'\nimport Debug from 'debug'\nimport { prettyName } from '../utils/logger.ts'\nimport type { ResolvedConfig } from '../config/index.ts'\n\nconst debug = Debug('tsdown:publint')\n\nexport async function publint(options: ResolvedConfig): Promise<void> {\n  if (!options.publint) return\n  if (!options.pkg) {\n    options.logger.warn(\n      prettyName(options.name),\n      'publint is enabled but package.json is not found',\n    )\n    return\n  }\n\n  const t = performance.now()\n  debug('Running publint')\n  const { publint } = await import('publint')\n  const { formatMessage } = await import('publint/utils')\n  const { messages } = await publint({\n    ...(options.publint === true ? {} : options.publint),\n    pkgDir: path.dirname(options.pkg.packageJsonPath),\n  })\n  debug('Found %d issues', messages.length)\n\n  if (!messages.length) {\n    options.logger.success(\n      prettyName(options.name),\n      `No publint issues found`,\n      dim`(${Math.round(performance.now() - t)}ms)`,\n    )\n  }\n  let hasError = false\n  for (const message of messages) {\n    hasError ||= message.type === 'error'\n    const formattedMessage = formatMessage(message, options.pkg)\n    const logType = (\n      { error: 'error', warning: 'warn', suggestion: 'info' } as const\n    )[message.type]\n    options.logger[logType](prettyName(options.name), formattedMessage)\n  }\n  if (hasError) {\n    debug('Found errors, setting exit code to 1')\n    process.exitCode = 1\n  }\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"b6d5a363-5e64-4da0-a362-7cc1f2bec674","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885090,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"./types.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"2a7393b6-9d33-4aeb-8e3b-9176a255ac5d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885090,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/publint.ts","content":"import path from 'node:path'\nimport process from 'node:process'\nimport { dim } from 'ansis'\nimport Debug from 'debug'\nimport { prettyName } from '../utils/logger.ts'\nimport type { ResolvedConfig } from '../config/index.ts'\n\nconst debug = Debug('tsdown:publint')\n\nexport async function publint(options: ResolvedConfig): Promise<void> {\n  if (!options.publint) return\n  if (!options.pkg) {\n    options.logger.warn(\n      prettyName(options.name),\n      'publint is enabled but package.json is not found',\n    )\n    return\n  }\n\n  const t = performance.now()\n  debug('Running publint')\n  const { publint } = await import('publint')\n  const { formatMessage } = await import('publint/utils')\n  const { messages } = await publint({\n    ...(options.publint === true ? {} : options.publint),\n    pkgDir: path.dirname(options.pkg.packageJsonPath),\n  })\n  debug('Found %d issues', messages.length)\n\n  if (!messages.length) {\n    options.logger.success(\n      prettyName(options.name),\n      `No publint issues found`,\n      dim`(${Math.round(performance.now() - t)}ms)`,\n    )\n  }\n  let hasError = false\n  for (const message of messages) {\n    hasError ||= message.type === 'error'\n    const formattedMessage = formatMessage(message, options.pkg)\n    const logType = (\n      { error: 'error', warning: 'warn', suggestion: 'info' } as const\n    )[message.type]\n    options.logger[logType](prettyName(options.name), formattedMessage)\n  }\n  if (hasError) {\n    debug('Found errors, setting exit code to 1')\n    process.exitCode = 1\n  }\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"b6d5a363-5e64-4da0-a362-7cc1f2bec674","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885090,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"de34a310-cb1d-4c96-acb5-d4f5ca4ac04c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885090,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/publint.ts","content":"import path from 'node:path'\nimport process from 'node:process'\nimport { dim } from 'ansis'\nimport Debug from 'debug'\nimport { prettyName } from '../utils/logger.ts'\nimport type { ResolvedConfig } from '../config/index.ts'\n\nconst debug = Debug('tsdown:publint')\n\nexport async function publint(options: ResolvedConfig): Promise<void> {\n  if (!options.publint) return\n  if (!options.pkg) {\n    options.logger.warn(\n      prettyName(options.name),\n      'publint is enabled but package.json is not found',\n    )\n    return\n  }\n\n  const t = performance.now()\n  debug('Running publint')\n  const { publint } = await import('publint')\n  const { formatMessage } = await import('publint/utils')\n  const { messages } = await publint({\n    ...(options.publint === true ? {} : options.publint),\n    pkgDir: path.dirname(options.pkg.packageJsonPath),\n  })\n  debug('Found %d issues', messages.length)\n\n  if (!messages.length) {\n    options.logger.success(\n      prettyName(options.name),\n      `No publint issues found`,\n      dim`(${Math.round(performance.now() - t)}ms)`,\n    )\n  }\n  let hasError = false\n  for (const message of messages) {\n    hasError ||= message.type === 'error'\n    const formattedMessage = formatMessage(message, options.pkg)\n    const logType = (\n      { error: 'error', warning: 'warn', suggestion: 'info' } as const\n    )[message.type]\n    options.logger[logType](prettyName(options.name), formattedMessage)\n  }\n  if (hasError) {\n    debug('Found errors, setting exit code to 1')\n    process.exitCode = 1\n  }\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"51e9d2c4-9546-418b-a2d1-a87aa92140c3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885091,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"4f4419f0-82bb-4f18-b2ae-3fdab3860978","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885091,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"node:fs/promises","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"085dc9a3-9635-42b6-9686-cc90d18e72c1","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885091,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"33700a41-d692-4a8b-a9fb-bc907b78ee2e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885091,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"085dc9a3-9635-42b6-9686-cc90d18e72c1","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885091,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"node:process","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"a0628098-4521-4b6f-b517-f554f9246e7a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885091,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"node:fs/promises","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"a0aaaa9e-dcec-483e-a4b3-edc8b0d1f0eb","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885091,"action":"HookResolveIdCallEnd","resolved_id":"ansis","is_external":true,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"ed46ab77-73cc-42f6-bbd1-5729f403dde8","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885091,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"node:os","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"8f3db4e1-1bf7-4f26-9856-e8360e7c3802","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885092,"action":"HookResolveIdCallEnd","resolved_id":"debug","is_external":true,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"99699e98-5d8a-4553-8c91-e1500a4c0182","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885092,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"8f3db4e1-1bf7-4f26-9856-e8360e7c3802","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885092,"action":"HookResolveIdCallEnd","resolved_id":"tinyglobby","is_external":true,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"74c40c64-69f6-4eea-8432-73ee9f797bc7","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885092,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"node:os","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"d3156064-798d-4c15-ac72-50c9f620d046","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885092,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"532ae65f-468b-4463-9f28-ddb277f997eb","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885092,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"765bbab6-9a1f-4148-8e56-cf3c37787952","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885092,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"../features/clean.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"0a3269ce-fdb4-44f9-bc9d-ac2cf0460f49","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885093,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"765bbab6-9a1f-4148-8e56-cf3c37787952","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885093,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"ccc68710-8a03-4622-ba92-8bb30eec1567","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885093,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"b95cbe4c-a9a8-498f-bade-4a98bb53df9b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885093,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"../features/entry.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"ad9c283c-0ace-439d-b2fb-a1963d004bdb","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885093,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"node:util","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"daed52bb-2bc1-4cff-b539-68c356e8b5d4","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885093,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"f411435e-0176-41c5-92f8-1d2f35a09a6a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885093,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"daed52bb-2bc1-4cff-b539-68c356e8b5d4","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885094,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"../features/exports.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"6ab1f4a1-9e65-4fe6-aa5f-4dd4993684cf","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885094,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"node:util","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"3f11582e-9e1f-45d9-b43d-fad13409ba4e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885094,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"29fd3f26-2947-4ef8-8016-e462b3d5e50d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885094,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"debug","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"62b22f82-4b13-499f-861b-523e14b844a4","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885094,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"../features/target.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"67711aec-6078-4f3d-a2c9-9715629ee846","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885094,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"62b22f82-4b13-499f-861b-523e14b844a4","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885095,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"b97e7bc9-8aa4-42a3-a0dc-8638e139c8b5","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885095,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"debug","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"80cede46-a8e3-4045-8167-fa221e21cb7f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885095,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"../features/tsconfig.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"852283e9-adb3-4776-9045-500ea4001f4c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885095,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"rolldown","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"c46fcd80-c855-47e6-8b54-e697dfaa984e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885095,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"56738ad9-a836-485e-9920-0e35968c203b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885095,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"c46fcd80-c855-47e6-8b54-e697dfaa984e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885095,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"../utils/general.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"00000df4-2169-4cb9-b034-769fc1f39dfe","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885096,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"rolldown","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"7b29cae8-c441-4ac6-96ad-83540d02adc4","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885096,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"55c519e8-54ab-48b5-a2d3-d4bd0bbea35f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885096,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"rolldown/experimental","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"22096487-884f-4aaa-a71b-ad89eb57599d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885096,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"4c42202e-a44d-449a-a1d1-72e704cc302b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885096,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"22096487-884f-4aaa-a71b-ad89eb57599d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885096,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"ed0fcee5-a57c-4236-abc0-4eb859a09a86","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885096,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"rolldown/experimental","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"9e1a8fa7-000b-41ac-820d-6f8eb5a832ef","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885096,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"../utils/package.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"0116afe7-4396-49a2-9fb8-7a9434a807d5","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885097,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"../../package.json","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"6f55b788-0be9-441e-afaa-47a208a6d5fa","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885097,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"97f9b012-9b8b-46fb-8ddf-ee91ac3e01ff","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885097,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"6f55b788-0be9-441e-afaa-47a208a6d5fa","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885097,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"./config.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"8fc6b399-812c-4b1f-b25e-acf2cc79725f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885097,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"../../package.json","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"2b31ec99-7fbd-409b-bb2f-43c9e78e1ef6","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885097,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"2a7393b6-9d33-4aeb-8e3b-9176a255ac5d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885097,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"../config/index.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"592f43c7-694b-4980-9db1-b0e815316068","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885098,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"./types.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"c604fa31-83c7-47f0-885e-cb5339029d0b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885098,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"592f43c7-694b-4980-9db1-b0e815316068","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885098,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"4f4419f0-82bb-4f18-b2ae-3fdab3860978","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885098,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"../config/index.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"d7dfeb83-60c1-43cc-9eee-21c60713d11c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885098,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"386a5fc3-1d72-47ad-b302-f4b2451f87ba","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885098,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"../utils/fs.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"765a9036-4ea3-4525-b3ea-468ad3416a1a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885098,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"386a5fc3-1d72-47ad-b302-f4b2451f87ba","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885098,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"765a9036-4ea3-4525-b3ea-468ad3416a1a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885099,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"a0628098-4521-4b6f-b517-f554f9246e7a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885099,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"../utils/fs.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"3dda5b52-687b-4c7e-8597-2e63304478ee","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885099,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"node:process","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"43de0896-b54e-4423-87cd-82f760ca8575","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885099,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"a3e74a5d-59bc-4bdd-b78e-495881f2a383","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885099,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"43de0896-b54e-4423-87cd-82f760ca8575","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885099,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"a3e74a5d-59bc-4bdd-b78e-495881f2a383","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885099,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"81519ae8-59f4-4ad8-92ab-a80bec2e45d1","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885099,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"./external.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"be51c318-fad5-40b6-9fd3-0fc0f68d3a28","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885100,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"be51c318-fad5-40b6-9fd3-0fc0f68d3a28","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885100,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"0a3269ce-fdb4-44f9-bc9d-ac2cf0460f49","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885100,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"../features/clean.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"1466e7aa-8825-464e-9441-294bf5c2e850","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885100,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"1466e7aa-8825-464e-9441-294bf5c2e850","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885100,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"ad9c283c-0ace-439d-b2fb-a1963d004bdb","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885100,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"../features/entry.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"422f0f05-c005-4763-a647-3349365288a5","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885100,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"422f0f05-c005-4763-a647-3349365288a5","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885100,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"6ab1f4a1-9e65-4fe6-aa5f-4dd4993684cf","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885101,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"../features/exports.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"e234d124-83c6-4629-a12e-4ed7f00c91a3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885101,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"e234d124-83c6-4629-a12e-4ed7f00c91a3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885101,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"67711aec-6078-4f3d-a2c9-9715629ee846","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885101,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"../features/target.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"df271c5b-b5e1-490d-9c7b-841d362619cc","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885101,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"df271c5b-b5e1-490d-9c7b-841d362619cc","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885101,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"852283e9-adb3-4776-9045-500ea4001f4c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885101,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"../features/tsconfig.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"6f8c4171-5dd2-4be3-84f5-f25b5f9b9ebc","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885101,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"6f8c4171-5dd2-4be3-84f5-f25b5f9b9ebc","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885102,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"00000df4-2169-4cb9-b034-769fc1f39dfe","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885102,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"../utils/general.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"4854ef34-d09b-450b-a06b-0061bba9bbb5","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885102,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"4854ef34-d09b-450b-a06b-0061bba9bbb5","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885102,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"4c42202e-a44d-449a-a1d1-72e704cc302b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885102,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"98c8dc6d-b130-4583-b6c1-482757bd2c82","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885102,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"98c8dc6d-b130-4583-b6c1-482757bd2c82","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885102,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"0116afe7-4396-49a2-9fb8-7a9434a807d5","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885102,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"../utils/package.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"562ca75f-9d9e-436f-9e08-e5acbaa8b145","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885103,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"562ca75f-9d9e-436f-9e08-e5acbaa8b145","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885103,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"./external.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"b554d0ba-913c-4e41-9d33-76587316f53a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885103,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"8fc6b399-812c-4b1f-b25e-acf2cc79725f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885103,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"./config.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"4249a9c1-9fd7-42cd-9906-de0514c07b50","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885103,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"4249a9c1-9fd7-42cd-9906-de0514c07b50","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885103,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"./lightningcss.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"0f87cc43-28a0-45d4-a185-444c8d052bf9","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885103,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"c604fa31-83c7-47f0-885e-cb5339029d0b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885104,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"0f87cc43-28a0-45d4-a185-444c8d052bf9","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885104,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/watch.ts","module_request":"rolldown-plugin-dts/tsc-context","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"c37ac083-f3db-444c-9ef5-6d0cae0e5559","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885104,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/watch.ts","module_request":"../utils/general.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"ad7c0346-f9f6-4e15-9a1a-c8f50da7a3e5","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885104,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"ad7c0346-f9f6-4e15-9a1a-c8f50da7a3e5","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885104,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/watch.ts","module_request":"../utils/general.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"06997395-037f-448a-83ca-40ba4144ae1a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885104,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/watch.ts","module_request":"chokidar","import_kind":"dynamic-import","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"4d3a3fde-adb3-417b-ad3b-16aa18a26196","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885104,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"4d3a3fde-adb3-417b-ad3b-16aa18a26196","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885104,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/watch.ts","module_request":"chokidar","import_kind":"dynamic-import","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"9b9a52a6-752b-4940-9f63-af999891f0bd","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885105,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"8fa3a21f-56c8-4cb8-ae63-7e432c25e788","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885105,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/watch.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"a1bb8177-ae96-40da-8671-d6840dbd2ac4","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885105,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"74fbf664-c044-4544-ac28-bd2b193b8e38","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885105,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/watch.ts","module_request":"ansis","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"c5473849-51b9-4901-8fcc-6b7fbabcc847","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885105,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"b6bef5f1-1698-4024-9625-cda6495cf10f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885105,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/watch.ts","module_request":"rolldown-plugin-dts/filename","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"e156950a-9866-4d90-b092-11ab12da6626","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885105,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"c37ac083-f3db-444c-9ef5-6d0cae0e5559","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885106,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/watch.ts","module_request":"rolldown-plugin-dts/tsc-context","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"67112314-6467-4287-a120-9177cdd5d0fa","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885106,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"06997395-037f-448a-83ca-40ba4144ae1a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885106,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/watch.ts","module_request":"../utils/general.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"6c18f73e-9557-4129-828c-080bce675729","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885106,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"669ed82b-8663-4c4b-a016-982d299bd52f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885106,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/external.d.ts","module_request":"rolldown","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"c07d83e5-e696-418c-9479-52e039d9a996","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885106,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"b518608f-e5dc-46f2-8402-676ee2410687","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885106,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.ts","module_request":"node:process","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"fe13d2e8-0157-43ef-8b9e-21d61b20585e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885107,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"b8a0a846-046e-4788-a81c-24c8be16edb4","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885107,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.ts","module_request":"node:util","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"a71f39e0-282c-411b-9501-bc9c045e5b53","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885107,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"4db7b9f0-389f-4822-a669-c9fc1b5f4a3d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885107,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.ts","module_request":"ansis","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"2c3c7e04-c8b3-44f2-8999-61824552c166","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885107,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/report.d.ts","content":"import { type Logger } from \"../utils/logger.ts\";\nimport type { Plugin } from \"rolldown\";\nexport interface ReportOptions {\n\t/**\n\t* Enable/disable gzip-compressed size reporting.\n\t* Compressing large output files can be slow, so disabling this may increase build performance for large projects.\n\t*\n\t* @default true\n\t*/\n\tgzip?: boolean;\n\t/**\n\t* Enable/disable brotli-compressed size reporting.\n\t* Compressing large output files can be slow, so disabling this may increase build performance for large projects.\n\t*\n\t* @default false\n\t*/\n\tbrotli?: boolean;\n\t/**\n\t* Skip reporting compressed size for files larger than this size.\n\t* @default 1_000_000 // 1MB\n\t*/\n\tmaxCompressSize?: number;\n}\nexport declare function ReportPlugin(userOptions: ReportOptions, logger: Logger, cwd: string, cjsDts?: boolean, name?: string, isMultiFormat?: boolean): Plugin;\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"7b1d070b-09dc-41a5-8f09-b2bdd2e7a513","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885108,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"066f3a28-9c6d-4c10-93db-7fac06e2d9ff","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885108,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.ts","module_request":"debug","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"9aa7aefc-3b67-48bd-8218-c7cccd1cfde4","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885108,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"6d58d5b6-cca7-44aa-a1b0-0c3e6b6b771c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885108,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/migrate.ts","module_request":"node:fs","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"bd1729cf-f8f9-418f-9c93-1c1860810fe5","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885108,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/migrate.ts","module_request":"node:fs/promises","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"90bec903-6b0a-4b4c-8621-eff8061d9635","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885108,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"90bec903-6b0a-4b4c-8621-eff8061d9635","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885108,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/migrate.ts","module_request":"node:fs/promises","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"24a22943-883d-4e9f-b3e8-76bc3cba5cea","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885109,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"9b9a52a6-752b-4940-9f63-af999891f0bd","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885109,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/watch.ts","module_request":"chokidar","import_kind":"dynamic-import","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"c83b4927-0a51-42e0-a302-08162d773d3c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885109,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"a1bb8177-ae96-40da-8671-d6840dbd2ac4","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885109,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/watch.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"48de1f00-a18a-4a67-9154-6633660ddc54","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885109,"action":"HookResolveIdCallEnd","resolved_id":"ansis","is_external":true,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"c5473849-51b9-4901-8fcc-6b7fbabcc847","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885109,"action":"HookResolveIdCallEnd","resolved_id":"rolldown-plugin-dts/filename","is_external":true,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"e156950a-9866-4d90-b092-11ab12da6626","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885109,"action":"HookResolveIdCallEnd","resolved_id":"rolldown-plugin-dts/tsc-context","is_external":true,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"67112314-6467-4287-a120-9177cdd5d0fa","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885110,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"6c18f73e-9557-4129-828c-080bce675729","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885110,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/watch.ts","module_request":"../utils/general.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"b5fc4f6d-ec1b-4bf7-b99c-62727bc7d32c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885110,"action":"HookResolveIdCallEnd","resolved_id":"chokidar","is_external":true,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"c83b4927-0a51-42e0-a302-08162d773d3c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885110,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"48de1f00-a18a-4a67-9154-6633660ddc54","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885110,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/watch.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"d049d717-b3fd-4107-b732-77e5f0f9c8de","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885110,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"d049d717-b3fd-4107-b732-77e5f0f9c8de","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885110,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"b5fc4f6d-ec1b-4bf7-b99c-62727bc7d32c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885110,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/watch.ts","module_request":"../utils/general.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"9199d15b-2ede-4761-8639-1531d801bf38","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885111,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"9199d15b-2ede-4761-8639-1531d801bf38","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885111,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/migrate.ts","module_request":"node:process","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"d253f927-f800-4e98-b6a3-5004185c466c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885111,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"d253f927-f800-4e98-b6a3-5004185c466c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885111,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/migrate.ts","module_request":"node:process","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"f4be782e-22d5-4479-ab82-36a45ababb3a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885111,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/migrate.ts","module_request":"node:readline/promises","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"45f5b0e9-3942-4bce-8524-bf8473429d5a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885111,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"45f5b0e9-3942-4bce-8524-bf8473429d5a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885111,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/migrate.ts","module_request":"node:readline/promises","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"ee2dc914-5c25-4bb8-aec8-54864e090e2c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885112,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/migrate.ts","module_request":"ansis","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"a3598099-6f95-47d4-8c85-1e2a8f46fa77","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885112,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"a3598099-6f95-47d4-8c85-1e2a8f46fa77","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885112,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/migrate.ts","module_request":"ansis","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"12247280-aff6-4222-a366-d49d36343bf6","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885112,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/migrate.ts","module_request":"../package.json","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"372568b6-c38b-453a-be34-705c7eba3256","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885112,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"372568b6-c38b-453a-be34-705c7eba3256","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885112,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/migrate.ts","module_request":"../package.json","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"e0a52f31-5c39-4fae-92e0-3280ac37c84f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885112,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/migrate.ts","module_request":"./utils/logger.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"f727c649-814e-47e5-a4e6-467c0174487e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885113,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"f727c649-814e-47e5-a4e6-467c0174487e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885113,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/migrate.ts","module_request":"./utils/logger.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"9fe3e5c5-7404-44fb-b745-d64930df1a94","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885113,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/migrate.ts","module_request":"diff","import_kind":"dynamic-import","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"c44d846a-1191-4189-ad17-2f8a6a575853","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885113,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"c44d846a-1191-4189-ad17-2f8a6a575853","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885113,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/migrate.ts","module_request":"diff","import_kind":"dynamic-import","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"e83fa4fb-482a-49ca-a7f7-2fc0eff0cd9b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885113,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/migrate.ts","module_request":"diff","import_kind":"dynamic-import","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"bd53d55c-9027-4088-9474-1944a17c91e8","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885113,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"bd53d55c-9027-4088-9474-1944a17c91e8","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885113,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/migrate.ts","module_request":"diff","import_kind":"dynamic-import","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"219ff9d9-8aa5-44a3-a8e2-48091faa1f5c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885114,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"bd1729cf-f8f9-418f-9c93-1c1860810fe5","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885114,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"4196f0e0-e70d-4ec9-8481-eb320f4ad108","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885114,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.ts","module_request":"../utils/fs.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"091b84c2-ed00-422e-87a1-bade70ba3434","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885114,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"7a588b73-5768-434f-8c5a-2c7820e00745","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885114,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/migrate.ts","module_request":"node:fs","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"04a938a6-ce05-4509-99c8-4c3c24ea2b62","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885114,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"24a22943-883d-4e9f-b3e8-76bc3cba5cea","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885114,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/migrate.ts","module_request":"node:fs/promises","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"7ca01a6c-dfc7-43fd-a29e-c878573ebab9","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885115,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"f4be782e-22d5-4479-ab82-36a45ababb3a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885115,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/migrate.ts","module_request":"node:process","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"e77011c4-2433-43b5-bde8-a1211b837f04","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885115,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"ee2dc914-5c25-4bb8-aec8-54864e090e2c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885115,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/migrate.ts","module_request":"node:readline/promises","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"3a177537-b6ad-4f0b-a344-9e1be183a55d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885116,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"12247280-aff6-4222-a366-d49d36343bf6","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885116,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.ts","module_request":"@arethetypeswrong/core","import_kind":"dynamic-import","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"d64c440f-e44c-419a-96f6-8a2a0a837187","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885116,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/migrate.ts","module_request":"ansis","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"4363eca5-37b7-44cc-8b19-2d87fae3a2f6","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885116,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"e0a52f31-5c39-4fae-92e0-3280ac37c84f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885116,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"29e1c6c5-d872-49ff-a366-81ddf581a828","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885116,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.ts","module_request":"node:child_process","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"a3c29144-3496-4eb8-89be-8172cb77e999","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885117,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"8a20aa8c-2af7-4815-af60-4d40157ca1ca","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885117,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.ts","module_request":"node:fs/promises","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"5c1898a2-383c-4a14-8d08-b1e5fe972c22","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885117,"action":"HookResolveIdCallEnd","resolved_id":"pkg-types","is_external":true,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"3943c762-813b-4f43-9fbb-2b4f7ca641ac","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885117,"action":"HookResolveIdCallEnd","resolved_id":"rolldown","is_external":true,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"c07d83e5-e696-418c-9479-52e039d9a996","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885118,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"1c5c11bd-7ea6-4ec6-90af-d826eedacc04","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885118,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.ts","module_request":"node:os","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"94da876c-c348-4404-b90a-cfa12b081832","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885118,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"12f4b5fa-c29c-422e-b4c0-30173ccc022c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885118,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"5732e946-4360-41e0-9760-5a2fa5b49e27","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885118,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"fe13d2e8-0157-43ef-8b9e-21d61b20585e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885118,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.ts","module_request":"node:process","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"ec8d5ed2-25b2-48a8-b660-c96614ee7951","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885118,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"a71f39e0-282c-411b-9501-bc9c045e5b53","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885118,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.ts","module_request":"node:util","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"f6774101-fa71-4580-a5f7-43f6d46cacae","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885119,"action":"HookResolveIdCallEnd","resolved_id":"ansis","is_external":true,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"2c3c7e04-c8b3-44f2-8999-61824552c166","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885119,"action":"HookResolveIdCallEnd","resolved_id":"debug","is_external":true,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"9aa7aefc-3b67-48bd-8218-c7cccd1cfde4","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885119,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"091b84c2-ed00-422e-87a1-bade70ba3434","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885119,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.ts","module_request":"../utils/fs.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"768a1965-f034-4558-bf37-bf111fcc1a28","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885119,"action":"HookResolveIdCallEnd","resolved_id":"@arethetypeswrong/core","is_external":true,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"d64c440f-e44c-419a-96f6-8a2a0a837187","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885119,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"a3c29144-3496-4eb8-89be-8172cb77e999","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885119,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.ts","module_request":"node:child_process","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"3a76d0bd-83cf-4083-9ac4-4e10f61243ca","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885120,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"3a76d0bd-83cf-4083-9ac4-4e10f61243ca","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885120,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"5c1898a2-383c-4a14-8d08-b1e5fe972c22","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885120,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.ts","module_request":"node:fs/promises","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"ae9cbf75-c9a5-432b-92c6-947e4ea23ca8","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885120,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"ae9cbf75-c9a5-432b-92c6-947e4ea23ca8","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885120,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"94da876c-c348-4404-b90a-cfa12b081832","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885120,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.ts","module_request":"node:os","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"ffcef59d-c33d-45f3-ba4c-2345472d0f91","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885120,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"ffcef59d-c33d-45f3-ba4c-2345472d0f91","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885120,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"5732e946-4360-41e0-9760-5a2fa5b49e27","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885121,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"89177a3f-e7a0-4d59-b782-a1c2b720ba91","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885121,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"89177a3f-e7a0-4d59-b782-a1c2b720ba91","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885121,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"ec8d5ed2-25b2-48a8-b660-c96614ee7951","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885121,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.ts","module_request":"node:process","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"0bfdc70e-f87f-4fb8-9cc0-2b6bdeb7043e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885121,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"0bfdc70e-f87f-4fb8-9cc0-2b6bdeb7043e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885121,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"f6774101-fa71-4580-a5f7-43f6d46cacae","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885121,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.ts","module_request":"node:util","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"7fee8ea7-38fb-4c32-b250-e8f8fedb7ac7","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885121,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"7fee8ea7-38fb-4c32-b250-e8f8fedb7ac7","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885122,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"768a1965-f034-4558-bf37-bf111fcc1a28","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885122,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.ts","module_request":"../utils/fs.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"1ed3884c-f892-4db5-a938-a0d604f0a044","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885122,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"1ed3884c-f892-4db5-a938-a0d604f0a044","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885122,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"./lightningcss.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"85b66a91-f398-4428-9d3e-db947dc9d27e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885122,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"./node-protocol.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"aed2557b-03de-42db-8365-75aef3f84d39","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885122,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"aed2557b-03de-42db-8365-75aef3f84d39","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885122,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"./node-protocol.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"f91968e9-4a01-4acd-81ad-be32b1377445","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885122,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"./output.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"a2a4da8b-cd58-4980-88f0-f1e7cff99af2","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885123,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"a2a4da8b-cd58-4980-88f0-f1e7cff99af2","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885123,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"./output.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"348d49d5-1a88-4f89-865d-4ac564ddb7f9","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885123,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"./report.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"a1c3cea3-2271-488d-97e5-5fe19ca15f33","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885123,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"a1c3cea3-2271-488d-97e5-5fe19ca15f33","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885123,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"./report.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"a3ae9ad8-a7f2-4648-b848-998373a2cdd1","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885123,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"./shebang.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"3feea9c6-d943-4c99-88e5-5759f86e6d76","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885123,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"3feea9c6-d943-4c99-88e5-5759f86e6d76","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885123,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"./shebang.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"022fc79f-4b8a-431d-9cf4-aaedebcd766d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885124,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"29a5564b-521b-4429-8167-52d5e1b177c2","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885124,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/shortcuts.ts","module_request":"node:readline","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"7291e9f2-b163-4e7f-ab37-711d1804e47a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885124,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"c80a819e-d229-425f-bd95-18534f9bf8c7","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885124,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/shortcuts.ts","module_request":"ansis","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"b5222fa5-f063-4c88-8f73-17eb723f47a5","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885124,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"0742b42f-2308-4217-9371-ac1f5f5b96f1","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885124,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/shortcuts.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"cd744c1e-f683-4157-a301-4017f9955017","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885124,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"e794a591-08d3-4663-a7c0-cfc6df0ef30a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885125,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/shortcuts.ts","module_request":"node:process","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"e173ade8-f265-431f-aca2-599e461de525","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885125,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"7291e9f2-b163-4e7f-ab37-711d1804e47a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885125,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/shortcuts.ts","module_request":"node:readline","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"ef199741-abe1-4b01-b02e-8476514aa3ec","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885125,"action":"HookResolveIdCallEnd","resolved_id":"ansis","is_external":true,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"b5222fa5-f063-4c88-8f73-17eb723f47a5","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885125,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"cd744c1e-f683-4157-a301-4017f9955017","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885125,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/shortcuts.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"44c77352-c6d2-487b-9edb-daab69d4f0b5","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885125,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"e173ade8-f265-431f-aca2-599e461de525","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885125,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/shortcuts.ts","module_request":"node:process","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"34393157-4e42-4001-b140-7f5542560261","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885126,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"34393157-4e42-4001-b140-7f5542560261","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885126,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"ef199741-abe1-4b01-b02e-8476514aa3ec","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885126,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/shortcuts.ts","module_request":"node:readline","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"997aadc3-1aa1-42d6-baab-46995bd4347a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885126,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"997aadc3-1aa1-42d6-baab-46995bd4347a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885126,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"44c77352-c6d2-487b-9edb-daab69d4f0b5","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885126,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/shortcuts.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"e10835ec-bc6c-456b-bd5d-b8a62c49c4bd","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885126,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"e10835ec-bc6c-456b-bd5d-b8a62c49c4bd","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885126,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/migrate.ts","module_request":"../package.json","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"691bebe6-26b1-4bde-a198-3e435b15c98f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885127,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"9fe3e5c5-7404-44fb-b745-d64930df1a94","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885127,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/migrate.ts","module_request":"./utils/logger.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"b213a751-2742-497c-bb06-fb454786f0c4","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885127,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"e83fa4fb-482a-49ca-a7f7-2fc0eff0cd9b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885127,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/migrate.ts","module_request":"diff","import_kind":"dynamic-import","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"0c54e497-634a-4730-87b3-66ce9b1e68eb","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885127,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"219ff9d9-8aa5-44a3-a8e2-48091faa1f5c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885127,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/migrate.ts","module_request":"diff","import_kind":"dynamic-import","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"a71eb7a0-f361-4c2a-a94c-5193eb487099","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885127,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"04a938a6-ce05-4509-99c8-4c3c24ea2b62","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885127,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/migrate.ts","module_request":"node:fs","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"3c9359c6-2149-4ea1-b3e8-0347d260e37a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885128,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"7ca01a6c-dfc7-43fd-a29e-c878573ebab9","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885128,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/report.d.ts","content":"import { Logger } from \"../utils/logger.ts\";\nimport { Plugin } from \"rolldown\";\nexport var ReportOptions = [21, () => []];\nexport var ReportPlugin = [22, () => [ReportOptions, Logger, Plugin]];","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"7b1d070b-09dc-41a5-8f09-b2bdd2e7a513","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885128,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/report.d.ts","content":"import { Logger } from \"../utils/logger.ts\";\nimport { Plugin } from \"rolldown\";\nexport var ReportOptions = [21, () => []];\nexport var ReportPlugin = [22, () => [ReportOptions, Logger, Plugin]];","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"f0c0f712-ef58-4e98-b83d-ab59df2bdd72","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885128,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/migrate.ts","module_request":"node:fs/promises","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"1a4abe7e-55fd-41ea-9a5e-fea9152a5bcf","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885128,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"e77011c4-2433-43b5-bde8-a1211b837f04","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885128,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/migrate.ts","module_request":"node:process","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"40836d2e-d4af-4c5d-a081-f91a89812477","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885128,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"3a177537-b6ad-4f0b-a344-9e1be183a55d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885129,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/migrate.ts","module_request":"node:readline/promises","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"d5dd82a0-420b-463b-ae8f-28773280d395","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885129,"action":"HookResolveIdCallEnd","resolved_id":"ansis","is_external":true,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"4363eca5-37b7-44cc-8b19-2d87fae3a2f6","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885129,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"691bebe6-26b1-4bde-a198-3e435b15c98f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885129,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/migrate.ts","module_request":"../package.json","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"b3956bb9-2503-47f0-93b1-9a126fa925f0","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885129,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"b213a751-2742-497c-bb06-fb454786f0c4","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885129,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/migrate.ts","module_request":"./utils/logger.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"e13006de-b1ea-4cdd-936b-debc63bf1e05","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885129,"action":"HookResolveIdCallEnd","resolved_id":"diff","is_external":true,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"0c54e497-634a-4730-87b3-66ce9b1e68eb","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885129,"action":"HookResolveIdCallEnd","resolved_id":"diff","is_external":true,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"a71eb7a0-f361-4c2a-a94c-5193eb487099","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885130,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"3c9359c6-2149-4ea1-b3e8-0347d260e37a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885130,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/migrate.ts","module_request":"node:fs","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"4b75564d-98ea-4553-8c10-9bd28ba191df","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885130,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"4b75564d-98ea-4553-8c10-9bd28ba191df","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885130,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"1a4abe7e-55fd-41ea-9a5e-fea9152a5bcf","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885130,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/migrate.ts","module_request":"node:fs/promises","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"61af785b-e251-4d42-9cbb-4e4fa1997750","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885130,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"61af785b-e251-4d42-9cbb-4e4fa1997750","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885130,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"40836d2e-d4af-4c5d-a081-f91a89812477","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885130,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/migrate.ts","module_request":"node:process","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"69592d3f-2f00-4ea0-9f9a-0127bb96680d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885131,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"69592d3f-2f00-4ea0-9f9a-0127bb96680d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885131,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"d5dd82a0-420b-463b-ae8f-28773280d395","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885131,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/migrate.ts","module_request":"node:readline/promises","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"a0253186-fe4f-48f4-9010-e5857e238f78","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885131,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"a0253186-fe4f-48f4-9010-e5857e238f78","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885131,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"b3956bb9-2503-47f0-93b1-9a126fa925f0","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885131,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/migrate.ts","module_request":"../package.json","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"e1ca57e8-ff59-4fc0-af73-d5c40849c701","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885131,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"e1ca57e8-ff59-4fc0-af73-d5c40849c701","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885131,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"e13006de-b1ea-4cdd-936b-debc63bf1e05","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885132,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/migrate.ts","module_request":"./utils/logger.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"15d55dad-899b-4d6f-8b0b-b158df3bd1d8","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885132,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"15d55dad-899b-4d6f-8b0b-b158df3bd1d8","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885132,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/report.d.ts","content":"import { Logger } from \"../utils/logger.ts\";\nimport { Plugin } from \"rolldown\";\nexport var ReportOptions = [21, () => []];\nexport var ReportPlugin = [22, () => [ReportOptions, Logger, Plugin]];","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"f0c0f712-ef58-4e98-b83d-ab59df2bdd72","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885132,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"./shims.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"95488f74-ebbd-4b2a-975e-de503a7c028a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885132,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"95488f74-ebbd-4b2a-975e-de503a7c028a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885132,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"./shims.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"59f5cb4f-da5f-4ad5-b888-f107f0c840f6","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885132,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"rolldown-plugin-dts","import_kind":"dynamic-import","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"33af81d1-f637-43a9-a9aa-9a6ce5b93beb","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885133,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"33af81d1-f637-43a9-a9aa-9a6ce5b93beb","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885133,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"rolldown-plugin-dts","import_kind":"dynamic-import","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"579c10ac-c52c-4ad5-b580-b0607ff5dac7","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885133,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"unplugin-unused","import_kind":"dynamic-import","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"9eafbe94-e456-4d43-916a-b7c6053e22ca","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885133,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"9eafbe94-e456-4d43-916a-b7c6053e22ca","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885133,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"unplugin-unused","import_kind":"dynamic-import","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"20dc2fd5-2a20-4bf5-8a3c-3c40b4e3216f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885133,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"a0aaaa9e-dcec-483e-a4b3-edc8b0d1f0eb","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885133,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"node:fs/promises","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"993f2f94-c075-4ad6-98e7-c3f24f9bfa30","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885134,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"d3156064-798d-4c15-ac72-50c9f620d046","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885134,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"node:os","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"83293811-9367-4bec-8de1-1cb0bcb9b929","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885134,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"b95cbe4c-a9a8-498f-bade-4a98bb53df9b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885134,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"4a5d9a8f-d676-4b6b-945a-2aeb44512d3d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885134,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"3f11582e-9e1f-45d9-b43d-fad13409ba4e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885134,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"node:util","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"17457c8b-59ab-4a36-951e-7afba3b79661","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885134,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"80cede46-a8e3-4045-8167-fa221e21cb7f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885134,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"debug","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"a9566b1a-c687-42e2-b1ff-24e4c19a028f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885135,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"7b29cae8-c441-4ac6-96ad-83540d02adc4","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885135,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"rolldown","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"9219b3a4-22f6-4605-9db2-a6b3eda1c737","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885135,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"9e1a8fa7-000b-41ac-820d-6f8eb5a832ef","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885135,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"rolldown/experimental","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"388a575a-01e9-4c7d-9ab3-5e9e221b14e5","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885135,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"2b31ec99-7fbd-409b-bb2f-43c9e78e1ef6","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885135,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"../../package.json","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"4f73d243-d1c7-43c5-9ead-8a97829129d2","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885135,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"d7dfeb83-60c1-43cc-9eee-21c60713d11c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885136,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"../config/index.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"bd497a44-e0ea-466b-a7c8-db2f8d219ffb","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885136,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"3dda5b52-687b-4c7e-8597-2e63304478ee","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885136,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"../utils/fs.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"8f1a23b4-8de3-4576-928d-d0df929f2219","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885136,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"81519ae8-59f4-4ad8-92ab-a80bec2e45d1","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885136,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/report.d.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"fe14c82e-b604-42f6-8da9-e696e1a3c301","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885136,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"fe14c82e-b604-42f6-8da9-e696e1a3c301","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885136,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/report.d.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"8b80c58b-7667-49b9-accc-dcde380adedc","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885136,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/report.d.ts","module_request":"rolldown","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"cd0f3977-90e7-4303-8ea2-71298dca8c7c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885137,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"cd0f3977-90e7-4303-8ea2-71298dca8c7c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885137,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"b06f4725-6597-4fe8-b8e7-4e367be1dd33","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885137,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"b554d0ba-913c-4e41-9d33-76587316f53a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885137,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"./external.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"aa940f5d-b25d-46e1-a64b-440ba65ed061","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885137,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"85b66a91-f398-4428-9d3e-db947dc9d27e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885138,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","module_request":"./types.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"36e586ab-6fdf-4ad3-8067-9f22e1ef4b03","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885138,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"36e586ab-6fdf-4ad3-8067-9f22e1ef4b03","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885138,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"./lightningcss.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"e84f7788-d3d6-48f0-ba92-625f4276eb12","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885138,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/entry.ts","plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"b45e127d-38fd-41c7-9b1d-a63ec2e894f6","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885138,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/config.ts","plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"45a771c2-1c2a-41a8-88dc-5c647daaae4b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885138,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"f91968e9-4a01-4acd-81ad-be32b1377445","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885139,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/target.ts","plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"c83cdb12-a40f-4834-8958-88b81b2b5754","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885139,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/target.ts","content":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"c83cdb12-a40f-4834-8958-88b81b2b5754","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885139,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/target.ts","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"9cee55d1-3552-456a-b6e2-e9f025cedab9","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885139,"action":"HookResolveIdCallEnd","resolved_id":"/Users/kevin/Developer/open-source/tsdown/src/config/index.d.ts","is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"dd065cec-b234-4565-91d7-98a32b230a9f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885139,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"./node-protocol.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"a8586d05-3b23-4354-94ff-6087b708e64a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885139,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"348d49d5-1a88-4f89-865d-4ac564ddb7f9","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885139,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"./output.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"e680d36b-1c52-41e8-956a-f601fd8e072b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885139,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"a3ae9ad8-a7f2-4648-b848-998373a2cdd1","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885140,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"./report.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"c72b4a09-eff5-46a2-ae2b-026dac857a21","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885140,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"022fc79f-4b8a-431d-9cf4-aaedebcd766d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885140,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"./shebang.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"9ba20530-3f0d-4a51-a2d1-e8a1aafeb2e1","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885140,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"59f5cb4f-da5f-4ad5-b888-f107f0c840f6","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885140,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"./shims.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"5b9f8d48-ad0f-4345-a4c6-43da32d8d36f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885140,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"579c10ac-c52c-4ad5-b580-b0607ff5dac7","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885140,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"rolldown-plugin-dts","import_kind":"dynamic-import","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"41075252-32f1-49e4-a383-362f8576408d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885141,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"20dc2fd5-2a20-4bf5-8a3c-3c40b4e3216f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885141,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"unplugin-unused","import_kind":"dynamic-import","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"2a0d1b60-f42a-4949-9853-d31faa5390d3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885141,"action":"HookResolveIdCallEnd","resolved_id":"/Users/kevin/Developer/open-source/tsdown/src/config/index.d.ts","is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"cf58ff9d-345c-43af-b64f-ebff8c34f539","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885141,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"993f2f94-c075-4ad6-98e7-c3f24f9bfa30","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885141,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"node:fs/promises","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"3204b5fe-1bcb-4376-a940-267a86df0931","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885141,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"83293811-9367-4bec-8de1-1cb0bcb9b929","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885141,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"node:os","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"9ac328b2-b810-4988-8de3-a37e870e75df","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885141,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"4a5d9a8f-d676-4b6b-945a-2aeb44512d3d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885142,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"732147df-955a-4418-8e26-d74d41e63603","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885142,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"17457c8b-59ab-4a36-951e-7afba3b79661","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885142,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"node:util","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"f3c079bc-c99d-4790-a264-5f70bd67b79c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885142,"action":"HookResolveIdCallEnd","resolved_id":"debug","is_external":true,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"a9566b1a-c687-42e2-b1ff-24e4c19a028f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885142,"action":"HookResolveIdCallEnd","resolved_id":"rolldown","is_external":true,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"9219b3a4-22f6-4605-9db2-a6b3eda1c737","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885142,"action":"HookResolveIdCallEnd","resolved_id":"rolldown/experimental","is_external":true,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"388a575a-01e9-4c7d-9ab3-5e9e221b14e5","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885142,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"4f73d243-d1c7-43c5-9ead-8a97829129d2","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885143,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"../../package.json","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"a0d65536-a32a-4220-b7fc-e628e365c719","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885143,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"bd497a44-e0ea-466b-a7c8-db2f8d219ffb","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885143,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/config.ts","content":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"45a771c2-1c2a-41a8-88dc-5c647daaae4b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885143,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/config.ts","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"bab3476e-89e4-43f5-a908-b708fdb44eee","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885143,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/config.ts","content":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"bab3476e-89e4-43f5-a908-b708fdb44eee","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885143,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"../config/index.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"49ed8425-ffac-4348-8938-f913ed9f5bbd","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885143,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"8f1a23b4-8de3-4576-928d-d0df929f2219","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885143,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"../utils/fs.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"69870dbd-c837-474b-b443-f9d38b20a787","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885144,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"b06f4725-6597-4fe8-b8e7-4e367be1dd33","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885144,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"486cd9d8-811d-44f1-90cf-3f59fd5fdb9a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885144,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"aa940f5d-b25d-46e1-a64b-440ba65ed061","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885144,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"./external.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"5d3858e3-59d8-4dd5-a6d8-2d2dc90cfaf7","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885144,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"e84f7788-d3d6-48f0-ba92-625f4276eb12","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885144,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"./lightningcss.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"8a52a680-15dc-4343-a922-2f31ad1bec9b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885144,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"a8586d05-3b23-4354-94ff-6087b708e64a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885145,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/config.ts","plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"78d087f1-51d6-4953-84a6-3aa0f0cac260","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885145,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/config.ts","content":null,"plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"78d087f1-51d6-4953-84a6-3aa0f0cac260","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885145,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"./node-protocol.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"da521e71-077e-4a7e-9e06-a92dd0f78327","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885145,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/config.ts","content":"import path from 'node:path'\nimport process from 'node:process'\nimport { pathToFileURL } from 'node:url'\nimport { underline } from 'ansis'\nimport { loadConfig } from 'unconfig'\nimport { fsStat } from '../utils/fs.ts'\nimport { toArray } from '../utils/general.ts'\nimport { globalLogger } from '../utils/logger.ts'\nimport type { InlineConfig, UserConfig, UserConfigExport } from './types.ts'\nimport type {\n  ConfigEnv,\n  UserConfig as ViteUserConfig,\n  UserConfigExport as ViteUserConfigExport,\n} from 'vite'\n\nexport async function loadViteConfig(\n  prefix: string,\n  cwd: string,\n): Promise<ViteUserConfig | undefined> {\n  const {\n    config,\n    sources: [source],\n  } = await loadConfig<ViteUserConfigExport>({\n    sources: [\n      {\n        files: `${prefix}.config`,\n        extensions: ['ts', 'mts', 'cts', 'js', 'mjs', 'cjs', 'json', ''],\n      },\n    ],\n    cwd,\n    defaults: {},\n  })\n  if (!source) return\n  globalLogger.info(`Using Vite config: ${underline(source)}`)\n\n  const resolved = await config\n  if (typeof resolved === 'function') {\n    return resolved({\n      command: 'build',\n      mode: 'production',\n    } satisfies ConfigEnv)\n  }\n  return resolved\n}\n\nlet loaded = false\n\nexport async function loadConfigFile(\n  inlineConfig: InlineConfig,\n  workspace?: string,\n): Promise<{\n  configs: UserConfig[]\n  file?: string\n}> {\n  let cwd = inlineConfig.cwd || process.cwd()\n  let overrideConfig = false\n\n  let { config: filePath } = inlineConfig\n  if (filePath === false) return { configs: [{}] }\n\n  if (typeof filePath === 'string') {\n    const stats = await fsStat(filePath)\n    if (stats) {\n      const resolved = path.resolve(filePath)\n      if (stats.isFile()) {\n        overrideConfig = true\n        filePath = resolved\n        cwd = path.dirname(filePath)\n      } else if (stats.isDirectory()) {\n        cwd = resolved\n      }\n    }\n  }\n\n  let isNative = false\n  if (!loaded) {\n    if (!inlineConfig.configLoader || inlineConfig.configLoader === 'auto') {\n      isNative = !!(\n        process.features.typescript ||\n        process.versions.bun ||\n        process.versions.deno\n      )\n    } else if (inlineConfig.configLoader === 'native') {\n      isNative = true\n    }\n  }\n\n  let { config, sources } = await loadConfig\n    .async<UserConfigExport>({\n      sources: overrideConfig\n        ? [{ files: filePath as string, extensions: [] }]\n        : [\n            {\n              files: 'tsdown.config',\n              extensions: ['ts', 'mts', 'cts', 'js', 'mjs', 'cjs', 'json', ''],\n              parser:\n                inlineConfig.configLoader === 'unrun'\n                  ? unrunImport\n                  : isNative\n                    ? nativeImport\n                    : 'auto',\n            },\n            {\n              files: 'package.json',\n              extensions: [],\n              rewrite: (config: any) => config?.tsdown,\n            },\n          ],\n      cwd,\n      stopAt: workspace && path.dirname(workspace),\n      defaults: {},\n    })\n    .finally(() => (loaded = true))\n\n  config = await config\n  if (typeof config === 'function') {\n    config = await config(inlineConfig)\n  }\n  config = toArray(config)\n  if (config.length === 0) {\n    config.push({})\n  }\n\n  const file = sources[0]\n  if (file) {\n    globalLogger.info(`Using tsdown config: ${underline(file)}`)\n  }\n  return {\n    configs: config,\n    file,\n  }\n}\n\nasync function nativeImport(id: string) {\n  const mod = await import(pathToFileURL(id).href).catch((error) => {\n    const cannotFindModule = error?.message?.includes?.('Cannot find module')\n    if (cannotFindModule) {\n      const configError = new Error(\n        `Failed to load the config file. Try setting the --config-loader CLI flag to \\`unconfig\\`.\\n\\n${error.message}`,\n      )\n      configError.cause = error\n      throw configError\n    } else {\n      throw error\n    }\n  })\n  const config = mod.default || mod\n  return config\n}\n\nasync function unrunImport(id: string) {\n  const { unrun } = await import('unrun')\n  const { module } = await unrun({\n    path: pathToFileURL(id).href,\n  }).catch((error) => {\n    const cannotFindModule = error?.message?.includes?.('Cannot find module')\n    if (cannotFindModule) {\n      const configError = new Error(\n        `Failed to load the config file. \\`unrun\\` is experimental; try setting the --config-loader CLI flag to \\`unconfig\\` instead.\\n\\n${error.message}`,\n      )\n      configError.cause = error\n      throw configError\n    } else {\n      throw error\n    }\n  })\n  return module\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"44734011-6df9-4637-880d-3c7aab055e2a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885146,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"e680d36b-1c52-41e8-956a-f601fd8e072b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885146,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"./output.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"aad3c30b-e8a0-4243-96b6-ec1a62b3f990","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885146,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"c72b4a09-eff5-46a2-ae2b-026dac857a21","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885146,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"./report.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"8ac54cd2-f420-4ef9-98a7-b68f20bed8ff","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885146,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"9ba20530-3f0d-4a51-a2d1-e8a1aafeb2e1","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885146,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"./shebang.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"0931cceb-77e5-4ed1-99d6-0326320929f2","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885146,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"5b9f8d48-ad0f-4345-a4c6-43da32d8d36f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885146,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"./shims.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"e4bc1ae6-c9b9-41fa-b222-a2888aa39bb7","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885147,"action":"HookResolveIdCallEnd","resolved_id":"rolldown-plugin-dts","is_external":true,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"41075252-32f1-49e4-a383-362f8576408d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885147,"action":"HookResolveIdCallEnd","resolved_id":"unplugin-unused","is_external":true,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"2a0d1b60-f42a-4949-9853-d31faa5390d3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885147,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"3204b5fe-1bcb-4376-a940-267a86df0931","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885147,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"node:fs/promises","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"9cb68ec9-7153-4fcd-90cc-add80556227f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885147,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"9cb68ec9-7153-4fcd-90cc-add80556227f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885147,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"9ac328b2-b810-4988-8de3-a37e870e75df","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885147,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"node:os","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"d675afb3-92b4-4761-9086-892e0a25322a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885147,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"d675afb3-92b4-4761-9086-892e0a25322a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885148,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"732147df-955a-4418-8e26-d74d41e63603","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885148,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"7014a439-4532-4984-893d-a817b67bb979","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885148,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"7014a439-4532-4984-893d-a817b67bb979","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885148,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"f3c079bc-c99d-4790-a264-5f70bd67b79c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885148,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"node:util","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"89aaf86e-0e66-49e2-94c5-a86f53b0b0f6","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885148,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"89aaf86e-0e66-49e2-94c5-a86f53b0b0f6","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885148,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"a0d65536-a32a-4220-b7fc-e628e365c719","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885148,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"../../package.json","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"32d993a5-05d7-481e-829b-2fe3d094559c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885149,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"32d993a5-05d7-481e-829b-2fe3d094559c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885149,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"49ed8425-ffac-4348-8938-f913ed9f5bbd","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885149,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"../config/index.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"ddd7038f-ef88-4116-b7fd-b02765588f5d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885149,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"ddd7038f-ef88-4116-b7fd-b02765588f5d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885149,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"69870dbd-c837-474b-b443-f9d38b20a787","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885149,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"../utils/fs.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"38d2bcad-7b99-4a28-a76b-08a769819c7f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885149,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"38d2bcad-7b99-4a28-a76b-08a769819c7f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885150,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"486cd9d8-811d-44f1-90cf-3f59fd5fdb9a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885150,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"6685b7fe-f369-4f98-8257-50820bf90776","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885150,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"6685b7fe-f369-4f98-8257-50820bf90776","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885150,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"5d3858e3-59d8-4dd5-a6d8-2d2dc90cfaf7","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885150,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"./external.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"e0369c3e-0e8a-4293-94dc-fba738855373","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885150,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"e0369c3e-0e8a-4293-94dc-fba738855373","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885150,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"8a52a680-15dc-4343-a922-2f31ad1bec9b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885150,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"./lightningcss.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"5e6753fd-9353-4b39-bfa9-1fe37695cde3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885151,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"5e6753fd-9353-4b39-bfa9-1fe37695cde3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885151,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"da521e71-077e-4a7e-9e06-a92dd0f78327","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885151,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"./node-protocol.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"6b3bc576-969f-4657-b386-2d53d3c98964","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885151,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"6b3bc576-969f-4657-b386-2d53d3c98964","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885151,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"aad3c30b-e8a0-4243-96b6-ec1a62b3f990","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885151,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"./output.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"9445b027-6d72-477d-bc95-9ca446c8f7f0","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885151,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"9445b027-6d72-477d-bc95-9ca446c8f7f0","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885151,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/report.d.ts","module_request":"rolldown","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"9f78abd1-d3fb-495b-949a-c5f3dfa37367","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885152,"action":"HookResolveIdCallEnd","resolved_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/logger.d.ts","is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"8b80c58b-7667-49b9-accc-dcde380adedc","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885152,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"8ac54cd2-f420-4ef9-98a7-b68f20bed8ff","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885152,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"./report.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"e04039e3-9b1e-4b38-b610-2c9d74f197ab","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885152,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"e04039e3-9b1e-4b38-b610-2c9d74f197ab","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885152,"action":"HookResolveIdCallEnd","resolved_id":"/Users/kevin/Developer/open-source/tsdown/src/config/index.d.ts","is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"ce0a15a0-f1eb-41b2-8132-9e2083ec3e8b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885152,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"0931cceb-77e5-4ed1-99d6-0326320929f2","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885153,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"./shebang.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"2c8b21eb-86fa-4edf-8ed4-b7a1aab33552","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885153,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"2c8b21eb-86fa-4edf-8ed4-b7a1aab33552","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885153,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"e4bc1ae6-c9b9-41fa-b222-a2888aa39bb7","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885153,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","module_request":"./shims.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"bf461cfd-2af2-4bda-91e8-e9f4b37bbc86","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885153,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"bf461cfd-2af2-4bda-91e8-e9f4b37bbc86","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885153,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/types.d.ts","plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"1179619c-97bc-45e4-85c7-3aed8a94efa3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885153,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/types.d.ts","content":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"1179619c-97bc-45e4-85c7-3aed8a94efa3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885154,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/types.d.ts","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"f12db2e5-47f7-4347-97aa-7bb80c876813","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885154,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/shims.ts","plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"3c812576-7a07-401e-9a9f-7cfb8efd2dd5","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885154,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/shims.ts","content":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"3c812576-7a07-401e-9a9f-7cfb8efd2dd5","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885154,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/shims.ts","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"d0f9cf6e-dfe8-4aa4-986c-a698ba5e4698","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885154,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/shims.ts","content":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"d0f9cf6e-dfe8-4aa4-986c-a698ba5e4698","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885154,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/shims.ts","plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"9def01bb-433c-47d0-a32e-c5a3cbe07a32","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885154,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/shims.ts","content":null,"plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"9def01bb-433c-47d0-a32e-c5a3cbe07a32","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885154,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/output.ts","plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"d4019f00-c68c-4df4-bd79-f391c2ebc5ed","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885154,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/output.ts","content":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"d4019f00-c68c-4df4-bd79-f391c2ebc5ed","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885155,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/output.ts","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"d5ceeafc-0eb9-4fb4-b7e4-adfaf5fe7cbd","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885155,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/output.ts","content":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"d5ceeafc-0eb9-4fb4-b7e4-adfaf5fe7cbd","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885155,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/output.ts","plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"75c1ea5a-6b68-4598-a4ab-2111eb155784","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885155,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/output.ts","content":null,"plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"75c1ea5a-6b68-4598-a4ab-2111eb155784","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885155,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/lightningcss.ts","plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"9b28cba0-f3b2-4332-aff9-650d61143bc1","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885155,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/lightningcss.ts","content":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"9b28cba0-f3b2-4332-aff9-650d61143bc1","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885155,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/lightningcss.ts","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"ee6582e2-0668-4d35-8176-cf754c80428f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885155,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/lightningcss.ts","content":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"ee6582e2-0668-4d35-8176-cf754c80428f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885155,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/lightningcss.ts","plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"1c2d447a-8fb2-40dc-9dfd-5a4574250a40","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885156,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/lightningcss.ts","content":null,"plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"1c2d447a-8fb2-40dc-9dfd-5a4574250a40","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"action":"StringRef","id":"7ba545caa33f73fcc111b320976409a1f78e58be1281b8b3291d2fd2f874a8f0","content":"import type { AttwOptions } from \"../features/attw.ts\";\nimport type { CopyEntry, CopyOptions, CopyOptionsFn } from \"../features/copy.ts\";\nimport type { ExportsOptions, TsdownChunks } from \"../features/exports.ts\";\nimport type { BuildContext, RolldownContext, TsdownHooks } from \"../features/hooks.ts\";\nimport type { ChunkAddon, ChunkAddonFunction, ChunkAddonObject, OutExtensionContext, OutExtensionFactory, OutExtensionObject } from \"../features/output.ts\";\nimport type { ReportOptions } from \"../features/report.ts\";\nimport type { Logger, LogLevel } from \"../utils/logger.ts\";\nimport type { PackageType } from \"../utils/package.ts\";\nimport type { Arrayable, Awaitable, MarkPartial, Overwrite } from \"../utils/types.ts\";\nimport type { Hookable } from \"hookable\";\nimport type { PackageJson } from \"pkg-types\";\nimport type { Options as PublintOptions } from \"publint\";\nimport type { ExternalOption, InputOption, InputOptions, InternalModuleFormat, MinifyOptions, ModuleFormat, ModuleTypes, OutputOptions, TreeshakingOptions } from \"rolldown\";\nimport type { Options as DtsOptions } from \"rolldown-plugin-dts\";\nimport type { Options as UnusedOptions } from \"unplugin-unused\";\nexport type Sourcemap = boolean | \"inline\" | \"hidden\";\nexport type Format = ModuleFormat;\nexport type NormalizedFormat = InternalModuleFormat;\nexport type { AttwOptions, BuildContext, ChunkAddon, ChunkAddonFunction, ChunkAddonObject, CopyEntry, CopyOptions, CopyOptionsFn, DtsOptions, ExportsOptions, OutExtensionContext, OutExtensionFactory, OutExtensionObject, PackageType, PublintOptions, ReportOptions, RolldownContext, TreeshakingOptions, TsdownChunks, TsdownHooks, UnusedOptions };\nexport interface Workspace {\n\t/**\n\t* Workspace directories. Glob patterns are supported.\n\t* - `auto`: Automatically detect `package.json` files in the workspace.\n\t* @default 'auto'\n\t*/\n\tinclude?: Arrayable<string> | \"auto\";\n\t/**\n\t* Exclude directories from workspace.\n\t* Defaults to all `node_modules`, `dist`, `test`, `tests`, `temp`, and `tmp` directories.\n\t*/\n\texclude?: Arrayable<string>;\n\t/**\n\t* Path to the workspace configuration file.\n\t*/\n\tconfig?: boolean | string;\n}\nexport type NoExternalFn = (id: string, importer: string | undefined) => boolean | null | undefined | void;\n/**\n* Options for tsdown.\n*/\nexport interface UserConfig {\n\t/**\n\t* Defaults to `'src/index.ts'` if it exists.\n\t*/\n\tentry?: InputOption;\n\texternal?: ExternalOption;\n\tnoExternal?: Arrayable<string | RegExp> | NoExternalFn;\n\t/**\n\t* Bundle only the dependencies listed here; throw an error if any others are missing.\n\t*\n\t* Note: Be sure to include all required sub-dependencies as well.\n\t*/\n\tinlineOnly?: Arrayable<string | RegExp>;\n\t/**\n\t* Skip bundling `node_modules`.\n\t* @default false\n\t*/\n\tskipNodeModulesBundle?: boolean;\n\talias?: Record<string, string>;\n\ttsconfig?: string | boolean;\n\t/**\n\t* Specifies the target runtime platform for the build.\n\t*\n\t* - `node`: Node.js and compatible runtimes (e.g., Deno, Bun).\n\t*   For CJS format, this is always set to `node` and cannot be changed.\n\t* - `neutral`: A platform-agnostic target with no specific runtime assumptions.\n\t* - `browser`: Web browsers.\n\t*\n\t* @default 'node'\n\t* @see https://tsdown.dev/options/platform\n\t*/\n\tplatform?: \"node\" | \"neutral\" | \"browser\";\n\t/**\n\t* Specifies the compilation target environment(s).\n\t*\n\t* Determines the JavaScript version or runtime(s) for which the code should be compiled.\n\t* If not set, defaults to the value of `engines.node` in your project's `package.json`.\n\t* If no `engines.node` field exists, no syntax transformations are applied.\n\t*\n\t* Accepts a single target (e.g., `'es2020'`, `'node18'`), an array of targets, or `false` to disable all transformations.\n\t*\n\t* @see {@link https://tsdown.dev/options/target#supported-targets} for a list of valid targets and more details.\n\t*\n\t* @example\n\t* ```jsonc\n\t* // Target a single environment\n\t* { \"target\": \"node18\" }\n\t* ```\n\t*\n\t* @example\n\t* ```jsonc\n\t* // Target multiple environments\n\t* { \"target\": [\"node18\", \"es2020\"] }\n\t* ```\n\t*\n\t* @example\n\t* ```jsonc\n\t* // Disable all syntax transformations\n\t* { \"target\": false }\n\t* ```\n\t*/\n\ttarget?: string | string[] | false;\n\t/**\n\t* Compile-time env variables.\n\t* @example\n\t* ```json\n\t* {\n\t*   \"DEBUG\": true,\n\t*   \"NODE_ENV\": \"production\"\n\t* }\n\t* ```\n\t*/\n\tenv?: Record<string, any>;\n\tdefine?: Record<string, string>;\n\t/** @default false */\n\tshims?: boolean;\n\t/**\n\t* Configure tree shaking options.\n\t* @see {@link https://rolldown.rs/options/treeshake} for more details.\n\t* @default true\n\t*/\n\ttreeshake?: boolean | TreeshakingOptions;\n\t/**\n\t* Sets how input files are processed.\n\t* For example, use 'js' to treat files as JavaScript or 'base64' for images.\n\t* Lets you import or require files like images or fonts.\n\t* @example\n\t* ```json\n\t* { '.jpg': 'asset', '.png': 'base64' }\n\t* ```\n\t*/\n\tloader?: ModuleTypes;\n\t/**\n\t* If enabled, strips the `node:` protocol prefix from import source.\n\t*\n\t* @default false\n\t* @deprecated Use `nodeProtocol: 'strip'` instead.\n\t*\n\t* @example\n\t* // With removeNodeProtocol enabled:\n\t* import('node:fs'); // becomes import('fs')\n\t*/\n\tremoveNodeProtocol?: boolean;\n\t/**\n\t* - If `true`, add `node:` prefix to built-in modules.\n\t* - If `'strip'`, strips the `node:` protocol prefix from import source.\n\t* - If `false`, does not modify the import source.\n\t*\n\t* @default false\n\t*\n\t* @example\n\t* // With nodeProtocol enabled:\n\t* import('fs'); // becomes import('node:fs')\n\t* // With nodeProtocol set to 'strip':\n\t* import('node:fs'); // becomes import('fs')\n\t* // With nodeProtocol set to false:\n\t* import('node:fs'); // remains import('node:fs')\n\t*\n\t*/\n\tnodeProtocol?: \"strip\" | boolean;\n\tplugins?: InputOptions[\"plugins\"];\n\t/**\n\t* Use with caution; ensure you understand the implications.\n\t*/\n\tinputOptions?: InputOptions | ((options: InputOptions, format: NormalizedFormat, context: {\n\t\tcjsDts: boolean;\n\t}) => Awaitable<InputOptions | void | null>);\n\t/** @default ['es'] */\n\tformat?: Format | Format[];\n\tglobalName?: string;\n\t/** @default 'dist' */\n\toutDir?: string;\n\t/**\n\t* Whether to generate source map files.\n\t*\n\t* Note that this option will always be `true` if you have\n\t* [`declarationMap`](https://www.typescriptlang.org/tsconfig/#declarationMap)\n\t* option enabled in your `tsconfig.json`.\n\t*\n\t* @default false\n\t*/\n\tsourcemap?: Sourcemap;\n\t/**\n\t* Clean directories before build.\n\t*\n\t* Default to output directory.\n\t* @default true\n\t*/\n\tclean?: boolean | string[];\n\t/**\n\t* @default false\n\t*/\n\tminify?: boolean | \"dce-only\" | MinifyOptions;\n\tfooter?: ChunkAddon;\n\tbanner?: ChunkAddon;\n\t/**\n\t* Determines whether unbundle mode is enabled.\n\t* When set to true, the output files will mirror the input file structure.\n\t* @default false\n\t*/\n\tunbundle?: boolean;\n\t/**\n\t* @deprecated Use `unbundle` instead.\n\t* @default true\n\t*/\n\tbundle?: boolean;\n\t/**\n\t* Use a fixed extension for output files.\n\t* The extension will always be `.cjs` or `.mjs`.\n\t* Otherwise, it will depend on the package type.\n\t*\n\t* Defaults to `true` if `platform` is set to `node`, `false` otherwise.\n\t*/\n\tfixedExtension?: boolean;\n\t/**\n\t* Custom extensions for output files.\n\t* `fixedExtension` will be overridden by this option.\n\t*/\n\toutExtensions?: OutExtensionFactory;\n\t/**\n\t* If enabled, appends hash to chunk filenames.\n\t* @default true\n\t*/\n\thash?: boolean;\n\t/**\n\t* @default true\n\t*/\n\tcjsDefault?: boolean;\n\t/**\n\t* Use with caution; ensure you understand the implications.\n\t*/\n\toutputOptions?: OutputOptions | ((options: OutputOptions, format: NormalizedFormat, context: {\n\t\tcjsDts: boolean;\n\t}) => Awaitable<OutputOptions | void | null>);\n\t/**\n\t* The working directory of the config file.\n\t* - Defaults to `process.cwd()` for root config.\n\t* - Defaults to the package directory for workspace config.\n\t*/\n\tcwd?: string;\n\t/**\n\t* The name to show in CLI output. This is useful for monorepos or workspaces.\n\t* When using workspace mode, this option defaults to the package name from package.json.\n\t* In non-workspace mode, this option must be set explicitly for the name to show in the CLI output.\n\t*/\n\tname?: string;\n\t/**\n\t* @default false\n\t* @deprecated Use `logLevel` instead.\n\t*/\n\tsilent?: boolean;\n\t/**\n\t* Log level.\n\t* @default 'info'\n\t*/\n\tlogLevel?: LogLevel;\n\t/**\n\t* If true, fails the build on warnings.\n\t* @default false\n\t*/\n\tfailOnWarn?: boolean;\n\t/**\n\t* Custom logger.\n\t*/\n\tcustomLogger?: Logger;\n\t/**\n\t* Reuse config from Vite or Vitest (experimental)\n\t* @default false\n\t*/\n\tfromVite?: boolean | \"vitest\";\n\t/**\n\t* @default false\n\t*/\n\twatch?: boolean | Arrayable<string>;\n\tignoreWatch?: Arrayable<string | RegExp>;\n\t/**\n\t* You can specify command to be executed after a successful build, specially useful for Watch mode\n\t*/\n\tonSuccess?: string | ((config: ResolvedConfig, signal: AbortSignal) => void | Promise<void>);\n\t/**\n\t* Enables generation of TypeScript declaration files (`.d.ts`).\n\t*\n\t* By default, this option is auto-detected based on your project's `package.json`:\n\t* - If the `types` field is present, or if the main `exports` contains a `types` entry, declaration file generation is enabled by default.\n\t* - Otherwise, declaration file generation is disabled by default.\n\t*/\n\tdts?: boolean | DtsOptions;\n\t/**\n\t* Enable unused dependencies check with `unplugin-unused`\n\t* Requires `unplugin-unused` to be installed.\n\t* @default false\n\t*/\n\tunused?: boolean | UnusedOptions;\n\t/**\n\t* Run publint after bundling.\n\t* Requires `publint` to be installed.\n\t* @default false\n\t*/\n\tpublint?: boolean | PublintOptions;\n\t/**\n\t* Run `arethetypeswrong` after bundling.\n\t* Requires `@arethetypeswrong/core` to be installed.\n\t*\n\t* @default false\n\t* @see https://github.com/arethetypeswrong/arethetypeswrong.github.io\n\t*/\n\tattw?: boolean | AttwOptions;\n\t/**\n\t* Enable size reporting after bundling.\n\t* @default true\n\t*/\n\treport?: boolean | ReportOptions;\n\t/**\n\t* `import.meta.glob` support.\n\t* @see https://vite.dev/guide/features.html#glob-import\n\t* @default true\n\t*/\n\tglobImport?: boolean;\n\t/**\n\t* **[experimental]** Generate package exports for `package.json`.\n\t*\n\t* This will set the `main`, `module`, `types`, `exports` fields in `package.json`\n\t* to point to the generated files.\n\t*/\n\texports?: boolean | ExportsOptions;\n\t/**\n\t* @deprecated Alias for `copy`, will be removed in the future.\n\t*/\n\tpublicDir?: CopyOptions | CopyOptionsFn;\n\t/**\n\t* Copy files to another directory.\n\t* @example\n\t* ```ts\n\t* [\n\t*   'src/assets',\n\t*   { from: 'src/assets', to: 'dist/assets' },\n\t* ]\n\t* ```\n\t*/\n\tcopy?: CopyOptions | CopyOptionsFn;\n\thooks?: Partial<TsdownHooks> | ((hooks: Hookable<TsdownHooks>) => Awaitable<void>);\n\t/**\n\t* **[experimental]** Enable workspace mode.\n\t* This allows you to build multiple packages in a monorepo.\n\t*/\n\tworkspace?: Workspace | Arrayable<string> | true;\n}\nexport interface InlineConfig extends UserConfig {\n\t/**\n\t* Config file path\n\t*/\n\tconfig?: boolean | string;\n\t/**\n\t* Config loader to use. It can only be set via CLI or API.\n\t* @default 'auto'\n\t*/\n\tconfigLoader?: \"auto\" | \"native\" | \"unconfig\" | \"unrun\";\n\t/**\n\t* Filter workspace packages. This option is only available in workspace mode.\n\t*/\n\tfilter?: RegExp | string | string[];\n}\nexport type UserConfigFn = (inlineConfig: InlineConfig) => Awaitable<Arrayable<UserConfig>>;\nexport type UserConfigExport = Awaitable<Arrayable<UserConfig> | UserConfigFn>;\nexport type ResolvedConfig = Overwrite<MarkPartial<Omit<UserConfig, \"workspace\" | \"fromVite\" | \"publicDir\" | \"silent\" | \"bundle\" | \"removeNodeProtocol\" | \"logLevel\" | \"failOnWarn\" | \"customLogger\">, \"globalName\" | \"inputOptions\" | \"outputOptions\" | \"minify\" | \"define\" | \"alias\" | \"external\" | \"onSuccess\" | \"outExtensions\" | \"hooks\" | \"copy\" | \"loader\" | \"name\" | \"banner\" | \"footer\">, {\n\tformat: NormalizedFormat[];\n\ttarget?: string[];\n\tclean: string[];\n\tdts: false | DtsOptions;\n\treport: false | ReportOptions;\n\ttsconfig: false | string;\n\tpkg?: PackageJson;\n\texports: false | ExportsOptions;\n\tnodeProtocol: \"strip\" | boolean;\n\tlogger: Logger;\n\tignoreWatch: Array<string | RegExp>;\n\tnoExternal?: NoExternalFn;\n\tinlineOnly?: Array<string | RegExp>;\n}>;\n"}
{"timestamp":1761897885158,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/types.d.ts","content":"$ref:7ba545caa33f73fcc111b320976409a1f78e58be1281b8b3291d2fd2f874a8f0","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"f12db2e5-47f7-4347-97aa-7bb80c876813","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885158,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/shims.ts","content":"import { shimFile } from '../index.ts'\nimport type { NormalizedFormat, ResolvedConfig } from '../config/index.ts'\n\nexport function getShimsInject(\n  format: NormalizedFormat,\n  platform: ResolvedConfig['platform'],\n): Record<string, [string, string]> | undefined {\n  if (format === 'es' && platform === 'node') {\n    return {\n      __dirname: [shimFile, '__dirname'],\n      __filename: [shimFile, '__filename'],\n    }\n  }\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"796cf30c-8272-4d00-8c97-687cb778cd90","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885158,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/types.d.ts","content":"$ref:7ba545caa33f73fcc111b320976409a1f78e58be1281b8b3291d2fd2f874a8f0","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"47dfe3dd-d32f-4cfd-9097-91798cd869ee","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885158,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/output.ts","content":"import { RE_CSS, RE_DTS, RE_JS } from 'rolldown-plugin-dts/filename'\nimport { getPackageType, type PackageType } from '../utils/package.ts'\nimport type {\n  Format,\n  NormalizedFormat,\n  ResolvedConfig,\n} from '../config/index.ts'\nimport type {\n  AddonFunction,\n  InputOptions,\n  PreRenderedChunk,\n  RenderedChunk,\n} from 'rolldown'\n\nexport interface OutExtensionContext {\n  options: InputOptions\n  format: NormalizedFormat\n  /** \"type\" field in project's package.json */\n  pkgType?: PackageType\n}\nexport interface OutExtensionObject {\n  js?: string\n  dts?: string\n}\nexport type OutExtensionFactory = (\n  context: OutExtensionContext,\n) => OutExtensionObject | undefined\n\nfunction resolveJsOutputExtension(\n  packageType: PackageType,\n  format: NormalizedFormat,\n  fixedExtension?: boolean,\n): 'cjs' | 'js' | 'mjs' {\n  switch (format) {\n    case 'es':\n      return !fixedExtension && packageType === 'module' ? 'js' : 'mjs'\n    case 'cjs':\n      return fixedExtension || packageType === 'module' ? 'cjs' : 'js'\n    default:\n      return 'js'\n  }\n}\n\nexport function resolveChunkFilename(\n  { outExtensions, fixedExtension, pkg, hash }: ResolvedConfig,\n  inputOptions: InputOptions,\n  format: NormalizedFormat,\n): [entry: ChunkFileName, chunk: ChunkFileName] {\n  const packageType = getPackageType(pkg)\n\n  let jsExtension: string | undefined\n  let dtsExtension: string | undefined\n\n  if (outExtensions) {\n    const { js, dts } =\n      outExtensions({\n        options: inputOptions,\n        format,\n        pkgType: packageType,\n      }) || {}\n    jsExtension = js\n    dtsExtension = dts\n  }\n\n  jsExtension ??= `.${resolveJsOutputExtension(packageType, format, fixedExtension)}`\n\n  const suffix = format === 'iife' || format === 'umd' ? `.${format}` : ''\n  return [\n    createChunkFilename(`[name]${suffix}`, jsExtension, dtsExtension),\n    createChunkFilename(\n      `[name]${suffix}${hash ? '-[hash]' : ''}`,\n      jsExtension,\n      dtsExtension,\n    ),\n  ]\n}\n\ntype ChunkFileName = string | ((chunk: PreRenderedChunk) => string)\nfunction createChunkFilename(\n  basename: string,\n  jsExtension: string,\n  dtsExtension?: string,\n): ChunkFileName {\n  if (dtsExtension === undefined) return `${basename}${jsExtension}`\n  return (chunk: PreRenderedChunk) => {\n    return `${basename}${chunk.name.endsWith('.d') ? dtsExtension : jsExtension}`\n  }\n}\n\nexport interface ChunkAddonObject {\n  js?: string\n  css?: string\n  dts?: string\n}\nexport type ChunkAddonFunction = (ctx: {\n  format: Format\n  fileName: string\n}) => ChunkAddonObject | string | undefined\nexport type ChunkAddon = ChunkAddonObject | ChunkAddonFunction | string\n\nexport function resolveChunkAddon(\n  chunkAddon: ChunkAddon | undefined,\n  format: NormalizedFormat,\n  dts?: boolean,\n): AddonFunction | undefined {\n  if (!chunkAddon) return\n\n  return (chunk: RenderedChunk) => {\n    if (!dts && RE_DTS.test(chunk.fileName)) return ''\n\n    if (typeof chunkAddon === 'function') {\n      chunkAddon = chunkAddon({\n        format,\n        fileName: chunk.fileName,\n      })\n    }\n\n    if (typeof chunkAddon === 'string') {\n      return chunkAddon\n    }\n\n    switch (true) {\n      case RE_JS.test(chunk.fileName):\n        return chunkAddon?.js || ''\n      case RE_CSS.test(chunk.fileName):\n        return chunkAddon?.css || ''\n      case RE_DTS.test(chunk.fileName):\n        return chunkAddon?.dts || ''\n      default:\n        return ''\n    }\n  }\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"6ef634bd-62b0-4330-b688-61ee27655fe6","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885159,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/types.d.ts","content":"$ref:7ba545caa33f73fcc111b320976409a1f78e58be1281b8b3291d2fd2f874a8f0","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"47dfe3dd-d32f-4cfd-9097-91798cd869ee","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885159,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/lightningcss.ts","content":"import { esbuildTargetToLightningCSS } from '../utils/lightningcss.ts'\nimport type { ResolvedConfig } from '../config/index.ts'\nimport type { Plugin } from 'rolldown'\n\nexport async function LightningCSSPlugin(\n  options: Pick<ResolvedConfig, 'target'>,\n): Promise<Plugin | undefined> {\n  const LightningCSS = await import('unplugin-lightningcss/rolldown').catch(\n    () => undefined,\n  )\n  if (!LightningCSS) return\n\n  // Converts the user-provided esbuild-format target into a LightningCSS\n  // targets object.\n  const targets = options.target && esbuildTargetToLightningCSS(options.target)\n  if (!targets) return\n\n  return LightningCSS.default({ options: { targets } })\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"8f6969e4-5fb6-4c16-bccb-7f95eca1160e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885159,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/shims.ts","content":"import { shimFile } from '../index.ts'\nimport type { NormalizedFormat, ResolvedConfig } from '../config/index.ts'\n\nexport function getShimsInject(\n  format: NormalizedFormat,\n  platform: ResolvedConfig['platform'],\n): Record<string, [string, string]> | undefined {\n  if (format === 'es' && platform === 'node') {\n    return {\n      __dirname: [shimFile, '__dirname'],\n      __filename: [shimFile, '__filename'],\n    }\n  }\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"796cf30c-8272-4d00-8c97-687cb778cd90","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885159,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/shims.ts","content":"import { shimFile } from '../index.ts'\nimport type { NormalizedFormat, ResolvedConfig } from '../config/index.ts'\n\nexport function getShimsInject(\n  format: NormalizedFormat,\n  platform: ResolvedConfig['platform'],\n): Record<string, [string, string]> | undefined {\n  if (format === 'es' && platform === 'node') {\n    return {\n      __dirname: [shimFile, '__dirname'],\n      __filename: [shimFile, '__filename'],\n    }\n  }\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"4f106cf8-eace-471e-9664-55abff8c0a77","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885159,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/shims.ts","content":"import { shimFile } from '../index.ts'\nimport type { NormalizedFormat, ResolvedConfig } from '../config/index.ts'\n\nexport function getShimsInject(\n  format: NormalizedFormat,\n  platform: ResolvedConfig['platform'],\n): Record<string, [string, string]> | undefined {\n  if (format === 'es' && platform === 'node') {\n    return {\n      __dirname: [shimFile, '__dirname'],\n      __filename: [shimFile, '__filename'],\n    }\n  }\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"4f106cf8-eace-471e-9664-55abff8c0a77","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885160,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/shims.ts","content":"import { shimFile } from '../index.ts'\nimport type { NormalizedFormat, ResolvedConfig } from '../config/index.ts'\n\nexport function getShimsInject(\n  format: NormalizedFormat,\n  platform: ResolvedConfig['platform'],\n): Record<string, [string, string]> | undefined {\n  if (format === 'es' && platform === 'node') {\n    return {\n      __dirname: [shimFile, '__dirname'],\n      __filename: [shimFile, '__filename'],\n    }\n  }\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"e1289f48-3c08-40a3-915a-fdf2d759cd11","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885160,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/output.ts","content":"import { RE_CSS, RE_DTS, RE_JS } from 'rolldown-plugin-dts/filename'\nimport { getPackageType, type PackageType } from '../utils/package.ts'\nimport type {\n  Format,\n  NormalizedFormat,\n  ResolvedConfig,\n} from '../config/index.ts'\nimport type {\n  AddonFunction,\n  InputOptions,\n  PreRenderedChunk,\n  RenderedChunk,\n} from 'rolldown'\n\nexport interface OutExtensionContext {\n  options: InputOptions\n  format: NormalizedFormat\n  /** \"type\" field in project's package.json */\n  pkgType?: PackageType\n}\nexport interface OutExtensionObject {\n  js?: string\n  dts?: string\n}\nexport type OutExtensionFactory = (\n  context: OutExtensionContext,\n) => OutExtensionObject | undefined\n\nfunction resolveJsOutputExtension(\n  packageType: PackageType,\n  format: NormalizedFormat,\n  fixedExtension?: boolean,\n): 'cjs' | 'js' | 'mjs' {\n  switch (format) {\n    case 'es':\n      return !fixedExtension && packageType === 'module' ? 'js' : 'mjs'\n    case 'cjs':\n      return fixedExtension || packageType === 'module' ? 'cjs' : 'js'\n    default:\n      return 'js'\n  }\n}\n\nexport function resolveChunkFilename(\n  { outExtensions, fixedExtension, pkg, hash }: ResolvedConfig,\n  inputOptions: InputOptions,\n  format: NormalizedFormat,\n): [entry: ChunkFileName, chunk: ChunkFileName] {\n  const packageType = getPackageType(pkg)\n\n  let jsExtension: string | undefined\n  let dtsExtension: string | undefined\n\n  if (outExtensions) {\n    const { js, dts } =\n      outExtensions({\n        options: inputOptions,\n        format,\n        pkgType: packageType,\n      }) || {}\n    jsExtension = js\n    dtsExtension = dts\n  }\n\n  jsExtension ??= `.${resolveJsOutputExtension(packageType, format, fixedExtension)}`\n\n  const suffix = format === 'iife' || format === 'umd' ? `.${format}` : ''\n  return [\n    createChunkFilename(`[name]${suffix}`, jsExtension, dtsExtension),\n    createChunkFilename(\n      `[name]${suffix}${hash ? '-[hash]' : ''}`,\n      jsExtension,\n      dtsExtension,\n    ),\n  ]\n}\n\ntype ChunkFileName = string | ((chunk: PreRenderedChunk) => string)\nfunction createChunkFilename(\n  basename: string,\n  jsExtension: string,\n  dtsExtension?: string,\n): ChunkFileName {\n  if (dtsExtension === undefined) return `${basename}${jsExtension}`\n  return (chunk: PreRenderedChunk) => {\n    return `${basename}${chunk.name.endsWith('.d') ? dtsExtension : jsExtension}`\n  }\n}\n\nexport interface ChunkAddonObject {\n  js?: string\n  css?: string\n  dts?: string\n}\nexport type ChunkAddonFunction = (ctx: {\n  format: Format\n  fileName: string\n}) => ChunkAddonObject | string | undefined\nexport type ChunkAddon = ChunkAddonObject | ChunkAddonFunction | string\n\nexport function resolveChunkAddon(\n  chunkAddon: ChunkAddon | undefined,\n  format: NormalizedFormat,\n  dts?: boolean,\n): AddonFunction | undefined {\n  if (!chunkAddon) return\n\n  return (chunk: RenderedChunk) => {\n    if (!dts && RE_DTS.test(chunk.fileName)) return ''\n\n    if (typeof chunkAddon === 'function') {\n      chunkAddon = chunkAddon({\n        format,\n        fileName: chunk.fileName,\n      })\n    }\n\n    if (typeof chunkAddon === 'string') {\n      return chunkAddon\n    }\n\n    switch (true) {\n      case RE_JS.test(chunk.fileName):\n        return chunkAddon?.js || ''\n      case RE_CSS.test(chunk.fileName):\n        return chunkAddon?.css || ''\n      case RE_DTS.test(chunk.fileName):\n        return chunkAddon?.dts || ''\n      default:\n        return ''\n    }\n  }\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"6ef634bd-62b0-4330-b688-61ee27655fe6","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885160,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/output.ts","content":"import { RE_CSS, RE_DTS, RE_JS } from 'rolldown-plugin-dts/filename'\nimport { getPackageType, type PackageType } from '../utils/package.ts'\nimport type {\n  Format,\n  NormalizedFormat,\n  ResolvedConfig,\n} from '../config/index.ts'\nimport type {\n  AddonFunction,\n  InputOptions,\n  PreRenderedChunk,\n  RenderedChunk,\n} from 'rolldown'\n\nexport interface OutExtensionContext {\n  options: InputOptions\n  format: NormalizedFormat\n  /** \"type\" field in project's package.json */\n  pkgType?: PackageType\n}\nexport interface OutExtensionObject {\n  js?: string\n  dts?: string\n}\nexport type OutExtensionFactory = (\n  context: OutExtensionContext,\n) => OutExtensionObject | undefined\n\nfunction resolveJsOutputExtension(\n  packageType: PackageType,\n  format: NormalizedFormat,\n  fixedExtension?: boolean,\n): 'cjs' | 'js' | 'mjs' {\n  switch (format) {\n    case 'es':\n      return !fixedExtension && packageType === 'module' ? 'js' : 'mjs'\n    case 'cjs':\n      return fixedExtension || packageType === 'module' ? 'cjs' : 'js'\n    default:\n      return 'js'\n  }\n}\n\nexport function resolveChunkFilename(\n  { outExtensions, fixedExtension, pkg, hash }: ResolvedConfig,\n  inputOptions: InputOptions,\n  format: NormalizedFormat,\n): [entry: ChunkFileName, chunk: ChunkFileName] {\n  const packageType = getPackageType(pkg)\n\n  let jsExtension: string | undefined\n  let dtsExtension: string | undefined\n\n  if (outExtensions) {\n    const { js, dts } =\n      outExtensions({\n        options: inputOptions,\n        format,\n        pkgType: packageType,\n      }) || {}\n    jsExtension = js\n    dtsExtension = dts\n  }\n\n  jsExtension ??= `.${resolveJsOutputExtension(packageType, format, fixedExtension)}`\n\n  const suffix = format === 'iife' || format === 'umd' ? `.${format}` : ''\n  return [\n    createChunkFilename(`[name]${suffix}`, jsExtension, dtsExtension),\n    createChunkFilename(\n      `[name]${suffix}${hash ? '-[hash]' : ''}`,\n      jsExtension,\n      dtsExtension,\n    ),\n  ]\n}\n\ntype ChunkFileName = string | ((chunk: PreRenderedChunk) => string)\nfunction createChunkFilename(\n  basename: string,\n  jsExtension: string,\n  dtsExtension?: string,\n): ChunkFileName {\n  if (dtsExtension === undefined) return `${basename}${jsExtension}`\n  return (chunk: PreRenderedChunk) => {\n    return `${basename}${chunk.name.endsWith('.d') ? dtsExtension : jsExtension}`\n  }\n}\n\nexport interface ChunkAddonObject {\n  js?: string\n  css?: string\n  dts?: string\n}\nexport type ChunkAddonFunction = (ctx: {\n  format: Format\n  fileName: string\n}) => ChunkAddonObject | string | undefined\nexport type ChunkAddon = ChunkAddonObject | ChunkAddonFunction | string\n\nexport function resolveChunkAddon(\n  chunkAddon: ChunkAddon | undefined,\n  format: NormalizedFormat,\n  dts?: boolean,\n): AddonFunction | undefined {\n  if (!chunkAddon) return\n\n  return (chunk: RenderedChunk) => {\n    if (!dts && RE_DTS.test(chunk.fileName)) return ''\n\n    if (typeof chunkAddon === 'function') {\n      chunkAddon = chunkAddon({\n        format,\n        fileName: chunk.fileName,\n      })\n    }\n\n    if (typeof chunkAddon === 'string') {\n      return chunkAddon\n    }\n\n    switch (true) {\n      case RE_JS.test(chunk.fileName):\n        return chunkAddon?.js || ''\n      case RE_CSS.test(chunk.fileName):\n        return chunkAddon?.css || ''\n      case RE_DTS.test(chunk.fileName):\n        return chunkAddon?.dts || ''\n      default:\n        return ''\n    }\n  }\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"93a34631-a85d-4a41-a238-81d41c269620","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885161,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/output.ts","content":"import { RE_CSS, RE_DTS, RE_JS } from 'rolldown-plugin-dts/filename'\nimport { getPackageType, type PackageType } from '../utils/package.ts'\nimport type {\n  Format,\n  NormalizedFormat,\n  ResolvedConfig,\n} from '../config/index.ts'\nimport type {\n  AddonFunction,\n  InputOptions,\n  PreRenderedChunk,\n  RenderedChunk,\n} from 'rolldown'\n\nexport interface OutExtensionContext {\n  options: InputOptions\n  format: NormalizedFormat\n  /** \"type\" field in project's package.json */\n  pkgType?: PackageType\n}\nexport interface OutExtensionObject {\n  js?: string\n  dts?: string\n}\nexport type OutExtensionFactory = (\n  context: OutExtensionContext,\n) => OutExtensionObject | undefined\n\nfunction resolveJsOutputExtension(\n  packageType: PackageType,\n  format: NormalizedFormat,\n  fixedExtension?: boolean,\n): 'cjs' | 'js' | 'mjs' {\n  switch (format) {\n    case 'es':\n      return !fixedExtension && packageType === 'module' ? 'js' : 'mjs'\n    case 'cjs':\n      return fixedExtension || packageType === 'module' ? 'cjs' : 'js'\n    default:\n      return 'js'\n  }\n}\n\nexport function resolveChunkFilename(\n  { outExtensions, fixedExtension, pkg, hash }: ResolvedConfig,\n  inputOptions: InputOptions,\n  format: NormalizedFormat,\n): [entry: ChunkFileName, chunk: ChunkFileName] {\n  const packageType = getPackageType(pkg)\n\n  let jsExtension: string | undefined\n  let dtsExtension: string | undefined\n\n  if (outExtensions) {\n    const { js, dts } =\n      outExtensions({\n        options: inputOptions,\n        format,\n        pkgType: packageType,\n      }) || {}\n    jsExtension = js\n    dtsExtension = dts\n  }\n\n  jsExtension ??= `.${resolveJsOutputExtension(packageType, format, fixedExtension)}`\n\n  const suffix = format === 'iife' || format === 'umd' ? `.${format}` : ''\n  return [\n    createChunkFilename(`[name]${suffix}`, jsExtension, dtsExtension),\n    createChunkFilename(\n      `[name]${suffix}${hash ? '-[hash]' : ''}`,\n      jsExtension,\n      dtsExtension,\n    ),\n  ]\n}\n\ntype ChunkFileName = string | ((chunk: PreRenderedChunk) => string)\nfunction createChunkFilename(\n  basename: string,\n  jsExtension: string,\n  dtsExtension?: string,\n): ChunkFileName {\n  if (dtsExtension === undefined) return `${basename}${jsExtension}`\n  return (chunk: PreRenderedChunk) => {\n    return `${basename}${chunk.name.endsWith('.d') ? dtsExtension : jsExtension}`\n  }\n}\n\nexport interface ChunkAddonObject {\n  js?: string\n  css?: string\n  dts?: string\n}\nexport type ChunkAddonFunction = (ctx: {\n  format: Format\n  fileName: string\n}) => ChunkAddonObject | string | undefined\nexport type ChunkAddon = ChunkAddonObject | ChunkAddonFunction | string\n\nexport function resolveChunkAddon(\n  chunkAddon: ChunkAddon | undefined,\n  format: NormalizedFormat,\n  dts?: boolean,\n): AddonFunction | undefined {\n  if (!chunkAddon) return\n\n  return (chunk: RenderedChunk) => {\n    if (!dts && RE_DTS.test(chunk.fileName)) return ''\n\n    if (typeof chunkAddon === 'function') {\n      chunkAddon = chunkAddon({\n        format,\n        fileName: chunk.fileName,\n      })\n    }\n\n    if (typeof chunkAddon === 'string') {\n      return chunkAddon\n    }\n\n    switch (true) {\n      case RE_JS.test(chunk.fileName):\n        return chunkAddon?.js || ''\n      case RE_CSS.test(chunk.fileName):\n        return chunkAddon?.css || ''\n      case RE_DTS.test(chunk.fileName):\n        return chunkAddon?.dts || ''\n      default:\n        return ''\n    }\n  }\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"93a34631-a85d-4a41-a238-81d41c269620","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885161,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/output.ts","content":"import { RE_CSS, RE_DTS, RE_JS } from 'rolldown-plugin-dts/filename'\nimport { getPackageType, type PackageType } from '../utils/package.ts'\nimport type {\n  Format,\n  NormalizedFormat,\n  ResolvedConfig,\n} from '../config/index.ts'\nimport type {\n  AddonFunction,\n  InputOptions,\n  PreRenderedChunk,\n  RenderedChunk,\n} from 'rolldown'\n\nexport interface OutExtensionContext {\n  options: InputOptions\n  format: NormalizedFormat\n  /** \"type\" field in project's package.json */\n  pkgType?: PackageType\n}\nexport interface OutExtensionObject {\n  js?: string\n  dts?: string\n}\nexport type OutExtensionFactory = (\n  context: OutExtensionContext,\n) => OutExtensionObject | undefined\n\nfunction resolveJsOutputExtension(\n  packageType: PackageType,\n  format: NormalizedFormat,\n  fixedExtension?: boolean,\n): 'cjs' | 'js' | 'mjs' {\n  switch (format) {\n    case 'es':\n      return !fixedExtension && packageType === 'module' ? 'js' : 'mjs'\n    case 'cjs':\n      return fixedExtension || packageType === 'module' ? 'cjs' : 'js'\n    default:\n      return 'js'\n  }\n}\n\nexport function resolveChunkFilename(\n  { outExtensions, fixedExtension, pkg, hash }: ResolvedConfig,\n  inputOptions: InputOptions,\n  format: NormalizedFormat,\n): [entry: ChunkFileName, chunk: ChunkFileName] {\n  const packageType = getPackageType(pkg)\n\n  let jsExtension: string | undefined\n  let dtsExtension: string | undefined\n\n  if (outExtensions) {\n    const { js, dts } =\n      outExtensions({\n        options: inputOptions,\n        format,\n        pkgType: packageType,\n      }) || {}\n    jsExtension = js\n    dtsExtension = dts\n  }\n\n  jsExtension ??= `.${resolveJsOutputExtension(packageType, format, fixedExtension)}`\n\n  const suffix = format === 'iife' || format === 'umd' ? `.${format}` : ''\n  return [\n    createChunkFilename(`[name]${suffix}`, jsExtension, dtsExtension),\n    createChunkFilename(\n      `[name]${suffix}${hash ? '-[hash]' : ''}`,\n      jsExtension,\n      dtsExtension,\n    ),\n  ]\n}\n\ntype ChunkFileName = string | ((chunk: PreRenderedChunk) => string)\nfunction createChunkFilename(\n  basename: string,\n  jsExtension: string,\n  dtsExtension?: string,\n): ChunkFileName {\n  if (dtsExtension === undefined) return `${basename}${jsExtension}`\n  return (chunk: PreRenderedChunk) => {\n    return `${basename}${chunk.name.endsWith('.d') ? dtsExtension : jsExtension}`\n  }\n}\n\nexport interface ChunkAddonObject {\n  js?: string\n  css?: string\n  dts?: string\n}\nexport type ChunkAddonFunction = (ctx: {\n  format: Format\n  fileName: string\n}) => ChunkAddonObject | string | undefined\nexport type ChunkAddon = ChunkAddonObject | ChunkAddonFunction | string\n\nexport function resolveChunkAddon(\n  chunkAddon: ChunkAddon | undefined,\n  format: NormalizedFormat,\n  dts?: boolean,\n): AddonFunction | undefined {\n  if (!chunkAddon) return\n\n  return (chunk: RenderedChunk) => {\n    if (!dts && RE_DTS.test(chunk.fileName)) return ''\n\n    if (typeof chunkAddon === 'function') {\n      chunkAddon = chunkAddon({\n        format,\n        fileName: chunk.fileName,\n      })\n    }\n\n    if (typeof chunkAddon === 'string') {\n      return chunkAddon\n    }\n\n    switch (true) {\n      case RE_JS.test(chunk.fileName):\n        return chunkAddon?.js || ''\n      case RE_CSS.test(chunk.fileName):\n        return chunkAddon?.css || ''\n      case RE_DTS.test(chunk.fileName):\n        return chunkAddon?.dts || ''\n      default:\n        return ''\n    }\n  }\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"6ebdf770-2578-4811-a7c0-44c90e3ba344","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885162,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/lightningcss.ts","content":"import { esbuildTargetToLightningCSS } from '../utils/lightningcss.ts'\nimport type { ResolvedConfig } from '../config/index.ts'\nimport type { Plugin } from 'rolldown'\n\nexport async function LightningCSSPlugin(\n  options: Pick<ResolvedConfig, 'target'>,\n): Promise<Plugin | undefined> {\n  const LightningCSS = await import('unplugin-lightningcss/rolldown').catch(\n    () => undefined,\n  )\n  if (!LightningCSS) return\n\n  // Converts the user-provided esbuild-format target into a LightningCSS\n  // targets object.\n  const targets = options.target && esbuildTargetToLightningCSS(options.target)\n  if (!targets) return\n\n  return LightningCSS.default({ options: { targets } })\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"8f6969e4-5fb6-4c16-bccb-7f95eca1160e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885162,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/lightningcss.ts","content":"import { esbuildTargetToLightningCSS } from '../utils/lightningcss.ts'\nimport type { ResolvedConfig } from '../config/index.ts'\nimport type { Plugin } from 'rolldown'\n\nexport async function LightningCSSPlugin(\n  options: Pick<ResolvedConfig, 'target'>,\n): Promise<Plugin | undefined> {\n  const LightningCSS = await import('unplugin-lightningcss/rolldown').catch(\n    () => undefined,\n  )\n  if (!LightningCSS) return\n\n  // Converts the user-provided esbuild-format target into a LightningCSS\n  // targets object.\n  const targets = options.target && esbuildTargetToLightningCSS(options.target)\n  if (!targets) return\n\n  return LightningCSS.default({ options: { targets } })\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"27c8c3c0-f398-44e7-9d4a-50c5b6bd44a0","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885162,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/lightningcss.ts","content":"import { esbuildTargetToLightningCSS } from '../utils/lightningcss.ts'\nimport type { ResolvedConfig } from '../config/index.ts'\nimport type { Plugin } from 'rolldown'\n\nexport async function LightningCSSPlugin(\n  options: Pick<ResolvedConfig, 'target'>,\n): Promise<Plugin | undefined> {\n  const LightningCSS = await import('unplugin-lightningcss/rolldown').catch(\n    () => undefined,\n  )\n  if (!LightningCSS) return\n\n  // Converts the user-provided esbuild-format target into a LightningCSS\n  // targets object.\n  const targets = options.target && esbuildTargetToLightningCSS(options.target)\n  if (!targets) return\n\n  return LightningCSS.default({ options: { targets } })\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"27c8c3c0-f398-44e7-9d4a-50c5b6bd44a0","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885162,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/lightningcss.ts","content":"import { esbuildTargetToLightningCSS } from '../utils/lightningcss.ts'\nimport type { ResolvedConfig } from '../config/index.ts'\nimport type { Plugin } from 'rolldown'\n\nexport async function LightningCSSPlugin(\n  options: Pick<ResolvedConfig, 'target'>,\n): Promise<Plugin | undefined> {\n  const LightningCSS = await import('unplugin-lightningcss/rolldown').catch(\n    () => undefined,\n  )\n  if (!LightningCSS) return\n\n  // Converts the user-provided esbuild-format target into a LightningCSS\n  // targets object.\n  const targets = options.target && esbuildTargetToLightningCSS(options.target)\n  if (!targets) return\n\n  return LightningCSS.default({ options: { targets } })\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"a94ec6e2-1ccd-4418-a1b1-822e5392e3b4","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885162,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/shims.ts","content":"import { shimFile } from '../index.ts'\nimport type { NormalizedFormat, ResolvedConfig } from '../config/index.ts'\n\nexport function getShimsInject(\n  format: NormalizedFormat,\n  platform: ResolvedConfig['platform'],\n): Record<string, [string, string]> | undefined {\n  if (format === 'es' && platform === 'node') {\n    return {\n      __dirname: [shimFile, '__dirname'],\n      __filename: [shimFile, '__filename'],\n    }\n  }\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"e1289f48-3c08-40a3-915a-fdf2d759cd11","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885163,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/types.d.ts","content":"$ref:7ba545caa33f73fcc111b320976409a1f78e58be1281b8b3291d2fd2f874a8f0","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"9789f1bd-1303-4f0e-a7f8-a6558a1ba5f5","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885163,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/shims.ts","module_request":"../index.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"5edc5aee-43f8-410b-a84a-006b9b0a6d19","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885163,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"5edc5aee-43f8-410b-a84a-006b9b0a6d19","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885163,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/shims.ts","module_request":"../index.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"58ba7543-85c0-446e-a5b3-568f3f1c45b8","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885163,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/publint.ts","content":"import path from 'node:path'\nimport process from 'node:process'\nimport { dim } from 'ansis'\nimport Debug from 'debug'\nimport { prettyName } from '../utils/logger.ts'\nimport type { ResolvedConfig } from '../config/index.ts'\n\nconst debug = Debug('tsdown:publint')\n\nexport async function publint(options: ResolvedConfig): Promise<void> {\n  if (!options.publint) return\n  if (!options.pkg) {\n    options.logger.warn(\n      prettyName(options.name),\n      'publint is enabled but package.json is not found',\n    )\n    return\n  }\n\n  const t = performance.now()\n  debug('Running publint')\n  const { publint } = await import('publint')\n  const { formatMessage } = await import('publint/utils')\n  const { messages } = await publint({\n    ...(options.publint === true ? {} : options.publint),\n    pkgDir: path.dirname(options.pkg.packageJsonPath),\n  })\n  debug('Found %d issues', messages.length)\n\n  if (!messages.length) {\n    options.logger.success(\n      prettyName(options.name),\n      `No publint issues found`,\n      dim`(${Math.round(performance.now() - t)}ms)`,\n    )\n  }\n  let hasError = false\n  for (const message of messages) {\n    hasError ||= message.type === 'error'\n    const formattedMessage = formatMessage(message, options.pkg)\n    const logType = (\n      { error: 'error', warning: 'warn', suggestion: 'info' } as const\n    )[message.type]\n    options.logger[logType](prettyName(options.name), formattedMessage)\n  }\n  if (hasError) {\n    debug('Found errors, setting exit code to 1')\n    process.exitCode = 1\n  }\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"51e9d2c4-9546-418b-a2d1-a87aa92140c3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885163,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/lightningcss.ts","content":"import { esbuildTargetToLightningCSS } from '../utils/lightningcss.ts'\nimport type { ResolvedConfig } from '../config/index.ts'\nimport type { Plugin } from 'rolldown'\n\nexport async function LightningCSSPlugin(\n  options: Pick<ResolvedConfig, 'target'>,\n): Promise<Plugin | undefined> {\n  const LightningCSS = await import('unplugin-lightningcss/rolldown').catch(\n    () => undefined,\n  )\n  if (!LightningCSS) return\n\n  // Converts the user-provided esbuild-format target into a LightningCSS\n  // targets object.\n  const targets = options.target && esbuildTargetToLightningCSS(options.target)\n  if (!targets) return\n\n  return LightningCSS.default({ options: { targets } })\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"a94ec6e2-1ccd-4418-a1b1-822e5392e3b4","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885164,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/publint.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"92f01d23-d49e-438b-862a-d22a98a7edab","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885164,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"92f01d23-d49e-438b-862a-d22a98a7edab","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885164,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/publint.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"3e2b7e43-2f69-4a20-aaa2-475d5c320fec","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885164,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/lightningcss.ts","module_request":"../utils/lightningcss.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"86dd541f-4b96-4f6d-816b-62d3291d8860","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885164,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"86dd541f-4b96-4f6d-816b-62d3291d8860","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885164,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/lightningcss.ts","module_request":"../utils/lightningcss.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"706ada99-1831-4948-90db-4bed75db9de4","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885165,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/lightningcss.ts","module_request":"unplugin-lightningcss/rolldown","import_kind":"dynamic-import","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"3534d3d8-0297-40de-82af-c4b0ec063466","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885165,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"3534d3d8-0297-40de-82af-c4b0ec063466","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885165,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/lightningcss.ts","module_request":"unplugin-lightningcss/rolldown","import_kind":"dynamic-import","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"edfb8a5f-9ab0-4b88-8171-6452dc97f4bb","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885165,"action":"HookResolveIdCallEnd","resolved_id":"rolldown","is_external":true,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"9f78abd1-d3fb-495b-949a-c5f3dfa37367","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885165,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/config.ts","content":"import path from 'node:path'\nimport process from 'node:process'\nimport { pathToFileURL } from 'node:url'\nimport { underline } from 'ansis'\nimport { loadConfig } from 'unconfig'\nimport { fsStat } from '../utils/fs.ts'\nimport { toArray } from '../utils/general.ts'\nimport { globalLogger } from '../utils/logger.ts'\nimport type { InlineConfig, UserConfig, UserConfigExport } from './types.ts'\nimport type {\n  ConfigEnv,\n  UserConfig as ViteUserConfig,\n  UserConfigExport as ViteUserConfigExport,\n} from 'vite'\n\nexport async function loadViteConfig(\n  prefix: string,\n  cwd: string,\n): Promise<ViteUserConfig | undefined> {\n  const {\n    config,\n    sources: [source],\n  } = await loadConfig<ViteUserConfigExport>({\n    sources: [\n      {\n        files: `${prefix}.config`,\n        extensions: ['ts', 'mts', 'cts', 'js', 'mjs', 'cjs', 'json', ''],\n      },\n    ],\n    cwd,\n    defaults: {},\n  })\n  if (!source) return\n  globalLogger.info(`Using Vite config: ${underline(source)}`)\n\n  const resolved = await config\n  if (typeof resolved === 'function') {\n    return resolved({\n      command: 'build',\n      mode: 'production',\n    } satisfies ConfigEnv)\n  }\n  return resolved\n}\n\nlet loaded = false\n\nexport async function loadConfigFile(\n  inlineConfig: InlineConfig,\n  workspace?: string,\n): Promise<{\n  configs: UserConfig[]\n  file?: string\n}> {\n  let cwd = inlineConfig.cwd || process.cwd()\n  let overrideConfig = false\n\n  let { config: filePath } = inlineConfig\n  if (filePath === false) return { configs: [{}] }\n\n  if (typeof filePath === 'string') {\n    const stats = await fsStat(filePath)\n    if (stats) {\n      const resolved = path.resolve(filePath)\n      if (stats.isFile()) {\n        overrideConfig = true\n        filePath = resolved\n        cwd = path.dirname(filePath)\n      } else if (stats.isDirectory()) {\n        cwd = resolved\n      }\n    }\n  }\n\n  let isNative = false\n  if (!loaded) {\n    if (!inlineConfig.configLoader || inlineConfig.configLoader === 'auto') {\n      isNative = !!(\n        process.features.typescript ||\n        process.versions.bun ||\n        process.versions.deno\n      )\n    } else if (inlineConfig.configLoader === 'native') {\n      isNative = true\n    }\n  }\n\n  let { config, sources } = await loadConfig\n    .async<UserConfigExport>({\n      sources: overrideConfig\n        ? [{ files: filePath as string, extensions: [] }]\n        : [\n            {\n              files: 'tsdown.config',\n              extensions: ['ts', 'mts', 'cts', 'js', 'mjs', 'cjs', 'json', ''],\n              parser:\n                inlineConfig.configLoader === 'unrun'\n                  ? unrunImport\n                  : isNative\n                    ? nativeImport\n                    : 'auto',\n            },\n            {\n              files: 'package.json',\n              extensions: [],\n              rewrite: (config: any) => config?.tsdown,\n            },\n          ],\n      cwd,\n      stopAt: workspace && path.dirname(workspace),\n      defaults: {},\n    })\n    .finally(() => (loaded = true))\n\n  config = await config\n  if (typeof config === 'function') {\n    config = await config(inlineConfig)\n  }\n  config = toArray(config)\n  if (config.length === 0) {\n    config.push({})\n  }\n\n  const file = sources[0]\n  if (file) {\n    globalLogger.info(`Using tsdown config: ${underline(file)}`)\n  }\n  return {\n    configs: config,\n    file,\n  }\n}\n\nasync function nativeImport(id: string) {\n  const mod = await import(pathToFileURL(id).href).catch((error) => {\n    const cannotFindModule = error?.message?.includes?.('Cannot find module')\n    if (cannotFindModule) {\n      const configError = new Error(\n        `Failed to load the config file. Try setting the --config-loader CLI flag to \\`unconfig\\`.\\n\\n${error.message}`,\n      )\n      configError.cause = error\n      throw configError\n    } else {\n      throw error\n    }\n  })\n  const config = mod.default || mod\n  return config\n}\n\nasync function unrunImport(id: string) {\n  const { unrun } = await import('unrun')\n  const { module } = await unrun({\n    path: pathToFileURL(id).href,\n  }).catch((error) => {\n    const cannotFindModule = error?.message?.includes?.('Cannot find module')\n    if (cannotFindModule) {\n      const configError = new Error(\n        `Failed to load the config file. \\`unrun\\` is experimental; try setting the --config-loader CLI flag to \\`unconfig\\` instead.\\n\\n${error.message}`,\n      )\n      configError.cause = error\n      throw configError\n    } else {\n      throw error\n    }\n  })\n  return module\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"44734011-6df9-4637-880d-3c7aab055e2a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885166,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"58ba7543-85c0-446e-a5b3-568f3f1c45b8","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885166,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/shims.ts","module_request":"../index.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"5eb94f0f-4d87-446d-b54a-e42a36993f69","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885166,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"706ada99-1831-4948-90db-4bed75db9de4","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885166,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/lightningcss.ts","module_request":"../utils/lightningcss.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"680165b1-b32b-4b42-986c-7c8d49e35b3d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885166,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"edfb8a5f-9ab0-4b88-8171-6452dc97f4bb","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885166,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/types.d.ts","content":"import { AttwOptions } from \"../features/attw.ts\";\nimport { CopyEntry, CopyOptions, CopyOptionsFn } from \"../features/copy.ts\";\nimport { ExportsOptions, TsdownChunks } from \"../features/exports.ts\";\nimport { BuildContext, RolldownContext, TsdownHooks } from \"../features/hooks.ts\";\nimport { ChunkAddon, ChunkAddonFunction, ChunkAddonObject, OutExtensionContext, OutExtensionFactory, OutExtensionObject } from \"../features/output.ts\";\nimport { ReportOptions } from \"../features/report.ts\";\nimport { Logger, LogLevel } from \"../utils/logger.ts\";\nimport { PackageType } from \"../utils/package.ts\";\nimport { Arrayable, Awaitable, MarkPartial, Overwrite } from \"../utils/types.ts\";\nimport { Hookable } from \"hookable\";\nimport { PackageJson } from \"pkg-types\";\nimport { Options as PublintOptions } from \"publint\";\nimport { ExternalOption, InputOption, InputOptions, InternalModuleFormat, MinifyOptions, ModuleFormat, ModuleTypes, OutputOptions, TreeshakingOptions } from \"rolldown\";\nimport { Options as DtsOptions } from \"rolldown-plugin-dts\";\nimport { Options as UnusedOptions } from \"unplugin-unused\";\nexport var Sourcemap = [23, () => []];\nexport var Format = [24, () => [ModuleFormat]];\nexport var NormalizedFormat = [25, () => [InternalModuleFormat]];\nexport { AttwOptions, BuildContext, ChunkAddon, ChunkAddonFunction, ChunkAddonObject, CopyEntry, CopyOptions, CopyOptionsFn, DtsOptions, ExportsOptions, OutExtensionContext, OutExtensionFactory, OutExtensionObject, PackageType, PublintOptions, ReportOptions, RolldownContext, TreeshakingOptions, TsdownChunks, TsdownHooks, UnusedOptions };\nexport var Workspace = [26, () => [Arrayable, Arrayable]];\nexport var NoExternalFn = [27, () => []];\nexport var UserConfig = [28, () => [InputOption, ExternalOption, RegExp, Arrayable, NoExternalFn, RegExp, Arrayable, Record, Record, Record, TreeshakingOptions, ModuleTypes, InputOptions, InputOptions, InputOptions, NormalizedFormat, InputOptions, Awaitable, Format, Format, Sourcemap, MinifyOptions, ChunkAddon, ChunkAddon, OutExtensionFactory, OutputOptions, OutputOptions, NormalizedFormat, OutputOptions, Awaitable, LogLevel, Logger, Arrayable, RegExp, Arrayable, ResolvedConfig, AbortSignal, Promise, DtsOptions, UnusedOptions, PublintOptions, AttwOptions, ReportOptions, ExportsOptions, CopyOptions, CopyOptionsFn, CopyOptions, CopyOptionsFn, TsdownHooks, Partial, TsdownHooks, Hookable, Awaitable, Workspace, Arrayable]];\nexport var InlineConfig = [29, () => [RegExp, UserConfig]];\nexport var UserConfigFn = [30, () => [InlineConfig, UserConfig, Arrayable, Awaitable]];\nexport var UserConfigExport = [31, () => [UserConfig, Arrayable, UserConfigFn, Awaitable]];\nexport var ResolvedConfig = [32, () => [UserConfig, Omit, MarkPartial, NormalizedFormat, DtsOptions, ReportOptions, PackageJson, ExportsOptions, Logger, RegExp, Array, NoExternalFn, RegExp, Array, Overwrite]];","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"9789f1bd-1303-4f0e-a7f8-a6558a1ba5f5","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885167,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/types.d.ts","content":"import { AttwOptions } from \"../features/attw.ts\";\nimport { CopyEntry, CopyOptions, CopyOptionsFn } from \"../features/copy.ts\";\nimport { ExportsOptions, TsdownChunks } from \"../features/exports.ts\";\nimport { BuildContext, RolldownContext, TsdownHooks } from \"../features/hooks.ts\";\nimport { ChunkAddon, ChunkAddonFunction, ChunkAddonObject, OutExtensionContext, OutExtensionFactory, OutExtensionObject } from \"../features/output.ts\";\nimport { ReportOptions } from \"../features/report.ts\";\nimport { Logger, LogLevel } from \"../utils/logger.ts\";\nimport { PackageType } from \"../utils/package.ts\";\nimport { Arrayable, Awaitable, MarkPartial, Overwrite } from \"../utils/types.ts\";\nimport { Hookable } from \"hookable\";\nimport { PackageJson } from \"pkg-types\";\nimport { Options as PublintOptions } from \"publint\";\nimport { ExternalOption, InputOption, InputOptions, InternalModuleFormat, MinifyOptions, ModuleFormat, ModuleTypes, OutputOptions, TreeshakingOptions } from \"rolldown\";\nimport { Options as DtsOptions } from \"rolldown-plugin-dts\";\nimport { Options as UnusedOptions } from \"unplugin-unused\";\nexport var Sourcemap = [23, () => []];\nexport var Format = [24, () => [ModuleFormat]];\nexport var NormalizedFormat = [25, () => [InternalModuleFormat]];\nexport { AttwOptions, BuildContext, ChunkAddon, ChunkAddonFunction, ChunkAddonObject, CopyEntry, CopyOptions, CopyOptionsFn, DtsOptions, ExportsOptions, OutExtensionContext, OutExtensionFactory, OutExtensionObject, PackageType, PublintOptions, ReportOptions, RolldownContext, TreeshakingOptions, TsdownChunks, TsdownHooks, UnusedOptions };\nexport var Workspace = [26, () => [Arrayable, Arrayable]];\nexport var NoExternalFn = [27, () => []];\nexport var UserConfig = [28, () => [InputOption, ExternalOption, RegExp, Arrayable, NoExternalFn, RegExp, Arrayable, Record, Record, Record, TreeshakingOptions, ModuleTypes, InputOptions, InputOptions, InputOptions, NormalizedFormat, InputOptions, Awaitable, Format, Format, Sourcemap, MinifyOptions, ChunkAddon, ChunkAddon, OutExtensionFactory, OutputOptions, OutputOptions, NormalizedFormat, OutputOptions, Awaitable, LogLevel, Logger, Arrayable, RegExp, Arrayable, ResolvedConfig, AbortSignal, Promise, DtsOptions, UnusedOptions, PublintOptions, AttwOptions, ReportOptions, ExportsOptions, CopyOptions, CopyOptionsFn, CopyOptions, CopyOptionsFn, TsdownHooks, Partial, TsdownHooks, Hookable, Awaitable, Workspace, Arrayable]];\nexport var InlineConfig = [29, () => [RegExp, UserConfig]];\nexport var UserConfigFn = [30, () => [InlineConfig, UserConfig, Arrayable, Awaitable]];\nexport var UserConfigExport = [31, () => [UserConfig, Arrayable, UserConfigFn, Awaitable]];\nexport var ResolvedConfig = [32, () => [UserConfig, Omit, MarkPartial, NormalizedFormat, DtsOptions, ReportOptions, PackageJson, ExportsOptions, Logger, RegExp, Array, NoExternalFn, RegExp, Array, Overwrite]];","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"6e68cbd2-94b9-48ff-9c41-3332c5806b01","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885167,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"5eb94f0f-4d87-446d-b54a-e42a36993f69","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885167,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/output.ts","content":"import { RE_CSS, RE_DTS, RE_JS } from 'rolldown-plugin-dts/filename'\nimport { getPackageType, type PackageType } from '../utils/package.ts'\nimport type {\n  Format,\n  NormalizedFormat,\n  ResolvedConfig,\n} from '../config/index.ts'\nimport type {\n  AddonFunction,\n  InputOptions,\n  PreRenderedChunk,\n  RenderedChunk,\n} from 'rolldown'\n\nexport interface OutExtensionContext {\n  options: InputOptions\n  format: NormalizedFormat\n  /** \"type\" field in project's package.json */\n  pkgType?: PackageType\n}\nexport interface OutExtensionObject {\n  js?: string\n  dts?: string\n}\nexport type OutExtensionFactory = (\n  context: OutExtensionContext,\n) => OutExtensionObject | undefined\n\nfunction resolveJsOutputExtension(\n  packageType: PackageType,\n  format: NormalizedFormat,\n  fixedExtension?: boolean,\n): 'cjs' | 'js' | 'mjs' {\n  switch (format) {\n    case 'es':\n      return !fixedExtension && packageType === 'module' ? 'js' : 'mjs'\n    case 'cjs':\n      return fixedExtension || packageType === 'module' ? 'cjs' : 'js'\n    default:\n      return 'js'\n  }\n}\n\nexport function resolveChunkFilename(\n  { outExtensions, fixedExtension, pkg, hash }: ResolvedConfig,\n  inputOptions: InputOptions,\n  format: NormalizedFormat,\n): [entry: ChunkFileName, chunk: ChunkFileName] {\n  const packageType = getPackageType(pkg)\n\n  let jsExtension: string | undefined\n  let dtsExtension: string | undefined\n\n  if (outExtensions) {\n    const { js, dts } =\n      outExtensions({\n        options: inputOptions,\n        format,\n        pkgType: packageType,\n      }) || {}\n    jsExtension = js\n    dtsExtension = dts\n  }\n\n  jsExtension ??= `.${resolveJsOutputExtension(packageType, format, fixedExtension)}`\n\n  const suffix = format === 'iife' || format === 'umd' ? `.${format}` : ''\n  return [\n    createChunkFilename(`[name]${suffix}`, jsExtension, dtsExtension),\n    createChunkFilename(\n      `[name]${suffix}${hash ? '-[hash]' : ''}`,\n      jsExtension,\n      dtsExtension,\n    ),\n  ]\n}\n\ntype ChunkFileName = string | ((chunk: PreRenderedChunk) => string)\nfunction createChunkFilename(\n  basename: string,\n  jsExtension: string,\n  dtsExtension?: string,\n): ChunkFileName {\n  if (dtsExtension === undefined) return `${basename}${jsExtension}`\n  return (chunk: PreRenderedChunk) => {\n    return `${basename}${chunk.name.endsWith('.d') ? dtsExtension : jsExtension}`\n  }\n}\n\nexport interface ChunkAddonObject {\n  js?: string\n  css?: string\n  dts?: string\n}\nexport type ChunkAddonFunction = (ctx: {\n  format: Format\n  fileName: string\n}) => ChunkAddonObject | string | undefined\nexport type ChunkAddon = ChunkAddonObject | ChunkAddonFunction | string\n\nexport function resolveChunkAddon(\n  chunkAddon: ChunkAddon | undefined,\n  format: NormalizedFormat,\n  dts?: boolean,\n): AddonFunction | undefined {\n  if (!chunkAddon) return\n\n  return (chunk: RenderedChunk) => {\n    if (!dts && RE_DTS.test(chunk.fileName)) return ''\n\n    if (typeof chunkAddon === 'function') {\n      chunkAddon = chunkAddon({\n        format,\n        fileName: chunk.fileName,\n      })\n    }\n\n    if (typeof chunkAddon === 'string') {\n      return chunkAddon\n    }\n\n    switch (true) {\n      case RE_JS.test(chunk.fileName):\n        return chunkAddon?.js || ''\n      case RE_CSS.test(chunk.fileName):\n        return chunkAddon?.css || ''\n      case RE_DTS.test(chunk.fileName):\n        return chunkAddon?.dts || ''\n      default:\n        return ''\n    }\n  }\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"6ebdf770-2578-4811-a7c0-44c90e3ba344","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885168,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/shims.ts","module_request":"../index.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"52d8d43b-ef22-4361-9bed-8b96c2a0aa02","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885168,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/types.d.ts","content":"import { AttwOptions } from \"../features/attw.ts\";\nimport { CopyEntry, CopyOptions, CopyOptionsFn } from \"../features/copy.ts\";\nimport { ExportsOptions, TsdownChunks } from \"../features/exports.ts\";\nimport { BuildContext, RolldownContext, TsdownHooks } from \"../features/hooks.ts\";\nimport { ChunkAddon, ChunkAddonFunction, ChunkAddonObject, OutExtensionContext, OutExtensionFactory, OutExtensionObject } from \"../features/output.ts\";\nimport { ReportOptions } from \"../features/report.ts\";\nimport { Logger, LogLevel } from \"../utils/logger.ts\";\nimport { PackageType } from \"../utils/package.ts\";\nimport { Arrayable, Awaitable, MarkPartial, Overwrite } from \"../utils/types.ts\";\nimport { Hookable } from \"hookable\";\nimport { PackageJson } from \"pkg-types\";\nimport { Options as PublintOptions } from \"publint\";\nimport { ExternalOption, InputOption, InputOptions, InternalModuleFormat, MinifyOptions, ModuleFormat, ModuleTypes, OutputOptions, TreeshakingOptions } from \"rolldown\";\nimport { Options as DtsOptions } from \"rolldown-plugin-dts\";\nimport { Options as UnusedOptions } from \"unplugin-unused\";\nexport var Sourcemap = [23, () => []];\nexport var Format = [24, () => [ModuleFormat]];\nexport var NormalizedFormat = [25, () => [InternalModuleFormat]];\nexport { AttwOptions, BuildContext, ChunkAddon, ChunkAddonFunction, ChunkAddonObject, CopyEntry, CopyOptions, CopyOptionsFn, DtsOptions, ExportsOptions, OutExtensionContext, OutExtensionFactory, OutExtensionObject, PackageType, PublintOptions, ReportOptions, RolldownContext, TreeshakingOptions, TsdownChunks, TsdownHooks, UnusedOptions };\nexport var Workspace = [26, () => [Arrayable, Arrayable]];\nexport var NoExternalFn = [27, () => []];\nexport var UserConfig = [28, () => [InputOption, ExternalOption, RegExp, Arrayable, NoExternalFn, RegExp, Arrayable, Record, Record, Record, TreeshakingOptions, ModuleTypes, InputOptions, InputOptions, InputOptions, NormalizedFormat, InputOptions, Awaitable, Format, Format, Sourcemap, MinifyOptions, ChunkAddon, ChunkAddon, OutExtensionFactory, OutputOptions, OutputOptions, NormalizedFormat, OutputOptions, Awaitable, LogLevel, Logger, Arrayable, RegExp, Arrayable, ResolvedConfig, AbortSignal, Promise, DtsOptions, UnusedOptions, PublintOptions, AttwOptions, ReportOptions, ExportsOptions, CopyOptions, CopyOptionsFn, CopyOptions, CopyOptionsFn, TsdownHooks, Partial, TsdownHooks, Hookable, Awaitable, Workspace, Arrayable]];\nexport var InlineConfig = [29, () => [RegExp, UserConfig]];\nexport var UserConfigFn = [30, () => [InlineConfig, UserConfig, Arrayable, Awaitable]];\nexport var UserConfigExport = [31, () => [UserConfig, Arrayable, UserConfigFn, Awaitable]];\nexport var ResolvedConfig = [32, () => [UserConfig, Omit, MarkPartial, NormalizedFormat, DtsOptions, ReportOptions, PackageJson, ExportsOptions, Logger, RegExp, Array, NoExternalFn, RegExp, Array, Overwrite]];","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"6e68cbd2-94b9-48ff-9c41-3332c5806b01","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885168,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/output.ts","module_request":"rolldown-plugin-dts/filename","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"b5f4585e-588f-4ffe-a393-e5bb1372376b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885168,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/types.d.ts","module_request":"../features/attw.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"3c5619c9-a6ea-4bd0-80fa-a45ad5bb780f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885168,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"3c5619c9-a6ea-4bd0-80fa-a45ad5bb780f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885169,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/types.d.ts","module_request":"../features/attw.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"8f7fc4c5-235f-4521-9ddd-5b52cf7aa453","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885169,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/types.d.ts","module_request":"../features/copy.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"339e18f0-0bb0-487e-a6e1-307ad2cfaeee","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885169,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"339e18f0-0bb0-487e-a6e1-307ad2cfaeee","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885169,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/types.d.ts","module_request":"../features/copy.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"af5e21ef-6b9c-44bd-b7b9-5314ae7f2cb4","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885169,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/types.d.ts","module_request":"../features/exports.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"17c95a66-3e05-4307-b2bb-8f1768e3fe81","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885169,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"17c95a66-3e05-4307-b2bb-8f1768e3fe81","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885169,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/types.d.ts","module_request":"../features/exports.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"fc3066e1-e50e-45be-8256-c96149d31937","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885169,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/types.d.ts","module_request":"../features/hooks.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"1fc0acb7-208b-405a-b1a3-d8d448cb0eb9","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885170,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"1fc0acb7-208b-405a-b1a3-d8d448cb0eb9","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885170,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/types.d.ts","module_request":"../features/hooks.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"48357bea-b273-4383-b27a-f6228d71372f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885170,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/types.d.ts","module_request":"../features/output.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"1303b3bc-12bc-4c3b-8a51-5cadc577f479","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885170,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"1303b3bc-12bc-4c3b-8a51-5cadc577f479","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885170,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/types.d.ts","module_request":"../features/output.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"315a61ea-9a1f-48ed-b603-dc6be514f72e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885170,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/types.d.ts","module_request":"../features/report.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"3a276928-120b-4dc1-8758-f2162553fb5f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885170,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"3a276928-120b-4dc1-8758-f2162553fb5f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885170,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/types.d.ts","module_request":"../features/report.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"eab8c382-6cfd-48fb-ad17-9f609ce01fdf","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885171,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/types.d.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"7e58f488-a504-4d66-9f35-9d50c644fb35","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885171,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"7e58f488-a504-4d66-9f35-9d50c644fb35","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885171,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/types.d.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"c9fa9af7-29ed-4779-9751-72dd2539ab77","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885171,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/types.d.ts","module_request":"../utils/package.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"ec7741d6-aca9-48eb-be94-b3f33f6408eb","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885171,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"ec7741d6-aca9-48eb-be94-b3f33f6408eb","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885171,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/types.d.ts","module_request":"../utils/package.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"5bb8a174-8e30-40bd-8f5b-0f6544a58548","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885171,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/types.d.ts","module_request":"../utils/types.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"2918bab7-c294-4d8b-8c7a-47c456730a8c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885172,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"2918bab7-c294-4d8b-8c7a-47c456730a8c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885172,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/types.d.ts","module_request":"../utils/types.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"d0fc26eb-945e-40ec-9fb6-0f0ab48935af","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885172,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/types.d.ts","module_request":"hookable","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"d22a6fba-00c7-4a79-a365-31d78c42505c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885172,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"d22a6fba-00c7-4a79-a365-31d78c42505c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885172,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/types.d.ts","module_request":"hookable","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"678831f3-17a2-417c-aa4d-527cb0833a91","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885172,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/types.d.ts","module_request":"pkg-types","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"1cd25290-472a-4346-b345-c15031225512","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885172,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"1cd25290-472a-4346-b345-c15031225512","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885172,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/types.d.ts","module_request":"pkg-types","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"73d794bf-0952-4448-9a80-a926ad447234","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885173,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/types.d.ts","module_request":"publint","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"72dc055d-ea71-48a5-ad1d-9fb99f6e7771","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885173,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"72dc055d-ea71-48a5-ad1d-9fb99f6e7771","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885173,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/types.d.ts","module_request":"publint","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"30626e64-1bdf-4dc2-a541-636ece81228a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885173,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/types.d.ts","module_request":"rolldown","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"56413409-3a7b-4294-87fa-1f11a4d2bcef","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885173,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"56413409-3a7b-4294-87fa-1f11a4d2bcef","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885173,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/types.d.ts","module_request":"rolldown","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"04392aca-9bf1-447e-88f3-1462248b4055","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885173,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/types.d.ts","module_request":"rolldown-plugin-dts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"5cbaf3ee-f555-4464-bc4c-a12362936fab","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885174,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"5cbaf3ee-f555-4464-bc4c-a12362936fab","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885174,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/types.d.ts","module_request":"rolldown-plugin-dts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"2de1af0c-1123-4696-9c32-2bd5ff86a5e2","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885174,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/types.d.ts","module_request":"unplugin-unused","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"f9f1d7d3-ce02-49e4-a3b6-d1fad8c13035","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885174,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"f9f1d7d3-ce02-49e4-a3b6-d1fad8c13035","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885174,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/types.d.ts","module_request":"unplugin-unused","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"c391d3a9-3e1d-41ec-bf29-4492beec6642","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885174,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"52d8d43b-ef22-4361-9bed-8b96c2a0aa02","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885174,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/shims.ts","module_request":"../index.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"34337ba5-b3f8-43db-a68b-a1f521c9a525","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885174,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"34337ba5-b3f8-43db-a68b-a1f521c9a525","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885175,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"b5f4585e-588f-4ffe-a393-e5bb1372376b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885175,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/output.ts","module_request":"rolldown-plugin-dts/filename","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"fd994bda-dca4-4235-8637-ec1cd28ff6ed","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885175,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/tsconfig.ts","plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"a24cec05-c2ad-4828-9e5e-54ee8e22f999","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885175,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/tsconfig.ts","content":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"a24cec05-c2ad-4828-9e5e-54ee8e22f999","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885176,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/tsconfig.ts","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"d5288401-7cbc-49ff-86d6-ca6895e4710b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885176,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/tsconfig.ts","content":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"d5288401-7cbc-49ff-86d6-ca6895e4710b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885177,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/tsconfig.ts","plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"626dde9e-69a7-453a-94c7-d1dd685d17fc","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885177,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/tsconfig.ts","content":null,"plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"626dde9e-69a7-453a-94c7-d1dd685d17fc","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885177,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/output.ts","module_request":"../utils/package.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"f618b49a-b815-43b3-adba-d818920b252d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885178,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"f618b49a-b815-43b3-adba-d818920b252d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885178,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/output.ts","module_request":"../utils/package.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"54882681-5e2d-4952-bc16-32072b3e0f5a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885178,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/entry.ts","content":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"b45e127d-38fd-41c7-9b1d-a63ec2e894f6","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885178,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"fd994bda-dca4-4235-8637-ec1cd28ff6ed","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885179,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/output.ts","module_request":"rolldown-plugin-dts/filename","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"710d9190-9660-4812-8625-86b6ae494a71","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885179,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"54882681-5e2d-4952-bc16-32072b3e0f5a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885180,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/entry.ts","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"69a682b2-f0ca-49d8-b75c-25bc3242cb1d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885180,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/entry.ts","content":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"69a682b2-f0ca-49d8-b75c-25bc3242cb1d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885180,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/entry.ts","plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"c0632f8b-8b8c-48a8-9e24-3f7b87f41e38","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885180,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/entry.ts","content":null,"plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"c0632f8b-8b8c-48a8-9e24-3f7b87f41e38","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885180,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/index.d.ts","plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"323382c4-a478-45d5-b1c0-bc09fe9884f2","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885180,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/index.d.ts","content":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"323382c4-a478-45d5-b1c0-bc09fe9884f2","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885181,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/index.d.ts","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"ad3e1680-3b42-4702-bbc9-6f6598f1e9d2","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885181,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/config.ts","content":"import path from 'node:path'\nimport process from 'node:process'\nimport { pathToFileURL } from 'node:url'\nimport { underline } from 'ansis'\nimport { loadConfig } from 'unconfig'\nimport { fsStat } from '../utils/fs.ts'\nimport { toArray } from '../utils/general.ts'\nimport { globalLogger } from '../utils/logger.ts'\nimport type { InlineConfig, UserConfig, UserConfigExport } from './types.ts'\nimport type {\n  ConfigEnv,\n  UserConfig as ViteUserConfig,\n  UserConfigExport as ViteUserConfigExport,\n} from 'vite'\n\nexport async function loadViteConfig(\n  prefix: string,\n  cwd: string,\n): Promise<ViteUserConfig | undefined> {\n  const {\n    config,\n    sources: [source],\n  } = await loadConfig<ViteUserConfigExport>({\n    sources: [\n      {\n        files: `${prefix}.config`,\n        extensions: ['ts', 'mts', 'cts', 'js', 'mjs', 'cjs', 'json', ''],\n      },\n    ],\n    cwd,\n    defaults: {},\n  })\n  if (!source) return\n  globalLogger.info(`Using Vite config: ${underline(source)}`)\n\n  const resolved = await config\n  if (typeof resolved === 'function') {\n    return resolved({\n      command: 'build',\n      mode: 'production',\n    } satisfies ConfigEnv)\n  }\n  return resolved\n}\n\nlet loaded = false\n\nexport async function loadConfigFile(\n  inlineConfig: InlineConfig,\n  workspace?: string,\n): Promise<{\n  configs: UserConfig[]\n  file?: string\n}> {\n  let cwd = inlineConfig.cwd || process.cwd()\n  let overrideConfig = false\n\n  let { config: filePath } = inlineConfig\n  if (filePath === false) return { configs: [{}] }\n\n  if (typeof filePath === 'string') {\n    const stats = await fsStat(filePath)\n    if (stats) {\n      const resolved = path.resolve(filePath)\n      if (stats.isFile()) {\n        overrideConfig = true\n        filePath = resolved\n        cwd = path.dirname(filePath)\n      } else if (stats.isDirectory()) {\n        cwd = resolved\n      }\n    }\n  }\n\n  let isNative = false\n  if (!loaded) {\n    if (!inlineConfig.configLoader || inlineConfig.configLoader === 'auto') {\n      isNative = !!(\n        process.features.typescript ||\n        process.versions.bun ||\n        process.versions.deno\n      )\n    } else if (inlineConfig.configLoader === 'native') {\n      isNative = true\n    }\n  }\n\n  let { config, sources } = await loadConfig\n    .async<UserConfigExport>({\n      sources: overrideConfig\n        ? [{ files: filePath as string, extensions: [] }]\n        : [\n            {\n              files: 'tsdown.config',\n              extensions: ['ts', 'mts', 'cts', 'js', 'mjs', 'cjs', 'json', ''],\n              parser:\n                inlineConfig.configLoader === 'unrun'\n                  ? unrunImport\n                  : isNative\n                    ? nativeImport\n                    : 'auto',\n            },\n            {\n              files: 'package.json',\n              extensions: [],\n              rewrite: (config: any) => config?.tsdown,\n            },\n          ],\n      cwd,\n      stopAt: workspace && path.dirname(workspace),\n      defaults: {},\n    })\n    .finally(() => (loaded = true))\n\n  config = await config\n  if (typeof config === 'function') {\n    config = await config(inlineConfig)\n  }\n  config = toArray(config)\n  if (config.length === 0) {\n    config.push({})\n  }\n\n  const file = sources[0]\n  if (file) {\n    globalLogger.info(`Using tsdown config: ${underline(file)}`)\n  }\n  return {\n    configs: config,\n    file,\n  }\n}\n\nasync function nativeImport(id: string) {\n  const mod = await import(pathToFileURL(id).href).catch((error) => {\n    const cannotFindModule = error?.message?.includes?.('Cannot find module')\n    if (cannotFindModule) {\n      const configError = new Error(\n        `Failed to load the config file. Try setting the --config-loader CLI flag to \\`unconfig\\`.\\n\\n${error.message}`,\n      )\n      configError.cause = error\n      throw configError\n    } else {\n      throw error\n    }\n  })\n  const config = mod.default || mod\n  return config\n}\n\nasync function unrunImport(id: string) {\n  const { unrun } = await import('unrun')\n  const { module } = await unrun({\n    path: pathToFileURL(id).href,\n  }).catch((error) => {\n    const cannotFindModule = error?.message?.includes?.('Cannot find module')\n    if (cannotFindModule) {\n      const configError = new Error(\n        `Failed to load the config file. \\`unrun\\` is experimental; try setting the --config-loader CLI flag to \\`unconfig\\` instead.\\n\\n${error.message}`,\n      )\n      configError.cause = error\n      throw configError\n    } else {\n      throw error\n    }\n  })\n  return module\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"ef2e4d0a-763b-4364-9e23-71bbbdec6e87","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885183,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/lightningcss.ts","module_request":"unplugin-lightningcss/rolldown","import_kind":"dynamic-import","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"93e32dbc-918f-41e6-b5a2-a428432576ff","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885183,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"680165b1-b32b-4b42-986c-7c8d49e35b3d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885183,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/lightningcss.ts","module_request":"../utils/lightningcss.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"15ec8906-5499-40b7-9f6d-e8b32d5f1a18","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885184,"action":"HookResolveIdCallEnd","resolved_id":"unplugin-lightningcss/rolldown","is_external":true,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"93e32dbc-918f-41e6-b5a2-a428432576ff","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885184,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"15ec8906-5499-40b7-9f6d-e8b32d5f1a18","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885184,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/lightningcss.ts","module_request":"../utils/lightningcss.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"2aa98206-d984-48fd-8e1d-de15547df057","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885184,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"2aa98206-d984-48fd-8e1d-de15547df057","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885184,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/config.ts","content":"import path from 'node:path'\nimport process from 'node:process'\nimport { pathToFileURL } from 'node:url'\nimport { underline } from 'ansis'\nimport { loadConfig } from 'unconfig'\nimport { fsStat } from '../utils/fs.ts'\nimport { toArray } from '../utils/general.ts'\nimport { globalLogger } from '../utils/logger.ts'\nimport type { InlineConfig, UserConfig, UserConfigExport } from './types.ts'\nimport type {\n  ConfigEnv,\n  UserConfig as ViteUserConfig,\n  UserConfigExport as ViteUserConfigExport,\n} from 'vite'\n\nexport async function loadViteConfig(\n  prefix: string,\n  cwd: string,\n): Promise<ViteUserConfig | undefined> {\n  const {\n    config,\n    sources: [source],\n  } = await loadConfig<ViteUserConfigExport>({\n    sources: [\n      {\n        files: `${prefix}.config`,\n        extensions: ['ts', 'mts', 'cts', 'js', 'mjs', 'cjs', 'json', ''],\n      },\n    ],\n    cwd,\n    defaults: {},\n  })\n  if (!source) return\n  globalLogger.info(`Using Vite config: ${underline(source)}`)\n\n  const resolved = await config\n  if (typeof resolved === 'function') {\n    return resolved({\n      command: 'build',\n      mode: 'production',\n    } satisfies ConfigEnv)\n  }\n  return resolved\n}\n\nlet loaded = false\n\nexport async function loadConfigFile(\n  inlineConfig: InlineConfig,\n  workspace?: string,\n): Promise<{\n  configs: UserConfig[]\n  file?: string\n}> {\n  let cwd = inlineConfig.cwd || process.cwd()\n  let overrideConfig = false\n\n  let { config: filePath } = inlineConfig\n  if (filePath === false) return { configs: [{}] }\n\n  if (typeof filePath === 'string') {\n    const stats = await fsStat(filePath)\n    if (stats) {\n      const resolved = path.resolve(filePath)\n      if (stats.isFile()) {\n        overrideConfig = true\n        filePath = resolved\n        cwd = path.dirname(filePath)\n      } else if (stats.isDirectory()) {\n        cwd = resolved\n      }\n    }\n  }\n\n  let isNative = false\n  if (!loaded) {\n    if (!inlineConfig.configLoader || inlineConfig.configLoader === 'auto') {\n      isNative = !!(\n        process.features.typescript ||\n        process.versions.bun ||\n        process.versions.deno\n      )\n    } else if (inlineConfig.configLoader === 'native') {\n      isNative = true\n    }\n  }\n\n  let { config, sources } = await loadConfig\n    .async<UserConfigExport>({\n      sources: overrideConfig\n        ? [{ files: filePath as string, extensions: [] }]\n        : [\n            {\n              files: 'tsdown.config',\n              extensions: ['ts', 'mts', 'cts', 'js', 'mjs', 'cjs', 'json', ''],\n              parser:\n                inlineConfig.configLoader === 'unrun'\n                  ? unrunImport\n                  : isNative\n                    ? nativeImport\n                    : 'auto',\n            },\n            {\n              files: 'package.json',\n              extensions: [],\n              rewrite: (config: any) => config?.tsdown,\n            },\n          ],\n      cwd,\n      stopAt: workspace && path.dirname(workspace),\n      defaults: {},\n    })\n    .finally(() => (loaded = true))\n\n  config = await config\n  if (typeof config === 'function') {\n    config = await config(inlineConfig)\n  }\n  config = toArray(config)\n  if (config.length === 0) {\n    config.push({})\n  }\n\n  const file = sources[0]\n  if (file) {\n    globalLogger.info(`Using tsdown config: ${underline(file)}`)\n  }\n  return {\n    configs: config,\n    file,\n  }\n}\n\nasync function nativeImport(id: string) {\n  const mod = await import(pathToFileURL(id).href).catch((error) => {\n    const cannotFindModule = error?.message?.includes?.('Cannot find module')\n    if (cannotFindModule) {\n      const configError = new Error(\n        `Failed to load the config file. Try setting the --config-loader CLI flag to \\`unconfig\\`.\\n\\n${error.message}`,\n      )\n      configError.cause = error\n      throw configError\n    } else {\n      throw error\n    }\n  })\n  const config = mod.default || mod\n  return config\n}\n\nasync function unrunImport(id: string) {\n  const { unrun } = await import('unrun')\n  const { module } = await unrun({\n    path: pathToFileURL(id).href,\n  }).catch((error) => {\n    const cannotFindModule = error?.message?.includes?.('Cannot find module')\n    if (cannotFindModule) {\n      const configError = new Error(\n        `Failed to load the config file. \\`unrun\\` is experimental; try setting the --config-loader CLI flag to \\`unconfig\\` instead.\\n\\n${error.message}`,\n      )\n      configError.cause = error\n      throw configError\n    } else {\n      throw error\n    }\n  })\n  return module\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"ef2e4d0a-763b-4364-9e23-71bbbdec6e87","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885186,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/config.ts","content":"import path from 'node:path'\nimport process from 'node:process'\nimport { pathToFileURL } from 'node:url'\nimport { underline } from 'ansis'\nimport { loadConfig } from 'unconfig'\nimport { fsStat } from '../utils/fs.ts'\nimport { toArray } from '../utils/general.ts'\nimport { globalLogger } from '../utils/logger.ts'\nimport type { InlineConfig, UserConfig, UserConfigExport } from './types.ts'\nimport type {\n  ConfigEnv,\n  UserConfig as ViteUserConfig,\n  UserConfigExport as ViteUserConfigExport,\n} from 'vite'\n\nexport async function loadViteConfig(\n  prefix: string,\n  cwd: string,\n): Promise<ViteUserConfig | undefined> {\n  const {\n    config,\n    sources: [source],\n  } = await loadConfig<ViteUserConfigExport>({\n    sources: [\n      {\n        files: `${prefix}.config`,\n        extensions: ['ts', 'mts', 'cts', 'js', 'mjs', 'cjs', 'json', ''],\n      },\n    ],\n    cwd,\n    defaults: {},\n  })\n  if (!source) return\n  globalLogger.info(`Using Vite config: ${underline(source)}`)\n\n  const resolved = await config\n  if (typeof resolved === 'function') {\n    return resolved({\n      command: 'build',\n      mode: 'production',\n    } satisfies ConfigEnv)\n  }\n  return resolved\n}\n\nlet loaded = false\n\nexport async function loadConfigFile(\n  inlineConfig: InlineConfig,\n  workspace?: string,\n): Promise<{\n  configs: UserConfig[]\n  file?: string\n}> {\n  let cwd = inlineConfig.cwd || process.cwd()\n  let overrideConfig = false\n\n  let { config: filePath } = inlineConfig\n  if (filePath === false) return { configs: [{}] }\n\n  if (typeof filePath === 'string') {\n    const stats = await fsStat(filePath)\n    if (stats) {\n      const resolved = path.resolve(filePath)\n      if (stats.isFile()) {\n        overrideConfig = true\n        filePath = resolved\n        cwd = path.dirname(filePath)\n      } else if (stats.isDirectory()) {\n        cwd = resolved\n      }\n    }\n  }\n\n  let isNative = false\n  if (!loaded) {\n    if (!inlineConfig.configLoader || inlineConfig.configLoader === 'auto') {\n      isNative = !!(\n        process.features.typescript ||\n        process.versions.bun ||\n        process.versions.deno\n      )\n    } else if (inlineConfig.configLoader === 'native') {\n      isNative = true\n    }\n  }\n\n  let { config, sources } = await loadConfig\n    .async<UserConfigExport>({\n      sources: overrideConfig\n        ? [{ files: filePath as string, extensions: [] }]\n        : [\n            {\n              files: 'tsdown.config',\n              extensions: ['ts', 'mts', 'cts', 'js', 'mjs', 'cjs', 'json', ''],\n              parser:\n                inlineConfig.configLoader === 'unrun'\n                  ? unrunImport\n                  : isNative\n                    ? nativeImport\n                    : 'auto',\n            },\n            {\n              files: 'package.json',\n              extensions: [],\n              rewrite: (config: any) => config?.tsdown,\n            },\n          ],\n      cwd,\n      stopAt: workspace && path.dirname(workspace),\n      defaults: {},\n    })\n    .finally(() => (loaded = true))\n\n  config = await config\n  if (typeof config === 'function') {\n    config = await config(inlineConfig)\n  }\n  config = toArray(config)\n  if (config.length === 0) {\n    config.push({})\n  }\n\n  const file = sources[0]\n  if (file) {\n    globalLogger.info(`Using tsdown config: ${underline(file)}`)\n  }\n  return {\n    configs: config,\n    file,\n  }\n}\n\nasync function nativeImport(id: string) {\n  const mod = await import(pathToFileURL(id).href).catch((error) => {\n    const cannotFindModule = error?.message?.includes?.('Cannot find module')\n    if (cannotFindModule) {\n      const configError = new Error(\n        `Failed to load the config file. Try setting the --config-loader CLI flag to \\`unconfig\\`.\\n\\n${error.message}`,\n      )\n      configError.cause = error\n      throw configError\n    } else {\n      throw error\n    }\n  })\n  const config = mod.default || mod\n  return config\n}\n\nasync function unrunImport(id: string) {\n  const { unrun } = await import('unrun')\n  const { module } = await unrun({\n    path: pathToFileURL(id).href,\n  }).catch((error) => {\n    const cannotFindModule = error?.message?.includes?.('Cannot find module')\n    if (cannotFindModule) {\n      const configError = new Error(\n        `Failed to load the config file. \\`unrun\\` is experimental; try setting the --config-loader CLI flag to \\`unconfig\\` instead.\\n\\n${error.message}`,\n      )\n      configError.cause = error\n      throw configError\n    } else {\n      throw error\n    }\n  })\n  return module\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"d4bb733f-b2c7-4006-8b48-213c5b41e690","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885187,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/tsconfig.ts","content":"import path from 'node:path'\nimport { blue } from 'ansis'\nimport { up as findUp } from 'empathic/find'\nimport { fsStat } from '../utils/fs.ts'\nimport { generateColor, prettyName, type Logger } from '../utils/logger.ts'\nimport type { UserConfig } from '../config/index.ts'\n\nexport function findTsconfig(\n  cwd?: string,\n  name: string = 'tsconfig.json',\n): string | false {\n  return findUp(name, { cwd }) || false\n}\n\nexport async function resolveTsconfig(\n  logger: Logger,\n  tsconfig: UserConfig['tsconfig'],\n  cwd: string,\n  name?: string,\n): Promise<string | false> {\n  const original = tsconfig\n\n  if (tsconfig !== false) {\n    if (tsconfig === true || tsconfig == null) {\n      tsconfig = findTsconfig(cwd)\n      if (original && !tsconfig) {\n        logger.warn(`No tsconfig found in ${blue(cwd)}`)\n      }\n    } else {\n      const tsconfigPath = path.resolve(cwd, tsconfig)\n      const stat = await fsStat(tsconfigPath)\n      if (stat?.isFile()) {\n        tsconfig = tsconfigPath\n      } else if (stat?.isDirectory()) {\n        tsconfig = findTsconfig(tsconfigPath)\n        if (!tsconfig) {\n          logger.warn(`No tsconfig found in ${blue(tsconfigPath)}`)\n        }\n      } else {\n        tsconfig = findTsconfig(cwd, tsconfig)\n        if (!tsconfig) {\n          logger.warn(`tsconfig ${blue(original)} doesn't exist`)\n        }\n      }\n    }\n\n    if (tsconfig) {\n      logger.info(\n        prettyName(name),\n        `tsconfig: ${generateColor(name)(path.relative(cwd, tsconfig))}`,\n      )\n    }\n  }\n\n  return tsconfig\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"f0475f3b-f012-4827-ab2b-48548d2550e9","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885188,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/lightningcss.ts","plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"ffbba479-75db-475a-afae-aaaf4f04e0e4","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885188,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/lightningcss.ts","content":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"ffbba479-75db-475a-afae-aaaf4f04e0e4","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885188,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/lightningcss.ts","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"b9635837-13a5-4518-be1d-108cc306c8a3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885188,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/lightningcss.ts","content":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"b9635837-13a5-4518-be1d-108cc306c8a3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885188,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/lightningcss.ts","plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"9be4e16f-ab04-4092-8161-d1fe6b58d8dd","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885189,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/lightningcss.ts","content":null,"plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"9be4e16f-ab04-4092-8161-d1fe6b58d8dd","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885189,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/entry.ts","content":"import path from 'node:path'\nimport { glob } from 'tinyglobby'\nimport { fsExists, lowestCommonAncestor } from '../utils/fs.ts'\nimport { generateColor, prettyName, type Logger } from '../utils/logger.ts'\nimport type { UserConfig } from '../config/index.ts'\n\nexport async function resolveEntry(\n  logger: Logger,\n  entry: UserConfig['entry'],\n  cwd: string,\n  name?: string,\n): Promise<Record<string, string>> {\n  const nameLabel = name ? `[${name}] ` : ''\n  if (!entry || Object.keys(entry).length === 0) {\n    const defaultEntry = path.resolve(cwd, 'src/index.ts')\n\n    if (await fsExists(defaultEntry)) {\n      entry = { index: defaultEntry }\n    } else {\n      throw new Error(\n        `${nameLabel}No input files, try \"tsdown <your-file>\" or create src/index.ts`,\n      )\n    }\n  }\n\n  const entryMap = await toObjectEntry(entry, cwd)\n  const entries = Object.values(entryMap)\n  if (entries.length === 0) {\n    throw new Error(`${nameLabel}Cannot find entry: ${JSON.stringify(entry)}`)\n  }\n  logger.info(\n    prettyName(name),\n    `entry: ${generateColor(name)(entries.map((entry) => path.relative(cwd, entry)).join(', '))}`,\n  )\n  return entryMap\n}\n\nexport async function toObjectEntry(\n  entry: string | string[] | Record<string, string>,\n  cwd: string,\n): Promise<Record<string, string>> {\n  if (typeof entry === 'string') {\n    entry = [entry]\n  }\n  if (!Array.isArray(entry)) {\n    return entry\n  }\n\n  const resolvedEntry = (\n    await glob(entry, { cwd, expandDirectories: false })\n  ).map((file) => path.resolve(cwd, file))\n  const base = lowestCommonAncestor(...resolvedEntry)\n  return Object.fromEntries(\n    resolvedEntry.map((file) => {\n      const relative = path.relative(base, file)\n      return [\n        relative.slice(0, relative.length - path.extname(relative).length),\n        file,\n      ]\n    }),\n  )\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"e051b6e3-cad5-475b-9b70-7e6168779539","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885189,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/index.d.ts","content":"import type { Awaitable } from \"../utils/types.ts\";\nimport type { InlineConfig, ResolvedConfig } from \"./types.ts\";\nexport * from \"./types.ts\";\nexport declare function resolveConfig(inlineConfig: InlineConfig): Promise<{\n\tconfigs: ResolvedConfig[];\n\tfiles: string[];\n}>;\nexport declare function mergeUserOptions<\n\tT extends object,\n\tA extends unknown[]\n>(defaults: T, user: T | undefined | null | ((options: T, ...args: A) => Awaitable<T | void | null>), args: A): Promise<T>;\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"ad3e1680-3b42-4702-bbc9-6f6598f1e9d2","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885190,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/index.d.ts","content":"import type { Awaitable } from \"../utils/types.ts\";\nimport type { InlineConfig, ResolvedConfig } from \"./types.ts\";\nexport * from \"./types.ts\";\nexport declare function resolveConfig(inlineConfig: InlineConfig): Promise<{\n\tconfigs: ResolvedConfig[];\n\tfiles: string[];\n}>;\nexport declare function mergeUserOptions<\n\tT extends object,\n\tA extends unknown[]\n>(defaults: T, user: T | undefined | null | ((options: T, ...args: A) => Awaitable<T | void | null>), args: A): Promise<T>;\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"ad38c958-880b-4e39-8370-3dc18b04c162","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885190,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/target.ts","content":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"9cee55d1-3552-456a-b6e2-e9f025cedab9","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885190,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/target.ts","plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"7e45cc48-184a-4b36-8bb3-8bfff98ce164","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885190,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/target.ts","content":null,"plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"7e45cc48-184a-4b36-8bb3-8bfff98ce164","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885190,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/config.ts","content":"import path from 'node:path'\nimport process from 'node:process'\nimport { pathToFileURL } from 'node:url'\nimport { underline } from 'ansis'\nimport { loadConfig } from 'unconfig'\nimport { fsStat } from '../utils/fs.ts'\nimport { toArray } from '../utils/general.ts'\nimport { globalLogger } from '../utils/logger.ts'\nimport type { InlineConfig, UserConfig, UserConfigExport } from './types.ts'\nimport type {\n  ConfigEnv,\n  UserConfig as ViteUserConfig,\n  UserConfigExport as ViteUserConfigExport,\n} from 'vite'\n\nexport async function loadViteConfig(\n  prefix: string,\n  cwd: string,\n): Promise<ViteUserConfig | undefined> {\n  const {\n    config,\n    sources: [source],\n  } = await loadConfig<ViteUserConfigExport>({\n    sources: [\n      {\n        files: `${prefix}.config`,\n        extensions: ['ts', 'mts', 'cts', 'js', 'mjs', 'cjs', 'json', ''],\n      },\n    ],\n    cwd,\n    defaults: {},\n  })\n  if (!source) return\n  globalLogger.info(`Using Vite config: ${underline(source)}`)\n\n  const resolved = await config\n  if (typeof resolved === 'function') {\n    return resolved({\n      command: 'build',\n      mode: 'production',\n    } satisfies ConfigEnv)\n  }\n  return resolved\n}\n\nlet loaded = false\n\nexport async function loadConfigFile(\n  inlineConfig: InlineConfig,\n  workspace?: string,\n): Promise<{\n  configs: UserConfig[]\n  file?: string\n}> {\n  let cwd = inlineConfig.cwd || process.cwd()\n  let overrideConfig = false\n\n  let { config: filePath } = inlineConfig\n  if (filePath === false) return { configs: [{}] }\n\n  if (typeof filePath === 'string') {\n    const stats = await fsStat(filePath)\n    if (stats) {\n      const resolved = path.resolve(filePath)\n      if (stats.isFile()) {\n        overrideConfig = true\n        filePath = resolved\n        cwd = path.dirname(filePath)\n      } else if (stats.isDirectory()) {\n        cwd = resolved\n      }\n    }\n  }\n\n  let isNative = false\n  if (!loaded) {\n    if (!inlineConfig.configLoader || inlineConfig.configLoader === 'auto') {\n      isNative = !!(\n        process.features.typescript ||\n        process.versions.bun ||\n        process.versions.deno\n      )\n    } else if (inlineConfig.configLoader === 'native') {\n      isNative = true\n    }\n  }\n\n  let { config, sources } = await loadConfig\n    .async<UserConfigExport>({\n      sources: overrideConfig\n        ? [{ files: filePath as string, extensions: [] }]\n        : [\n            {\n              files: 'tsdown.config',\n              extensions: ['ts', 'mts', 'cts', 'js', 'mjs', 'cjs', 'json', ''],\n              parser:\n                inlineConfig.configLoader === 'unrun'\n                  ? unrunImport\n                  : isNative\n                    ? nativeImport\n                    : 'auto',\n            },\n            {\n              files: 'package.json',\n              extensions: [],\n              rewrite: (config: any) => config?.tsdown,\n            },\n          ],\n      cwd,\n      stopAt: workspace && path.dirname(workspace),\n      defaults: {},\n    })\n    .finally(() => (loaded = true))\n\n  config = await config\n  if (typeof config === 'function') {\n    config = await config(inlineConfig)\n  }\n  config = toArray(config)\n  if (config.length === 0) {\n    config.push({})\n  }\n\n  const file = sources[0]\n  if (file) {\n    globalLogger.info(`Using tsdown config: ${underline(file)}`)\n  }\n  return {\n    configs: config,\n    file,\n  }\n}\n\nasync function nativeImport(id: string) {\n  const mod = await import(pathToFileURL(id).href).catch((error) => {\n    const cannotFindModule = error?.message?.includes?.('Cannot find module')\n    if (cannotFindModule) {\n      const configError = new Error(\n        `Failed to load the config file. Try setting the --config-loader CLI flag to \\`unconfig\\`.\\n\\n${error.message}`,\n      )\n      configError.cause = error\n      throw configError\n    } else {\n      throw error\n    }\n  })\n  const config = mod.default || mod\n  return config\n}\n\nasync function unrunImport(id: string) {\n  const { unrun } = await import('unrun')\n  const { module } = await unrun({\n    path: pathToFileURL(id).href,\n  }).catch((error) => {\n    const cannotFindModule = error?.message?.includes?.('Cannot find module')\n    if (cannotFindModule) {\n      const configError = new Error(\n        `Failed to load the config file. \\`unrun\\` is experimental; try setting the --config-loader CLI flag to \\`unconfig\\` instead.\\n\\n${error.message}`,\n      )\n      configError.cause = error\n      throw configError\n    } else {\n      throw error\n    }\n  })\n  return module\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"d4bb733f-b2c7-4006-8b48-213c5b41e690","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885192,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/tsconfig.ts","content":"import path from 'node:path'\nimport { blue } from 'ansis'\nimport { up as findUp } from 'empathic/find'\nimport { fsStat } from '../utils/fs.ts'\nimport { generateColor, prettyName, type Logger } from '../utils/logger.ts'\nimport type { UserConfig } from '../config/index.ts'\n\nexport function findTsconfig(\n  cwd?: string,\n  name: string = 'tsconfig.json',\n): string | false {\n  return findUp(name, { cwd }) || false\n}\n\nexport async function resolveTsconfig(\n  logger: Logger,\n  tsconfig: UserConfig['tsconfig'],\n  cwd: string,\n  name?: string,\n): Promise<string | false> {\n  const original = tsconfig\n\n  if (tsconfig !== false) {\n    if (tsconfig === true || tsconfig == null) {\n      tsconfig = findTsconfig(cwd)\n      if (original && !tsconfig) {\n        logger.warn(`No tsconfig found in ${blue(cwd)}`)\n      }\n    } else {\n      const tsconfigPath = path.resolve(cwd, tsconfig)\n      const stat = await fsStat(tsconfigPath)\n      if (stat?.isFile()) {\n        tsconfig = tsconfigPath\n      } else if (stat?.isDirectory()) {\n        tsconfig = findTsconfig(tsconfigPath)\n        if (!tsconfig) {\n          logger.warn(`No tsconfig found in ${blue(tsconfigPath)}`)\n        }\n      } else {\n        tsconfig = findTsconfig(cwd, tsconfig)\n        if (!tsconfig) {\n          logger.warn(`tsconfig ${blue(original)} doesn't exist`)\n        }\n      }\n    }\n\n    if (tsconfig) {\n      logger.info(\n        prettyName(name),\n        `tsconfig: ${generateColor(name)(path.relative(cwd, tsconfig))}`,\n      )\n    }\n  }\n\n  return tsconfig\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"f0475f3b-f012-4827-ab2b-48548d2550e9","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885192,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/tsconfig.ts","content":"import path from 'node:path'\nimport { blue } from 'ansis'\nimport { up as findUp } from 'empathic/find'\nimport { fsStat } from '../utils/fs.ts'\nimport { generateColor, prettyName, type Logger } from '../utils/logger.ts'\nimport type { UserConfig } from '../config/index.ts'\n\nexport function findTsconfig(\n  cwd?: string,\n  name: string = 'tsconfig.json',\n): string | false {\n  return findUp(name, { cwd }) || false\n}\n\nexport async function resolveTsconfig(\n  logger: Logger,\n  tsconfig: UserConfig['tsconfig'],\n  cwd: string,\n  name?: string,\n): Promise<string | false> {\n  const original = tsconfig\n\n  if (tsconfig !== false) {\n    if (tsconfig === true || tsconfig == null) {\n      tsconfig = findTsconfig(cwd)\n      if (original && !tsconfig) {\n        logger.warn(`No tsconfig found in ${blue(cwd)}`)\n      }\n    } else {\n      const tsconfigPath = path.resolve(cwd, tsconfig)\n      const stat = await fsStat(tsconfigPath)\n      if (stat?.isFile()) {\n        tsconfig = tsconfigPath\n      } else if (stat?.isDirectory()) {\n        tsconfig = findTsconfig(tsconfigPath)\n        if (!tsconfig) {\n          logger.warn(`No tsconfig found in ${blue(tsconfigPath)}`)\n        }\n      } else {\n        tsconfig = findTsconfig(cwd, tsconfig)\n        if (!tsconfig) {\n          logger.warn(`tsconfig ${blue(original)} doesn't exist`)\n        }\n      }\n    }\n\n    if (tsconfig) {\n      logger.info(\n        prettyName(name),\n        `tsconfig: ${generateColor(name)(path.relative(cwd, tsconfig))}`,\n      )\n    }\n  }\n\n  return tsconfig\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"4f7578d0-4c81-4437-8252-9e4d0ecb14fe","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885193,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/tsconfig.ts","content":"import path from 'node:path'\nimport { blue } from 'ansis'\nimport { up as findUp } from 'empathic/find'\nimport { fsStat } from '../utils/fs.ts'\nimport { generateColor, prettyName, type Logger } from '../utils/logger.ts'\nimport type { UserConfig } from '../config/index.ts'\n\nexport function findTsconfig(\n  cwd?: string,\n  name: string = 'tsconfig.json',\n): string | false {\n  return findUp(name, { cwd }) || false\n}\n\nexport async function resolveTsconfig(\n  logger: Logger,\n  tsconfig: UserConfig['tsconfig'],\n  cwd: string,\n  name?: string,\n): Promise<string | false> {\n  const original = tsconfig\n\n  if (tsconfig !== false) {\n    if (tsconfig === true || tsconfig == null) {\n      tsconfig = findTsconfig(cwd)\n      if (original && !tsconfig) {\n        logger.warn(`No tsconfig found in ${blue(cwd)}`)\n      }\n    } else {\n      const tsconfigPath = path.resolve(cwd, tsconfig)\n      const stat = await fsStat(tsconfigPath)\n      if (stat?.isFile()) {\n        tsconfig = tsconfigPath\n      } else if (stat?.isDirectory()) {\n        tsconfig = findTsconfig(tsconfigPath)\n        if (!tsconfig) {\n          logger.warn(`No tsconfig found in ${blue(tsconfigPath)}`)\n        }\n      } else {\n        tsconfig = findTsconfig(cwd, tsconfig)\n        if (!tsconfig) {\n          logger.warn(`tsconfig ${blue(original)} doesn't exist`)\n        }\n      }\n    }\n\n    if (tsconfig) {\n      logger.info(\n        prettyName(name),\n        `tsconfig: ${generateColor(name)(path.relative(cwd, tsconfig))}`,\n      )\n    }\n  }\n\n  return tsconfig\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"4f7578d0-4c81-4437-8252-9e4d0ecb14fe","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885193,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/tsconfig.ts","content":"import path from 'node:path'\nimport { blue } from 'ansis'\nimport { up as findUp } from 'empathic/find'\nimport { fsStat } from '../utils/fs.ts'\nimport { generateColor, prettyName, type Logger } from '../utils/logger.ts'\nimport type { UserConfig } from '../config/index.ts'\n\nexport function findTsconfig(\n  cwd?: string,\n  name: string = 'tsconfig.json',\n): string | false {\n  return findUp(name, { cwd }) || false\n}\n\nexport async function resolveTsconfig(\n  logger: Logger,\n  tsconfig: UserConfig['tsconfig'],\n  cwd: string,\n  name?: string,\n): Promise<string | false> {\n  const original = tsconfig\n\n  if (tsconfig !== false) {\n    if (tsconfig === true || tsconfig == null) {\n      tsconfig = findTsconfig(cwd)\n      if (original && !tsconfig) {\n        logger.warn(`No tsconfig found in ${blue(cwd)}`)\n      }\n    } else {\n      const tsconfigPath = path.resolve(cwd, tsconfig)\n      const stat = await fsStat(tsconfigPath)\n      if (stat?.isFile()) {\n        tsconfig = tsconfigPath\n      } else if (stat?.isDirectory()) {\n        tsconfig = findTsconfig(tsconfigPath)\n        if (!tsconfig) {\n          logger.warn(`No tsconfig found in ${blue(tsconfigPath)}`)\n        }\n      } else {\n        tsconfig = findTsconfig(cwd, tsconfig)\n        if (!tsconfig) {\n          logger.warn(`tsconfig ${blue(original)} doesn't exist`)\n        }\n      }\n    }\n\n    if (tsconfig) {\n      logger.info(\n        prettyName(name),\n        `tsconfig: ${generateColor(name)(path.relative(cwd, tsconfig))}`,\n      )\n    }\n  }\n\n  return tsconfig\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"fa7f73a9-33b4-4a01-8d42-dcb929aab65a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885194,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/entry.ts","content":"import path from 'node:path'\nimport { glob } from 'tinyglobby'\nimport { fsExists, lowestCommonAncestor } from '../utils/fs.ts'\nimport { generateColor, prettyName, type Logger } from '../utils/logger.ts'\nimport type { UserConfig } from '../config/index.ts'\n\nexport async function resolveEntry(\n  logger: Logger,\n  entry: UserConfig['entry'],\n  cwd: string,\n  name?: string,\n): Promise<Record<string, string>> {\n  const nameLabel = name ? `[${name}] ` : ''\n  if (!entry || Object.keys(entry).length === 0) {\n    const defaultEntry = path.resolve(cwd, 'src/index.ts')\n\n    if (await fsExists(defaultEntry)) {\n      entry = { index: defaultEntry }\n    } else {\n      throw new Error(\n        `${nameLabel}No input files, try \"tsdown <your-file>\" or create src/index.ts`,\n      )\n    }\n  }\n\n  const entryMap = await toObjectEntry(entry, cwd)\n  const entries = Object.values(entryMap)\n  if (entries.length === 0) {\n    throw new Error(`${nameLabel}Cannot find entry: ${JSON.stringify(entry)}`)\n  }\n  logger.info(\n    prettyName(name),\n    `entry: ${generateColor(name)(entries.map((entry) => path.relative(cwd, entry)).join(', '))}`,\n  )\n  return entryMap\n}\n\nexport async function toObjectEntry(\n  entry: string | string[] | Record<string, string>,\n  cwd: string,\n): Promise<Record<string, string>> {\n  if (typeof entry === 'string') {\n    entry = [entry]\n  }\n  if (!Array.isArray(entry)) {\n    return entry\n  }\n\n  const resolvedEntry = (\n    await glob(entry, { cwd, expandDirectories: false })\n  ).map((file) => path.resolve(cwd, file))\n  const base = lowestCommonAncestor(...resolvedEntry)\n  return Object.fromEntries(\n    resolvedEntry.map((file) => {\n      const relative = path.relative(base, file)\n      return [\n        relative.slice(0, relative.length - path.extname(relative).length),\n        file,\n      ]\n    }),\n  )\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"e051b6e3-cad5-475b-9b70-7e6168779539","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885194,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/entry.ts","content":"import path from 'node:path'\nimport { glob } from 'tinyglobby'\nimport { fsExists, lowestCommonAncestor } from '../utils/fs.ts'\nimport { generateColor, prettyName, type Logger } from '../utils/logger.ts'\nimport type { UserConfig } from '../config/index.ts'\n\nexport async function resolveEntry(\n  logger: Logger,\n  entry: UserConfig['entry'],\n  cwd: string,\n  name?: string,\n): Promise<Record<string, string>> {\n  const nameLabel = name ? `[${name}] ` : ''\n  if (!entry || Object.keys(entry).length === 0) {\n    const defaultEntry = path.resolve(cwd, 'src/index.ts')\n\n    if (await fsExists(defaultEntry)) {\n      entry = { index: defaultEntry }\n    } else {\n      throw new Error(\n        `${nameLabel}No input files, try \"tsdown <your-file>\" or create src/index.ts`,\n      )\n    }\n  }\n\n  const entryMap = await toObjectEntry(entry, cwd)\n  const entries = Object.values(entryMap)\n  if (entries.length === 0) {\n    throw new Error(`${nameLabel}Cannot find entry: ${JSON.stringify(entry)}`)\n  }\n  logger.info(\n    prettyName(name),\n    `entry: ${generateColor(name)(entries.map((entry) => path.relative(cwd, entry)).join(', '))}`,\n  )\n  return entryMap\n}\n\nexport async function toObjectEntry(\n  entry: string | string[] | Record<string, string>,\n  cwd: string,\n): Promise<Record<string, string>> {\n  if (typeof entry === 'string') {\n    entry = [entry]\n  }\n  if (!Array.isArray(entry)) {\n    return entry\n  }\n\n  const resolvedEntry = (\n    await glob(entry, { cwd, expandDirectories: false })\n  ).map((file) => path.resolve(cwd, file))\n  const base = lowestCommonAncestor(...resolvedEntry)\n  return Object.fromEntries(\n    resolvedEntry.map((file) => {\n      const relative = path.relative(base, file)\n      return [\n        relative.slice(0, relative.length - path.extname(relative).length),\n        file,\n      ]\n    }),\n  )\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"5df7f8dd-cf2d-4f5f-bcd1-8302c5ffe4cb","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885194,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/target.ts","content":"import minVersion from 'semver/ranges/min-version.js'\nimport { resolveComma, toArray } from '../utils/general.ts'\nimport { generateColor, prettyName, type Logger } from '../utils/logger.ts'\nimport type { PackageJson } from 'pkg-types'\n\nexport function resolveTarget(\n  logger: Logger,\n  target: string | string[] | false | undefined,\n  pkg?: PackageJson,\n  name?: string,\n): string[] | undefined {\n  if (target === false) return\n  if (target == null) {\n    const pkgTarget = resolvePackageTarget(pkg)\n    if (pkgTarget) {\n      target = pkgTarget\n    } else {\n      return\n    }\n  }\n\n  if (typeof target === 'number') {\n    throw new TypeError(`Invalid target: ${target}`)\n  }\n  const targets = resolveComma(toArray(target))\n  if (targets.length)\n    logger.info(\n      prettyName(name),\n      `target${targets.length > 1 ? 's' : ''}: ${generateColor(name)(targets.join(', '))}`,\n    )\n\n  return targets\n}\n\nexport function resolvePackageTarget(pkg?: PackageJson): string | undefined {\n  const nodeVersion = pkg?.engines?.node\n  if (!nodeVersion) return\n  const nodeMinVersion = minVersion(nodeVersion)\n  if (!nodeMinVersion) return\n  if (nodeMinVersion.version === '0.0.0') return\n  return `node${nodeMinVersion.version}`\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"c92a6cec-7b7c-4424-9bec-6ccd322b556c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885195,"action":"HookResolveIdCallEnd","resolved_id":"/Users/kevin/Developer/open-source/tsdown/src/features/exports.d.ts","is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"fc3066e1-e50e-45be-8256-c96149d31937","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885196,"action":"HookResolveIdCallEnd","resolved_id":"/Users/kevin/Developer/open-source/tsdown/src/features/hooks.d.ts","is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"48357bea-b273-4383-b27a-f6228d71372f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885196,"action":"HookResolveIdCallEnd","resolved_id":"hookable","is_external":true,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"678831f3-17a2-417c-aa4d-527cb0833a91","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885197,"action":"HookResolveIdCallEnd","resolved_id":"publint","is_external":true,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"30626e64-1bdf-4dc2-a541-636ece81228a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885197,"action":"HookResolveIdCallEnd","resolved_id":"rolldown","is_external":true,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"04392aca-9bf1-447e-88f3-1462248b4055","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885197,"action":"HookResolveIdCallEnd","resolved_id":"rolldown-plugin-dts","is_external":true,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"2de1af0c-1123-4696-9c32-2bd5ff86a5e2","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885198,"action":"HookResolveIdCallEnd","resolved_id":"unplugin-unused","is_external":true,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"c391d3a9-3e1d-41ec-bf29-4492beec6642","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885198,"action":"HookResolveIdCallEnd","resolved_id":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.d.ts","is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"8f7fc4c5-235f-4521-9ddd-5b52cf7aa453","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885198,"action":"HookResolveIdCallEnd","resolved_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/logger.d.ts","is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"c9fa9af7-29ed-4779-9751-72dd2539ab77","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885198,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/tsconfig.ts","content":"import path from 'node:path'\nimport { blue } from 'ansis'\nimport { up as findUp } from 'empathic/find'\nimport { fsStat } from '../utils/fs.ts'\nimport { generateColor, prettyName, type Logger } from '../utils/logger.ts'\nimport type { UserConfig } from '../config/index.ts'\n\nexport function findTsconfig(\n  cwd?: string,\n  name: string = 'tsconfig.json',\n): string | false {\n  return findUp(name, { cwd }) || false\n}\n\nexport async function resolveTsconfig(\n  logger: Logger,\n  tsconfig: UserConfig['tsconfig'],\n  cwd: string,\n  name?: string,\n): Promise<string | false> {\n  const original = tsconfig\n\n  if (tsconfig !== false) {\n    if (tsconfig === true || tsconfig == null) {\n      tsconfig = findTsconfig(cwd)\n      if (original && !tsconfig) {\n        logger.warn(`No tsconfig found in ${blue(cwd)}`)\n      }\n    } else {\n      const tsconfigPath = path.resolve(cwd, tsconfig)\n      const stat = await fsStat(tsconfigPath)\n      if (stat?.isFile()) {\n        tsconfig = tsconfigPath\n      } else if (stat?.isDirectory()) {\n        tsconfig = findTsconfig(tsconfigPath)\n        if (!tsconfig) {\n          logger.warn(`No tsconfig found in ${blue(tsconfigPath)}`)\n        }\n      } else {\n        tsconfig = findTsconfig(cwd, tsconfig)\n        if (!tsconfig) {\n          logger.warn(`tsconfig ${blue(original)} doesn't exist`)\n        }\n      }\n    }\n\n    if (tsconfig) {\n      logger.info(\n        prettyName(name),\n        `tsconfig: ${generateColor(name)(path.relative(cwd, tsconfig))}`,\n      )\n    }\n  }\n\n  return tsconfig\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"fa7f73a9-33b4-4a01-8d42-dcb929aab65a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885199,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/target.ts","content":"import minVersion from 'semver/ranges/min-version.js'\nimport { resolveComma, toArray } from '../utils/general.ts'\nimport { generateColor, prettyName, type Logger } from '../utils/logger.ts'\nimport type { PackageJson } from 'pkg-types'\n\nexport function resolveTarget(\n  logger: Logger,\n  target: string | string[] | false | undefined,\n  pkg?: PackageJson,\n  name?: string,\n): string[] | undefined {\n  if (target === false) return\n  if (target == null) {\n    const pkgTarget = resolvePackageTarget(pkg)\n    if (pkgTarget) {\n      target = pkgTarget\n    } else {\n      return\n    }\n  }\n\n  if (typeof target === 'number') {\n    throw new TypeError(`Invalid target: ${target}`)\n  }\n  const targets = resolveComma(toArray(target))\n  if (targets.length)\n    logger.info(\n      prettyName(name),\n      `target${targets.length > 1 ? 's' : ''}: ${generateColor(name)(targets.join(', '))}`,\n    )\n\n  return targets\n}\n\nexport function resolvePackageTarget(pkg?: PackageJson): string | undefined {\n  const nodeVersion = pkg?.engines?.node\n  if (!nodeVersion) return\n  const nodeMinVersion = minVersion(nodeVersion)\n  if (!nodeMinVersion) return\n  if (nodeMinVersion.version === '0.0.0') return\n  return `node${nodeMinVersion.version}`\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"c92a6cec-7b7c-4424-9bec-6ccd322b556c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885199,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/target.ts","content":"import minVersion from 'semver/ranges/min-version.js'\nimport { resolveComma, toArray } from '../utils/general.ts'\nimport { generateColor, prettyName, type Logger } from '../utils/logger.ts'\nimport type { PackageJson } from 'pkg-types'\n\nexport function resolveTarget(\n  logger: Logger,\n  target: string | string[] | false | undefined,\n  pkg?: PackageJson,\n  name?: string,\n): string[] | undefined {\n  if (target === false) return\n  if (target == null) {\n    const pkgTarget = resolvePackageTarget(pkg)\n    if (pkgTarget) {\n      target = pkgTarget\n    } else {\n      return\n    }\n  }\n\n  if (typeof target === 'number') {\n    throw new TypeError(`Invalid target: ${target}`)\n  }\n  const targets = resolveComma(toArray(target))\n  if (targets.length)\n    logger.info(\n      prettyName(name),\n      `target${targets.length > 1 ? 's' : ''}: ${generateColor(name)(targets.join(', '))}`,\n    )\n\n  return targets\n}\n\nexport function resolvePackageTarget(pkg?: PackageJson): string | undefined {\n  const nodeVersion = pkg?.engines?.node\n  if (!nodeVersion) return\n  const nodeMinVersion = minVersion(nodeVersion)\n  if (!nodeMinVersion) return\n  if (nodeMinVersion.version === '0.0.0') return\n  return `node${nodeMinVersion.version}`\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"877faffe-c6f4-4505-9e27-c18df02d6b65","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885199,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/tsconfig.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"6171cfbc-2cce-478d-ad9b-aaf7c6a765af","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885199,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/target.ts","content":"import minVersion from 'semver/ranges/min-version.js'\nimport { resolveComma, toArray } from '../utils/general.ts'\nimport { generateColor, prettyName, type Logger } from '../utils/logger.ts'\nimport type { PackageJson } from 'pkg-types'\n\nexport function resolveTarget(\n  logger: Logger,\n  target: string | string[] | false | undefined,\n  pkg?: PackageJson,\n  name?: string,\n): string[] | undefined {\n  if (target === false) return\n  if (target == null) {\n    const pkgTarget = resolvePackageTarget(pkg)\n    if (pkgTarget) {\n      target = pkgTarget\n    } else {\n      return\n    }\n  }\n\n  if (typeof target === 'number') {\n    throw new TypeError(`Invalid target: ${target}`)\n  }\n  const targets = resolveComma(toArray(target))\n  if (targets.length)\n    logger.info(\n      prettyName(name),\n      `target${targets.length > 1 ? 's' : ''}: ${generateColor(name)(targets.join(', '))}`,\n    )\n\n  return targets\n}\n\nexport function resolvePackageTarget(pkg?: PackageJson): string | undefined {\n  const nodeVersion = pkg?.engines?.node\n  if (!nodeVersion) return\n  const nodeMinVersion = minVersion(nodeVersion)\n  if (!nodeMinVersion) return\n  if (nodeMinVersion.version === '0.0.0') return\n  return `node${nodeMinVersion.version}`\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"877faffe-c6f4-4505-9e27-c18df02d6b65","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885200,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/target.ts","content":"import minVersion from 'semver/ranges/min-version.js'\nimport { resolveComma, toArray } from '../utils/general.ts'\nimport { generateColor, prettyName, type Logger } from '../utils/logger.ts'\nimport type { PackageJson } from 'pkg-types'\n\nexport function resolveTarget(\n  logger: Logger,\n  target: string | string[] | false | undefined,\n  pkg?: PackageJson,\n  name?: string,\n): string[] | undefined {\n  if (target === false) return\n  if (target == null) {\n    const pkgTarget = resolvePackageTarget(pkg)\n    if (pkgTarget) {\n      target = pkgTarget\n    } else {\n      return\n    }\n  }\n\n  if (typeof target === 'number') {\n    throw new TypeError(`Invalid target: ${target}`)\n  }\n  const targets = resolveComma(toArray(target))\n  if (targets.length)\n    logger.info(\n      prettyName(name),\n      `target${targets.length > 1 ? 's' : ''}: ${generateColor(name)(targets.join(', '))}`,\n    )\n\n  return targets\n}\n\nexport function resolvePackageTarget(pkg?: PackageJson): string | undefined {\n  const nodeVersion = pkg?.engines?.node\n  if (!nodeVersion) return\n  const nodeMinVersion = minVersion(nodeVersion)\n  if (!nodeMinVersion) return\n  if (nodeMinVersion.version === '0.0.0') return\n  return `node${nodeMinVersion.version}`\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"d09edef1-f1c0-40c9-81a4-d9fda6ea174c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885200,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"6171cfbc-2cce-478d-ad9b-aaf7c6a765af","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885200,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/index.d.ts","content":"import type { Awaitable } from \"../utils/types.ts\";\nimport type { InlineConfig, ResolvedConfig } from \"./types.ts\";\nexport * from \"./types.ts\";\nexport declare function resolveConfig(inlineConfig: InlineConfig): Promise<{\n\tconfigs: ResolvedConfig[];\n\tfiles: string[];\n}>;\nexport declare function mergeUserOptions<\n\tT extends object,\n\tA extends unknown[]\n>(defaults: T, user: T | undefined | null | ((options: T, ...args: A) => Awaitable<T | void | null>), args: A): Promise<T>;\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"ad38c958-880b-4e39-8370-3dc18b04c162","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885200,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/index.d.ts","content":"import type { Awaitable } from \"../utils/types.ts\";\nimport type { InlineConfig, ResolvedConfig } from \"./types.ts\";\nexport * from \"./types.ts\";\nexport declare function resolveConfig(inlineConfig: InlineConfig): Promise<{\n\tconfigs: ResolvedConfig[];\n\tfiles: string[];\n}>;\nexport declare function mergeUserOptions<\n\tT extends object,\n\tA extends unknown[]\n>(defaults: T, user: T | undefined | null | ((options: T, ...args: A) => Awaitable<T | void | null>), args: A): Promise<T>;\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"8d575728-61cb-44d0-b8f7-d6718b46c38c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885201,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/target.ts","content":"import minVersion from 'semver/ranges/min-version.js'\nimport { resolveComma, toArray } from '../utils/general.ts'\nimport { generateColor, prettyName, type Logger } from '../utils/logger.ts'\nimport type { PackageJson } from 'pkg-types'\n\nexport function resolveTarget(\n  logger: Logger,\n  target: string | string[] | false | undefined,\n  pkg?: PackageJson,\n  name?: string,\n): string[] | undefined {\n  if (target === false) return\n  if (target == null) {\n    const pkgTarget = resolvePackageTarget(pkg)\n    if (pkgTarget) {\n      target = pkgTarget\n    } else {\n      return\n    }\n  }\n\n  if (typeof target === 'number') {\n    throw new TypeError(`Invalid target: ${target}`)\n  }\n  const targets = resolveComma(toArray(target))\n  if (targets.length)\n    logger.info(\n      prettyName(name),\n      `target${targets.length > 1 ? 's' : ''}: ${generateColor(name)(targets.join(', '))}`,\n    )\n\n  return targets\n}\n\nexport function resolvePackageTarget(pkg?: PackageJson): string | undefined {\n  const nodeVersion = pkg?.engines?.node\n  if (!nodeVersion) return\n  const nodeMinVersion = minVersion(nodeVersion)\n  if (!nodeMinVersion) return\n  if (nodeMinVersion.version === '0.0.0') return\n  return `node${nodeMinVersion.version}`\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"d09edef1-f1c0-40c9-81a4-d9fda6ea174c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885201,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/types.ts","plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"0fc5cd98-4574-43b6-9362-f105a4799601","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885201,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/target.ts","module_request":"semver/ranges/min-version.js","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"354cb387-2b7f-4e55-afa2-e3aa8fe37fad","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885201,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"354cb387-2b7f-4e55-afa2-e3aa8fe37fad","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885201,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/target.ts","module_request":"semver/ranges/min-version.js","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"3acf33ca-751d-466a-9c4e-0ee80ba74e2f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885201,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/target.ts","module_request":"../utils/general.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"2bc5e2c6-dd06-4041-aaa7-f450aa4c1119","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885202,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"2bc5e2c6-dd06-4041-aaa7-f450aa4c1119","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885202,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/target.ts","module_request":"../utils/general.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"7f518bf6-f115-4404-93db-4413af3a338b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885202,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/target.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"45e41124-bcd1-4962-817a-3d55ce16b4e8","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885202,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"45e41124-bcd1-4962-817a-3d55ce16b4e8","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885202,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/target.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"c582c3ba-5ad5-417e-9b5f-b6c8230acf8f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885202,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/index.d.ts","content":"import { Awaitable } from \"../utils/types.ts\";\nimport { InlineConfig, ResolvedConfig } from \"./types.ts\";\nexport * from \"./types.ts\";\nexport var resolveConfig = [33, () => [InlineConfig, ResolvedConfig, Promise]];\nexport var mergeUserOptions = [34, (T, A) => [T, T, T, A, T, Awaitable, A, T, Promise]];","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"8d575728-61cb-44d0-b8f7-d6718b46c38c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885202,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/index.d.ts","content":"import { Awaitable } from \"../utils/types.ts\";\nimport { InlineConfig, ResolvedConfig } from \"./types.ts\";\nexport * from \"./types.ts\";\nexport var resolveConfig = [33, () => [InlineConfig, ResolvedConfig, Promise]];\nexport var mergeUserOptions = [34, (T, A) => [T, T, T, A, T, Awaitable, A, T, Promise]];","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"3f2c58d7-fbdd-47fc-ab80-8df16630d670","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885203,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"3acf33ca-751d-466a-9c4e-0ee80ba74e2f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885203,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/target.ts","module_request":"semver/ranges/min-version.js","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"456a97c0-0622-49aa-996e-802a1471069c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885203,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"7f518bf6-f115-4404-93db-4413af3a338b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885203,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/target.ts","module_request":"../utils/general.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"c8229c13-618d-4847-98f5-f66532a07b72","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885203,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"c582c3ba-5ad5-417e-9b5f-b6c8230acf8f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885203,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/target.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"a6c5daa5-29db-4d6a-8c88-49a50c9f6e58","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885203,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/types.ts","content":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"0fc5cd98-4574-43b6-9362-f105a4799601","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885204,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/types.ts","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"ddec3d74-3045-49cc-b11a-59c22144b66c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885204,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/types.ts","content":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"ddec3d74-3045-49cc-b11a-59c22144b66c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885204,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/types.ts","plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"20dd57f9-a47d-4c50-8342-809c9b6f9711","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885204,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/types.ts","content":null,"plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"20dd57f9-a47d-4c50-8342-809c9b6f9711","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885204,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/index.d.ts","content":"import { Awaitable } from \"../utils/types.ts\";\nimport { InlineConfig, ResolvedConfig } from \"./types.ts\";\nexport * from \"./types.ts\";\nexport var resolveConfig = [33, () => [InlineConfig, ResolvedConfig, Promise]];\nexport var mergeUserOptions = [34, (T, A) => [T, T, T, A, T, Awaitable, A, T, Promise]];","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"3f2c58d7-fbdd-47fc-ab80-8df16630d670","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885204,"action":"HookResolveIdCallEnd","resolved_id":"semver/ranges/min-version.js","is_external":true,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"456a97c0-0622-49aa-996e-802a1471069c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885204,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"c8229c13-618d-4847-98f5-f66532a07b72","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885204,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/target.ts","module_request":"../utils/general.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"a3035751-53f6-44fd-a032-afcef628b185","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885205,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"a6c5daa5-29db-4d6a-8c88-49a50c9f6e58","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885205,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/target.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"098be607-6513-4b56-8884-c72de2acacf8","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885205,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/types.ts","content":"export type Overwrite<T, U> = Omit<T, keyof U> & U\nexport type Awaitable<T> = T | Promise<T>\nexport type MarkPartial<T, K extends keyof T> = Omit<Required<T>, K> &\n  Partial<Pick<T, K>>\nexport type Arrayable<T> = T | T[]\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"4f730fed-69ea-4934-9761-18b43bf4930e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885205,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"a3035751-53f6-44fd-a032-afcef628b185","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885205,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/target.ts","module_request":"../utils/general.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"c1ecd06f-2977-4224-8820-0d7bdc6df3a4","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885205,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"c1ecd06f-2977-4224-8820-0d7bdc6df3a4","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885205,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"098be607-6513-4b56-8884-c72de2acacf8","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885205,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/target.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"a940a8d4-006f-4b42-a533-56346f93799d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885206,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"a940a8d4-006f-4b42-a533-56346f93799d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885206,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/types.ts","content":"export type Overwrite<T, U> = Omit<T, keyof U> & U\nexport type Awaitable<T> = T | Promise<T>\nexport type MarkPartial<T, K extends keyof T> = Omit<Required<T>, K> &\n  Partial<Pick<T, K>>\nexport type Arrayable<T> = T | T[]\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"4f730fed-69ea-4934-9761-18b43bf4930e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885206,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/types.ts","content":"export type Overwrite<T, U> = Omit<T, keyof U> & U\nexport type Awaitable<T> = T | Promise<T>\nexport type MarkPartial<T, K extends keyof T> = Omit<Required<T>, K> &\n  Partial<Pick<T, K>>\nexport type Arrayable<T> = T | T[]\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"da6c1cb2-572c-4a0b-9d4f-284f81b8898e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885206,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/types.ts","content":"export type Overwrite<T, U> = Omit<T, keyof U> & U\nexport type Awaitable<T> = T | Promise<T>\nexport type MarkPartial<T, K extends keyof T> = Omit<Required<T>, K> &\n  Partial<Pick<T, K>>\nexport type Arrayable<T> = T | T[]\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"da6c1cb2-572c-4a0b-9d4f-284f81b8898e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885206,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/types.ts","content":"export type Overwrite<T, U> = Omit<T, keyof U> & U\nexport type Awaitable<T> = T | Promise<T>\nexport type MarkPartial<T, K extends keyof T> = Omit<Required<T>, K> &\n  Partial<Pick<T, K>>\nexport type Arrayable<T> = T | T[]\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"41bf5fc4-5aec-44c9-9b29-10a6e322a170","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885206,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/entry.ts","content":"import path from 'node:path'\nimport { glob } from 'tinyglobby'\nimport { fsExists, lowestCommonAncestor } from '../utils/fs.ts'\nimport { generateColor, prettyName, type Logger } from '../utils/logger.ts'\nimport type { UserConfig } from '../config/index.ts'\n\nexport async function resolveEntry(\n  logger: Logger,\n  entry: UserConfig['entry'],\n  cwd: string,\n  name?: string,\n): Promise<Record<string, string>> {\n  const nameLabel = name ? `[${name}] ` : ''\n  if (!entry || Object.keys(entry).length === 0) {\n    const defaultEntry = path.resolve(cwd, 'src/index.ts')\n\n    if (await fsExists(defaultEntry)) {\n      entry = { index: defaultEntry }\n    } else {\n      throw new Error(\n        `${nameLabel}No input files, try \"tsdown <your-file>\" or create src/index.ts`,\n      )\n    }\n  }\n\n  const entryMap = await toObjectEntry(entry, cwd)\n  const entries = Object.values(entryMap)\n  if (entries.length === 0) {\n    throw new Error(`${nameLabel}Cannot find entry: ${JSON.stringify(entry)}`)\n  }\n  logger.info(\n    prettyName(name),\n    `entry: ${generateColor(name)(entries.map((entry) => path.relative(cwd, entry)).join(', '))}`,\n  )\n  return entryMap\n}\n\nexport async function toObjectEntry(\n  entry: string | string[] | Record<string, string>,\n  cwd: string,\n): Promise<Record<string, string>> {\n  if (typeof entry === 'string') {\n    entry = [entry]\n  }\n  if (!Array.isArray(entry)) {\n    return entry\n  }\n\n  const resolvedEntry = (\n    await glob(entry, { cwd, expandDirectories: false })\n  ).map((file) => path.resolve(cwd, file))\n  const base = lowestCommonAncestor(...resolvedEntry)\n  return Object.fromEntries(\n    resolvedEntry.map((file) => {\n      const relative = path.relative(base, file)\n      return [\n        relative.slice(0, relative.length - path.extname(relative).length),\n        file,\n      ]\n    }),\n  )\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"5df7f8dd-cf2d-4f5f-bcd1-8302c5ffe4cb","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885207,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/lightningcss.ts","content":"import type { Targets } from 'lightningcss'\n\n/**\n * Converts esbuild target [^1] (which is also used by Rolldown [^2]) to Lightning CSS targets [^3].\n *\n * [^1]: https://esbuild.github.io/api/#target\n * [^2]: https://github.com/rolldown/rolldown/blob/v1.0.0-beta.8/packages/rolldown/src/binding.d.ts#L1429-L1431\n * [^3]: https://lightningcss.dev/transpilation.html\n */\nexport function esbuildTargetToLightningCSS(\n  target: string[],\n): Targets | undefined {\n  let targets: Targets | undefined\n\n  const targetString = target.join(' ').toLowerCase()\n  const matches = [...targetString.matchAll(TARGET_REGEX)]\n\n  for (const match of matches) {\n    // The name in the esbuild target format.\n    const name = match[1]\n    // The browser name in Lightning CSS targets format.\n    const browser = ESBUILD_LIGHTNINGCSS_MAPPING[name]\n    if (!browser) {\n      continue\n    }\n\n    // The version string.\n    const version = match[2]\n    // An integer representing the major, minor, and patch version numbers in\n    // Lightning CSS targets format.\n    const versionInt = parseVersion(version)\n    if (versionInt == null) {\n      continue\n    }\n\n    targets = targets || {}\n    targets[browser] = versionInt\n  }\n\n  return targets\n}\n\nconst TARGET_REGEX = /([a-z]+)(\\d+(?:\\.\\d+)*)/g\n\n// A mapping from the name in the esbuild target format to the browser name in\n// Lightning CSS targets format.\nconst ESBUILD_LIGHTNINGCSS_MAPPING: Record<string, keyof Targets> = {\n  chrome: 'chrome',\n  edge: 'edge',\n  firefox: 'firefox',\n  ie: 'ie',\n  ios: 'ios_saf',\n  opera: 'opera',\n  safari: 'safari',\n}\n\n// Copied from https://github.com/parcel-bundler/lightningcss/blob/v1.29.3/node/browserslistToTargets.js#L35-L46\nfunction parseVersion(version: string): number | null {\n  const [major, minor = 0, patch = 0] = version\n    .split('-')[0]\n    .split('.')\n    .map((v) => Number.parseInt(v, 10))\n\n  if (Number.isNaN(major) || Number.isNaN(minor) || Number.isNaN(patch)) {\n    return null\n  }\n\n  return (major << 16) | (minor << 8) | patch\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"c07cc113-03cf-491a-9962-383a13f29a4f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885207,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/types.ts","content":"export type Overwrite<T, U> = Omit<T, keyof U> & U\nexport type Awaitable<T> = T | Promise<T>\nexport type MarkPartial<T, K extends keyof T> = Omit<Required<T>, K> &\n  Partial<Pick<T, K>>\nexport type Arrayable<T> = T | T[]\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"41bf5fc4-5aec-44c9-9b29-10a6e322a170","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885207,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/lightningcss.ts","content":"import type { Targets } from 'lightningcss'\n\n/**\n * Converts esbuild target [^1] (which is also used by Rolldown [^2]) to Lightning CSS targets [^3].\n *\n * [^1]: https://esbuild.github.io/api/#target\n * [^2]: https://github.com/rolldown/rolldown/blob/v1.0.0-beta.8/packages/rolldown/src/binding.d.ts#L1429-L1431\n * [^3]: https://lightningcss.dev/transpilation.html\n */\nexport function esbuildTargetToLightningCSS(\n  target: string[],\n): Targets | undefined {\n  let targets: Targets | undefined\n\n  const targetString = target.join(' ').toLowerCase()\n  const matches = [...targetString.matchAll(TARGET_REGEX)]\n\n  for (const match of matches) {\n    // The name in the esbuild target format.\n    const name = match[1]\n    // The browser name in Lightning CSS targets format.\n    const browser = ESBUILD_LIGHTNINGCSS_MAPPING[name]\n    if (!browser) {\n      continue\n    }\n\n    // The version string.\n    const version = match[2]\n    // An integer representing the major, minor, and patch version numbers in\n    // Lightning CSS targets format.\n    const versionInt = parseVersion(version)\n    if (versionInt == null) {\n      continue\n    }\n\n    targets = targets || {}\n    targets[browser] = versionInt\n  }\n\n  return targets\n}\n\nconst TARGET_REGEX = /([a-z]+)(\\d+(?:\\.\\d+)*)/g\n\n// A mapping from the name in the esbuild target format to the browser name in\n// Lightning CSS targets format.\nconst ESBUILD_LIGHTNINGCSS_MAPPING: Record<string, keyof Targets> = {\n  chrome: 'chrome',\n  edge: 'edge',\n  firefox: 'firefox',\n  ie: 'ie',\n  ios: 'ios_saf',\n  opera: 'opera',\n  safari: 'safari',\n}\n\n// Copied from https://github.com/parcel-bundler/lightningcss/blob/v1.29.3/node/browserslistToTargets.js#L35-L46\nfunction parseVersion(version: string): number | null {\n  const [major, minor = 0, patch = 0] = version\n    .split('-')[0]\n    .split('.')\n    .map((v) => Number.parseInt(v, 10))\n\n  if (Number.isNaN(major) || Number.isNaN(minor) || Number.isNaN(patch)) {\n    return null\n  }\n\n  return (major << 16) | (minor << 8) | patch\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"c07cc113-03cf-491a-9962-383a13f29a4f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885208,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.d.ts","module_request":"../utils/types.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"4ed9bd10-07f7-41e7-85af-7b8a4ad4369b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885208,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/lightningcss.ts","content":"import type { Targets } from 'lightningcss'\n\n/**\n * Converts esbuild target [^1] (which is also used by Rolldown [^2]) to Lightning CSS targets [^3].\n *\n * [^1]: https://esbuild.github.io/api/#target\n * [^2]: https://github.com/rolldown/rolldown/blob/v1.0.0-beta.8/packages/rolldown/src/binding.d.ts#L1429-L1431\n * [^3]: https://lightningcss.dev/transpilation.html\n */\nexport function esbuildTargetToLightningCSS(\n  target: string[],\n): Targets | undefined {\n  let targets: Targets | undefined\n\n  const targetString = target.join(' ').toLowerCase()\n  const matches = [...targetString.matchAll(TARGET_REGEX)]\n\n  for (const match of matches) {\n    // The name in the esbuild target format.\n    const name = match[1]\n    // The browser name in Lightning CSS targets format.\n    const browser = ESBUILD_LIGHTNINGCSS_MAPPING[name]\n    if (!browser) {\n      continue\n    }\n\n    // The version string.\n    const version = match[2]\n    // An integer representing the major, minor, and patch version numbers in\n    // Lightning CSS targets format.\n    const versionInt = parseVersion(version)\n    if (versionInt == null) {\n      continue\n    }\n\n    targets = targets || {}\n    targets[browser] = versionInt\n  }\n\n  return targets\n}\n\nconst TARGET_REGEX = /([a-z]+)(\\d+(?:\\.\\d+)*)/g\n\n// A mapping from the name in the esbuild target format to the browser name in\n// Lightning CSS targets format.\nconst ESBUILD_LIGHTNINGCSS_MAPPING: Record<string, keyof Targets> = {\n  chrome: 'chrome',\n  edge: 'edge',\n  firefox: 'firefox',\n  ie: 'ie',\n  ios: 'ios_saf',\n  opera: 'opera',\n  safari: 'safari',\n}\n\n// Copied from https://github.com/parcel-bundler/lightningcss/blob/v1.29.3/node/browserslistToTargets.js#L35-L46\nfunction parseVersion(version: string): number | null {\n  const [major, minor = 0, patch = 0] = version\n    .split('-')[0]\n    .split('.')\n    .map((v) => Number.parseInt(v, 10))\n\n  if (Number.isNaN(major) || Number.isNaN(minor) || Number.isNaN(patch)) {\n    return null\n  }\n\n  return (major << 16) | (minor << 8) | patch\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"0b309f6c-dbe8-48f1-be0c-58d6840afad2","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885208,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"4ed9bd10-07f7-41e7-85af-7b8a4ad4369b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885208,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/lightningcss.ts","content":"import type { Targets } from 'lightningcss'\n\n/**\n * Converts esbuild target [^1] (which is also used by Rolldown [^2]) to Lightning CSS targets [^3].\n *\n * [^1]: https://esbuild.github.io/api/#target\n * [^2]: https://github.com/rolldown/rolldown/blob/v1.0.0-beta.8/packages/rolldown/src/binding.d.ts#L1429-L1431\n * [^3]: https://lightningcss.dev/transpilation.html\n */\nexport function esbuildTargetToLightningCSS(\n  target: string[],\n): Targets | undefined {\n  let targets: Targets | undefined\n\n  const targetString = target.join(' ').toLowerCase()\n  const matches = [...targetString.matchAll(TARGET_REGEX)]\n\n  for (const match of matches) {\n    // The name in the esbuild target format.\n    const name = match[1]\n    // The browser name in Lightning CSS targets format.\n    const browser = ESBUILD_LIGHTNINGCSS_MAPPING[name]\n    if (!browser) {\n      continue\n    }\n\n    // The version string.\n    const version = match[2]\n    // An integer representing the major, minor, and patch version numbers in\n    // Lightning CSS targets format.\n    const versionInt = parseVersion(version)\n    if (versionInt == null) {\n      continue\n    }\n\n    targets = targets || {}\n    targets[browser] = versionInt\n  }\n\n  return targets\n}\n\nconst TARGET_REGEX = /([a-z]+)(\\d+(?:\\.\\d+)*)/g\n\n// A mapping from the name in the esbuild target format to the browser name in\n// Lightning CSS targets format.\nconst ESBUILD_LIGHTNINGCSS_MAPPING: Record<string, keyof Targets> = {\n  chrome: 'chrome',\n  edge: 'edge',\n  firefox: 'firefox',\n  ie: 'ie',\n  ios: 'ios_saf',\n  opera: 'opera',\n  safari: 'safari',\n}\n\n// Copied from https://github.com/parcel-bundler/lightningcss/blob/v1.29.3/node/browserslistToTargets.js#L35-L46\nfunction parseVersion(version: string): number | null {\n  const [major, minor = 0, patch = 0] = version\n    .split('-')[0]\n    .split('.')\n    .map((v) => Number.parseInt(v, 10))\n\n  if (Number.isNaN(major) || Number.isNaN(minor) || Number.isNaN(patch)) {\n    return null\n  }\n\n  return (major << 16) | (minor << 8) | patch\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"0b309f6c-dbe8-48f1-be0c-58d6840afad2","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885208,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.d.ts","module_request":"../utils/types.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"713ae0fb-9ebe-4ab7-80de-d7c9b8a841fc","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885209,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/lightningcss.ts","content":"import type { Targets } from 'lightningcss'\n\n/**\n * Converts esbuild target [^1] (which is also used by Rolldown [^2]) to Lightning CSS targets [^3].\n *\n * [^1]: https://esbuild.github.io/api/#target\n * [^2]: https://github.com/rolldown/rolldown/blob/v1.0.0-beta.8/packages/rolldown/src/binding.d.ts#L1429-L1431\n * [^3]: https://lightningcss.dev/transpilation.html\n */\nexport function esbuildTargetToLightningCSS(\n  target: string[],\n): Targets | undefined {\n  let targets: Targets | undefined\n\n  const targetString = target.join(' ').toLowerCase()\n  const matches = [...targetString.matchAll(TARGET_REGEX)]\n\n  for (const match of matches) {\n    // The name in the esbuild target format.\n    const name = match[1]\n    // The browser name in Lightning CSS targets format.\n    const browser = ESBUILD_LIGHTNINGCSS_MAPPING[name]\n    if (!browser) {\n      continue\n    }\n\n    // The version string.\n    const version = match[2]\n    // An integer representing the major, minor, and patch version numbers in\n    // Lightning CSS targets format.\n    const versionInt = parseVersion(version)\n    if (versionInt == null) {\n      continue\n    }\n\n    targets = targets || {}\n    targets[browser] = versionInt\n  }\n\n  return targets\n}\n\nconst TARGET_REGEX = /([a-z]+)(\\d+(?:\\.\\d+)*)/g\n\n// A mapping from the name in the esbuild target format to the browser name in\n// Lightning CSS targets format.\nconst ESBUILD_LIGHTNINGCSS_MAPPING: Record<string, keyof Targets> = {\n  chrome: 'chrome',\n  edge: 'edge',\n  firefox: 'firefox',\n  ie: 'ie',\n  ios: 'ios_saf',\n  opera: 'opera',\n  safari: 'safari',\n}\n\n// Copied from https://github.com/parcel-bundler/lightningcss/blob/v1.29.3/node/browserslistToTargets.js#L35-L46\nfunction parseVersion(version: string): number | null {\n  const [major, minor = 0, patch = 0] = version\n    .split('-')[0]\n    .split('.')\n    .map((v) => Number.parseInt(v, 10))\n\n  if (Number.isNaN(major) || Number.isNaN(minor) || Number.isNaN(patch)) {\n    return null\n  }\n\n  return (major << 16) | (minor << 8) | patch\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"b1c23e89-804c-4986-9a21-75d09cf65fc4","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885209,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.d.ts","module_request":"./types.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"990018df-0a06-4720-9e7c-a6dc5a59ee42","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885209,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/lightningcss.ts","content":"import type { Targets } from 'lightningcss'\n\n/**\n * Converts esbuild target [^1] (which is also used by Rolldown [^2]) to Lightning CSS targets [^3].\n *\n * [^1]: https://esbuild.github.io/api/#target\n * [^2]: https://github.com/rolldown/rolldown/blob/v1.0.0-beta.8/packages/rolldown/src/binding.d.ts#L1429-L1431\n * [^3]: https://lightningcss.dev/transpilation.html\n */\nexport function esbuildTargetToLightningCSS(\n  target: string[],\n): Targets | undefined {\n  let targets: Targets | undefined\n\n  const targetString = target.join(' ').toLowerCase()\n  const matches = [...targetString.matchAll(TARGET_REGEX)]\n\n  for (const match of matches) {\n    // The name in the esbuild target format.\n    const name = match[1]\n    // The browser name in Lightning CSS targets format.\n    const browser = ESBUILD_LIGHTNINGCSS_MAPPING[name]\n    if (!browser) {\n      continue\n    }\n\n    // The version string.\n    const version = match[2]\n    // An integer representing the major, minor, and patch version numbers in\n    // Lightning CSS targets format.\n    const versionInt = parseVersion(version)\n    if (versionInt == null) {\n      continue\n    }\n\n    targets = targets || {}\n    targets[browser] = versionInt\n  }\n\n  return targets\n}\n\nconst TARGET_REGEX = /([a-z]+)(\\d+(?:\\.\\d+)*)/g\n\n// A mapping from the name in the esbuild target format to the browser name in\n// Lightning CSS targets format.\nconst ESBUILD_LIGHTNINGCSS_MAPPING: Record<string, keyof Targets> = {\n  chrome: 'chrome',\n  edge: 'edge',\n  firefox: 'firefox',\n  ie: 'ie',\n  ios: 'ios_saf',\n  opera: 'opera',\n  safari: 'safari',\n}\n\n// Copied from https://github.com/parcel-bundler/lightningcss/blob/v1.29.3/node/browserslistToTargets.js#L35-L46\nfunction parseVersion(version: string): number | null {\n  const [major, minor = 0, patch = 0] = version\n    .split('-')[0]\n    .split('.')\n    .map((v) => Number.parseInt(v, 10))\n\n  if (Number.isNaN(major) || Number.isNaN(minor) || Number.isNaN(patch)) {\n    return null\n  }\n\n  return (major << 16) | (minor << 8) | patch\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"b1c23e89-804c-4986-9a21-75d09cf65fc4","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885210,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"990018df-0a06-4720-9e7c-a6dc5a59ee42","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885210,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/tsconfig.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"7832b0ec-21c6-4d2b-9818-3df3e80aa435","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885210,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.d.ts","module_request":"./types.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"3ac03fa9-c694-481a-9028-c7ff4f94f0c4","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885210,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/tsconfig.ts","module_request":"ansis","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"fdaffdef-c2c9-4b7a-b048-c39413ae164a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885210,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"fdaffdef-c2c9-4b7a-b048-c39413ae164a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885211,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/tsconfig.ts","module_request":"ansis","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"31e40e82-d0dc-4fe1-8b23-f5bc3fde4655","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885211,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/tsconfig.ts","module_request":"empathic/find","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"81529ab6-7e09-4617-b2d7-8e4eb9ca00f7","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885211,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"81529ab6-7e09-4617-b2d7-8e4eb9ca00f7","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885211,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/tsconfig.ts","module_request":"empathic/find","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"6b44f7a4-2163-4c43-8853-71de35508ac0","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885211,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/tsconfig.ts","module_request":"../utils/fs.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"5c1dc27b-b5f5-4705-9249-7710a36fa0f3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885212,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"5c1dc27b-b5f5-4705-9249-7710a36fa0f3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885212,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/tsconfig.ts","module_request":"../utils/fs.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"d68fc87c-4578-49f0-8063-48ed147917b0","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885212,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/tsconfig.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"8a47a422-579e-4412-a69f-b0c0448d9126","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885212,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"8a47a422-579e-4412-a69f-b0c0448d9126","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885212,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/tsconfig.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"fb48bfeb-7e0e-435a-aaec-af11e297bea6","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885212,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"7832b0ec-21c6-4d2b-9818-3df3e80aa435","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885212,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/tsconfig.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"f1632290-7544-4fc7-ab38-fedbc4d42279","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885213,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"31e40e82-d0dc-4fe1-8b23-f5bc3fde4655","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885213,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/tsconfig.ts","module_request":"ansis","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"8766d3b7-3954-4723-8c82-6290e3eb6d54","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885213,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"6b44f7a4-2163-4c43-8853-71de35508ac0","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885213,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/tsconfig.ts","module_request":"empathic/find","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"e6e00144-bfd5-4400-ab6d-8845221df6e7","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885213,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"d68fc87c-4578-49f0-8063-48ed147917b0","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885213,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/tsconfig.ts","module_request":"../utils/fs.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"8b7edb75-a0b9-45be-8aaf-6afafb7e4ad3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885213,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"fb48bfeb-7e0e-435a-aaec-af11e297bea6","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885214,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/tsconfig.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"fc046900-12db-43be-807f-552f6063d64e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885214,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"f1632290-7544-4fc7-ab38-fedbc4d42279","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885214,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/tsconfig.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"b2f1fa6a-fdb5-4577-8964-6c8883cb9d5e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885214,"action":"HookResolveIdCallEnd","resolved_id":"ansis","is_external":true,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"8766d3b7-3954-4723-8c82-6290e3eb6d54","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885214,"action":"HookResolveIdCallEnd","resolved_id":"empathic/find","is_external":true,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"e6e00144-bfd5-4400-ab6d-8845221df6e7","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885214,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"8b7edb75-a0b9-45be-8aaf-6afafb7e4ad3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885214,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/tsconfig.ts","module_request":"../utils/fs.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"ed623543-90d0-4e61-ba7e-5ba58bfa2304","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885215,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"fc046900-12db-43be-807f-552f6063d64e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885215,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/tsconfig.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"ad9c0829-6b89-4ba4-bc46-42e27db638a6","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885215,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"b2f1fa6a-fdb5-4577-8964-6c8883cb9d5e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885215,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/tsconfig.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"f807ee59-a413-417b-94b3-3328717b9fb5","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885215,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"f807ee59-a413-417b-94b3-3328717b9fb5","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885215,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"ed623543-90d0-4e61-ba7e-5ba58bfa2304","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885215,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/tsconfig.ts","module_request":"../utils/fs.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"574c2e0d-c851-43bf-9474-7054e5ae09d5","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885215,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"574c2e0d-c851-43bf-9474-7054e5ae09d5","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885216,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.d.ts","module_request":"./types.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"adea7d99-b86d-4cfb-ab66-a030c9ae4392","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885216,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"adea7d99-b86d-4cfb-ab66-a030c9ae4392","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885216,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/index.d.ts","module_request":"./types.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"2167596a-c5b6-48f9-b512-a6895fa83849","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885216,"action":"HookResolveIdCallEnd","resolved_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/types.d.ts","is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"713ae0fb-9ebe-4ab7-80de-d7c9b8a841fc","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885216,"action":"HookResolveIdCallEnd","resolved_id":"/Users/kevin/Developer/open-source/tsdown/src/config/types.d.ts","is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"3ac03fa9-c694-481a-9028-c7ff4f94f0c4","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885217,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"ad9c0829-6b89-4ba4-bc46-42e27db638a6","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885217,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/tsconfig.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"c3dc5f3f-4d6e-45fb-bdc4-d2ce3af1ae0f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885218,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"c3dc5f3f-4d6e-45fb-bdc4-d2ce3af1ae0f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885218,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/publint.ts","module_request":"node:process","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"aad0bf6b-cb3c-433f-84d1-077f15e6c5bf","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885218,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/config.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"5c5cd8f8-f798-48bd-9cca-9c109f46dd79","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885218,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"5c5cd8f8-f798-48bd-9cca-9c109f46dd79","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885218,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/config.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"825c28f5-0739-4a69-b010-df912e0debe9","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885219,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/config.ts","module_request":"node:process","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"73957199-124e-4005-ac21-c997d4937551","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885219,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"73957199-124e-4005-ac21-c997d4937551","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885219,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/config.ts","module_request":"node:process","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"dc0ba235-88a0-4523-8b45-1d7f23bad729","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885219,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/config.ts","module_request":"node:url","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"507aae4c-3164-49c1-b2b2-a4a9a3e0cd93","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885219,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"507aae4c-3164-49c1-b2b2-a4a9a3e0cd93","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885219,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/config.ts","module_request":"node:url","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"41e8e204-da2e-4e6b-aefe-a484c7b1d5bf","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885219,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/config.ts","module_request":"ansis","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"31949964-386e-4bbc-9f19-eb3924b8abdc","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885220,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"31949964-386e-4bbc-9f19-eb3924b8abdc","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885220,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/config.ts","module_request":"ansis","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"0c5fd3a6-79de-4959-a0b6-3004e182932b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885220,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/config.ts","module_request":"unconfig","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"d9a7381a-6bbe-4cb3-9174-61d3203f5c0f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885220,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"d9a7381a-6bbe-4cb3-9174-61d3203f5c0f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885220,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/config.ts","module_request":"unconfig","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"76fca58b-b521-4a4d-b92b-65c43583a045","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885220,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/config.ts","module_request":"../utils/fs.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"688f9350-c208-41d8-a8bc-838daa332f72","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885220,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"688f9350-c208-41d8-a8bc-838daa332f72","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885221,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/config.ts","module_request":"../utils/fs.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"c3d2f2d3-5553-4cdb-bfc5-cc38a3ddae33","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885221,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/config.ts","module_request":"../utils/general.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"615fb4bf-de09-4293-8b4c-f0c41f4484cf","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885221,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"615fb4bf-de09-4293-8b4c-f0c41f4484cf","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885221,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/config.ts","module_request":"../utils/general.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"497d512d-a3a0-44af-b7f7-6da05b672ff8","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885221,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/config.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"71fb3aa7-8bb0-4f05-8aa8-04adfb7d99b0","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885221,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"71fb3aa7-8bb0-4f05-8aa8-04adfb7d99b0","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885221,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/config.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"4f9b1d4b-415b-44cb-9b19-e76ae3af070e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885221,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/config.ts","module_request":"unrun","import_kind":"dynamic-import","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"a72cc770-a3ae-4f46-b5fd-437702709cd0","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885222,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"a72cc770-a3ae-4f46-b5fd-437702709cd0","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885222,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/config.ts","module_request":"unrun","import_kind":"dynamic-import","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"6512b971-9dc3-44fe-b3ab-34d98399e60b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885222,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"825c28f5-0739-4a69-b010-df912e0debe9","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885222,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/config.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"ed54649a-b02e-4565-8e64-ae1380187e24","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885222,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"dc0ba235-88a0-4523-8b45-1d7f23bad729","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885222,"action":"HookResolveIdCallEnd","resolved_id":"/Users/kevin/Developer/open-source/tsdown/src/config/types.d.ts","is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"2167596a-c5b6-48f9-b512-a6895fa83849","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885222,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/types.d.ts","plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"05feef54-14f9-4851-b6e7-ab2e45dc9965","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885223,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/types.d.ts","content":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"05feef54-14f9-4851-b6e7-ab2e45dc9965","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885223,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/types.d.ts","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"86abadea-3c73-4c2b-8872-33d860ec8f89","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885223,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/config.ts","module_request":"node:process","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"d4d66ad4-5e8c-442c-a08d-bf99e4ce1e87","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885223,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"41e8e204-da2e-4e6b-aefe-a484c7b1d5bf","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885223,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/types.d.ts","content":"export type Overwrite<\n\tT,\n\tU\n> = Omit<T, keyof U> & U;\nexport type Awaitable<T> = T | Promise<T>;\nexport type MarkPartial<\n\tT,\n\tK extends keyof T\n> = Omit<Required<T>, K> & Partial<Pick<T, K>>;\nexport type Arrayable<T> = T | T[];\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"86abadea-3c73-4c2b-8872-33d860ec8f89","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885223,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/config.ts","module_request":"node:url","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"d90de89e-77cd-4726-a8aa-a40a28a63052","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885223,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"0c5fd3a6-79de-4959-a0b6-3004e182932b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885224,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/config.ts","module_request":"ansis","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"5a9118c3-6af7-4c50-b878-3c4e0c57f6e1","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885224,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"76fca58b-b521-4a4d-b92b-65c43583a045","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885224,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/config.ts","module_request":"unconfig","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"1c74e525-9a33-4c59-8b9d-694b09cd2b04","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885224,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"c3d2f2d3-5553-4cdb-bfc5-cc38a3ddae33","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885224,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/types.d.ts","content":"export type Overwrite<\n\tT,\n\tU\n> = Omit<T, keyof U> & U;\nexport type Awaitable<T> = T | Promise<T>;\nexport type MarkPartial<\n\tT,\n\tK extends keyof T\n> = Omit<Required<T>, K> & Partial<Pick<T, K>>;\nexport type Arrayable<T> = T | T[];\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"3516086c-facb-4187-91dd-8e795dd306a2","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885224,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/config.ts","module_request":"../utils/fs.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"0c52f377-7d9d-4a0c-934d-6533a6bb4716","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885224,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"497d512d-a3a0-44af-b7f7-6da05b672ff8","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885224,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/config.ts","module_request":"../utils/general.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"014a5a7e-b99b-441b-9fe7-96eadf6d8546","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885225,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"4f9b1d4b-415b-44cb-9b19-e76ae3af070e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885225,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/config.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"1deed4f3-bb2a-4b04-95ef-bd07d18bee55","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885225,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"6512b971-9dc3-44fe-b3ab-34d98399e60b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885225,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/config.ts","module_request":"unrun","import_kind":"dynamic-import","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"fa2567e4-481f-4be8-9aaf-046177f53195","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885225,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"ed54649a-b02e-4565-8e64-ae1380187e24","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885225,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/config.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"72324525-4284-4ac5-9042-96df4a7e89e1","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885225,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/types.d.ts","content":"export type Overwrite<\n\tT,\n\tU\n> = Omit<T, keyof U> & U;\nexport type Awaitable<T> = T | Promise<T>;\nexport type MarkPartial<\n\tT,\n\tK extends keyof T\n> = Omit<Required<T>, K> & Partial<Pick<T, K>>;\nexport type Arrayable<T> = T | T[];\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"3516086c-facb-4187-91dd-8e795dd306a2","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885226,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/types.d.ts","content":"export type Overwrite<\n\tT,\n\tU\n> = Omit<T, keyof U> & U;\nexport type Awaitable<T> = T | Promise<T>;\nexport type MarkPartial<\n\tT,\n\tK extends keyof T\n> = Omit<Required<T>, K> & Partial<Pick<T, K>>;\nexport type Arrayable<T> = T | T[];\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"831e1acc-5a37-47ed-9c5c-39ab370323bd","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885226,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"aad0bf6b-cb3c-433f-84d1-077f15e6c5bf","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885226,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/package.ts","plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"eb2b5c56-049c-460f-a180-7788b77e0db0","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885226,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/entry.ts","content":"import path from 'node:path'\nimport { glob } from 'tinyglobby'\nimport { fsExists, lowestCommonAncestor } from '../utils/fs.ts'\nimport { generateColor, prettyName, type Logger } from '../utils/logger.ts'\nimport type { UserConfig } from '../config/index.ts'\n\nexport async function resolveEntry(\n  logger: Logger,\n  entry: UserConfig['entry'],\n  cwd: string,\n  name?: string,\n): Promise<Record<string, string>> {\n  const nameLabel = name ? `[${name}] ` : ''\n  if (!entry || Object.keys(entry).length === 0) {\n    const defaultEntry = path.resolve(cwd, 'src/index.ts')\n\n    if (await fsExists(defaultEntry)) {\n      entry = { index: defaultEntry }\n    } else {\n      throw new Error(\n        `${nameLabel}No input files, try \"tsdown <your-file>\" or create src/index.ts`,\n      )\n    }\n  }\n\n  const entryMap = await toObjectEntry(entry, cwd)\n  const entries = Object.values(entryMap)\n  if (entries.length === 0) {\n    throw new Error(`${nameLabel}Cannot find entry: ${JSON.stringify(entry)}`)\n  }\n  logger.info(\n    prettyName(name),\n    `entry: ${generateColor(name)(entries.map((entry) => path.relative(cwd, entry)).join(', '))}`,\n  )\n  return entryMap\n}\n\nexport async function toObjectEntry(\n  entry: string | string[] | Record<string, string>,\n  cwd: string,\n): Promise<Record<string, string>> {\n  if (typeof entry === 'string') {\n    entry = [entry]\n  }\n  if (!Array.isArray(entry)) {\n    return entry\n  }\n\n  const resolvedEntry = (\n    await glob(entry, { cwd, expandDirectories: false })\n  ).map((file) => path.resolve(cwd, file))\n  const base = lowestCommonAncestor(...resolvedEntry)\n  return Object.fromEntries(\n    resolvedEntry.map((file) => {\n      const relative = path.relative(base, file)\n      return [\n        relative.slice(0, relative.length - path.extname(relative).length),\n        file,\n      ]\n    }),\n  )\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"26fc9ba8-c959-4026-a654-c2fd25b5356e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885226,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/package.ts","content":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"eb2b5c56-049c-460f-a180-7788b77e0db0","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885226,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/package.ts","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"c7377bbd-8056-4ed0-9c78-9d6d72ea0775","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885227,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/package.ts","content":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"c7377bbd-8056-4ed0-9c78-9d6d72ea0775","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885227,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/package.ts","plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"77ef691c-82e3-48bf-a896-bbf28621c9a2","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885227,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/package.ts","content":null,"plugin_name":"builtin:data-uri","plugin_id":10,"call_id":"77ef691c-82e3-48bf-a896-bbf28621c9a2","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885227,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/types.d.ts","content":"export var Overwrite = [35, (T, U) => [T, U, Omit, U]];\nexport var Awaitable = [36, T => [T, T, Promise]];\nexport var MarkPartial = [37, (T, K) => [T, T, Required, K, Omit, T, K, Pick, Partial]];\nexport var Arrayable = [38, T => [T, T]];","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"831e1acc-5a37-47ed-9c5c-39ab370323bd","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885227,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/package.ts","content":"import { readFile } from 'node:fs/promises'\nimport Debug from 'debug'\nimport { up as findPackage } from 'empathic/package'\nimport type { Format, NormalizedFormat } from '../config/index.ts'\nimport { resolveComma, toArray } from './general.ts'\nimport type { PackageJson } from 'pkg-types'\n\nconst debug = Debug('tsdown:package')\n\nexport async function readPackageJson(\n  dir: string,\n): Promise<PackageJson | undefined> {\n  const packageJsonPath = findPackage({ cwd: dir })\n  if (!packageJsonPath) return\n  debug('Reading package.json:', packageJsonPath)\n  const contents = await readFile(packageJsonPath, 'utf8')\n  return {\n    ...JSON.parse(contents),\n    packageJsonPath,\n  }\n}\n\nexport type PackageType = 'module' | 'commonjs' | undefined\nexport function getPackageType(pkg: PackageJson | undefined): PackageType {\n  if (pkg?.type) {\n    if (!['module', 'commonjs'].includes(pkg.type)) {\n      throw new Error(`Invalid package.json type: ${pkg.type}`)\n    }\n    return pkg.type\n  }\n}\n\nexport function normalizeFormat(format: Format | Format[]): NormalizedFormat[] {\n  return resolveComma(toArray<Format>(format, 'es')).map(\n    (format): NormalizedFormat => {\n      switch (format) {\n        case 'es':\n        case 'esm':\n        case 'module':\n          return 'es'\n        case 'cjs':\n        case 'commonjs':\n          return 'cjs'\n        default:\n          return format\n      }\n    },\n  )\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"50f92e7e-c3f8-4940-b493-8aa47aa7ae16","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885227,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/types.d.ts","content":"export var Overwrite = [35, (T, U) => [T, U, Omit, U]];\nexport var Awaitable = [36, T => [T, T, Promise]];\nexport var MarkPartial = [37, (T, K) => [T, T, Required, K, Omit, T, K, Pick, Partial]];\nexport var Arrayable = [38, T => [T, T]];","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"a5578093-7eaf-479d-8601-de1233fe737c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885227,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/package.ts","content":"import { readFile } from 'node:fs/promises'\nimport Debug from 'debug'\nimport { up as findPackage } from 'empathic/package'\nimport type { Format, NormalizedFormat } from '../config/index.ts'\nimport { resolveComma, toArray } from './general.ts'\nimport type { PackageJson } from 'pkg-types'\n\nconst debug = Debug('tsdown:package')\n\nexport async function readPackageJson(\n  dir: string,\n): Promise<PackageJson | undefined> {\n  const packageJsonPath = findPackage({ cwd: dir })\n  if (!packageJsonPath) return\n  debug('Reading package.json:', packageJsonPath)\n  const contents = await readFile(packageJsonPath, 'utf8')\n  return {\n    ...JSON.parse(contents),\n    packageJsonPath,\n  }\n}\n\nexport type PackageType = 'module' | 'commonjs' | undefined\nexport function getPackageType(pkg: PackageJson | undefined): PackageType {\n  if (pkg?.type) {\n    if (!['module', 'commonjs'].includes(pkg.type)) {\n      throw new Error(`Invalid package.json type: ${pkg.type}`)\n    }\n    return pkg.type\n  }\n}\n\nexport function normalizeFormat(format: Format | Format[]): NormalizedFormat[] {\n  return resolveComma(toArray<Format>(format, 'es')).map(\n    (format): NormalizedFormat => {\n      switch (format) {\n        case 'es':\n        case 'esm':\n        case 'module':\n          return 'es'\n        case 'cjs':\n        case 'commonjs':\n          return 'cjs'\n        default:\n          return format\n      }\n    },\n  )\n}\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"50f92e7e-c3f8-4940-b493-8aa47aa7ae16","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885228,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/package.ts","content":"import { readFile } from 'node:fs/promises'\nimport Debug from 'debug'\nimport { up as findPackage } from 'empathic/package'\nimport type { Format, NormalizedFormat } from '../config/index.ts'\nimport { resolveComma, toArray } from './general.ts'\nimport type { PackageJson } from 'pkg-types'\n\nconst debug = Debug('tsdown:package')\n\nexport async function readPackageJson(\n  dir: string,\n): Promise<PackageJson | undefined> {\n  const packageJsonPath = findPackage({ cwd: dir })\n  if (!packageJsonPath) return\n  debug('Reading package.json:', packageJsonPath)\n  const contents = await readFile(packageJsonPath, 'utf8')\n  return {\n    ...JSON.parse(contents),\n    packageJsonPath,\n  }\n}\n\nexport type PackageType = 'module' | 'commonjs' | undefined\nexport function getPackageType(pkg: PackageJson | undefined): PackageType {\n  if (pkg?.type) {\n    if (!['module', 'commonjs'].includes(pkg.type)) {\n      throw new Error(`Invalid package.json type: ${pkg.type}`)\n    }\n    return pkg.type\n  }\n}\n\nexport function normalizeFormat(format: Format | Format[]): NormalizedFormat[] {\n  return resolveComma(toArray<Format>(format, 'es')).map(\n    (format): NormalizedFormat => {\n      switch (format) {\n        case 'es':\n        case 'esm':\n        case 'module':\n          return 'es'\n        case 'cjs':\n        case 'commonjs':\n          return 'cjs'\n        default:\n          return format\n      }\n    },\n  )\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"303d4126-6a08-4db2-a058-bf929aa5edd6","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885228,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/package.ts","content":"import { readFile } from 'node:fs/promises'\nimport Debug from 'debug'\nimport { up as findPackage } from 'empathic/package'\nimport type { Format, NormalizedFormat } from '../config/index.ts'\nimport { resolveComma, toArray } from './general.ts'\nimport type { PackageJson } from 'pkg-types'\n\nconst debug = Debug('tsdown:package')\n\nexport async function readPackageJson(\n  dir: string,\n): Promise<PackageJson | undefined> {\n  const packageJsonPath = findPackage({ cwd: dir })\n  if (!packageJsonPath) return\n  debug('Reading package.json:', packageJsonPath)\n  const contents = await readFile(packageJsonPath, 'utf8')\n  return {\n    ...JSON.parse(contents),\n    packageJsonPath,\n  }\n}\n\nexport type PackageType = 'module' | 'commonjs' | undefined\nexport function getPackageType(pkg: PackageJson | undefined): PackageType {\n  if (pkg?.type) {\n    if (!['module', 'commonjs'].includes(pkg.type)) {\n      throw new Error(`Invalid package.json type: ${pkg.type}`)\n    }\n    return pkg.type\n  }\n}\n\nexport function normalizeFormat(format: Format | Format[]): NormalizedFormat[] {\n  return resolveComma(toArray<Format>(format, 'es')).map(\n    (format): NormalizedFormat => {\n      switch (format) {\n        case 'es':\n        case 'esm':\n        case 'module':\n          return 'es'\n        case 'cjs':\n        case 'commonjs':\n          return 'cjs'\n        default:\n          return format\n      }\n    },\n  )\n}\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"303d4126-6a08-4db2-a058-bf929aa5edd6","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885228,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/package.ts","content":"import { readFile } from 'node:fs/promises'\nimport Debug from 'debug'\nimport { up as findPackage } from 'empathic/package'\nimport type { Format, NormalizedFormat } from '../config/index.ts'\nimport { resolveComma, toArray } from './general.ts'\nimport type { PackageJson } from 'pkg-types'\n\nconst debug = Debug('tsdown:package')\n\nexport async function readPackageJson(\n  dir: string,\n): Promise<PackageJson | undefined> {\n  const packageJsonPath = findPackage({ cwd: dir })\n  if (!packageJsonPath) return\n  debug('Reading package.json:', packageJsonPath)\n  const contents = await readFile(packageJsonPath, 'utf8')\n  return {\n    ...JSON.parse(contents),\n    packageJsonPath,\n  }\n}\n\nexport type PackageType = 'module' | 'commonjs' | undefined\nexport function getPackageType(pkg: PackageJson | undefined): PackageType {\n  if (pkg?.type) {\n    if (!['module', 'commonjs'].includes(pkg.type)) {\n      throw new Error(`Invalid package.json type: ${pkg.type}`)\n    }\n    return pkg.type\n  }\n}\n\nexport function normalizeFormat(format: Format | Format[]): NormalizedFormat[] {\n  return resolveComma(toArray<Format>(format, 'es')).map(\n    (format): NormalizedFormat => {\n      switch (format) {\n        case 'es':\n        case 'esm':\n        case 'module':\n          return 'es'\n        case 'cjs':\n        case 'commonjs':\n          return 'cjs'\n        default:\n          return format\n      }\n    },\n  )\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"c982a3cb-bbc9-499a-b874-6e4654ad4c0a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885228,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/types.d.ts","content":"export var Overwrite = [35, (T, U) => [T, U, Omit, U]];\nexport var Awaitable = [36, T => [T, T, Promise]];\nexport var MarkPartial = [37, (T, K) => [T, T, Required, K, Omit, T, K, Pick, Partial]];\nexport var Arrayable = [38, T => [T, T]];","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"a5578093-7eaf-479d-8601-de1233fe737c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885229,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/package.ts","content":"import { readFile } from 'node:fs/promises'\nimport Debug from 'debug'\nimport { up as findPackage } from 'empathic/package'\nimport type { Format, NormalizedFormat } from '../config/index.ts'\nimport { resolveComma, toArray } from './general.ts'\nimport type { PackageJson } from 'pkg-types'\n\nconst debug = Debug('tsdown:package')\n\nexport async function readPackageJson(\n  dir: string,\n): Promise<PackageJson | undefined> {\n  const packageJsonPath = findPackage({ cwd: dir })\n  if (!packageJsonPath) return\n  debug('Reading package.json:', packageJsonPath)\n  const contents = await readFile(packageJsonPath, 'utf8')\n  return {\n    ...JSON.parse(contents),\n    packageJsonPath,\n  }\n}\n\nexport type PackageType = 'module' | 'commonjs' | undefined\nexport function getPackageType(pkg: PackageJson | undefined): PackageType {\n  if (pkg?.type) {\n    if (!['module', 'commonjs'].includes(pkg.type)) {\n      throw new Error(`Invalid package.json type: ${pkg.type}`)\n    }\n    return pkg.type\n  }\n}\n\nexport function normalizeFormat(format: Format | Format[]): NormalizedFormat[] {\n  return resolveComma(toArray<Format>(format, 'es')).map(\n    (format): NormalizedFormat => {\n      switch (format) {\n        case 'es':\n        case 'esm':\n        case 'module':\n          return 'es'\n        case 'cjs':\n        case 'commonjs':\n          return 'cjs'\n        default:\n          return format\n      }\n    },\n  )\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"c982a3cb-bbc9-499a-b874-6e4654ad4c0a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885229,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"d4d66ad4-5e8c-442c-a08d-bf99e4ce1e87","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885229,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/config.ts","module_request":"node:process","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"16c55ab4-596a-4635-b94c-9332ad462d2b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885229,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"d90de89e-77cd-4726-a8aa-a40a28a63052","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885229,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/config.ts","module_request":"node:url","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"c2a4fb58-2f5d-46d7-b298-eb93f35e703a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885229,"action":"HookResolveIdCallEnd","resolved_id":"ansis","is_external":true,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"5a9118c3-6af7-4c50-b878-3c4e0c57f6e1","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885229,"action":"HookResolveIdCallEnd","resolved_id":"unconfig","is_external":true,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"1c74e525-9a33-4c59-8b9d-694b09cd2b04","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885230,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"0c52f377-7d9d-4a0c-934d-6533a6bb4716","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885230,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/config.ts","module_request":"../utils/fs.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"1f3ab08d-0f5a-41ff-bf0a-81717b1cd874","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885230,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"014a5a7e-b99b-441b-9fe7-96eadf6d8546","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885230,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/config.ts","module_request":"../utils/general.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"949db0e4-8413-49fe-8f8f-66bc5c67da9c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885230,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"1deed4f3-bb2a-4b04-95ef-bd07d18bee55","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885230,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/config.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"18bd740f-e694-4386-9b2f-65c8aabf2530","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885230,"action":"HookResolveIdCallEnd","resolved_id":"unrun","is_external":true,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"fa2567e4-481f-4be8-9aaf-046177f53195","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885230,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"72324525-4284-4ac5-9042-96df4a7e89e1","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885231,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/config.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"068a3fd4-affd-4baf-a82a-c5e3a47d540f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885231,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"068a3fd4-affd-4baf-a82a-c5e3a47d540f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885231,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"16c55ab4-596a-4635-b94c-9332ad462d2b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885231,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/config.ts","module_request":"node:process","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"527b736b-12f6-4ec9-94b2-5ae154f296f4","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885231,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"527b736b-12f6-4ec9-94b2-5ae154f296f4","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885231,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/utils/package.ts","module_request":"node:fs/promises","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"c661199c-c278-42d7-91b5-ebed3b592af5","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885231,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"c661199c-c278-42d7-91b5-ebed3b592af5","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885232,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/utils/package.ts","module_request":"node:fs/promises","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"003128b8-58bc-43ce-931c-84b9805f3f67","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885232,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/utils/package.ts","module_request":"debug","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"bc2f53e3-a103-4e2e-9567-c43bbd4c5bd6","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885232,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"bc2f53e3-a103-4e2e-9567-c43bbd4c5bd6","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885232,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/utils/package.ts","module_request":"debug","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"881b94fa-c884-4072-bb5b-4cfd4b234c69","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885232,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/utils/package.ts","module_request":"empathic/package","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"f6dd956e-4b45-4257-aae8-b5346a9b5c2f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885232,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"f6dd956e-4b45-4257-aae8-b5346a9b5c2f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885232,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/utils/package.ts","module_request":"empathic/package","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"38ebe7d5-5a9a-422f-aa2e-6ad45f975c03","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885233,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/utils/package.ts","module_request":"./general.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"509f8f19-141e-4075-870c-1a980418877c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885233,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"509f8f19-141e-4075-870c-1a980418877c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885233,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/utils/package.ts","module_request":"./general.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"4a5f228f-8c73-43b0-a20d-fa50096b244a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885233,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"003128b8-58bc-43ce-931c-84b9805f3f67","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885233,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/utils/package.ts","module_request":"node:fs/promises","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"cf7d3a24-89b9-4909-8989-2fddc684b00f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885233,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"881b94fa-c884-4072-bb5b-4cfd4b234c69","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885233,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/utils/package.ts","module_request":"debug","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"36d9fc9f-cb44-4523-a882-ccc5675206c7","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885233,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"38ebe7d5-5a9a-422f-aa2e-6ad45f975c03","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885234,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/utils/package.ts","module_request":"empathic/package","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"cfdc08ba-27e9-45ac-8f2c-fcee47a725d6","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885234,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"4a5f228f-8c73-43b0-a20d-fa50096b244a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885234,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/utils/package.ts","module_request":"./general.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"6ac01790-7884-4e1a-a5b7-b7251afed917","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885234,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"cf7d3a24-89b9-4909-8989-2fddc684b00f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885234,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/utils/package.ts","module_request":"node:fs/promises","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"6e8bb73f-2c75-4acf-b4f3-b7c18a215412","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885234,"action":"HookResolveIdCallEnd","resolved_id":"debug","is_external":true,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"36d9fc9f-cb44-4523-a882-ccc5675206c7","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885234,"action":"HookResolveIdCallEnd","resolved_id":"empathic/package","is_external":true,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"cfdc08ba-27e9-45ac-8f2c-fcee47a725d6","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885234,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"6ac01790-7884-4e1a-a5b7-b7251afed917","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885235,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/utils/package.ts","module_request":"./general.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"2e2789f7-0935-4402-a85d-420504e0e26e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885235,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"6e8bb73f-2c75-4acf-b4f3-b7c18a215412","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885235,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/utils/package.ts","module_request":"node:fs/promises","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"f61e0547-cb83-49ff-a1a2-751802ed4728","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885235,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"f61e0547-cb83-49ff-a1a2-751802ed4728","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885235,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"2e2789f7-0935-4402-a85d-420504e0e26e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885235,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/utils/package.ts","module_request":"./general.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"f27c1f71-8223-4c23-86ee-464144dff611","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885235,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"f27c1f71-8223-4c23-86ee-464144dff611","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885235,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/output.ts","module_request":"../utils/package.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"b796d13f-a3ec-4b6a-88f3-d3782006f661","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885236,"action":"HookResolveIdCallEnd","resolved_id":"rolldown-plugin-dts/filename","is_external":true,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"710d9190-9660-4812-8625-86b6ae494a71","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885236,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"b796d13f-a3ec-4b6a-88f3-d3782006f661","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885236,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/output.ts","module_request":"../utils/package.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"8312498b-a6ca-4734-8c7d-91fc66c2e329","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885236,"action":"HookResolveIdCallEnd","resolved_id":"/Users/kevin/Developer/open-source/tsdown/src/features/copy.d.ts","is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"af5e21ef-6b9c-44bd-b7b9-5314ae7f2cb4","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885236,"action":"HookResolveIdCallEnd","resolved_id":"/Users/kevin/Developer/open-source/tsdown/src/features/report.d.ts","is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"eab8c382-6cfd-48fb-ad17-9f609ce01fdf","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885236,"action":"HookResolveIdCallEnd","resolved_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/package.d.ts","is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"5bb8a174-8e30-40bd-8f5b-0f6544a58548","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885236,"action":"HookResolveIdCallEnd","resolved_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/types.d.ts","is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"d0fc26eb-945e-40ec-9fb6-0f0ab48935af","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885236,"action":"HookResolveIdCallEnd","resolved_id":"pkg-types","is_external":true,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"73d794bf-0952-4448-9a80-a926ad447234","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885237,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"8312498b-a6ca-4734-8c7d-91fc66c2e329","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885237,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/output.ts","module_request":"../utils/package.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"ac3e5ab8-0900-4eff-bb0c-cb742242d6f9","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885237,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"ac3e5ab8-0900-4eff-bb0c-cb742242d6f9","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885237,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"c2a4fb58-2f5d-46d7-b298-eb93f35e703a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885237,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/config.ts","module_request":"node:url","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"1245264a-5583-4ece-a3e2-7c20d5646ed4","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885237,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"1245264a-5583-4ece-a3e2-7c20d5646ed4","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885237,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"1f3ab08d-0f5a-41ff-bf0a-81717b1cd874","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885237,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/config.ts","module_request":"../utils/fs.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"5e75f1ef-a88e-47e8-8ae9-f9138405bfab","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885238,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"5e75f1ef-a88e-47e8-8ae9-f9138405bfab","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885238,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"949db0e4-8413-49fe-8f8f-66bc5c67da9c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885238,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/config.ts","module_request":"../utils/general.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"9ae67a00-6877-4e9d-93c4-5ccee67ec70f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885238,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"9ae67a00-6877-4e9d-93c4-5ccee67ec70f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885238,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"18bd740f-e694-4386-9b2f-65c8aabf2530","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885238,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/config/config.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"75d5d4d4-639e-4d78-9be3-66632fbc8e5e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885238,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"75d5d4d4-639e-4d78-9be3-66632fbc8e5e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885239,"action":"HookResolveIdCallEnd","resolved_id":"/Users/kevin/Developer/open-source/tsdown/src/features/output.d.ts","is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"315a61ea-9a1f-48ed-b603-dc6be514f72e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885239,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/publint.ts","module_request":"node:process","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"a73a111a-b8cf-41e3-9e90-f1ab22314563","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885239,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/copy.d.ts","plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"62f90cc2-e884-40c4-aeae-5ecd47654c19","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885239,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/package.d.ts","plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"122b1668-fbe2-4172-8ee3-9b44a7b4113b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885239,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/package.d.ts","content":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"122b1668-fbe2-4172-8ee3-9b44a7b4113b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885239,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/package.d.ts","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"9488770f-567f-49ab-9f1f-9f0e6813e05e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885239,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/exports.d.ts","plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"cb2ae07e-59a1-42f7-b91d-134c17ac8ef7","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885240,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.d.ts","plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"8900a08d-caaa-4a1c-9a90-fd8d858a8bfb","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885240,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.d.ts","content":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"8900a08d-caaa-4a1c-9a90-fd8d858a8bfb","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885240,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.d.ts","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"bea8c588-a5ad-428e-abb4-d24c411a2d79","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885240,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/package.d.ts","content":"import type { Format, NormalizedFormat } from \"../config/index.ts\";\nimport type { PackageJson } from \"pkg-types\";\nexport declare function readPackageJson(dir: string): Promise<PackageJson | undefined>;\nexport type PackageType = \"module\" | \"commonjs\" | undefined;\nexport declare function getPackageType(pkg: PackageJson | undefined): PackageType;\nexport declare function normalizeFormat(format: Format | Format[]): NormalizedFormat[];\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"9488770f-567f-49ab-9f1f-9f0e6813e05e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885240,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/exports.d.ts","content":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"cb2ae07e-59a1-42f7-b91d-134c17ac8ef7","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885240,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/package.d.ts","content":"import type { Format, NormalizedFormat } from \"../config/index.ts\";\nimport type { PackageJson } from \"pkg-types\";\nexport declare function readPackageJson(dir: string): Promise<PackageJson | undefined>;\nexport type PackageType = \"module\" | \"commonjs\" | undefined;\nexport declare function getPackageType(pkg: PackageJson | undefined): PackageType;\nexport declare function normalizeFormat(format: Format | Format[]): NormalizedFormat[];\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"34f53037-8810-4adf-9558-d8ed1366b576","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885240,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/copy.d.ts","content":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"62f90cc2-e884-40c4-aeae-5ecd47654c19","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885240,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/package.d.ts","content":"import type { Format, NormalizedFormat } from \"../config/index.ts\";\nimport type { PackageJson } from \"pkg-types\";\nexport declare function readPackageJson(dir: string): Promise<PackageJson | undefined>;\nexport type PackageType = \"module\" | \"commonjs\" | undefined;\nexport declare function getPackageType(pkg: PackageJson | undefined): PackageType;\nexport declare function normalizeFormat(format: Format | Format[]): NormalizedFormat[];\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"34f53037-8810-4adf-9558-d8ed1366b576","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885241,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/package.d.ts","content":"import type { Format, NormalizedFormat } from \"../config/index.ts\";\nimport type { PackageJson } from \"pkg-types\";\nexport declare function readPackageJson(dir: string): Promise<PackageJson | undefined>;\nexport type PackageType = \"module\" | \"commonjs\" | undefined;\nexport declare function getPackageType(pkg: PackageJson | undefined): PackageType;\nexport declare function normalizeFormat(format: Format | Format[]): NormalizedFormat[];\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"23eb27e6-be16-47f9-bb04-8f052bfe043c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885241,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/copy.d.ts","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"25e41609-c3e5-46aa-b387-f1bbef4421b4","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885241,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.d.ts","content":"import type { ResolvedConfig } from \"../config/index.ts\";\nimport type { CheckPackageOptions } from \"@arethetypeswrong/core\";\nexport interface AttwOptions extends CheckPackageOptions {\n\t/**\n\t* Profiles select a set of resolution modes to require/ignore. All are evaluated but failures outside\n\t* of those required are ignored.\n\t*\n\t* The available profiles are:\n\t* - `strict`: requires all resolutions\n\t* - `node16`: ignores node10 resolution failures\n\t* - `esmOnly`: ignores CJS resolution failures\n\t*\n\t* @default 'strict'\n\t*/\n\tprofile?: \"strict\" | \"node16\" | \"esmOnly\";\n\t/**\n\t* The level of the check.\n\t*\n\t* The available levels are:\n\t* - `error`: fails the build\n\t* - `warn`: warns the build\n\t*\n\t* @default 'warn'\n\t*/\n\tlevel?: \"error\" | \"warn\";\n}\nexport declare function attw(options: ResolvedConfig): Promise<void>;\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"bea8c588-a5ad-428e-abb4-d24c411a2d79","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885241,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.d.ts","content":"import type { ResolvedConfig } from \"../config/index.ts\";\nimport type { CheckPackageOptions } from \"@arethetypeswrong/core\";\nexport interface AttwOptions extends CheckPackageOptions {\n\t/**\n\t* Profiles select a set of resolution modes to require/ignore. All are evaluated but failures outside\n\t* of those required are ignored.\n\t*\n\t* The available profiles are:\n\t* - `strict`: requires all resolutions\n\t* - `node16`: ignores node10 resolution failures\n\t* - `esmOnly`: ignores CJS resolution failures\n\t*\n\t* @default 'strict'\n\t*/\n\tprofile?: \"strict\" | \"node16\" | \"esmOnly\";\n\t/**\n\t* The level of the check.\n\t*\n\t* The available levels are:\n\t* - `error`: fails the build\n\t* - `warn`: warns the build\n\t*\n\t* @default 'warn'\n\t*/\n\tlevel?: \"error\" | \"warn\";\n}\nexport declare function attw(options: ResolvedConfig): Promise<void>;\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"286269da-db57-4e1e-8937-7d6f9efcb697","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885242,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.d.ts","content":"import type { ResolvedConfig } from \"../config/index.ts\";\nimport type { CheckPackageOptions } from \"@arethetypeswrong/core\";\nexport interface AttwOptions extends CheckPackageOptions {\n\t/**\n\t* Profiles select a set of resolution modes to require/ignore. All are evaluated but failures outside\n\t* of those required are ignored.\n\t*\n\t* The available profiles are:\n\t* - `strict`: requires all resolutions\n\t* - `node16`: ignores node10 resolution failures\n\t* - `esmOnly`: ignores CJS resolution failures\n\t*\n\t* @default 'strict'\n\t*/\n\tprofile?: \"strict\" | \"node16\" | \"esmOnly\";\n\t/**\n\t* The level of the check.\n\t*\n\t* The available levels are:\n\t* - `error`: fails the build\n\t* - `warn`: warns the build\n\t*\n\t* @default 'warn'\n\t*/\n\tlevel?: \"error\" | \"warn\";\n}\nexport declare function attw(options: ResolvedConfig): Promise<void>;\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"286269da-db57-4e1e-8937-7d6f9efcb697","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885242,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/copy.d.ts","content":"import type { ResolvedConfig } from \"../config/index.ts\";\nimport type { Arrayable, Awaitable } from \"../utils/types.ts\";\nexport interface CopyEntry {\n\tfrom: string;\n\tto: string;\n}\nexport type CopyOptions = Arrayable<string | CopyEntry>;\nexport type CopyOptionsFn = (options: ResolvedConfig) => Awaitable<CopyOptions>;\nexport declare function copy(options: ResolvedConfig): Promise<void>;\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"25e41609-c3e5-46aa-b387-f1bbef4421b4","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885242,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/copy.d.ts","content":"import type { ResolvedConfig } from \"../config/index.ts\";\nimport type { Arrayable, Awaitable } from \"../utils/types.ts\";\nexport interface CopyEntry {\n\tfrom: string;\n\tto: string;\n}\nexport type CopyOptions = Arrayable<string | CopyEntry>;\nexport type CopyOptionsFn = (options: ResolvedConfig) => Awaitable<CopyOptions>;\nexport declare function copy(options: ResolvedConfig): Promise<void>;\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"da53a5f1-f31f-4b72-a6d3-f0ae1fbbc0e9","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885242,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/copy.d.ts","content":"import type { ResolvedConfig } from \"../config/index.ts\";\nimport type { Arrayable, Awaitable } from \"../utils/types.ts\";\nexport interface CopyEntry {\n\tfrom: string;\n\tto: string;\n}\nexport type CopyOptions = Arrayable<string | CopyEntry>;\nexport type CopyOptionsFn = (options: ResolvedConfig) => Awaitable<CopyOptions>;\nexport declare function copy(options: ResolvedConfig): Promise<void>;\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"da53a5f1-f31f-4b72-a6d3-f0ae1fbbc0e9","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885242,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/copy.d.ts","content":"import type { ResolvedConfig } from \"../config/index.ts\";\nimport type { Arrayable, Awaitable } from \"../utils/types.ts\";\nexport interface CopyEntry {\n\tfrom: string;\n\tto: string;\n}\nexport type CopyOptions = Arrayable<string | CopyEntry>;\nexport type CopyOptionsFn = (options: ResolvedConfig) => Awaitable<CopyOptions>;\nexport declare function copy(options: ResolvedConfig): Promise<void>;\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"a6e3cbf5-1d11-4c9e-a327-da6c16395198","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885242,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/package.d.ts","content":"import { Format, NormalizedFormat } from \"../config/index.ts\";\nimport { PackageJson } from \"pkg-types\";\nexport var readPackageJson = [39, () => [PackageJson, Promise]];\nexport var PackageType = [40, () => []];\nexport var getPackageType = [41, () => [PackageJson, PackageType]];\nexport var normalizeFormat = [42, () => [Format, Format, NormalizedFormat]];","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"23eb27e6-be16-47f9-bb04-8f052bfe043c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885243,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/package.d.ts","content":"import { Format, NormalizedFormat } from \"../config/index.ts\";\nimport { PackageJson } from \"pkg-types\";\nexport var readPackageJson = [39, () => [PackageJson, Promise]];\nexport var PackageType = [40, () => []];\nexport var getPackageType = [41, () => [PackageJson, PackageType]];\nexport var normalizeFormat = [42, () => [Format, Format, NormalizedFormat]];","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"0554fa2c-d2e2-4f61-8a9c-dd0b14646d1b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885243,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.d.ts","content":"import type { ResolvedConfig } from \"../config/index.ts\";\nimport type { CheckPackageOptions } from \"@arethetypeswrong/core\";\nexport interface AttwOptions extends CheckPackageOptions {\n\t/**\n\t* Profiles select a set of resolution modes to require/ignore. All are evaluated but failures outside\n\t* of those required are ignored.\n\t*\n\t* The available profiles are:\n\t* - `strict`: requires all resolutions\n\t* - `node16`: ignores node10 resolution failures\n\t* - `esmOnly`: ignores CJS resolution failures\n\t*\n\t* @default 'strict'\n\t*/\n\tprofile?: \"strict\" | \"node16\" | \"esmOnly\";\n\t/**\n\t* The level of the check.\n\t*\n\t* The available levels are:\n\t* - `error`: fails the build\n\t* - `warn`: warns the build\n\t*\n\t* @default 'warn'\n\t*/\n\tlevel?: \"error\" | \"warn\";\n}\nexport declare function attw(options: ResolvedConfig): Promise<void>;\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"82292bd5-9b91-4d3a-9654-7028bad5167d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885243,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/copy.d.ts","content":"import { ResolvedConfig } from \"../config/index.ts\";\nimport { Arrayable, Awaitable } from \"../utils/types.ts\";\nexport var CopyEntry = [43, () => []];\nexport var CopyOptions = [44, () => [CopyEntry, Arrayable]];\nexport var CopyOptionsFn = [45, () => [ResolvedConfig, CopyOptions, Awaitable]];\nexport var copy = [46, () => [ResolvedConfig, Promise]];","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"a6e3cbf5-1d11-4c9e-a327-da6c16395198","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885243,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/copy.d.ts","content":"import { ResolvedConfig } from \"../config/index.ts\";\nimport { Arrayable, Awaitable } from \"../utils/types.ts\";\nexport var CopyEntry = [43, () => []];\nexport var CopyOptions = [44, () => [CopyEntry, Arrayable]];\nexport var CopyOptionsFn = [45, () => [ResolvedConfig, CopyOptions, Awaitable]];\nexport var copy = [46, () => [ResolvedConfig, Promise]];","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"16f40ff6-f501-4ee8-a6b3-0be68f89b688","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885243,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.d.ts","content":"import { ResolvedConfig } from \"../config/index.ts\";\nimport { CheckPackageOptions } from \"@arethetypeswrong/core\";\nexport var AttwOptions = [47, () => [CheckPackageOptions]];\nexport var attw = [48, () => [ResolvedConfig, Promise]];","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"82292bd5-9b91-4d3a-9654-7028bad5167d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885243,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.d.ts","content":"import { ResolvedConfig } from \"../config/index.ts\";\nimport { CheckPackageOptions } from \"@arethetypeswrong/core\";\nexport var AttwOptions = [47, () => [CheckPackageOptions]];\nexport var attw = [48, () => [ResolvedConfig, Promise]];","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"a17d9231-3518-4de1-ac06-169f462ed214","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885244,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/copy.d.ts","content":"import { ResolvedConfig } from \"../config/index.ts\";\nimport { Arrayable, Awaitable } from \"../utils/types.ts\";\nexport var CopyEntry = [43, () => []];\nexport var CopyOptions = [44, () => [CopyEntry, Arrayable]];\nexport var CopyOptionsFn = [45, () => [ResolvedConfig, CopyOptions, Awaitable]];\nexport var copy = [46, () => [ResolvedConfig, Promise]];","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"16f40ff6-f501-4ee8-a6b3-0be68f89b688","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885244,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.d.ts","content":"import { ResolvedConfig } from \"../config/index.ts\";\nimport { CheckPackageOptions } from \"@arethetypeswrong/core\";\nexport var AttwOptions = [47, () => [CheckPackageOptions]];\nexport var attw = [48, () => [ResolvedConfig, Promise]];","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"a17d9231-3518-4de1-ac06-169f462ed214","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885244,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/copy.d.ts","module_request":"../config/index.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"6e08e9ed-4daa-495c-b042-3a7af84efd32","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885244,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"6e08e9ed-4daa-495c-b042-3a7af84efd32","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885244,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/copy.d.ts","module_request":"../config/index.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"974b03a9-1093-42ad-b19f-52eacf93bb85","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885244,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/copy.d.ts","module_request":"../utils/types.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"3f20bbcc-172f-4f2c-9535-fc0e968ca9d3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885244,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"3f20bbcc-172f-4f2c-9535-fc0e968ca9d3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885245,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/copy.d.ts","module_request":"../utils/types.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"58034ff9-95e0-4b27-bc1e-3ce4044733eb","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885245,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.d.ts","module_request":"../config/index.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"69c6767f-2d6e-4f0c-b660-6bcb3c9b8b58","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885245,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"69c6767f-2d6e-4f0c-b660-6bcb3c9b8b58","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885246,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.d.ts","module_request":"../config/index.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"506936a4-24d8-4cbe-8623-a8f24839246e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885246,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.d.ts","module_request":"@arethetypeswrong/core","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"94415780-5906-436d-88fe-fc969a215003","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885247,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"94415780-5906-436d-88fe-fc969a215003","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885247,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.d.ts","module_request":"@arethetypeswrong/core","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"479a11bd-82f6-4b10-a8a4-cf3d80b849d7","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885247,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/output.d.ts","plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"80f06550-0469-4863-8714-16b7a914ea71","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885247,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/output.d.ts","content":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"80f06550-0469-4863-8714-16b7a914ea71","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885247,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/output.d.ts","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"a3aab791-7e92-488e-97b6-1407fad5a5ed","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885248,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/exports.d.ts","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"9946f563-e27a-45d1-9cae-5486fe3803e2","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885248,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/output.d.ts","content":"import { type PackageType } from \"../utils/package.ts\";\nimport type { Format, NormalizedFormat, ResolvedConfig } from \"../config/index.ts\";\nimport type { AddonFunction, InputOptions, PreRenderedChunk } from \"rolldown\";\nexport interface OutExtensionContext {\n\toptions: InputOptions;\n\tformat: NormalizedFormat;\n\t/** \"type\" field in project's package.json */\n\tpkgType?: PackageType;\n}\nexport interface OutExtensionObject {\n\tjs?: string;\n\tdts?: string;\n}\nexport type OutExtensionFactory = (context: OutExtensionContext) => OutExtensionObject | undefined;\nexport declare function resolveChunkFilename({ outExtensions, fixedExtension, pkg, hash }: ResolvedConfig, inputOptions: InputOptions, format: NormalizedFormat): [entry: ChunkFileName, chunk: ChunkFileName];\ntype ChunkFileName = string | ((chunk: PreRenderedChunk) => string);\nexport interface ChunkAddonObject {\n\tjs?: string;\n\tcss?: string;\n\tdts?: string;\n}\nexport type ChunkAddonFunction = (ctx: {\n\tformat: Format;\n\tfileName: string;\n}) => ChunkAddonObject | string | undefined;\nexport type ChunkAddon = ChunkAddonObject | ChunkAddonFunction | string;\nexport declare function resolveChunkAddon(chunkAddon: ChunkAddon | undefined, format: NormalizedFormat, dts?: boolean): AddonFunction | undefined;\nexport {};\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"a3aab791-7e92-488e-97b6-1407fad5a5ed","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885248,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/exports.d.ts","content":"import type { NormalizedFormat, ResolvedConfig } from \"../config/index.ts\";\nimport type { Awaitable } from \"../utils/types.ts\";\nimport type { PackageJson } from \"pkg-types\";\nimport type { OutputAsset, OutputChunk } from \"rolldown\";\nexport type TsdownChunks = Partial<Record<NormalizedFormat, Array<OutputChunk | OutputAsset>>>;\nexport interface ExportsOptions {\n\t/**\n\t* Generate exports that link to source code during development.\n\t* - string: add as a custom condition.\n\t* - true: all conditions point to source files, and add dist exports to `publishConfig`.\n\t*/\n\tdevExports?: boolean | string;\n\t/**\n\t* Exports for all files.\n\t*/\n\tall?: boolean;\n\tcustomExports?: (exports: Record<string, any>, context: {\n\t\tpkg: PackageJson;\n\t\tchunks: TsdownChunks;\n\t\toutDir: string;\n\t\tisPublish: boolean;\n\t}) => Awaitable<Record<string, any>>;\n}\nexport declare function writeExports(options: ResolvedConfig, chunks: TsdownChunks): Promise<void>;\nexport declare function generateExports(pkg: PackageJson, outDir: string, chunks: TsdownChunks, { devExports, all, customExports }: ExportsOptions): Promise<{\n\tmain: string | undefined;\n\tmodule: string | undefined;\n\ttypes: string | undefined;\n\texports: Record<string, any>;\n\tpublishExports?: Record<string, any>;\n}>;\nexport declare function hasExportsTypes(pkg?: PackageJson): boolean;\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"9946f563-e27a-45d1-9cae-5486fe3803e2","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885249,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/exports.d.ts","content":"import type { NormalizedFormat, ResolvedConfig } from \"../config/index.ts\";\nimport type { Awaitable } from \"../utils/types.ts\";\nimport type { PackageJson } from \"pkg-types\";\nimport type { OutputAsset, OutputChunk } from \"rolldown\";\nexport type TsdownChunks = Partial<Record<NormalizedFormat, Array<OutputChunk | OutputAsset>>>;\nexport interface ExportsOptions {\n\t/**\n\t* Generate exports that link to source code during development.\n\t* - string: add as a custom condition.\n\t* - true: all conditions point to source files, and add dist exports to `publishConfig`.\n\t*/\n\tdevExports?: boolean | string;\n\t/**\n\t* Exports for all files.\n\t*/\n\tall?: boolean;\n\tcustomExports?: (exports: Record<string, any>, context: {\n\t\tpkg: PackageJson;\n\t\tchunks: TsdownChunks;\n\t\toutDir: string;\n\t\tisPublish: boolean;\n\t}) => Awaitable<Record<string, any>>;\n}\nexport declare function writeExports(options: ResolvedConfig, chunks: TsdownChunks): Promise<void>;\nexport declare function generateExports(pkg: PackageJson, outDir: string, chunks: TsdownChunks, { devExports, all, customExports }: ExportsOptions): Promise<{\n\tmain: string | undefined;\n\tmodule: string | undefined;\n\ttypes: string | undefined;\n\texports: Record<string, any>;\n\tpublishExports?: Record<string, any>;\n}>;\nexport declare function hasExportsTypes(pkg?: PackageJson): boolean;\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"00e0b072-3d29-40c1-8a43-7743dc4d5f3a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885249,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/exports.d.ts","content":"import type { NormalizedFormat, ResolvedConfig } from \"../config/index.ts\";\nimport type { Awaitable } from \"../utils/types.ts\";\nimport type { PackageJson } from \"pkg-types\";\nimport type { OutputAsset, OutputChunk } from \"rolldown\";\nexport type TsdownChunks = Partial<Record<NormalizedFormat, Array<OutputChunk | OutputAsset>>>;\nexport interface ExportsOptions {\n\t/**\n\t* Generate exports that link to source code during development.\n\t* - string: add as a custom condition.\n\t* - true: all conditions point to source files, and add dist exports to `publishConfig`.\n\t*/\n\tdevExports?: boolean | string;\n\t/**\n\t* Exports for all files.\n\t*/\n\tall?: boolean;\n\tcustomExports?: (exports: Record<string, any>, context: {\n\t\tpkg: PackageJson;\n\t\tchunks: TsdownChunks;\n\t\toutDir: string;\n\t\tisPublish: boolean;\n\t}) => Awaitable<Record<string, any>>;\n}\nexport declare function writeExports(options: ResolvedConfig, chunks: TsdownChunks): Promise<void>;\nexport declare function generateExports(pkg: PackageJson, outDir: string, chunks: TsdownChunks, { devExports, all, customExports }: ExportsOptions): Promise<{\n\tmain: string | undefined;\n\tmodule: string | undefined;\n\ttypes: string | undefined;\n\texports: Record<string, any>;\n\tpublishExports?: Record<string, any>;\n}>;\nexport declare function hasExportsTypes(pkg?: PackageJson): boolean;\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"00e0b072-3d29-40c1-8a43-7743dc4d5f3a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885250,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/exports.d.ts","content":"import type { NormalizedFormat, ResolvedConfig } from \"../config/index.ts\";\nimport type { Awaitable } from \"../utils/types.ts\";\nimport type { PackageJson } from \"pkg-types\";\nimport type { OutputAsset, OutputChunk } from \"rolldown\";\nexport type TsdownChunks = Partial<Record<NormalizedFormat, Array<OutputChunk | OutputAsset>>>;\nexport interface ExportsOptions {\n\t/**\n\t* Generate exports that link to source code during development.\n\t* - string: add as a custom condition.\n\t* - true: all conditions point to source files, and add dist exports to `publishConfig`.\n\t*/\n\tdevExports?: boolean | string;\n\t/**\n\t* Exports for all files.\n\t*/\n\tall?: boolean;\n\tcustomExports?: (exports: Record<string, any>, context: {\n\t\tpkg: PackageJson;\n\t\tchunks: TsdownChunks;\n\t\toutDir: string;\n\t\tisPublish: boolean;\n\t}) => Awaitable<Record<string, any>>;\n}\nexport declare function writeExports(options: ResolvedConfig, chunks: TsdownChunks): Promise<void>;\nexport declare function generateExports(pkg: PackageJson, outDir: string, chunks: TsdownChunks, { devExports, all, customExports }: ExportsOptions): Promise<{\n\tmain: string | undefined;\n\tmodule: string | undefined;\n\ttypes: string | undefined;\n\texports: Record<string, any>;\n\tpublishExports?: Record<string, any>;\n}>;\nexport declare function hasExportsTypes(pkg?: PackageJson): boolean;\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"3debdf1d-d4e4-41e3-bed9-d1e8931b2d8c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885250,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/output.d.ts","content":"import { type PackageType } from \"../utils/package.ts\";\nimport type { Format, NormalizedFormat, ResolvedConfig } from \"../config/index.ts\";\nimport type { AddonFunction, InputOptions, PreRenderedChunk } from \"rolldown\";\nexport interface OutExtensionContext {\n\toptions: InputOptions;\n\tformat: NormalizedFormat;\n\t/** \"type\" field in project's package.json */\n\tpkgType?: PackageType;\n}\nexport interface OutExtensionObject {\n\tjs?: string;\n\tdts?: string;\n}\nexport type OutExtensionFactory = (context: OutExtensionContext) => OutExtensionObject | undefined;\nexport declare function resolveChunkFilename({ outExtensions, fixedExtension, pkg, hash }: ResolvedConfig, inputOptions: InputOptions, format: NormalizedFormat): [entry: ChunkFileName, chunk: ChunkFileName];\ntype ChunkFileName = string | ((chunk: PreRenderedChunk) => string);\nexport interface ChunkAddonObject {\n\tjs?: string;\n\tcss?: string;\n\tdts?: string;\n}\nexport type ChunkAddonFunction = (ctx: {\n\tformat: Format;\n\tfileName: string;\n}) => ChunkAddonObject | string | undefined;\nexport type ChunkAddon = ChunkAddonObject | ChunkAddonFunction | string;\nexport declare function resolveChunkAddon(chunkAddon: ChunkAddon | undefined, format: NormalizedFormat, dts?: boolean): AddonFunction | undefined;\nexport {};\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"c9eadc18-6b44-4f19-bf25-a9cf4e405b21","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885251,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/output.d.ts","content":"import { type PackageType } from \"../utils/package.ts\";\nimport type { Format, NormalizedFormat, ResolvedConfig } from \"../config/index.ts\";\nimport type { AddonFunction, InputOptions, PreRenderedChunk } from \"rolldown\";\nexport interface OutExtensionContext {\n\toptions: InputOptions;\n\tformat: NormalizedFormat;\n\t/** \"type\" field in project's package.json */\n\tpkgType?: PackageType;\n}\nexport interface OutExtensionObject {\n\tjs?: string;\n\tdts?: string;\n}\nexport type OutExtensionFactory = (context: OutExtensionContext) => OutExtensionObject | undefined;\nexport declare function resolveChunkFilename({ outExtensions, fixedExtension, pkg, hash }: ResolvedConfig, inputOptions: InputOptions, format: NormalizedFormat): [entry: ChunkFileName, chunk: ChunkFileName];\ntype ChunkFileName = string | ((chunk: PreRenderedChunk) => string);\nexport interface ChunkAddonObject {\n\tjs?: string;\n\tcss?: string;\n\tdts?: string;\n}\nexport type ChunkAddonFunction = (ctx: {\n\tformat: Format;\n\tfileName: string;\n}) => ChunkAddonObject | string | undefined;\nexport type ChunkAddon = ChunkAddonObject | ChunkAddonFunction | string;\nexport declare function resolveChunkAddon(chunkAddon: ChunkAddon | undefined, format: NormalizedFormat, dts?: boolean): AddonFunction | undefined;\nexport {};\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"c9eadc18-6b44-4f19-bf25-a9cf4e405b21","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885252,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/output.d.ts","content":"import { type PackageType } from \"../utils/package.ts\";\nimport type { Format, NormalizedFormat, ResolvedConfig } from \"../config/index.ts\";\nimport type { AddonFunction, InputOptions, PreRenderedChunk } from \"rolldown\";\nexport interface OutExtensionContext {\n\toptions: InputOptions;\n\tformat: NormalizedFormat;\n\t/** \"type\" field in project's package.json */\n\tpkgType?: PackageType;\n}\nexport interface OutExtensionObject {\n\tjs?: string;\n\tdts?: string;\n}\nexport type OutExtensionFactory = (context: OutExtensionContext) => OutExtensionObject | undefined;\nexport declare function resolveChunkFilename({ outExtensions, fixedExtension, pkg, hash }: ResolvedConfig, inputOptions: InputOptions, format: NormalizedFormat): [entry: ChunkFileName, chunk: ChunkFileName];\ntype ChunkFileName = string | ((chunk: PreRenderedChunk) => string);\nexport interface ChunkAddonObject {\n\tjs?: string;\n\tcss?: string;\n\tdts?: string;\n}\nexport type ChunkAddonFunction = (ctx: {\n\tformat: Format;\n\tfileName: string;\n}) => ChunkAddonObject | string | undefined;\nexport type ChunkAddon = ChunkAddonObject | ChunkAddonFunction | string;\nexport declare function resolveChunkAddon(chunkAddon: ChunkAddon | undefined, format: NormalizedFormat, dts?: boolean): AddonFunction | undefined;\nexport {};\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"81f9661b-f88b-4936-8a7b-cb982096eef7","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885252,"action":"HookResolveIdCallEnd","resolved_id":"/Users/kevin/Developer/open-source/tsdown/src/config/index.d.ts","is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"506936a4-24d8-4cbe-8623-a8f24839246e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885252,"action":"HookResolveIdCallEnd","resolved_id":"@arethetypeswrong/core","is_external":true,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"479a11bd-82f6-4b10-a8a4-cf3d80b849d7","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885252,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/exports.d.ts","content":"import { NormalizedFormat, ResolvedConfig } from \"../config/index.ts\";\nimport { Awaitable } from \"../utils/types.ts\";\nimport { PackageJson } from \"pkg-types\";\nimport { OutputAsset, OutputChunk } from \"rolldown\";\nexport var TsdownChunks = [49, () => [NormalizedFormat, OutputChunk, OutputAsset, Array, Record, Partial]];\nexport var ExportsOptions = [50, () => [Record, PackageJson, TsdownChunks, Record, Awaitable]];\nexport var writeExports = [51, () => [ResolvedConfig, TsdownChunks, Promise]];\nexport var generateExports = [52, () => [PackageJson, TsdownChunks, devExports, all, customExports, ExportsOptions, Record, Record, Promise]];\nexport var hasExportsTypes = [53, () => [PackageJson]];","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"3debdf1d-d4e4-41e3-bed9-d1e8931b2d8c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885253,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/exports.d.ts","content":"import { NormalizedFormat, ResolvedConfig } from \"../config/index.ts\";\nimport { Awaitable } from \"../utils/types.ts\";\nimport { PackageJson } from \"pkg-types\";\nimport { OutputAsset, OutputChunk } from \"rolldown\";\nexport var TsdownChunks = [49, () => [NormalizedFormat, OutputChunk, OutputAsset, Array, Record, Partial]];\nexport var ExportsOptions = [50, () => [Record, PackageJson, TsdownChunks, Record, Awaitable]];\nexport var writeExports = [51, () => [ResolvedConfig, TsdownChunks, Promise]];\nexport var generateExports = [52, () => [PackageJson, TsdownChunks, devExports, all, customExports, ExportsOptions, Record, Record, Promise]];\nexport var hasExportsTypes = [53, () => [PackageJson]];","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"820e189c-28ed-4b84-84be-9fa78bc81d6f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885253,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/hooks.d.ts","plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"9b47fd8d-6971-496f-9ca1-c6f5d6ab60b3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885253,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/output.d.ts","content":"import { PackageType } from \"../utils/package.ts\";\nimport { Format, NormalizedFormat, ResolvedConfig } from \"../config/index.ts\";\nimport { AddonFunction, InputOptions, PreRenderedChunk } from \"rolldown\";\nexport var OutExtensionContext = [54, () => [InputOptions, NormalizedFormat, PackageType]];\nexport var OutExtensionObject = [55, () => []];\nexport var OutExtensionFactory = [56, () => [OutExtensionContext, OutExtensionObject]];\nexport var resolveChunkFilename = [57, () => [outExtensions, fixedExtension, pkg, hash, ResolvedConfig, InputOptions, NormalizedFormat, ChunkFileName, ChunkFileName]];\nvar ChunkFileName = [58, () => [PreRenderedChunk]];\nexport var ChunkAddonObject = [59, () => []];\nexport var ChunkAddonFunction = [60, () => [Format, ChunkAddonObject]];\nexport var ChunkAddon = [61, () => [ChunkAddonObject, ChunkAddonFunction]];\nexport var resolveChunkAddon = [62, () => [ChunkAddon, NormalizedFormat, AddonFunction]];\nexport {};","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"81f9661b-f88b-4936-8a7b-cb982096eef7","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885253,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/output.d.ts","content":"import { PackageType } from \"../utils/package.ts\";\nimport { Format, NormalizedFormat, ResolvedConfig } from \"../config/index.ts\";\nimport { AddonFunction, InputOptions, PreRenderedChunk } from \"rolldown\";\nexport var OutExtensionContext = [54, () => [InputOptions, NormalizedFormat, PackageType]];\nexport var OutExtensionObject = [55, () => []];\nexport var OutExtensionFactory = [56, () => [OutExtensionContext, OutExtensionObject]];\nexport var resolveChunkFilename = [57, () => [outExtensions, fixedExtension, pkg, hash, ResolvedConfig, InputOptions, NormalizedFormat, ChunkFileName, ChunkFileName]];\nvar ChunkFileName = [58, () => [PreRenderedChunk]];\nexport var ChunkAddonObject = [59, () => []];\nexport var ChunkAddonFunction = [60, () => [Format, ChunkAddonObject]];\nexport var ChunkAddon = [61, () => [ChunkAddonObject, ChunkAddonFunction]];\nexport var resolveChunkAddon = [62, () => [ChunkAddon, NormalizedFormat, AddonFunction]];\nexport {};","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"01c12472-1517-497b-b69a-6d75ead41add","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885253,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/exports.d.ts","content":"import { NormalizedFormat, ResolvedConfig } from \"../config/index.ts\";\nimport { Awaitable } from \"../utils/types.ts\";\nimport { PackageJson } from \"pkg-types\";\nimport { OutputAsset, OutputChunk } from \"rolldown\";\nexport var TsdownChunks = [49, () => [NormalizedFormat, OutputChunk, OutputAsset, Array, Record, Partial]];\nexport var ExportsOptions = [50, () => [Record, PackageJson, TsdownChunks, Record, Awaitable]];\nexport var writeExports = [51, () => [ResolvedConfig, TsdownChunks, Promise]];\nexport var generateExports = [52, () => [PackageJson, TsdownChunks, devExports, all, customExports, ExportsOptions, Record, Record, Promise]];\nexport var hasExportsTypes = [53, () => [PackageJson]];","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"820e189c-28ed-4b84-84be-9fa78bc81d6f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885253,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/output.d.ts","content":"import { PackageType } from \"../utils/package.ts\";\nimport { Format, NormalizedFormat, ResolvedConfig } from \"../config/index.ts\";\nimport { AddonFunction, InputOptions, PreRenderedChunk } from \"rolldown\";\nexport var OutExtensionContext = [54, () => [InputOptions, NormalizedFormat, PackageType]];\nexport var OutExtensionObject = [55, () => []];\nexport var OutExtensionFactory = [56, () => [OutExtensionContext, OutExtensionObject]];\nexport var resolveChunkFilename = [57, () => [outExtensions, fixedExtension, pkg, hash, ResolvedConfig, InputOptions, NormalizedFormat, ChunkFileName, ChunkFileName]];\nvar ChunkFileName = [58, () => [PreRenderedChunk]];\nexport var ChunkAddonObject = [59, () => []];\nexport var ChunkAddonFunction = [60, () => [Format, ChunkAddonObject]];\nexport var ChunkAddon = [61, () => [ChunkAddonObject, ChunkAddonFunction]];\nexport var resolveChunkAddon = [62, () => [ChunkAddon, NormalizedFormat, AddonFunction]];\nexport {};","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"01c12472-1517-497b-b69a-6d75ead41add","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885254,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/exports.d.ts","module_request":"../config/index.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"771fadbd-1d8c-49c7-bc5a-5aad7ca975a7","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885254,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"771fadbd-1d8c-49c7-bc5a-5aad7ca975a7","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885254,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/exports.d.ts","module_request":"../config/index.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"30e4f56a-997c-4f55-9794-8f7d107a0ea0","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885254,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/exports.d.ts","module_request":"../utils/types.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"15946bf3-56f1-4a69-86f3-f72175ccc261","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885254,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"15946bf3-56f1-4a69-86f3-f72175ccc261","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885254,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/exports.d.ts","module_request":"../utils/types.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"07a92265-096d-4044-aae5-2c98611e8e6f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885255,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/exports.d.ts","module_request":"pkg-types","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"fef32efb-728f-4881-9778-e2e43c81a00e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885255,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"fef32efb-728f-4881-9778-e2e43c81a00e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885255,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/exports.d.ts","module_request":"pkg-types","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"42ca1d22-25c6-438d-aded-375c4a89e23f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885255,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/exports.d.ts","module_request":"rolldown","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"6839c8ae-34bb-4cdc-81db-f351a22881ef","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885255,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/output.d.ts","module_request":"../utils/package.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"8ff63200-a459-4635-9be7-6b74dc1d6076","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885256,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"8ff63200-a459-4635-9be7-6b74dc1d6076","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885256,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/output.d.ts","module_request":"../utils/package.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"11b2fa35-e7cc-4976-b3f3-e9d16631219a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885256,"action":"HookResolveIdCallEnd","resolved_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/types.d.ts","is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"58034ff9-95e0-4b27-bc1e-3ce4044733eb","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885257,"action":"HookResolveIdCallEnd","resolved_id":"/Users/kevin/Developer/open-source/tsdown/src/config/index.d.ts","is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"974b03a9-1093-42ad-b19f-52eacf93bb85","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885257,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/output.d.ts","module_request":"../config/index.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"fd0214b4-3665-47ac-901d-993c5e6fec78","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885257,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"fd0214b4-3665-47ac-901d-993c5e6fec78","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885258,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/output.d.ts","module_request":"../config/index.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"d41acea8-46a0-4d8d-be0e-13db130310aa","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885258,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/hooks.d.ts","content":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"call_id":"9b47fd8d-6971-496f-9ca1-c6f5d6ab60b3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885259,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/output.d.ts","module_request":"rolldown","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"d24e9ab2-e918-40c2-abb9-62464f0c0c5b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885259,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"d24e9ab2-e918-40c2-abb9-62464f0c0c5b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885259,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/output.d.ts","module_request":"rolldown","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"af5c2f4e-9283-4848-a527-29388257d296","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885260,"action":"HookLoadCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/hooks.d.ts","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"34045a81-89d0-416b-8fd5-181ddd6bb12d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885260,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/entry.ts","content":"import path from 'node:path'\nimport { glob } from 'tinyglobby'\nimport { fsExists, lowestCommonAncestor } from '../utils/fs.ts'\nimport { generateColor, prettyName, type Logger } from '../utils/logger.ts'\nimport type { UserConfig } from '../config/index.ts'\n\nexport async function resolveEntry(\n  logger: Logger,\n  entry: UserConfig['entry'],\n  cwd: string,\n  name?: string,\n): Promise<Record<string, string>> {\n  const nameLabel = name ? `[${name}] ` : ''\n  if (!entry || Object.keys(entry).length === 0) {\n    const defaultEntry = path.resolve(cwd, 'src/index.ts')\n\n    if (await fsExists(defaultEntry)) {\n      entry = { index: defaultEntry }\n    } else {\n      throw new Error(\n        `${nameLabel}No input files, try \"tsdown <your-file>\" or create src/index.ts`,\n      )\n    }\n  }\n\n  const entryMap = await toObjectEntry(entry, cwd)\n  const entries = Object.values(entryMap)\n  if (entries.length === 0) {\n    throw new Error(`${nameLabel}Cannot find entry: ${JSON.stringify(entry)}`)\n  }\n  logger.info(\n    prettyName(name),\n    `entry: ${generateColor(name)(entries.map((entry) => path.relative(cwd, entry)).join(', '))}`,\n  )\n  return entryMap\n}\n\nexport async function toObjectEntry(\n  entry: string | string[] | Record<string, string>,\n  cwd: string,\n): Promise<Record<string, string>> {\n  if (typeof entry === 'string') {\n    entry = [entry]\n  }\n  if (!Array.isArray(entry)) {\n    return entry\n  }\n\n  const resolvedEntry = (\n    await glob(entry, { cwd, expandDirectories: false })\n  ).map((file) => path.resolve(cwd, file))\n  const base = lowestCommonAncestor(...resolvedEntry)\n  return Object.fromEntries(\n    resolvedEntry.map((file) => {\n      const relative = path.relative(base, file)\n      return [\n        relative.slice(0, relative.length - path.extname(relative).length),\n        file,\n      ]\n    }),\n  )\n}\n","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"26fc9ba8-c959-4026-a654-c2fd25b5356e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885261,"action":"HookLoadCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/hooks.d.ts","content":"import { type Hookable } from \"hookable\";\nimport type { ResolvedConfig } from \"../config/index.ts\";\nimport type { BuildOptions } from \"rolldown\";\nexport interface BuildContext {\n\toptions: ResolvedConfig;\n\thooks: Hookable<TsdownHooks>;\n}\nexport interface RolldownContext {\n\tbuildOptions: BuildOptions;\n}\n/**\n* Hooks for tsdown.\n*/\nexport interface TsdownHooks {\n\t/**\n\t* Invoked before each tsdown build starts.\n\t* Use this hook to perform setup or preparation tasks.\n\t*/\n\t\"build:prepare\": (ctx: BuildContext) => void | Promise<void>;\n\t/**\n\t* Invoked before each Rolldown build.\n\t* For dual-format builds, this hook is called for each format.\n\t* Useful for configuring or modifying the build context before bundling.\n\t*/\n\t\"build:before\": (ctx: BuildContext & RolldownContext) => void | Promise<void>;\n\t/**\n\t* Invoked after each tsdown build completes.\n\t* Use this hook for cleanup or post-processing tasks.\n\t*/\n\t\"build:done\": (ctx: BuildContext) => void | Promise<void>;\n}\nexport declare function createHooks(options: ResolvedConfig): Promise<{\n\thooks: Hookable<TsdownHooks>;\n\tcontext: BuildContext;\n}>;\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"34045a81-89d0-416b-8fd5-181ddd6bb12d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885262,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/entry.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"9cb2395e-8ad0-4c77-a189-54aba5533c38","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885262,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"9cb2395e-8ad0-4c77-a189-54aba5533c38","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885263,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/hooks.d.ts","content":"import { type Hookable } from \"hookable\";\nimport type { ResolvedConfig } from \"../config/index.ts\";\nimport type { BuildOptions } from \"rolldown\";\nexport interface BuildContext {\n\toptions: ResolvedConfig;\n\thooks: Hookable<TsdownHooks>;\n}\nexport interface RolldownContext {\n\tbuildOptions: BuildOptions;\n}\n/**\n* Hooks for tsdown.\n*/\nexport interface TsdownHooks {\n\t/**\n\t* Invoked before each tsdown build starts.\n\t* Use this hook to perform setup or preparation tasks.\n\t*/\n\t\"build:prepare\": (ctx: BuildContext) => void | Promise<void>;\n\t/**\n\t* Invoked before each Rolldown build.\n\t* For dual-format builds, this hook is called for each format.\n\t* Useful for configuring or modifying the build context before bundling.\n\t*/\n\t\"build:before\": (ctx: BuildContext & RolldownContext) => void | Promise<void>;\n\t/**\n\t* Invoked after each tsdown build completes.\n\t* Use this hook for cleanup or post-processing tasks.\n\t*/\n\t\"build:done\": (ctx: BuildContext) => void | Promise<void>;\n}\nexport declare function createHooks(options: ResolvedConfig): Promise<{\n\thooks: Hookable<TsdownHooks>;\n\tcontext: BuildContext;\n}>;\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"aa433240-e995-4daa-b91a-bd1e5e6bcc9d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885263,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/entry.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"e2a866d2-4203-479c-b32f-dd6c4233dd61","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885263,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/hooks.d.ts","content":"import { type Hookable } from \"hookable\";\nimport type { ResolvedConfig } from \"../config/index.ts\";\nimport type { BuildOptions } from \"rolldown\";\nexport interface BuildContext {\n\toptions: ResolvedConfig;\n\thooks: Hookable<TsdownHooks>;\n}\nexport interface RolldownContext {\n\tbuildOptions: BuildOptions;\n}\n/**\n* Hooks for tsdown.\n*/\nexport interface TsdownHooks {\n\t/**\n\t* Invoked before each tsdown build starts.\n\t* Use this hook to perform setup or preparation tasks.\n\t*/\n\t\"build:prepare\": (ctx: BuildContext) => void | Promise<void>;\n\t/**\n\t* Invoked before each Rolldown build.\n\t* For dual-format builds, this hook is called for each format.\n\t* Useful for configuring or modifying the build context before bundling.\n\t*/\n\t\"build:before\": (ctx: BuildContext & RolldownContext) => void | Promise<void>;\n\t/**\n\t* Invoked after each tsdown build completes.\n\t* Use this hook for cleanup or post-processing tasks.\n\t*/\n\t\"build:done\": (ctx: BuildContext) => void | Promise<void>;\n}\nexport declare function createHooks(options: ResolvedConfig): Promise<{\n\thooks: Hookable<TsdownHooks>;\n\tcontext: BuildContext;\n}>;\n","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"call_id":"aa433240-e995-4daa-b91a-bd1e5e6bcc9d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885264,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/entry.ts","module_request":"tinyglobby","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"a8b0178a-a755-4151-b214-15f7c18860c4","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885264,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"a8b0178a-a755-4151-b214-15f7c18860c4","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885264,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/entry.ts","module_request":"tinyglobby","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"dbb7c44e-6cc5-4782-9f86-453c38fbc7dd","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885265,"action":"HookResolveIdCallEnd","resolved_id":"rolldown","is_external":true,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"af5c2f4e-9283-4848-a527-29388257d296","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885265,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/hooks.d.ts","content":"import { type Hookable } from \"hookable\";\nimport type { ResolvedConfig } from \"../config/index.ts\";\nimport type { BuildOptions } from \"rolldown\";\nexport interface BuildContext {\n\toptions: ResolvedConfig;\n\thooks: Hookable<TsdownHooks>;\n}\nexport interface RolldownContext {\n\tbuildOptions: BuildOptions;\n}\n/**\n* Hooks for tsdown.\n*/\nexport interface TsdownHooks {\n\t/**\n\t* Invoked before each tsdown build starts.\n\t* Use this hook to perform setup or preparation tasks.\n\t*/\n\t\"build:prepare\": (ctx: BuildContext) => void | Promise<void>;\n\t/**\n\t* Invoked before each Rolldown build.\n\t* For dual-format builds, this hook is called for each format.\n\t* Useful for configuring or modifying the build context before bundling.\n\t*/\n\t\"build:before\": (ctx: BuildContext & RolldownContext) => void | Promise<void>;\n\t/**\n\t* Invoked after each tsdown build completes.\n\t* Use this hook for cleanup or post-processing tasks.\n\t*/\n\t\"build:done\": (ctx: BuildContext) => void | Promise<void>;\n}\nexport declare function createHooks(options: ResolvedConfig): Promise<{\n\thooks: Hookable<TsdownHooks>;\n\tcontext: BuildContext;\n}>;\n","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"e31e8b5c-62b2-4e43-9c24-6ec249a56acb","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885266,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/entry.ts","module_request":"../utils/fs.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"23dcdb64-c128-4f40-9eb5-11ab4f135f36","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885266,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/publint.ts","module_request":"ansis","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"4ebe6812-6060-471c-9772-062e2b925d43","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885267,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"4ebe6812-6060-471c-9772-062e2b925d43","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885267,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/publint.ts","module_request":"ansis","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"76b902ec-d676-468c-8f97-273a89d7602c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885267,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"23dcdb64-c128-4f40-9eb5-11ab4f135f36","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885268,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/entry.ts","module_request":"../utils/fs.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"716587f8-c09b-4313-b986-1d797a1675fc","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885268,"action":"HookResolveIdCallEnd","resolved_id":"/Users/kevin/Developer/open-source/tsdown/src/config/index.d.ts","is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"d41acea8-46a0-4d8d-be0e-13db130310aa","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885268,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/entry.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"1469e239-8476-4ad7-9d02-69a8f5ac2762","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885268,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"1469e239-8476-4ad7-9d02-69a8f5ac2762","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885268,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/entry.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"45cc1d55-bed8-4381-b623-0c24dfb94aa8","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885268,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"e2a866d2-4203-479c-b32f-dd6c4233dd61","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885268,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/entry.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"4ba9bb1f-ff45-4948-b768-06f9662f050c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885269,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"dbb7c44e-6cc5-4782-9f86-453c38fbc7dd","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885269,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/entry.ts","module_request":"tinyglobby","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"de12da81-9f89-417e-a947-971793c27e06","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885269,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/package.d.ts","content":"import { Format, NormalizedFormat } from \"../config/index.ts\";\nimport { PackageJson } from \"pkg-types\";\nexport var readPackageJson = [39, () => [PackageJson, Promise]];\nexport var PackageType = [40, () => []];\nexport var getPackageType = [41, () => [PackageJson, PackageType]];\nexport var normalizeFormat = [42, () => [Format, Format, NormalizedFormat]];","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"0554fa2c-d2e2-4f61-8a9c-dd0b14646d1b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885269,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"716587f8-c09b-4313-b986-1d797a1675fc","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885269,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/utils/package.d.ts","module_request":"../config/index.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"48472029-1801-4469-8bd5-e04a6ced3b28","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885269,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"48472029-1801-4469-8bd5-e04a6ced3b28","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885269,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/utils/package.d.ts","module_request":"../config/index.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"9432f073-e6e0-4a98-85ba-2a200c888568","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885270,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"6839c8ae-34bb-4cdc-81db-f351a22881ef","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885270,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/exports.d.ts","module_request":"rolldown","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"f45556ff-f5fe-47aa-936d-b10c2b423649","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885270,"action":"HookResolveIdCallEnd","resolved_id":"/Users/kevin/Developer/open-source/tsdown/src/config/index.d.ts","is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"30e4f56a-997c-4f55-9794-8f7d107a0ea0","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885270,"action":"HookResolveIdCallEnd","resolved_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/types.d.ts","is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"07a92265-096d-4044-aae5-2c98611e8e6f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885270,"action":"HookResolveIdCallEnd","resolved_id":"pkg-types","is_external":true,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"42ca1d22-25c6-438d-aded-375c4a89e23f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885271,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/utils/package.d.ts","module_request":"pkg-types","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"8cf855ff-700e-4c68-9970-b186a73761f5","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885271,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"8cf855ff-700e-4c68-9970-b186a73761f5","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885271,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/utils/package.d.ts","module_request":"pkg-types","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"b0bf6130-2011-43b7-9ba4-f80baef64e86","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885271,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/publint.ts","module_request":"debug","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"c5d27eb6-b61a-4e4b-be32-263325d52e75","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885271,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"c5d27eb6-b61a-4e4b-be32-263325d52e75","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885272,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/publint.ts","module_request":"debug","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"d3cbfbb5-eaa0-448d-b9fb-2b8850aed8ad","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885272,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/publint.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"bb48aa1c-e56d-4964-bb7a-caff5355e248","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885272,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"bb48aa1c-e56d-4964-bb7a-caff5355e248","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885273,"action":"HookResolveIdCallEnd","resolved_id":"rolldown","is_external":true,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"f45556ff-f5fe-47aa-936d-b10c2b423649","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885273,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/publint.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"1356f5a8-bc71-4985-9187-3009d904e97d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885274,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/publint.ts","module_request":"publint","import_kind":"dynamic-import","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"3e7d9fc0-651f-42e8-835f-8c79881cb53b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885274,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"3e7d9fc0-651f-42e8-835f-8c79881cb53b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885274,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/publint.ts","module_request":"publint","import_kind":"dynamic-import","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"2ea486e7-972a-4a7d-b0d1-c8afb4e7fae2","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885275,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/publint.ts","module_request":"publint/utils","import_kind":"dynamic-import","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"43b2fe38-735c-4821-949b-ec65962384b1","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885275,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"43b2fe38-735c-4821-949b-ec65962384b1","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885275,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/publint.ts","module_request":"publint/utils","import_kind":"dynamic-import","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"9e382a77-e04e-4e28-9d8b-b4ef7a5f8c51","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885275,"action":"HookResolveIdCallEnd","resolved_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/package.d.ts","is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"11b2fa35-e7cc-4976-b3f3-e9d16631219a","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885275,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"3e2b7e43-2f69-4a20-aaa2-475d5c320fec","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885275,"action":"HookResolveIdCallEnd","resolved_id":"/Users/kevin/Developer/open-source/tsdown/src/config/index.d.ts","is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"9432f073-e6e0-4a98-85ba-2a200c888568","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885276,"action":"HookResolveIdCallEnd","resolved_id":"pkg-types","is_external":true,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"b0bf6130-2011-43b7-9ba4-f80baef64e86","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885276,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/publint.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"aa5b469a-788d-4fcd-9e6a-1cf5f2dda26b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885276,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"a73a111a-b8cf-41e3-9e90-f1ab22314563","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885276,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/publint.ts","module_request":"node:process","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"4c712878-f30e-4da0-b9ad-767d5641d4ff","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885276,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"76b902ec-d676-468c-8f97-273a89d7602c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885276,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/publint.ts","module_request":"ansis","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"f3cc97d5-ca81-4043-866a-9d9eedf7e004","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885276,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"d3cbfbb5-eaa0-448d-b9fb-2b8850aed8ad","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885277,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/publint.ts","module_request":"debug","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"22d8de4e-604d-480a-aba7-b8b32096b8d8","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885277,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"1356f5a8-bc71-4985-9187-3009d904e97d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885277,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/publint.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"033a47dd-09a1-4afe-96ef-4d9698195dc3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885277,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"2ea486e7-972a-4a7d-b0d1-c8afb4e7fae2","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885277,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/publint.ts","module_request":"publint","import_kind":"dynamic-import","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"8d2bb5f9-d52c-4d62-b7e3-de2e77189eea","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885277,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"9e382a77-e04e-4e28-9d8b-b4ef7a5f8c51","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885277,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/publint.ts","module_request":"publint/utils","import_kind":"dynamic-import","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"d7486be3-c7c2-463d-8cf3-27e505efe4ce","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885277,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"aa5b469a-788d-4fcd-9e6a-1cf5f2dda26b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885278,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/publint.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"3eb9ed80-c3b6-493f-b4db-f475ddfc59c4","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885278,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"4c712878-f30e-4da0-b9ad-767d5641d4ff","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885278,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/publint.ts","module_request":"node:process","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"ee4339c8-fe1e-4d3c-a17b-fb87826342cc","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885278,"action":"HookResolveIdCallEnd","resolved_id":"ansis","is_external":true,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"f3cc97d5-ca81-4043-866a-9d9eedf7e004","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885278,"action":"HookResolveIdCallEnd","resolved_id":"debug","is_external":true,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"22d8de4e-604d-480a-aba7-b8b32096b8d8","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885278,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"033a47dd-09a1-4afe-96ef-4d9698195dc3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885278,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/publint.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"8a50ed94-5d40-4419-a4c7-be57daa74fcf","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885278,"action":"HookResolveIdCallEnd","resolved_id":"publint","is_external":true,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"8d2bb5f9-d52c-4d62-b7e3-de2e77189eea","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885279,"action":"HookResolveIdCallEnd","resolved_id":"publint/utils","is_external":true,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"d7486be3-c7c2-463d-8cf3-27e505efe4ce","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885279,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"3eb9ed80-c3b6-493f-b4db-f475ddfc59c4","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885279,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/publint.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"54dce73f-4cd3-477c-9569-4e7aa12db806","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885279,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"54dce73f-4cd3-477c-9569-4e7aa12db806","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885279,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"ee4339c8-fe1e-4d3c-a17b-fb87826342cc","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885279,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/publint.ts","module_request":"node:process","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"138abfce-e56b-4043-8f19-346056350ffa","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885279,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/entry.ts","module_request":"../utils/fs.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"6cb68403-edd2-4082-b834-72fa0b0678cb","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885280,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"45cc1d55-bed8-4381-b623-0c24dfb94aa8","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885280,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/entry.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"725ca577-107e-44fa-8d32-e4e6d2892af1","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885280,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"4ba9bb1f-ff45-4948-b768-06f9662f050c","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885280,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"138abfce-e56b-4043-8f19-346056350ffa","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885280,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/entry.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"28391a3f-4ee2-4eb3-929d-43b69253139f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885280,"action":"HookResolveIdCallEnd","resolved_id":"tinyglobby","is_external":true,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"de12da81-9f89-417e-a947-971793c27e06","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885280,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"6cb68403-edd2-4082-b834-72fa0b0678cb","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885281,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/entry.ts","module_request":"../utils/fs.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"7c369edc-99f6-45ac-9498-94c16c857b8b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885281,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"tsdown:external","plugin_id":1,"trigger":"automatic","call_id":"725ca577-107e-44fa-8d32-e4e6d2892af1","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885281,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/entry.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"7e0f1e53-07a1-4f82-a7cd-b8d2d952a259","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885281,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"28391a3f-4ee2-4eb3-929d-43b69253139f","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885281,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/entry.ts","module_request":"node:path","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"942111ad-fe5e-441e-ab13-c811ea275e1b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885281,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/hooks.d.ts","content":"import { Hookable } from \"hookable\";\nimport { ResolvedConfig } from \"../config/index.ts\";\nimport { BuildOptions } from \"rolldown\";\nexport var BuildContext = [63, () => [ResolvedConfig, TsdownHooks, Hookable]];\nexport var RolldownContext = [64, () => [BuildOptions]];\nexport var TsdownHooks = [65, () => [BuildContext, Promise, BuildContext, RolldownContext, Promise, BuildContext, Promise]];\nexport var createHooks = [66, () => [ResolvedConfig, TsdownHooks, Hookable, BuildContext, Promise]];","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"e31e8b5c-62b2-4e43-9c24-6ec249a56acb","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885281,"action":"HookTransformCallStart","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/hooks.d.ts","content":"import { Hookable } from \"hookable\";\nimport { ResolvedConfig } from \"../config/index.ts\";\nimport { BuildOptions } from \"rolldown\";\nexport var BuildContext = [63, () => [ResolvedConfig, TsdownHooks, Hookable]];\nexport var RolldownContext = [64, () => [BuildOptions]];\nexport var TsdownHooks = [65, () => [BuildContext, Promise, BuildContext, RolldownContext, Promise, BuildContext, Promise]];\nexport var createHooks = [66, () => [ResolvedConfig, TsdownHooks, Hookable, BuildContext, Promise]];","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"cd377dd0-5d83-47c1-9ecd-6474d628db01","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885282,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"942111ad-fe5e-441e-ab13-c811ea275e1b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885282,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"7c369edc-99f6-45ac-9498-94c16c857b8b","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885282,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/entry.ts","module_request":"../utils/fs.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"49da1638-7083-4bf1-bd79-182e4a8522c3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885282,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"49da1638-7083-4bf1-bd79-182e4a8522c3","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885282,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"7e0f1e53-07a1-4f82-a7cd-b8d2d952a259","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885282,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/entry.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"84a146a6-7828-4d99-b7f0-5956627a7b3e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885282,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"84a146a6-7828-4d99-b7f0-5956627a7b3e","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885283,"action":"HookTransformCallEnd","module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/hooks.d.ts","content":"import { Hookable } from \"hookable\";\nimport { ResolvedConfig } from \"../config/index.ts\";\nimport { BuildOptions } from \"rolldown\";\nexport var BuildContext = [63, () => [ResolvedConfig, TsdownHooks, Hookable]];\nexport var RolldownContext = [64, () => [BuildOptions]];\nexport var TsdownHooks = [65, () => [BuildContext, Promise, BuildContext, RolldownContext, Promise, BuildContext, Promise]];\nexport var createHooks = [66, () => [ResolvedConfig, TsdownHooks, Hookable, BuildContext, Promise]];","plugin_name":"unplugin-unused","plugin_id":5,"call_id":"cd377dd0-5d83-47c1-9ecd-6474d628db01","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885283,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"rolldown-plugin-dts:generate","plugin_id":2,"trigger":"automatic","call_id":"8a50ed94-5d40-4419-a4c7-be57daa74fcf","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885283,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/publint.ts","module_request":"../utils/logger.ts","import_kind":"import-statement","plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"565e5da9-37cd-4c13-882a-f5ad8a66eeea","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885283,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:data-uri","plugin_id":10,"trigger":"automatic","call_id":"565e5da9-37cd-4c13-882a-f5ad8a66eeea","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885283,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/hooks.d.ts","module_request":"hookable","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"06956abc-0092-4034-86fc-fbfcb6c8ecbb","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885284,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"06956abc-0092-4034-86fc-fbfcb6c8ecbb","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885284,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/hooks.d.ts","module_request":"hookable","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"589caf81-281c-43a0-a340-4768852e5722","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885284,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/hooks.d.ts","module_request":"../config/index.ts","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"904fff78-2969-4864-b6f4-a9b555d82bef","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885284,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"904fff78-2969-4864-b6f4-a9b555d82bef","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885284,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/hooks.d.ts","module_request":"../config/index.ts","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"d020bd10-0d5e-4e8e-89c6-9998ea05d401","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885285,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/hooks.d.ts","module_request":"rolldown","import_kind":"import-statement","plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"9c53ebdf-8f54-47ac-8a20-07dc3d7e2ff9","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885286,"action":"HookResolveIdCallEnd","resolved_id":null,"is_external":null,"plugin_name":"builtin:oxc-runtime","plugin_id":0,"trigger":"automatic","call_id":"9c53ebdf-8f54-47ac-8a20-07dc3d7e2ff9","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885286,"action":"HookResolveIdCallStart","importer":"/Users/kevin/Developer/open-source/tsdown/src/features/hooks.d.ts","module_request":"rolldown","import_kind":"import-statement","plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"0f90fdd6-dabb-4d2e-bc6f-97c91f6c68da","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885286,"action":"HookResolveIdCallEnd","resolved_id":"hookable","is_external":true,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"589caf81-281c-43a0-a340-4768852e5722","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885287,"action":"HookResolveIdCallEnd","resolved_id":"rolldown","is_external":true,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"0f90fdd6-dabb-4d2e-bc6f-97c91f6c68da","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885288,"action":"HookResolveIdCallEnd","resolved_id":"/Users/kevin/Developer/open-source/tsdown/src/config/index.d.ts","is_external":null,"plugin_name":"rolldown-plugin-dts:resolver","plugin_id":3,"trigger":"automatic","call_id":"d020bd10-0d5e-4e8e-89c6-9998ea05d401","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885289,"action":"ModuleGraphReady","modules":[{"id":"rolldown:runtime","is_external":false,"imports":[{"module_id":"node:module","kind":"import-statement","module_request":"node:module"}],"importers":[]},{"id":"/Users/kevin/Developer/open-source/tsdown/src/config.ts","is_external":false,"imports":[],"importers":["/Users/kevin/Developer/open-source/tsdown/src/index.ts"]},{"id":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","is_external":false,"imports":[{"module_id":"node:path","kind":"import-statement","module_request":"node:path"},{"module_id":"node:process","kind":"import-statement","module_request":"node:process"},{"module_id":"node:url","kind":"import-statement","module_request":"node:url"},{"module_id":"ansis","kind":"import-statement","module_request":"ansis"},{"module_id":"rolldown","kind":"import-statement","module_request":"rolldown"},{"module_id":"tinyexec","kind":"import-statement","module_request":"tinyexec"},{"module_id":"tree-kill","kind":"import-statement","module_request":"tree-kill"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","kind":"import-statement","module_request":"./config/index.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.ts","kind":"import-statement","module_request":"./features/attw.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/cjs.ts","kind":"import-statement","module_request":"./features/cjs.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/clean.ts","kind":"import-statement","module_request":"./features/clean.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/copy.ts","kind":"import-statement","module_request":"./features/copy.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/exports.ts","kind":"import-statement","module_request":"./features/exports.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/hooks.ts","kind":"import-statement","module_request":"./features/hooks.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/publint.ts","kind":"import-statement","module_request":"./features/publint.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","kind":"import-statement","module_request":"./features/rolldown.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/shortcuts.ts","kind":"import-statement","module_request":"./features/shortcuts.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/watch.ts","kind":"import-statement","module_request":"./features/watch.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/logger.ts","kind":"import-statement","module_request":"./utils/logger.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/config.ts","kind":"import-statement","module_request":"./config.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/types.ts","kind":"import-statement","module_request":"./config/types.ts"}],"importers":["/Users/kevin/Developer/open-source/tsdown/src/features/external.ts","/Users/kevin/Developer/open-source/tsdown/src/features/shims.ts"]},{"id":"/Users/kevin/Developer/open-source/tsdown/src/plugins.ts","is_external":false,"imports":[{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/external.ts","kind":"import-statement","module_request":"./features/external.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/shebang.ts","kind":"import-statement","module_request":"./features/shebang.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","kind":"import-statement","module_request":"./features/report.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/node-protocol.ts","kind":"import-statement","module_request":"./features/node-protocol.ts"}],"importers":[]},{"id":"/Users/kevin/Developer/open-source/tsdown/src/run.ts","is_external":false,"imports":[{"module_id":"node:module","kind":"import-statement","module_request":"node:module"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/cli.ts","kind":"import-statement","module_request":"./cli.ts"}],"importers":[]},{"id":"node:module","is_external":true,"imports":null,"importers":null},{"id":"/Users/kevin/Developer/open-source/tsdown/src/config.d.ts","is_external":false,"imports":[{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/index.d.ts","kind":"import-statement","module_request":"./config/index.ts"}],"importers":["/Users/kevin/Developer/open-source/tsdown/src/index.d.ts"]},{"id":"/Users/kevin/Developer/open-source/tsdown/src/plugins.d.ts","is_external":false,"imports":[{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/external.d.ts","kind":"import-statement","module_request":"./features/external.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/shebang.d.ts","kind":"import-statement","module_request":"./features/shebang.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/report.d.ts","kind":"import-statement","module_request":"./features/report.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/node-protocol.d.ts","kind":"import-statement","module_request":"./features/node-protocol.ts"}],"importers":[]},{"id":"/Users/kevin/Developer/open-source/tsdown/src/run.d.ts","is_external":false,"imports":[],"importers":[]},{"id":"/Users/kevin/Developer/open-source/tsdown/src/index.d.ts","is_external":false,"imports":[{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/index.d.ts","kind":"import-statement","module_request":"./config/index.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/logger.d.ts","kind":"import-statement","module_request":"./utils/logger.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/config.d.ts","kind":"import-statement","module_request":"./config.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/types.d.ts","kind":"import-statement","module_request":"./config/types.ts"}],"importers":[]},{"id":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","is_external":false,"imports":[{"module_id":"node:path","kind":"import-statement","module_request":"node:path"},{"module_id":"node:process","kind":"import-statement","module_request":"node:process"},{"module_id":"ansis","kind":"import-statement","module_request":"ansis"},{"module_id":"debug","kind":"import-statement","module_request":"debug"},{"module_id":"tinyglobby","kind":"import-statement","module_request":"tinyglobby"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/clean.ts","kind":"import-statement","module_request":"../features/clean.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/entry.ts","kind":"import-statement","module_request":"../features/entry.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/exports.ts","kind":"import-statement","module_request":"../features/exports.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/target.ts","kind":"import-statement","module_request":"../features/target.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/tsconfig.ts","kind":"import-statement","module_request":"../features/tsconfig.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/general.ts","kind":"import-statement","module_request":"../utils/general.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/logger.ts","kind":"import-statement","module_request":"../utils/logger.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/package.ts","kind":"import-statement","module_request":"../utils/package.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/config.ts","kind":"import-statement","module_request":"./config.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/types.ts","kind":"import-statement","module_request":"./types.ts"}],"importers":["/Users/kevin/Developer/open-source/tsdown/src/index.ts","/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts"]},{"id":"/Users/kevin/Developer/open-source/tsdown/src/features/external.ts","is_external":false,"imports":[{"module_id":"node:module","kind":"import-statement","module_request":"node:module"},{"module_id":"node:path","kind":"import-statement","module_request":"node:path"},{"module_id":"ansis","kind":"import-statement","module_request":"ansis"},{"module_id":"debug","kind":"import-statement","module_request":"debug"},{"module_id":"rolldown-plugin-dts/filename","kind":"import-statement","module_request":"rolldown-plugin-dts/filename"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","kind":"import-statement","module_request":"../index.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/general.ts","kind":"import-statement","module_request":"../utils/general.ts"}],"importers":["/Users/kevin/Developer/open-source/tsdown/src/plugins.ts","/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts"]},{"id":"/Users/kevin/Developer/open-source/tsdown/src/features/shebang.ts","is_external":false,"imports":[{"module_id":"node:fs/promises","kind":"import-statement","module_request":"node:fs/promises"},{"module_id":"node:path","kind":"import-statement","module_request":"node:path"},{"module_id":"ansis","kind":"import-statement","module_request":"ansis"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/fs.ts","kind":"import-statement","module_request":"../utils/fs.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/logger.ts","kind":"import-statement","module_request":"../utils/logger.ts"}],"importers":["/Users/kevin/Developer/open-source/tsdown/src/plugins.ts","/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts"]},{"id":"/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","is_external":false,"imports":[{"module_id":"node:buffer","kind":"import-statement","module_request":"node:buffer"},{"module_id":"node:path","kind":"import-statement","module_request":"node:path"},{"module_id":"node:util","kind":"import-statement","module_request":"node:util"},{"module_id":"node:zlib","kind":"import-statement","module_request":"node:zlib"},{"module_id":"ansis","kind":"import-statement","module_request":"ansis"},{"module_id":"debug","kind":"import-statement","module_request":"debug"},{"module_id":"rolldown-plugin-dts/filename","kind":"import-statement","module_request":"rolldown-plugin-dts/filename"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/format.ts","kind":"import-statement","module_request":"../utils/format.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/general.ts","kind":"import-statement","module_request":"../utils/general.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/logger.ts","kind":"import-statement","module_request":"../utils/logger.ts"}],"importers":["/Users/kevin/Developer/open-source/tsdown/src/plugins.ts","/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts"]},{"id":"/Users/kevin/Developer/open-source/tsdown/src/features/node-protocol.ts","is_external":false,"imports":[{"module_id":"node:module","kind":"import-statement","module_request":"node:module"}],"importers":["/Users/kevin/Developer/open-source/tsdown/src/plugins.ts","/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts"]},{"id":"/Users/kevin/Developer/open-source/tsdown/src/cli.ts","is_external":false,"imports":[{"module_id":"node:process","kind":"import-statement","module_request":"node:process"},{"module_id":"ansis","kind":"import-statement","module_request":"ansis"},{"module_id":"cac","kind":"import-statement","module_request":"cac"},{"module_id":"debug","kind":"import-statement","module_request":"debug"},{"module_id":"rolldown","kind":"import-statement","module_request":"rolldown"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/package.json","kind":"import-statement","module_request":"../package.json"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/general.ts","kind":"import-statement","module_request":"./utils/general.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/logger.ts","kind":"import-statement","module_request":"./utils/logger.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","kind":"dynamic-import","module_request":"./index.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/migrate.ts","kind":"dynamic-import","module_request":"./migrate.ts"}],"importers":["/Users/kevin/Developer/open-source/tsdown/src/run.ts"]},{"id":"/Users/kevin/Developer/open-source/tsdown/src/utils/logger.ts","is_external":false,"imports":[{"module_id":"ansis","kind":"import-statement","module_request":"ansis"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/general.ts","kind":"import-statement","module_request":"./general.ts"}],"importers":["/Users/kevin/Developer/open-source/tsdown/src/features/shebang.ts","/Users/kevin/Developer/open-source/tsdown/src/index.ts","/Users/kevin/Developer/open-source/tsdown/src/cli.ts","/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","/Users/kevin/Developer/open-source/tsdown/src/features/clean.ts","/Users/kevin/Developer/open-source/tsdown/src/features/shortcuts.ts","/Users/kevin/Developer/open-source/tsdown/src/migrate.ts","/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","/Users/kevin/Developer/open-source/tsdown/src/features/target.ts","/Users/kevin/Developer/open-source/tsdown/src/features/tsconfig.ts","/Users/kevin/Developer/open-source/tsdown/src/config/config.ts","/Users/kevin/Developer/open-source/tsdown/src/features/entry.ts","/Users/kevin/Developer/open-source/tsdown/src/features/publint.ts"]},{"id":"/Users/kevin/Developer/open-source/tsdown/src/config/types.ts","is_external":false,"imports":[],"importers":["/Users/kevin/Developer/open-source/tsdown/src/index.ts","/Users/kevin/Developer/open-source/tsdown/src/config/index.ts"]},{"id":"node:fs/promises","is_external":true,"imports":null,"importers":null},{"id":"node:path","is_external":true,"imports":null,"importers":null},{"id":"ansis","is_external":true,"imports":null,"importers":null},{"id":"/Users/kevin/Developer/open-source/tsdown/src/utils/fs.ts","is_external":false,"imports":[{"module_id":"node:fs/promises","kind":"import-statement","module_request":"node:fs/promises"},{"module_id":"node:path","kind":"import-statement","module_request":"node:path"}],"importers":["/Users/kevin/Developer/open-source/tsdown/src/features/shebang.ts","/Users/kevin/Developer/open-source/tsdown/src/features/clean.ts","/Users/kevin/Developer/open-source/tsdown/src/features/copy.ts","/Users/kevin/Developer/open-source/tsdown/src/features/attw.ts","/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","/Users/kevin/Developer/open-source/tsdown/src/features/tsconfig.ts","/Users/kevin/Developer/open-source/tsdown/src/config/config.ts","/Users/kevin/Developer/open-source/tsdown/src/features/entry.ts"]},{"id":"node:process","is_external":true,"imports":null,"importers":null},{"id":"node:url","is_external":true,"imports":null,"importers":null},{"id":"rolldown","is_external":true,"imports":null,"importers":null},{"id":"tinyexec","is_external":true,"imports":null,"importers":null},{"id":"tree-kill","is_external":true,"imports":null,"importers":null},{"id":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.ts","is_external":false,"imports":[{"module_id":"node:child_process","kind":"import-statement","module_request":"node:child_process"},{"module_id":"node:fs/promises","kind":"import-statement","module_request":"node:fs/promises"},{"module_id":"node:os","kind":"import-statement","module_request":"node:os"},{"module_id":"node:path","kind":"import-statement","module_request":"node:path"},{"module_id":"node:process","kind":"import-statement","module_request":"node:process"},{"module_id":"node:util","kind":"import-statement","module_request":"node:util"},{"module_id":"ansis","kind":"import-statement","module_request":"ansis"},{"module_id":"debug","kind":"import-statement","module_request":"debug"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/fs.ts","kind":"import-statement","module_request":"../utils/fs.ts"},{"module_id":"@arethetypeswrong/core","kind":"dynamic-import","module_request":"@arethetypeswrong/core"}],"importers":["/Users/kevin/Developer/open-source/tsdown/src/index.ts"]},{"id":"/Users/kevin/Developer/open-source/tsdown/src/features/cjs.ts","is_external":false,"imports":[{"module_id":"semver/functions/coerce.js","kind":"import-statement","module_request":"semver/functions/coerce.js"},{"module_id":"semver/functions/satisfies.js","kind":"import-statement","module_request":"semver/functions/satisfies.js"}],"importers":["/Users/kevin/Developer/open-source/tsdown/src/index.ts"]},{"id":"/Users/kevin/Developer/open-source/tsdown/src/features/clean.ts","is_external":false,"imports":[{"module_id":"node:path","kind":"import-statement","module_request":"node:path"},{"module_id":"debug","kind":"import-statement","module_request":"debug"},{"module_id":"tinyglobby","kind":"import-statement","module_request":"tinyglobby"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/fs.ts","kind":"import-statement","module_request":"../utils/fs.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/general.ts","kind":"import-statement","module_request":"../utils/general.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/logger.ts","kind":"import-statement","module_request":"../utils/logger.ts"}],"importers":["/Users/kevin/Developer/open-source/tsdown/src/index.ts","/Users/kevin/Developer/open-source/tsdown/src/config/index.ts"]},{"id":"/Users/kevin/Developer/open-source/tsdown/src/features/copy.ts","is_external":false,"imports":[{"module_id":"node:path","kind":"import-statement","module_request":"node:path"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/fs.ts","kind":"import-statement","module_request":"../utils/fs.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/general.ts","kind":"import-statement","module_request":"../utils/general.ts"}],"importers":["/Users/kevin/Developer/open-source/tsdown/src/index.ts"]},{"id":"/Users/kevin/Developer/open-source/tsdown/src/features/exports.ts","is_external":false,"imports":[{"module_id":"node:fs/promises","kind":"import-statement","module_request":"node:fs/promises"},{"module_id":"node:path","kind":"import-statement","module_request":"node:path"},{"module_id":"rolldown-plugin-dts/filename","kind":"import-statement","module_request":"rolldown-plugin-dts/filename"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/general.ts","kind":"import-statement","module_request":"../utils/general.ts"}],"importers":["/Users/kevin/Developer/open-source/tsdown/src/index.ts","/Users/kevin/Developer/open-source/tsdown/src/config/index.ts"]},{"id":"/Users/kevin/Developer/open-source/tsdown/src/features/hooks.ts","is_external":false,"imports":[{"module_id":"hookable","kind":"import-statement","module_request":"hookable"}],"importers":["/Users/kevin/Developer/open-source/tsdown/src/index.ts"]},{"id":"/Users/kevin/Developer/open-source/tsdown/src/features/publint.ts","is_external":false,"imports":[{"module_id":"node:path","kind":"import-statement","module_request":"node:path"},{"module_id":"node:process","kind":"import-statement","module_request":"node:process"},{"module_id":"ansis","kind":"import-statement","module_request":"ansis"},{"module_id":"debug","kind":"import-statement","module_request":"debug"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/logger.ts","kind":"import-statement","module_request":"../utils/logger.ts"},{"module_id":"publint","kind":"dynamic-import","module_request":"publint"},{"module_id":"publint/utils","kind":"dynamic-import","module_request":"publint/utils"}],"importers":["/Users/kevin/Developer/open-source/tsdown/src/index.ts"]},{"id":"/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","is_external":false,"imports":[{"module_id":"node:fs/promises","kind":"import-statement","module_request":"node:fs/promises"},{"module_id":"node:os","kind":"import-statement","module_request":"node:os"},{"module_id":"node:path","kind":"import-statement","module_request":"node:path"},{"module_id":"node:util","kind":"import-statement","module_request":"node:util"},{"module_id":"debug","kind":"import-statement","module_request":"debug"},{"module_id":"rolldown","kind":"import-statement","module_request":"rolldown"},{"module_id":"rolldown/experimental","kind":"import-statement","module_request":"rolldown/experimental"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/package.json","kind":"import-statement","module_request":"../../package.json"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","kind":"import-statement","module_request":"../config/index.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/fs.ts","kind":"import-statement","module_request":"../utils/fs.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/logger.ts","kind":"import-statement","module_request":"../utils/logger.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/external.ts","kind":"import-statement","module_request":"./external.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/lightningcss.ts","kind":"import-statement","module_request":"./lightningcss.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/node-protocol.ts","kind":"import-statement","module_request":"./node-protocol.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/output.ts","kind":"import-statement","module_request":"./output.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","kind":"import-statement","module_request":"./report.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/shebang.ts","kind":"import-statement","module_request":"./shebang.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/shims.ts","kind":"import-statement","module_request":"./shims.ts"},{"module_id":"rolldown-plugin-dts","kind":"dynamic-import","module_request":"rolldown-plugin-dts"},{"module_id":"unplugin-unused","kind":"dynamic-import","module_request":"unplugin-unused"}],"importers":["/Users/kevin/Developer/open-source/tsdown/src/index.ts"]},{"id":"/Users/kevin/Developer/open-source/tsdown/src/features/shortcuts.ts","is_external":false,"imports":[{"module_id":"node:process","kind":"import-statement","module_request":"node:process"},{"module_id":"node:readline","kind":"import-statement","module_request":"node:readline"},{"module_id":"ansis","kind":"import-statement","module_request":"ansis"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/logger.ts","kind":"import-statement","module_request":"../utils/logger.ts"}],"importers":["/Users/kevin/Developer/open-source/tsdown/src/index.ts"]},{"id":"/Users/kevin/Developer/open-source/tsdown/src/features/watch.ts","is_external":false,"imports":[{"module_id":"node:path","kind":"import-statement","module_request":"node:path"},{"module_id":"ansis","kind":"import-statement","module_request":"ansis"},{"module_id":"rolldown-plugin-dts/filename","kind":"import-statement","module_request":"rolldown-plugin-dts/filename"},{"module_id":"rolldown-plugin-dts/tsc-context","kind":"import-statement","module_request":"rolldown-plugin-dts/tsc-context"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/general.ts","kind":"import-statement","module_request":"../utils/general.ts"},{"module_id":"chokidar","kind":"dynamic-import","module_request":"chokidar"}],"importers":["/Users/kevin/Developer/open-source/tsdown/src/index.ts"]},{"id":"cac","is_external":true,"imports":null,"importers":null},{"id":"debug","is_external":true,"imports":null,"importers":null},{"id":"/Users/kevin/Developer/open-source/tsdown/package.json","is_external":false,"imports":[],"importers":["/Users/kevin/Developer/open-source/tsdown/src/cli.ts","/Users/kevin/Developer/open-source/tsdown/src/migrate.ts","/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts"]},{"id":"/Users/kevin/Developer/open-source/tsdown/src/utils/general.ts","is_external":false,"imports":[],"importers":["/Users/kevin/Developer/open-source/tsdown/src/cli.ts","/Users/kevin/Developer/open-source/tsdown/src/features/external.ts","/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","/Users/kevin/Developer/open-source/tsdown/src/utils/logger.ts","/Users/kevin/Developer/open-source/tsdown/src/features/clean.ts","/Users/kevin/Developer/open-source/tsdown/src/features/copy.ts","/Users/kevin/Developer/open-source/tsdown/src/features/exports.ts","/Users/kevin/Developer/open-source/tsdown/src/features/watch.ts","/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","/Users/kevin/Developer/open-source/tsdown/src/features/target.ts","/Users/kevin/Developer/open-source/tsdown/src/utils/package.ts","/Users/kevin/Developer/open-source/tsdown/src/config/config.ts"]},{"id":"/Users/kevin/Developer/open-source/tsdown/src/migrate.ts","is_external":false,"imports":[{"module_id":"node:fs","kind":"import-statement","module_request":"node:fs"},{"module_id":"node:fs/promises","kind":"import-statement","module_request":"node:fs/promises"},{"module_id":"node:process","kind":"import-statement","module_request":"node:process"},{"module_id":"node:readline/promises","kind":"import-statement","module_request":"node:readline/promises"},{"module_id":"ansis","kind":"import-statement","module_request":"ansis"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/package.json","kind":"import-statement","module_request":"../package.json"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/logger.ts","kind":"import-statement","module_request":"./utils/logger.ts"},{"module_id":"diff","kind":"dynamic-import","module_request":"diff"},{"module_id":"diff","kind":"dynamic-import","module_request":"diff"}],"importers":[]},{"id":"rolldown-plugin-dts/filename","is_external":true,"imports":null,"importers":null},{"id":"node:buffer","is_external":true,"imports":null,"importers":null},{"id":"node:util","is_external":true,"imports":null,"importers":null},{"id":"node:zlib","is_external":true,"imports":null,"importers":null},{"id":"/Users/kevin/Developer/open-source/tsdown/src/utils/format.ts","is_external":false,"imports":[],"importers":["/Users/kevin/Developer/open-source/tsdown/src/features/report.ts"]},{"id":"tinyglobby","is_external":true,"imports":null,"importers":null},{"id":"semver/functions/coerce.js","is_external":true,"imports":null,"importers":null},{"id":"semver/functions/satisfies.js","is_external":true,"imports":null,"importers":null},{"id":"/Users/kevin/Developer/open-source/tsdown/src/features/external.d.ts","is_external":false,"imports":[{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/index.d.ts","kind":"import-statement","module_request":"../config/index.ts"},{"module_id":"pkg-types","kind":"import-statement","module_request":"pkg-types"},{"module_id":"rolldown","kind":"import-statement","module_request":"rolldown"}],"importers":["/Users/kevin/Developer/open-source/tsdown/src/plugins.d.ts"]},{"id":"/Users/kevin/Developer/open-source/tsdown/src/features/shebang.d.ts","is_external":false,"imports":[{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/logger.d.ts","kind":"import-statement","module_request":"../utils/logger.ts"},{"module_id":"rolldown","kind":"import-statement","module_request":"rolldown"}],"importers":["/Users/kevin/Developer/open-source/tsdown/src/plugins.d.ts"]},{"id":"/Users/kevin/Developer/open-source/tsdown/src/features/report.d.ts","is_external":false,"imports":[{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/logger.d.ts","kind":"import-statement","module_request":"../utils/logger.ts"},{"module_id":"rolldown","kind":"import-statement","module_request":"rolldown"}],"importers":["/Users/kevin/Developer/open-source/tsdown/src/plugins.d.ts","/Users/kevin/Developer/open-source/tsdown/src/config/types.d.ts"]},{"id":"/Users/kevin/Developer/open-source/tsdown/src/features/node-protocol.d.ts","is_external":false,"imports":[{"module_id":"rolldown","kind":"import-statement","module_request":"rolldown"}],"importers":["/Users/kevin/Developer/open-source/tsdown/src/plugins.d.ts"]},{"id":"hookable","is_external":true,"imports":null,"importers":null},{"id":"/Users/kevin/Developer/open-source/tsdown/src/utils/logger.d.ts","is_external":false,"imports":[{"module_id":"ansis","kind":"import-statement","module_request":"ansis"},{"module_id":"rolldown","kind":"import-statement","module_request":"rolldown"}],"importers":["/Users/kevin/Developer/open-source/tsdown/src/features/shebang.d.ts","/Users/kevin/Developer/open-source/tsdown/src/index.d.ts","/Users/kevin/Developer/open-source/tsdown/src/features/report.d.ts","/Users/kevin/Developer/open-source/tsdown/src/config/types.d.ts"]},{"id":"rolldown-plugin-dts/tsc-context","is_external":true,"imports":null,"importers":null},{"id":"chokidar","is_external":true,"imports":null,"importers":null},{"id":"node:child_process","is_external":true,"imports":null,"importers":null},{"id":"node:os","is_external":true,"imports":null,"importers":null},{"id":"@arethetypeswrong/core","is_external":true,"imports":null,"importers":null},{"id":"node:readline","is_external":true,"imports":null,"importers":null},{"id":"node:fs","is_external":true,"imports":null,"importers":null},{"id":"node:readline/promises","is_external":true,"imports":null,"importers":null},{"id":"diff","is_external":true,"imports":null,"importers":null},{"id":"/Users/kevin/Developer/open-source/tsdown/src/features/entry.ts","is_external":false,"imports":[{"module_id":"node:path","kind":"import-statement","module_request":"node:path"},{"module_id":"tinyglobby","kind":"import-statement","module_request":"tinyglobby"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/fs.ts","kind":"import-statement","module_request":"../utils/fs.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/logger.ts","kind":"import-statement","module_request":"../utils/logger.ts"}],"importers":["/Users/kevin/Developer/open-source/tsdown/src/config/index.ts"]},{"id":"/Users/kevin/Developer/open-source/tsdown/src/features/target.ts","is_external":false,"imports":[{"module_id":"semver/ranges/min-version.js","kind":"import-statement","module_request":"semver/ranges/min-version.js"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/general.ts","kind":"import-statement","module_request":"../utils/general.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/logger.ts","kind":"import-statement","module_request":"../utils/logger.ts"}],"importers":["/Users/kevin/Developer/open-source/tsdown/src/config/index.ts"]},{"id":"/Users/kevin/Developer/open-source/tsdown/src/features/tsconfig.ts","is_external":false,"imports":[{"module_id":"node:path","kind":"import-statement","module_request":"node:path"},{"module_id":"ansis","kind":"import-statement","module_request":"ansis"},{"module_id":"empathic/find","kind":"import-statement","module_request":"empathic/find"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/fs.ts","kind":"import-statement","module_request":"../utils/fs.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/logger.ts","kind":"import-statement","module_request":"../utils/logger.ts"}],"importers":["/Users/kevin/Developer/open-source/tsdown/src/config/index.ts"]},{"id":"/Users/kevin/Developer/open-source/tsdown/src/utils/package.ts","is_external":false,"imports":[{"module_id":"node:fs/promises","kind":"import-statement","module_request":"node:fs/promises"},{"module_id":"debug","kind":"import-statement","module_request":"debug"},{"module_id":"empathic/package","kind":"import-statement","module_request":"empathic/package"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/general.ts","kind":"import-statement","module_request":"./general.ts"}],"importers":["/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","/Users/kevin/Developer/open-source/tsdown/src/features/output.ts"]},{"id":"/Users/kevin/Developer/open-source/tsdown/src/config/config.ts","is_external":false,"imports":[{"module_id":"node:path","kind":"import-statement","module_request":"node:path"},{"module_id":"node:process","kind":"import-statement","module_request":"node:process"},{"module_id":"node:url","kind":"import-statement","module_request":"node:url"},{"module_id":"ansis","kind":"import-statement","module_request":"ansis"},{"module_id":"unconfig","kind":"import-statement","module_request":"unconfig"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/fs.ts","kind":"import-statement","module_request":"../utils/fs.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/general.ts","kind":"import-statement","module_request":"../utils/general.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/logger.ts","kind":"import-statement","module_request":"../utils/logger.ts"},{"module_id":"unrun","kind":"dynamic-import","module_request":"unrun"}],"importers":["/Users/kevin/Developer/open-source/tsdown/src/config/index.ts"]},{"id":"/Users/kevin/Developer/open-source/tsdown/src/config/index.d.ts","is_external":false,"imports":[{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/types.d.ts","kind":"import-statement","module_request":"../utils/types.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/types.d.ts","kind":"import-statement","module_request":"./types.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/types.d.ts","kind":"import-statement","module_request":"./types.ts"}],"importers":["/Users/kevin/Developer/open-source/tsdown/src/config.d.ts","/Users/kevin/Developer/open-source/tsdown/src/features/external.d.ts","/Users/kevin/Developer/open-source/tsdown/src/index.d.ts","/Users/kevin/Developer/open-source/tsdown/src/features/attw.d.ts","/Users/kevin/Developer/open-source/tsdown/src/features/copy.d.ts","/Users/kevin/Developer/open-source/tsdown/src/features/exports.d.ts","/Users/kevin/Developer/open-source/tsdown/src/features/output.d.ts","/Users/kevin/Developer/open-source/tsdown/src/utils/package.d.ts","/Users/kevin/Developer/open-source/tsdown/src/features/hooks.d.ts"]},{"id":"pkg-types","is_external":true,"imports":null,"importers":null},{"id":"/Users/kevin/Developer/open-source/tsdown/src/config/types.d.ts","is_external":false,"imports":[{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.d.ts","kind":"import-statement","module_request":"../features/attw.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/copy.d.ts","kind":"import-statement","module_request":"../features/copy.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/exports.d.ts","kind":"import-statement","module_request":"../features/exports.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/hooks.d.ts","kind":"import-statement","module_request":"../features/hooks.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/output.d.ts","kind":"import-statement","module_request":"../features/output.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/features/report.d.ts","kind":"import-statement","module_request":"../features/report.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/logger.d.ts","kind":"import-statement","module_request":"../utils/logger.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/package.d.ts","kind":"import-statement","module_request":"../utils/package.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/types.d.ts","kind":"import-statement","module_request":"../utils/types.ts"},{"module_id":"hookable","kind":"import-statement","module_request":"hookable"},{"module_id":"pkg-types","kind":"import-statement","module_request":"pkg-types"},{"module_id":"publint","kind":"import-statement","module_request":"publint"},{"module_id":"rolldown","kind":"import-statement","module_request":"rolldown"},{"module_id":"rolldown-plugin-dts","kind":"import-statement","module_request":"rolldown-plugin-dts"},{"module_id":"unplugin-unused","kind":"import-statement","module_request":"unplugin-unused"}],"importers":["/Users/kevin/Developer/open-source/tsdown/src/index.d.ts","/Users/kevin/Developer/open-source/tsdown/src/config/index.d.ts"]},{"id":"rolldown/experimental","is_external":true,"imports":null,"importers":null},{"id":"/Users/kevin/Developer/open-source/tsdown/src/features/lightningcss.ts","is_external":false,"imports":[{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/lightningcss.ts","kind":"import-statement","module_request":"../utils/lightningcss.ts"},{"module_id":"unplugin-lightningcss/rolldown","kind":"dynamic-import","module_request":"unplugin-lightningcss/rolldown"}],"importers":["/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts"]},{"id":"/Users/kevin/Developer/open-source/tsdown/src/features/output.ts","is_external":false,"imports":[{"module_id":"rolldown-plugin-dts/filename","kind":"import-statement","module_request":"rolldown-plugin-dts/filename"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/package.ts","kind":"import-statement","module_request":"../utils/package.ts"}],"importers":["/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts"]},{"id":"/Users/kevin/Developer/open-source/tsdown/src/features/shims.ts","is_external":false,"imports":[{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","kind":"import-statement","module_request":"../index.ts"}],"importers":["/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts"]},{"id":"rolldown-plugin-dts","is_external":true,"imports":null,"importers":null},{"id":"unplugin-unused","is_external":true,"imports":null,"importers":null},{"id":"/Users/kevin/Developer/open-source/tsdown/src/utils/lightningcss.ts","is_external":false,"imports":[],"importers":["/Users/kevin/Developer/open-source/tsdown/src/features/lightningcss.ts"]},{"id":"unplugin-lightningcss/rolldown","is_external":true,"imports":null,"importers":null},{"id":"/Users/kevin/Developer/open-source/tsdown/src/utils/types.ts","is_external":false,"imports":[],"importers":[]},{"id":"semver/ranges/min-version.js","is_external":true,"imports":null,"importers":null},{"id":"empathic/find","is_external":true,"imports":null,"importers":null},{"id":"/Users/kevin/Developer/open-source/tsdown/src/utils/types.d.ts","is_external":false,"imports":[],"importers":["/Users/kevin/Developer/open-source/tsdown/src/config/index.d.ts","/Users/kevin/Developer/open-source/tsdown/src/config/types.d.ts","/Users/kevin/Developer/open-source/tsdown/src/features/copy.d.ts","/Users/kevin/Developer/open-source/tsdown/src/features/exports.d.ts"]},{"id":"empathic/package","is_external":true,"imports":null,"importers":null},{"id":"unconfig","is_external":true,"imports":null,"importers":null},{"id":"unrun","is_external":true,"imports":null,"importers":null},{"id":"/Users/kevin/Developer/open-source/tsdown/src/features/attw.d.ts","is_external":false,"imports":[{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/index.d.ts","kind":"import-statement","module_request":"../config/index.ts"},{"module_id":"@arethetypeswrong/core","kind":"import-statement","module_request":"@arethetypeswrong/core"}],"importers":["/Users/kevin/Developer/open-source/tsdown/src/config/types.d.ts"]},{"id":"/Users/kevin/Developer/open-source/tsdown/src/features/copy.d.ts","is_external":false,"imports":[{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/index.d.ts","kind":"import-statement","module_request":"../config/index.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/types.d.ts","kind":"import-statement","module_request":"../utils/types.ts"}],"importers":["/Users/kevin/Developer/open-source/tsdown/src/config/types.d.ts"]},{"id":"/Users/kevin/Developer/open-source/tsdown/src/features/exports.d.ts","is_external":false,"imports":[{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/index.d.ts","kind":"import-statement","module_request":"../config/index.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/types.d.ts","kind":"import-statement","module_request":"../utils/types.ts"},{"module_id":"pkg-types","kind":"import-statement","module_request":"pkg-types"},{"module_id":"rolldown","kind":"import-statement","module_request":"rolldown"}],"importers":["/Users/kevin/Developer/open-source/tsdown/src/config/types.d.ts"]},{"id":"/Users/kevin/Developer/open-source/tsdown/src/features/hooks.d.ts","is_external":false,"imports":[{"module_id":"hookable","kind":"import-statement","module_request":"hookable"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/index.d.ts","kind":"import-statement","module_request":"../config/index.ts"},{"module_id":"rolldown","kind":"import-statement","module_request":"rolldown"}],"importers":["/Users/kevin/Developer/open-source/tsdown/src/config/types.d.ts"]},{"id":"/Users/kevin/Developer/open-source/tsdown/src/features/output.d.ts","is_external":false,"imports":[{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/utils/package.d.ts","kind":"import-statement","module_request":"../utils/package.ts"},{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/index.d.ts","kind":"import-statement","module_request":"../config/index.ts"},{"module_id":"rolldown","kind":"import-statement","module_request":"rolldown"}],"importers":["/Users/kevin/Developer/open-source/tsdown/src/config/types.d.ts"]},{"id":"/Users/kevin/Developer/open-source/tsdown/src/utils/package.d.ts","is_external":false,"imports":[{"module_id":"/Users/kevin/Developer/open-source/tsdown/src/config/index.d.ts","kind":"import-statement","module_request":"../config/index.ts"},{"module_id":"pkg-types","kind":"import-statement","module_request":"pkg-types"}],"importers":["/Users/kevin/Developer/open-source/tsdown/src/config/types.d.ts","/Users/kevin/Developer/open-source/tsdown/src/features/output.d.ts"]},{"id":"publint","is_external":true,"imports":null,"importers":null},{"id":"publint/utils","is_external":true,"imports":null,"importers":null}],"build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885303,"action":"BuildEnd","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885305,"action":"ChunkGraphReady","chunks":[{"chunk_id":0,"name":"config","advanced_chunk_group_id":null,"is_user_defined_entry":true,"is_async_entry":false,"entry_module":"/Users/kevin/Developer/open-source/tsdown/src/config.ts","modules":[],"reason":"entry","imports":[{"chunk_id":9,"kind":"import-statement"}]},{"chunk_id":1,"name":"index","advanced_chunk_group_id":null,"is_user_defined_entry":true,"is_async_entry":true,"entry_module":"/Users/kevin/Developer/open-source/tsdown/src/index.ts","modules":[],"reason":"entry","imports":[{"chunk_id":9,"kind":"import-statement"},{"chunk_id":10,"kind":"import-statement"},{"chunk_id":11,"kind":"import-statement"}]},{"chunk_id":2,"name":"plugins","advanced_chunk_group_id":null,"is_user_defined_entry":true,"is_async_entry":false,"entry_module":"/Users/kevin/Developer/open-source/tsdown/src/plugins.ts","modules":["/Users/kevin/Developer/open-source/tsdown/src/plugins.ts"],"reason":"entry","imports":[{"chunk_id":9,"kind":"import-statement"},{"chunk_id":10,"kind":"import-statement"},{"chunk_id":11,"kind":"import-statement"}]},{"chunk_id":3,"name":"run","advanced_chunk_group_id":null,"is_user_defined_entry":true,"is_async_entry":false,"entry_module":"/Users/kevin/Developer/open-source/tsdown/src/run.ts","modules":["/Users/kevin/Developer/open-source/tsdown/src/cli.ts","/Users/kevin/Developer/open-source/tsdown/src/run.ts"],"reason":"entry","imports":[{"chunk_id":11,"kind":"import-statement"}]},{"chunk_id":4,"name":"config.d","advanced_chunk_group_id":null,"is_user_defined_entry":true,"is_async_entry":false,"entry_module":"/Users/kevin/Developer/open-source/tsdown/src/config.d.ts","modules":[],"reason":"entry","imports":[{"chunk_id":12,"kind":"import-statement"},{"chunk_id":13,"kind":"import-statement"}]},{"chunk_id":5,"name":"index.d","advanced_chunk_group_id":null,"is_user_defined_entry":true,"is_async_entry":false,"entry_module":"/Users/kevin/Developer/open-source/tsdown/src/index.d.ts","modules":["/Users/kevin/Developer/open-source/tsdown/src/index.d.ts"],"reason":"entry","imports":[{"chunk_id":12,"kind":"import-statement"},{"chunk_id":13,"kind":"import-statement"}]},{"chunk_id":6,"name":"plugins.d","advanced_chunk_group_id":null,"is_user_defined_entry":true,"is_async_entry":false,"entry_module":"/Users/kevin/Developer/open-source/tsdown/src/plugins.d.ts","modules":["/Users/kevin/Developer/open-source/tsdown/src/features/external.d.ts","/Users/kevin/Developer/open-source/tsdown/src/features/shebang.d.ts","/Users/kevin/Developer/open-source/tsdown/src/features/node-protocol.d.ts","/Users/kevin/Developer/open-source/tsdown/src/plugins.d.ts"],"reason":"entry","imports":[{"chunk_id":12,"kind":"import-statement"}]},{"chunk_id":7,"name":"run.d","advanced_chunk_group_id":null,"is_user_defined_entry":true,"is_async_entry":false,"entry_module":"/Users/kevin/Developer/open-source/tsdown/src/run.d.ts","modules":["/Users/kevin/Developer/open-source/tsdown/src/run.d.ts"],"reason":"entry","imports":[]},{"chunk_id":8,"name":null,"advanced_chunk_group_id":null,"is_user_defined_entry":false,"is_async_entry":true,"entry_module":"/Users/kevin/Developer/open-source/tsdown/src/migrate.ts","modules":["/Users/kevin/Developer/open-source/tsdown/src/migrate.ts"],"reason":"entry","imports":[{"chunk_id":11,"kind":"import-statement"}]},{"chunk_id":9,"name":null,"advanced_chunk_group_id":null,"is_user_defined_entry":false,"is_async_entry":false,"entry_module":null,"modules":["/Users/kevin/Developer/open-source/tsdown/src/config.ts"],"reason":"common","imports":[]},{"chunk_id":10,"name":null,"advanced_chunk_group_id":null,"is_user_defined_entry":false,"is_async_entry":false,"entry_module":null,"modules":["/Users/kevin/Developer/open-source/tsdown/src/utils/fs.ts","/Users/kevin/Developer/open-source/tsdown/src/features/clean.ts","/Users/kevin/Developer/open-source/tsdown/src/features/entry.ts","/Users/kevin/Developer/open-source/tsdown/src/features/exports.ts","/Users/kevin/Developer/open-source/tsdown/src/features/target.ts","/Users/kevin/Developer/open-source/tsdown/src/features/tsconfig.ts","/Users/kevin/Developer/open-source/tsdown/src/utils/package.ts","/Users/kevin/Developer/open-source/tsdown/src/config/config.ts","/Users/kevin/Developer/open-source/tsdown/src/config/index.ts","/Users/kevin/Developer/open-source/tsdown/src/features/attw.ts","/Users/kevin/Developer/open-source/tsdown/src/features/cjs.ts","/Users/kevin/Developer/open-source/tsdown/src/features/copy.ts","/Users/kevin/Developer/open-source/tsdown/src/features/hooks.ts","/Users/kevin/Developer/open-source/tsdown/src/features/publint.ts","/Users/kevin/Developer/open-source/tsdown/src/features/external.ts","/Users/kevin/Developer/open-source/tsdown/src/utils/lightningcss.ts","/Users/kevin/Developer/open-source/tsdown/src/features/lightningcss.ts","/Users/kevin/Developer/open-source/tsdown/src/features/node-protocol.ts","/Users/kevin/Developer/open-source/tsdown/src/features/output.ts","/Users/kevin/Developer/open-source/tsdown/src/utils/format.ts","/Users/kevin/Developer/open-source/tsdown/src/features/report.ts","/Users/kevin/Developer/open-source/tsdown/src/features/shebang.ts","/Users/kevin/Developer/open-source/tsdown/src/features/shims.ts","/Users/kevin/Developer/open-source/tsdown/src/features/rolldown.ts","/Users/kevin/Developer/open-source/tsdown/src/features/shortcuts.ts","/Users/kevin/Developer/open-source/tsdown/src/features/watch.ts","/Users/kevin/Developer/open-source/tsdown/src/index.ts"],"reason":"common","imports":[{"chunk_id":11,"kind":"import-statement"}]},{"chunk_id":11,"name":null,"advanced_chunk_group_id":null,"is_user_defined_entry":false,"is_async_entry":false,"entry_module":null,"modules":["/Users/kevin/Developer/open-source/tsdown/src/utils/general.ts","/Users/kevin/Developer/open-source/tsdown/src/utils/logger.ts","/Users/kevin/Developer/open-source/tsdown/package.json"],"reason":"common","imports":[]},{"chunk_id":12,"name":null,"advanced_chunk_group_id":null,"is_user_defined_entry":false,"is_async_entry":false,"entry_module":null,"modules":["/Users/kevin/Developer/open-source/tsdown/src/utils/types.d.ts","/Users/kevin/Developer/open-source/tsdown/src/features/attw.d.ts","/Users/kevin/Developer/open-source/tsdown/src/features/copy.d.ts","/Users/kevin/Developer/open-source/tsdown/src/features/exports.d.ts","/Users/kevin/Developer/open-source/tsdown/src/features/hooks.d.ts","/Users/kevin/Developer/open-source/tsdown/src/utils/package.d.ts","/Users/kevin/Developer/open-source/tsdown/src/features/output.d.ts","/Users/kevin/Developer/open-source/tsdown/src/utils/logger.d.ts","/Users/kevin/Developer/open-source/tsdown/src/features/report.d.ts","/Users/kevin/Developer/open-source/tsdown/src/config/types.d.ts","/Users/kevin/Developer/open-source/tsdown/src/config/index.d.ts"],"reason":"common","imports":[]},{"chunk_id":13,"name":null,"advanced_chunk_group_id":null,"is_user_defined_entry":false,"is_async_entry":false,"entry_module":null,"modules":["/Users/kevin/Developer/open-source/tsdown/src/config.d.ts"],"reason":"common","imports":[{"chunk_id":12,"kind":"import-statement"}]}],"build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885309,"action":"HookRenderChunkStart","plugin_name":"rolldown-plugin-require-cjs","plugin_id":9,"call_id":"fae5ddb7-9ec2-489a-891f-c7c2a9509136","content":"import { t as defineConfig } from \"./config-!~{000}~.mjs\";\n\nexport { defineConfig };","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885309,"action":"HookRenderChunkStart","plugin_name":"rolldown-plugin-require-cjs","plugin_id":9,"call_id":"e5186002-551a-4bb4-bd94-451db53304f7","content":"import { t as defineConfig } from \"./config-!~{000}~.mjs\";\nimport { n as buildSingle, r as shimFile, t as build } from \"./src-!~{002}~.mjs\";\nimport { a as globalLogger } from \"./package-!~{004}~.mjs\";\n\nexport { build, buildSingle, defineConfig, globalLogger, shimFile };","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885309,"action":"HookRenderChunkStart","plugin_name":"rolldown-plugin-require-cjs","plugin_id":9,"call_id":"15804d42-ad20-4755-86b9-5fba8e514078","content":"import \"./config-!~{000}~.mjs\";\nimport { a as ReportPlugin, i as ShebangPlugin, o as NodeProtocolPlugin, s as ExternalPlugin } from \"./src-!~{002}~.mjs\";\nimport \"./package-!~{004}~.mjs\";\n\nexport { ExternalPlugin, NodeProtocolPlugin, ReportPlugin, ShebangPlugin };","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885310,"action":"HookRenderChunkStart","plugin_name":"rolldown-plugin-require-cjs","plugin_id":9,"call_id":"962e964b-af05-49b5-b7a9-50087c34963d","content":"#!/usr/bin/env node\nimport { a as globalLogger, d as resolveComma, m as toArray, t as version } from \"./package-!~{004}~.mjs\";\nimport module from \"node:module\";\nimport process from \"node:process\";\nimport { dim } from \"ansis\";\nimport { VERSION } from \"rolldown\";\nimport Debug from \"debug\";\nimport { cac } from \"cac\";\n\n//#region src/cli.ts\nconst cli = cac(\"tsdown\");\ncli.help().version(version);\ncli.command(\"[...files]\", \"Bundle files\", {\n\tignoreOptionDefaultValue: true,\n\tallowUnknownOptions: true\n}).option(\"-c, --config <filename>\", \"Use a custom config file\").option(\"--config-loader <loader>\", \"Config loader to use: auto, native, unconfig\", { default: \"auto\" }).option(\"--no-config\", \"Disable config file\").option(\"-f, --format <format>\", \"Bundle format: esm, cjs, iife, umd\", { default: \"esm\" }).option(\"--clean\", \"Clean output directory, --no-clean to disable\").option(\"--external <module>\", \"Mark dependencies as external\").option(\"--minify\", \"Minify output\").option(\"--debug [feat]\", \"Show debug logs\").option(\"--target <target>\", \"Bundle target, e.g \\\"es2015\\\", \\\"esnext\\\"\").option(\"-l, --logLevel <level>\", \"Set log level: info, warn, error, silent\").option(\"--fail-on-warn\", \"Fail on warnings\", { default: true }).option(\"-d, --out-dir <dir>\", \"Output directory\", { default: \"dist\" }).option(\"--treeshake\", \"Tree-shake bundle\", { default: true }).option(\"--sourcemap\", \"Generate source map\", { default: false }).option(\"--shims\", \"Enable cjs and esm shims \", { default: false }).option(\"--platform <platform>\", \"Target platform\", { default: \"node\" }).option(\"--dts\", \"Generate dts files\").option(\"--publint\", \"Enable publint\", { default: false }).option(\"--attw\", \"Enable Are the types wrong integration\", { default: false }).option(\"--unused\", \"Enable unused dependencies check\", { default: false }).option(\"-w, --watch [path]\", \"Watch mode\").option(\"--ignore-watch <path>\", \"Ignore custom paths in watch mode\").option(\"--from-vite [vitest]\", \"Reuse config from Vite or Vitest\").option(\"--report\", \"Size report\", { default: true }).option(\"--env.* <value>\", \"Define compile-time env variables\").option(\"--on-success <command>\", \"Command to run on success\").option(\"--copy <dir>\", \"Copy files to output dir\").option(\"--public-dir <dir>\", \"Alias for --copy, deprecated\").option(\"--tsconfig <tsconfig>\", \"Set tsconfig path\").option(\"--unbundle\", \"Unbundle mode\").option(\"-W, --workspace [dir]\", \"Enable workspace mode\").option(\"-F, --filter <pattern>\", \"Filter workspace packages, e.g. /regex/ or substring\").option(\"--exports\", \"Generate export-related metadata for package.json (experimental)\").action(async (input, flags) => {\n\tglobalLogger.level = flags.logLevel || (flags.silent ? \"error\" : \"info\");\n\tglobalLogger.info(`tsdown ${dim`v${version}`} powered by rolldown ${dim`v${VERSION}`}`);\n\tconst { build: build$1 } = await import(\"./index.mjs\");\n\tif (input.length > 0) flags.entry = input;\n\tawait build$1(flags);\n});\ncli.command(\"migrate\", \"Migrate from tsup to tsdown\").option(\"-c, --cwd <dir>\", \"Working directory\").option(\"-d, --dry-run\", \"Dry run\").action(async (args) => {\n\tconst { migrate } = await import(\"./migrate-!~{006}~.mjs\");\n\tawait migrate(args);\n});\nasync function runCLI() {\n\tcli.parse(process.argv, { run: false });\n\tif (cli.options.debug) {\n\t\tlet namespace;\n\t\tif (cli.options.debug === true) namespace = \"tsdown:*\";\n\t\telse namespace = resolveComma(toArray(cli.options.debug)).map((v) => `tsdown:${v}`).join(\",\");\n\t\tconst enabled = Debug.disable();\n\t\tif (enabled) namespace += `,${enabled}`;\n\t\tDebug.enable(namespace);\n\t\tDebug(\"tsdown:debug\")(\"Debugging enabled\", namespace);\n\t}\n\ttry {\n\t\tawait cli.runMatchedCommand();\n\t} catch (error) {\n\t\tglobalLogger.error(error);\n\t\tprocess.exit(1);\n\t}\n}\n\n//#endregion\n//#region src/run.ts\ntry {\n\tmodule.enableCompileCache?.();\n} catch {}\nrunCLI();\n\n//#endregion\nexport {  };","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885310,"action":"HookRenderChunkStart","plugin_name":"rolldown-plugin-require-cjs","plugin_id":9,"call_id":"763040f2-6886-4e96-85c1-729f05bf170c","content":"import { d as UserConfig, f as UserConfigExport, p as UserConfigFn } from \"./index-!~{008}~.d.mts\";\nimport { t as defineConfig } from \"./config-!~{00a}~.d.mts\";\n\nexport { UserConfig, UserConfigExport, UserConfigFn, defineConfig };","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885311,"action":"HookRenderChunkStart","plugin_name":"rolldown-plugin-require-cjs","plugin_id":9,"call_id":"95a5330c-2160-4d2b-aee4-1368417887ae","content":"import { A as TsdownChunks, C as OutExtensionFactory, D as RolldownContext, E as BuildContext, M as CopyOptions, N as CopyOptionsFn, O as TsdownHooks, P as AttwOptions, S as OutExtensionContext, T as PackageType, _ as Logger, a as NormalizedFormat, b as ChunkAddonFunction, c as Sourcemap, d as UserConfig, f as UserConfigExport, h as ReportOptions, i as NoExternalFn, j as CopyEntry, k as ExportsOptions, l as TreeshakingOptions, m as Workspace, n as Format, o as PublintOptions, p as UserConfigFn, r as InlineConfig, s as ResolvedConfig, t as DtsOptions, u as UnusedOptions, v as globalLogger, w as OutExtensionObject, x as ChunkAddonObject, y as ChunkAddon } from \"./index-!~{008}~.d.mts\";\nimport { t as defineConfig } from \"./config-!~{00a}~.d.mts\";\n\n//#region src/index.d.ts\nvar build = [4, () => [InlineConfig, Promise]];\nvar shimFile = [5, () => []];\nvar buildSingle = [6, () => [\n\tResolvedConfig,\n\tPromise,\n\tPromise,\n\tPromise\n]];\n\n//#endregion\nexport { AttwOptions, BuildContext, ChunkAddon, ChunkAddonFunction, ChunkAddonObject, CopyEntry, CopyOptions, CopyOptionsFn, DtsOptions, ExportsOptions, Format, InlineConfig, Logger, NoExternalFn, NormalizedFormat, OutExtensionContext, OutExtensionFactory, OutExtensionObject, PackageType, PublintOptions, ReportOptions, ResolvedConfig, RolldownContext, Sourcemap, TreeshakingOptions, TsdownChunks, TsdownHooks, UnusedOptions, UserConfig, UserConfigExport, UserConfigFn, Workspace, build, buildSingle, defineConfig, globalLogger, shimFile };","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885311,"action":"HookRenderChunkStart","plugin_name":"rolldown-plugin-require-cjs","plugin_id":9,"call_id":"f86fb523-8e19-46b4-a238-440c8c5dfdb6","content":"import { _ as Logger, g as ReportPlugin, s as ResolvedConfig } from \"./index-!~{008}~.d.mts\";\nimport { Plugin } from \"rolldown\";\nimport { PackageJson } from \"pkg-types\";\n\n//#region src/features/external.d.ts\nvar ExternalPlugin = [9, () => [\n\tpkg,\n\tnoExternal,\n\tinlineOnly,\n\tskipNodeModulesBundle,\n\tResolvedConfig,\n\tPlugin\n]];\n\n//#endregion\n//#region src/features/shebang.d.ts\nvar ShebangPlugin = [8, () => [Logger, Plugin]];\n\n//#endregion\n//#region src/features/node-protocol.d.ts\nvar NodeProtocolPlugin = [7, () => [Plugin]];\n\n//#endregion\nexport { ExternalPlugin, NodeProtocolPlugin, ReportPlugin, ShebangPlugin };","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885311,"action":"HookRenderChunkStart","plugin_name":"rolldown-plugin-require-cjs","plugin_id":9,"call_id":"4c6ef3a3-abcc-45cf-bf47-935457b024f4","content":"export {  };","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885311,"action":"HookRenderChunkStart","plugin_name":"rolldown-plugin-require-cjs","plugin_id":9,"call_id":"2f49501e-c0fd-4830-9375-b53d25044fab","content":"import { a as globalLogger, t as version } from \"./package-!~{004}~.mjs\";\nimport process from \"node:process\";\nimport { bold, green, underline } from \"ansis\";\nimport { readFile, unlink, writeFile } from \"node:fs/promises\";\nimport { existsSync } from \"node:fs\";\nimport { createInterface } from \"node:readline/promises\";\n\n//#region src/migrate.ts\nasync function migrate({ cwd, dryRun }) {\n\tif (dryRun) globalLogger.info(\"Dry run enabled. No changes were made.\");\n\telse {\n\t\tconst rl = createInterface({\n\t\t\tinput: process.stdin,\n\t\t\toutput: process.stdout\n\t\t});\n\t\tglobalLogger.warn(`\\n\\nBefore proceeding, review the migration guide at ${underline`https://tsdown.dev/guide/migrate-from-tsup`}, as this process will modify your files.\\nUncommitted changes will be lost. Use the ${green`--dry-run`} flag to preview changes without applying them.`);\n\t\tconst input = await rl.question(bold`Continue? (Y/n) `);\n\t\trl.close();\n\t\tif (!(input.toLowerCase() === \"y\" || input === \"\")) {\n\t\t\tglobalLogger.error(\"Migration cancelled.\");\n\t\t\tprocess.exitCode = 1;\n\t\t\treturn;\n\t\t}\n\t}\n\tif (cwd) process.chdir(cwd);\n\tlet migrated = await migratePackageJson(dryRun);\n\tif (await migrateTsupConfig(dryRun)) migrated = true;\n\tif (migrated) globalLogger.success(\"Migration completed. Remember to run install command with your package manager.\");\n\telse {\n\t\tglobalLogger.error(\"No migration performed.\");\n\t\tprocess.exitCode = 1;\n\t}\n}\nconst DEP_FIELDS = {\n\tdependencies: `^${version}`,\n\tdevDependencies: `^${version}`,\n\tpeerDependencies: \"*\"\n};\nasync function migratePackageJson(dryRun) {\n\tif (!existsSync(\"package.json\")) {\n\t\tglobalLogger.error(\"No package.json found\");\n\t\treturn false;\n\t}\n\tconst pkgRaw = await readFile(\"package.json\", \"utf8\");\n\tlet pkg = JSON.parse(pkgRaw);\n\tlet found = false;\n\tfor (const [field, semver] of Object.entries(DEP_FIELDS)) if (pkg[field]?.tsup) {\n\t\tglobalLogger.info(`Migrating \\`${field}\\` to tsdown.`);\n\t\tfound = true;\n\t\tpkg[field] = renameKey(pkg[field], \"tsup\", \"tsdown\", semver);\n\t}\n\tif (pkg.scripts) {\n\t\tfor (const key of Object.keys(pkg.scripts)) if (pkg.scripts[key].includes(\"tsup\")) {\n\t\t\tglobalLogger.info(`Migrating \\`${key}\\` script to tsdown`);\n\t\t\tfound = true;\n\t\t\tpkg.scripts[key] = pkg.scripts[key].replaceAll(/tsup(?:-node)?/g, \"tsdown\");\n\t\t}\n\t}\n\tif (pkg.tsup) {\n\t\tglobalLogger.info(\"Migrating `tsup` field in package.json to `tsdown`.\");\n\t\tfound = true;\n\t\tpkg = renameKey(pkg, \"tsup\", \"tsdown\");\n\t}\n\tif (!found) {\n\t\tglobalLogger.warn(\"No tsup-related fields found in package.json\");\n\t\treturn false;\n\t}\n\tconst pkgStr = `${JSON.stringify(pkg, null, pkgRaw.includes(\"\t\") ? \"\t\" : 2)}\\n`;\n\tif (dryRun) {\n\t\tconst { createPatch } = await import(\"diff\");\n\t\tglobalLogger.info(\"[dry-run] package.json:\");\n\t\tconsole.info(createPatch(\"package.json\", pkgRaw, pkgStr));\n\t} else {\n\t\tawait writeFile(\"package.json\", pkgStr);\n\t\tglobalLogger.success(\"Migrated `package.json`\");\n\t}\n\treturn true;\n}\nconst TSUP_FILES = [\n\t\"tsup.config.ts\",\n\t\"tsup.config.cts\",\n\t\"tsup.config.mts\",\n\t\"tsup.config.js\",\n\t\"tsup.config.cjs\",\n\t\"tsup.config.mjs\",\n\t\"tsup.config.json\"\n];\nasync function migrateTsupConfig(dryRun) {\n\tlet found = false;\n\tfor (const file of TSUP_FILES) {\n\t\tif (!existsSync(file)) continue;\n\t\tglobalLogger.info(`Found \\`${file}\\``);\n\t\tfound = true;\n\t\tconst tsupConfigRaw = await readFile(file, \"utf8\");\n\t\tconst tsupConfig = tsupConfigRaw.replaceAll(/\\btsup\\b/g, \"tsdown\").replaceAll(/\\bTSUP\\b/g, \"TSDOWN\");\n\t\tconst renamed = file.replaceAll(\"tsup\", \"tsdown\");\n\t\tif (dryRun) {\n\t\t\tconst { createTwoFilesPatch } = await import(\"diff\");\n\t\t\tglobalLogger.info(`[dry-run] ${file} -> ${renamed}:`);\n\t\t\tconsole.info(createTwoFilesPatch(file, renamed, tsupConfigRaw, tsupConfig));\n\t\t} else {\n\t\t\tawait writeFile(renamed, tsupConfig, \"utf8\");\n\t\t\tawait unlink(file);\n\t\t\tglobalLogger.success(`Migrated \\`${file}\\` to \\`${renamed}\\``);\n\t\t}\n\t}\n\tif (!found) globalLogger.warn(\"No tsup config found\");\n\treturn found;\n}\nfunction renameKey(obj, oldKey, newKey, newValue) {\n\tconst newObj = {};\n\tfor (const key of Object.keys(obj)) if (key === oldKey) newObj[newKey] = newValue || obj[oldKey];\n\telse newObj[key] = obj[key];\n\treturn newObj;\n}\n\n//#endregion\nexport { migrate };","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885312,"action":"HookRenderChunkStart","plugin_name":"rolldown-plugin-require-cjs","plugin_id":9,"call_id":"87038437-93f5-48f0-95cb-f77022580568","content":"//#region src/config.ts\nfunction defineConfig(options) {\n\treturn options;\n}\n\n//#endregion\nexport { defineConfig as t };","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"action":"StringRef","id":"eb09e0ddffbc63d38c3f4f91679737ce9e6edd0f2241017a2c07f1792806c7a9","content":"import { a as globalLogger, c as debounce, d as resolveComma, f as resolveRegex, i as generateColor, l as matchPattern, m as toArray, n as LogLevels, o as prettyFormat, p as slash, r as createLogger, s as prettyName, t as version, u as noop } from \"./package-!~{004}~.mjs\";\nimport { builtinModules, isBuiltin } from \"node:module\";\nimport path, { dirname, join, normalize, sep } from \"node:path\";\nimport process from \"node:process\";\nimport { fileURLToPath, pathToFileURL } from \"node:url\";\nimport { blue, bold, dim, green, underline } from \"ansis\";\nimport { VERSION, build } from \"rolldown\";\nimport { exec } from \"tinyexec\";\nimport treeKill from \"tree-kill\";\nimport Debug from \"debug\";\nimport { glob } from \"tinyglobby\";\nimport { access, chmod, cp, mkdtemp, readFile, rm, stat, writeFile } from \"node:fs/promises\";\nimport { RE_CSS, RE_DTS, RE_JS, RE_NODE_MODULES } from \"rolldown-plugin-dts/filename\";\nimport minVersion from \"semver/ranges/min-version.js\";\nimport { up } from \"empathic/find\";\nimport { up as up$1 } from \"empathic/package\";\nimport { loadConfig } from \"unconfig\";\nimport child_process from \"node:child_process\";\nimport { tmpdir } from \"node:os\";\nimport util, { promisify } from \"node:util\";\nimport coerce from \"semver/functions/coerce.js\";\nimport satisfies from \"semver/functions/satisfies.js\";\nimport { createHooks } from \"hookable\";\nimport { importGlobPlugin } from \"rolldown/experimental\";\nimport { Buffer } from \"node:buffer\";\nimport { brotliCompress, gzip } from \"node:zlib\";\nimport readline from \"node:readline\";\nimport { globalContext, invalidateContextFile } from \"rolldown-plugin-dts/tsc-context\";\n\n//#region src/utils/fs.ts\nfunction fsExists(path$1) {\n\treturn access(path$1).then(() => true, () => false);\n}\nfunction fsStat(path$1) {\n\treturn stat(path$1).catch(() => null);\n}\nfunction fsRemove(path$1) {\n\treturn rm(path$1, {\n\t\tforce: true,\n\t\trecursive: true\n\t}).catch(() => {});\n}\nfunction fsCopy(from, to) {\n\treturn cp(from, to, {\n\t\trecursive: true,\n\t\tforce: true\n\t});\n}\nfunction lowestCommonAncestor(...filepaths) {\n\tif (filepaths.length === 0) return \"\";\n\tif (filepaths.length === 1) return dirname(filepaths[0]);\n\tfilepaths = filepaths.map(normalize);\n\tconst [first, ...rest] = filepaths;\n\tlet ancestor = first.split(sep);\n\tfor (const filepath of rest) {\n\t\tconst directories = filepath.split(sep, ancestor.length);\n\t\tlet index = 0;\n\t\tfor (const directory of directories) if (directory === ancestor[index]) index += 1;\n\t\telse {\n\t\t\tancestor = ancestor.slice(0, index);\n\t\t\tbreak;\n\t\t}\n\t\tancestor = ancestor.slice(0, index);\n\t}\n\treturn ancestor.length <= 1 && ancestor[0] === \"\" ? sep + ancestor[0] : ancestor.join(sep);\n}\n\n//#endregion\n//#region src/features/clean.ts\nconst debug$7 = Debug(\"tsdown:clean\");\nconst RE_LAST_SLASH = /[/\\\\]$/;\nasync function cleanOutDir(configs) {\n\tconst removes = /* @__PURE__ */ new Set();\n\tfor (const config of configs) {\n\t\tif (!config.clean.length) continue;\n\t\tconst files = await glob(config.clean, {\n\t\t\tcwd: config.cwd,\n\t\t\tabsolute: true,\n\t\t\tonlyFiles: false\n\t\t});\n\t\tconst normalizedOutDir = config.outDir.replace(RE_LAST_SLASH, \"\");\n\t\tfor (const file of files) if (file.replace(RE_LAST_SLASH, \"\") !== normalizedOutDir) removes.add(file);\n\t}\n\tif (!removes.size) return;\n\tglobalLogger.info(`Cleaning ${removes.size} files`);\n\tawait Promise.all([...removes].map(async (file) => {\n\t\tdebug$7(\"Removing\", file);\n\t\tawait fsRemove(file);\n\t}));\n\tdebug$7(\"Removed %d files\", removes.size);\n}\nfunction resolveClean(clean, outDir, cwd) {\n\tif (clean === true) clean = [slash(outDir)];\n\telse if (!clean) clean = [];\n\tif (clean.some((item) => path.resolve(item) === cwd)) throw new Error(\"Cannot clean the current working directory. Please specify a different path to clean option.\");\n\treturn clean;\n}\n\n//#endregion\n//#region src/features/entry.ts\nasync function resolveEntry(logger, entry, cwd, name) {\n\tconst nameLabel = name ? `[${name}] ` : \"\";\n\tif (!entry || Object.keys(entry).length === 0) {\n\t\tconst defaultEntry = path.resolve(cwd, \"src/index.ts\");\n\t\tif (await fsExists(defaultEntry)) entry = { index: defaultEntry };\n\t\telse throw new Error(`${nameLabel}No input files, try \"tsdown <your-file>\" or create src/index.ts`);\n\t}\n\tconst entryMap = await toObjectEntry(entry, cwd);\n\tconst entries = Object.values(entryMap);\n\tif (entries.length === 0) throw new Error(`${nameLabel}Cannot find entry: ${JSON.stringify(entry)}`);\n\tlogger.info(prettyName(name), `entry: ${generateColor(name)(entries.map((entry$1) => path.relative(cwd, entry$1)).join(\", \"))}`);\n\treturn entryMap;\n}\nasync function toObjectEntry(entry, cwd) {\n\tif (typeof entry === \"string\") entry = [entry];\n\tif (!Array.isArray(entry)) return entry;\n\tconst resolvedEntry = (await glob(entry, {\n\t\tcwd,\n\t\texpandDirectories: false\n\t})).map((file) => path.resolve(cwd, file));\n\tconst base = lowestCommonAncestor(...resolvedEntry);\n\treturn Object.fromEntries(resolvedEntry.map((file) => {\n\t\tconst relative = path.relative(base, file);\n\t\treturn [relative.slice(0, relative.length - path.extname(relative).length), file];\n\t}));\n}\n\n//#endregion\n//#region src/features/exports.ts\nasync function writeExports(options, chunks) {\n\tif (!options.exports) return;\n\tconst { outDir, pkg } = options;\n\tif (!pkg) throw new Error(\"`package.json` not found, cannot write exports\");\n\tconst { publishExports,...generated } = await generateExports(pkg, outDir, chunks, options.exports);\n\tconst updatedPkg = {\n\t\t...pkg,\n\t\t...generated,\n\t\tpackageJsonPath: void 0\n\t};\n\tif (publishExports) {\n\t\tupdatedPkg.publishConfig ||= {};\n\t\tupdatedPkg.publishConfig.exports = publishExports;\n\t}\n\tconst original = await readFile(pkg.packageJsonPath, \"utf8\");\n\tlet contents = JSON.stringify(updatedPkg, null, original.includes(\"\t\") ? \"\t\" : 2);\n\tif (original.endsWith(\"\\n\")) contents += \"\\n\";\n\tif (contents !== original) await writeFile(pkg.packageJsonPath, contents, \"utf8\");\n}\nasync function generateExports(pkg, outDir, chunks, { devExports, all, customExports }) {\n\tconst pkgJsonPath = pkg.packageJsonPath;\n\tconst pkgRoot$1 = path.dirname(pkgJsonPath);\n\tconst outDirRelative = slash(path.relative(pkgRoot$1, outDir));\n\tlet main, module$1, cjsTypes, esmTypes;\n\tconst exportsMap = /* @__PURE__ */ new Map();\n\tfor (const [format, chunksByFormat] of Object.entries(chunks)) {\n\t\tif (format !== \"es\" && format !== \"cjs\") continue;\n\t\tconst onlyOneEntry = chunksByFormat.filter((chunk) => chunk.type === \"chunk\" && chunk.isEntry && !RE_DTS.test(chunk.fileName)).length === 1;\n\t\tfor (const chunk of chunksByFormat) {\n\t\t\tif (chunk.type !== \"chunk\" || !chunk.isEntry) continue;\n\t\t\tconst normalizedName = slash(chunk.fileName);\n\t\t\tconst ext = path.extname(chunk.fileName);\n\t\t\tlet name = normalizedName.slice(0, -ext.length);\n\t\t\tconst isDts = name.endsWith(\".d\");\n\t\t\tif (isDts) name = name.slice(0, -2);\n\t\t\tconst isIndex = onlyOneEntry || name === \"index\";\n\t\t\tconst distFile = `${outDirRelative ? `./${outDirRelative}` : \".\"}/${normalizedName}`;\n\t\t\tif (isIndex) {\n\t\t\t\tname = \".\";\n\t\t\t\tif (format === \"cjs\") if (isDts) cjsTypes = distFile;\n\t\t\t\telse main = distFile;\n\t\t\t\telse if (format === \"es\") if (isDts) esmTypes = distFile;\n\t\t\t\telse module$1 = distFile;\n\t\t\t} else if (name.endsWith(\"/index\")) name = `./${name.slice(0, -6)}`;\n\t\t\telse name = `./${name}`;\n\t\t\tlet subExport = exportsMap.get(name);\n\t\t\tif (!subExport) {\n\t\t\t\tsubExport = {};\n\t\t\t\texportsMap.set(name, subExport);\n\t\t\t}\n\t\t\tif (!isDts) {\n\t\t\t\tsubExport[format] = distFile;\n\t\t\t\tif (chunk.facadeModuleId && !subExport.src) subExport.src = `./${slash(path.relative(pkgRoot$1, chunk.facadeModuleId))}`;\n\t\t\t}\n\t\t}\n\t}\n\tconst sortedExportsMap = Array.from(exportsMap.entries()).toSorted(([a], [b]) => {\n\t\tif (a === \"index\") return -1;\n\t\treturn a.localeCompare(b);\n\t});\n\tlet exports = Object.fromEntries(sortedExportsMap.map(([name, subExport]) => [name, genSubExport(devExports, subExport)]));\n\texportMeta(exports, all);\n\tif (customExports) exports = await customExports(exports, {\n\t\tpkg,\n\t\toutDir,\n\t\tchunks,\n\t\tisPublish: false\n\t});\n\tlet publishExports;\n\tif (devExports) {\n\t\tpublishExports = Object.fromEntries(sortedExportsMap.map(([name, subExport]) => [name, genSubExport(false, subExport)]));\n\t\texportMeta(publishExports, all);\n\t\tif (customExports) publishExports = await customExports(publishExports, {\n\t\t\tpkg,\n\t\t\toutDir,\n\t\t\tchunks,\n\t\t\tisPublish: true\n\t\t});\n\t}\n\treturn {\n\t\tmain: main || module$1 || pkg.main,\n\t\tmodule: module$1 || pkg.module,\n\t\ttypes: cjsTypes || esmTypes || pkg.types,\n\t\texports,\n\t\tpublishExports\n\t};\n}\nfunction genSubExport(devExports, { src, es, cjs }) {\n\tif (devExports === true) return src;\n\tlet value;\n\tconst dualFormat = es && cjs;\n\tif (!dualFormat && !devExports) value = cjs || es;\n\telse {\n\t\tvalue = {};\n\t\tif (typeof devExports === \"string\") value[devExports] = src;\n\t\tif (es) value[dualFormat ? \"import\" : \"default\"] = es;\n\t\tif (cjs) value[dualFormat ? \"require\" : \"default\"] = cjs;\n\t}\n\treturn value;\n}\nfunction exportMeta(exports, all) {\n\tif (all) exports[\"./*\"] = \"./*\";\n\telse exports[\"./package.json\"] = \"./package.json\";\n}\nfunction hasExportsTypes(pkg) {\n\tconst exports = pkg?.exports;\n\tif (!exports) return false;\n\tif (typeof exports === \"object\" && exports !== null && !Array.isArray(exports)) {\n\t\tif (\"types\" in exports) return true;\n\t\tif (\".\" in exports) {\n\t\t\tconst mainExport = exports[\".\"];\n\t\t\tif (typeof mainExport === \"object\" && mainExport !== null && \"types\" in mainExport) return true;\n\t\t}\n\t}\n\treturn false;\n}\n\n//#endregion\n//#region src/features/target.ts\nfunction resolveTarget(logger, target, pkg, name) {\n\tif (target === false) return;\n\tif (target == null) {\n\t\tconst pkgTarget = resolvePackageTarget(pkg);\n\t\tif (pkgTarget) target = pkgTarget;\n\t\telse return;\n\t}\n\tif (typeof target === \"number\") throw new TypeError(`Invalid target: ${target}`);\n\tconst targets = resolveComma(toArray(target));\n\tif (targets.length) logger.info(prettyName(name), `target${targets.length > 1 ? \"s\" : \"\"}: ${generateColor(name)(targets.join(\", \"))}`);\n\treturn targets;\n}\nfunction resolvePackageTarget(pkg) {\n\tconst nodeVersion = pkg?.engines?.node;\n\tif (!nodeVersion) return;\n\tconst nodeMinVersion = minVersion(nodeVersion);\n\tif (!nodeMinVersion) return;\n\tif (nodeMinVersion.version === \"0.0.0\") return;\n\treturn `node${nodeMinVersion.version}`;\n}\n\n//#endregion\n//#region src/features/tsconfig.ts\nfunction findTsconfig(cwd, name = \"tsconfig.json\") {\n\treturn up(name, { cwd }) || false;\n}\nasync function resolveTsconfig(logger, tsconfig, cwd, name) {\n\tconst original = tsconfig;\n\tif (tsconfig !== false) {\n\t\tif (tsconfig === true || tsconfig == null) {\n\t\t\ttsconfig = findTsconfig(cwd);\n\t\t\tif (original && !tsconfig) logger.warn(`No tsconfig found in ${blue(cwd)}`);\n\t\t} else {\n\t\t\tconst tsconfigPath = path.resolve(cwd, tsconfig);\n\t\t\tconst stat$1 = await fsStat(tsconfigPath);\n\t\t\tif (stat$1?.isFile()) tsconfig = tsconfigPath;\n\t\t\telse if (stat$1?.isDirectory()) {\n\t\t\t\ttsconfig = findTsconfig(tsconfigPath);\n\t\t\t\tif (!tsconfig) logger.warn(`No tsconfig found in ${blue(tsconfigPath)}`);\n\t\t\t} else {\n\t\t\t\ttsconfig = findTsconfig(cwd, tsconfig);\n\t\t\t\tif (!tsconfig) logger.warn(`tsconfig ${blue(original)} doesn't exist`);\n\t\t\t}\n\t\t}\n\t\tif (tsconfig) logger.info(prettyName(name), `tsconfig: ${generateColor(name)(path.relative(cwd, tsconfig))}`);\n\t}\n\treturn tsconfig;\n}\n\n//#endregion\n//#region src/utils/package.ts\nconst debug$6 = Debug(\"tsdown:package\");\nasync function readPackageJson(dir) {\n\tconst packageJsonPath = up$1({ cwd: dir });\n\tif (!packageJsonPath) return;\n\tdebug$6(\"Reading package.json:\", packageJsonPath);\n\tconst contents = await readFile(packageJsonPath, \"utf8\");\n\treturn {\n\t\t...JSON.parse(contents),\n\t\tpackageJsonPath\n\t};\n}\nfunction getPackageType(pkg) {\n\tif (pkg?.type) {\n\t\tif (![\"module\", \"commonjs\"].includes(pkg.type)) throw new Error(`Invalid package.json type: ${pkg.type}`);\n\t\treturn pkg.type;\n\t}\n}\nfunction normalizeFormat(format) {\n\treturn resolveComma(toArray(format, \"es\")).map((format$1) => {\n\t\tswitch (format$1) {\n\t\t\tcase \"es\":\n\t\t\tcase \"esm\":\n\t\t\tcase \"module\": return \"es\";\n\t\t\tcase \"cjs\":\n\t\t\tcase \"commonjs\": return \"cjs\";\n\t\t\tdefault: return format$1;\n\t\t}\n\t});\n}\n\n//#endregion\n//#region src/config/config.ts\nasync function loadViteConfig(prefix, cwd) {\n\tconst { config, sources: [source] } = await loadConfig({\n\t\tsources: [{\n\t\t\tfiles: `${prefix}.config`,\n\t\t\textensions: [\n\t\t\t\t\"ts\",\n\t\t\t\t\"mts\",\n\t\t\t\t\"cts\",\n\t\t\t\t\"js\",\n\t\t\t\t\"mjs\",\n\t\t\t\t\"cjs\",\n\t\t\t\t\"json\",\n\t\t\t\t\"\"\n\t\t\t]\n\t\t}],\n\t\tcwd,\n\t\tdefaults: {}\n\t});\n\tif (!source) return;\n\tglobalLogger.info(`Using Vite config: ${underline(source)}`);\n\tconst resolved = await config;\n\tif (typeof resolved === \"function\") return resolved({\n\t\tcommand: \"build\",\n\t\tmode: \"production\"\n\t});\n\treturn resolved;\n}\nlet loaded = false;\nasync function loadConfigFile(inlineConfig, workspace) {\n\tlet cwd = inlineConfig.cwd || process.cwd();\n\tlet overrideConfig = false;\n\tlet { config: filePath } = inlineConfig;\n\tif (filePath === false) return { configs: [{}] };\n\tif (typeof filePath === \"string\") {\n\t\tconst stats = await fsStat(filePath);\n\t\tif (stats) {\n\t\t\tconst resolved = path.resolve(filePath);\n\t\t\tif (stats.isFile()) {\n\t\t\t\toverrideConfig = true;\n\t\t\t\tfilePath = resolved;\n\t\t\t\tcwd = path.dirname(filePath);\n\t\t\t} else if (stats.isDirectory()) cwd = resolved;\n\t\t}\n\t}\n\tlet isNative = false;\n\tif (!loaded) {\n\t\tif (!inlineConfig.configLoader || inlineConfig.configLoader === \"auto\") isNative = !!(process.features.typescript || process.versions.bun || process.versions.deno);\n\t\telse if (inlineConfig.configLoader === \"native\") isNative = true;\n\t}\n\tlet { config, sources } = await loadConfig.async({\n\t\tsources: overrideConfig ? [{\n\t\t\tfiles: filePath,\n\t\t\textensions: []\n\t\t}] : [{\n\t\t\tfiles: \"tsdown.config\",\n\t\t\textensions: [\n\t\t\t\t\"ts\",\n\t\t\t\t\"mts\",\n\t\t\t\t\"cts\",\n\t\t\t\t\"js\",\n\t\t\t\t\"mjs\",\n\t\t\t\t\"cjs\",\n\t\t\t\t\"json\",\n\t\t\t\t\"\"\n\t\t\t],\n\t\t\tparser: inlineConfig.configLoader === \"unrun\" ? unrunImport : isNative ? nativeImport : \"auto\"\n\t\t}, {\n\t\t\tfiles: \"package.json\",\n\t\t\textensions: [],\n\t\t\trewrite: (config$1) => config$1?.tsdown\n\t\t}],\n\t\tcwd,\n\t\tstopAt: workspace && path.dirname(workspace),\n\t\tdefaults: {}\n\t}).finally(() => loaded = true);\n\tconfig = await config;\n\tif (typeof config === \"function\") config = await config(inlineConfig);\n\tconfig = toArray(config);\n\tif (config.length === 0) config.push({});\n\tconst file = sources[0];\n\tif (file) globalLogger.info(`Using tsdown config: ${underline(file)}`);\n\treturn {\n\t\tconfigs: config,\n\t\tfile\n\t};\n}\nasync function nativeImport(id) {\n\tconst mod = await import(pathToFileURL(id).href).catch((error) => {\n\t\tif (error?.message?.includes?.(\"Cannot find module\")) {\n\t\t\tconst configError = /* @__PURE__ */ new Error(`Failed to load the config file. Try setting the --config-loader CLI flag to \\`unconfig\\`.\\n\\n${error.message}`);\n\t\t\tconfigError.cause = error;\n\t\t\tthrow configError;\n\t\t} else throw error;\n\t});\n\treturn mod.default || mod;\n}\nasync function unrunImport(id) {\n\tconst { unrun } = await import(\"unrun\");\n\tconst { module: module$1 } = await unrun({ path: pathToFileURL(id).href }).catch((error) => {\n\t\tif (error?.message?.includes?.(\"Cannot find module\")) {\n\t\t\tconst configError = /* @__PURE__ */ new Error(`Failed to load the config file. \\`unrun\\` is experimental; try setting the --config-loader CLI flag to \\`unconfig\\` instead.\\n\\n${error.message}`);\n\t\t\tconfigError.cause = error;\n\t\t\tthrow configError;\n\t\t} else throw error;\n\t});\n\treturn module$1;\n}\n\n//#endregion\n//#region src/config/index.ts\nconst debug$5 = Debug(\"tsdown:options\");\nconst DEFAULT_EXCLUDE_WORKSPACE = [\n\t\"**/node_modules/**\",\n\t\"**/dist/**\",\n\t\"**/test?(s)/**\",\n\t\"**/t?(e)mp/**\"\n];\nasync function resolveConfig(inlineConfig) {\n\tdebug$5(\"inline config %O\", inlineConfig);\n\tconst { configs: rootConfigs, file } = await loadConfigFile(inlineConfig);\n\tconst files = [];\n\tif (file) {\n\t\tfiles.push(file);\n\t\tdebug$5(\"loaded root user config file %s\", file);\n\t\tdebug$5(\"root user configs %O\", rootConfigs);\n\t} else debug$5(\"no root user config file found\");\n\tconst configs = (await Promise.all(rootConfigs.map(async (rootConfig) => {\n\t\tconst { configs: workspaceConfigs, files: workspaceFiles } = await resolveWorkspace(rootConfig, inlineConfig);\n\t\tif (workspaceFiles) files.push(...workspaceFiles);\n\t\treturn Promise.all(workspaceConfigs.filter((config) => !config.workspace || config.entry).map((config) => resolveUserConfig(config)));\n\t}))).flat();\n\tdebug$5(\"resolved configs %O\", configs);\n\treturn {\n\t\tconfigs,\n\t\tfiles\n\t};\n}\nasync function resolveWorkspace(config, inlineConfig) {\n\tconst normalized = {\n\t\t...config,\n\t\t...inlineConfig\n\t};\n\tconst rootCwd = normalized.cwd || process.cwd();\n\tlet { workspace } = normalized;\n\tif (!workspace) return {\n\t\tconfigs: [normalized],\n\t\tfiles: []\n\t};\n\tif (workspace === true) workspace = {};\n\telse if (typeof workspace === \"string\" || Array.isArray(workspace)) workspace = { include: workspace };\n\tlet { include: packages = \"auto\", exclude = DEFAULT_EXCLUDE_WORKSPACE, config: workspaceConfig } = workspace;\n\tif (packages === \"auto\") packages = (await glob(\"**/package.json\", {\n\t\tignore: exclude,\n\t\tcwd: rootCwd,\n\t\texpandDirectories: false\n\t})).filter((file) => file !== \"package.json\").map((file) => slash(path.resolve(rootCwd, file, \"..\")));\n\telse packages = (await glob(packages, {\n\t\tignore: exclude,\n\t\tcwd: rootCwd,\n\t\tonlyDirectories: true,\n\t\tabsolute: true,\n\t\texpandDirectories: false\n\t})).map((file) => slash(path.resolve(file)));\n\tif (packages.length === 0) throw new Error(\"No workspace packages found, please check your config\");\n\tif (inlineConfig.filter) {\n\t\tinlineConfig.filter = resolveRegex(inlineConfig.filter);\n\t\tpackages = packages.filter((path$1) => {\n\t\t\treturn typeof inlineConfig.filter === \"string\" ? path$1.includes(inlineConfig.filter) : Array.isArray(inlineConfig.filter) ? inlineConfig.filter.some((filter) => path$1.includes(filter)) : inlineConfig.filter.test(path$1);\n\t\t});\n\t\tif (packages.length === 0) throw new Error(\"No packages matched the filters\");\n\t}\n\tconst files = [];\n\treturn {\n\t\tconfigs: (await Promise.all(packages.map(async (cwd) => {\n\t\t\tdebug$5(\"loading workspace config %s\", cwd);\n\t\t\tconst { configs, file } = await loadConfigFile({\n\t\t\t\t...inlineConfig,\n\t\t\t\tconfig: workspaceConfig,\n\t\t\t\tcwd\n\t\t\t}, cwd);\n\t\t\tif (file) {\n\t\t\t\tdebug$5(\"loaded workspace config file %s\", file);\n\t\t\t\tfiles.push(file);\n\t\t\t} else debug$5(\"no workspace config file found in %s\", cwd);\n\t\t\treturn configs.map((config$1) => ({\n\t\t\t\t...normalized,\n\t\t\t\tcwd,\n\t\t\t\t...config$1\n\t\t\t}));\n\t\t}))).flat(),\n\t\tfiles\n\t};\n}\nasync function resolveUserConfig(userConfig) {\n\tlet { entry, format = [\"es\"], plugins = [], clean = true, silent = false, logLevel = silent ? \"silent\" : \"info\", failOnWarn = false, customLogger, treeshake = true, platform = \"node\", outDir = \"dist\", sourcemap = false, dts, unused = false, watch = false, ignoreWatch, shims = false, skipNodeModulesBundle = false, publint: publint$1 = false, attw: attw$1 = false, fromVite, alias, tsconfig, report = true, target, env = {}, copy: copy$1, publicDir, hash, cwd = process.cwd(), name, workspace, external, noExternal, exports = false, bundle, unbundle = typeof bundle === \"boolean\" ? !bundle : false, removeNodeProtocol, nodeProtocol, cjsDefault = true, globImport = true, inlineOnly, fixedExtension = platform === \"node\" } = userConfig;\n\tconst logger = createLogger(logLevel, {\n\t\tcustomLogger,\n\t\tfailOnWarn\n\t});\n\tif (typeof bundle === \"boolean\") logger.warn(\"`bundle` option is deprecated. Use `unbundle` instead.\");\n\tif (removeNodeProtocol && nodeProtocol) throw new TypeError(\"`removeNodeProtocol` is deprecated. Please only use `nodeProtocol` instead.\");\n\tnodeProtocol = nodeProtocol ?? (removeNodeProtocol ? \"strip\" : false);\n\toutDir = path.resolve(cwd, outDir);\n\tclean = resolveClean(clean, outDir, cwd);\n\tconst pkg = await readPackageJson(cwd);\n\tif (workspace) name ||= pkg?.name;\n\tentry = await resolveEntry(logger, entry, cwd, name);\n\tif (dts == null) dts = !!(pkg?.types || pkg?.typings || hasExportsTypes(pkg));\n\ttarget = resolveTarget(logger, target, pkg, name);\n\ttsconfig = await resolveTsconfig(logger, tsconfig, cwd, name);\n\tif (typeof external === \"string\") external = resolveRegex(external);\n\tif (typeof noExternal === \"string\") noExternal = resolveRegex(noExternal);\n\tif (publint$1 === true) publint$1 = {};\n\tif (attw$1 === true) attw$1 = {};\n\tif (exports === true) exports = {};\n\tif (publicDir) if (copy$1) throw new TypeError(\"`publicDir` is deprecated. Cannot be used with `copy`\");\n\telse logger.warn(`${blue`publicDir`} is deprecated. Use ${blue`copy`} instead.`);\n\tif (fromVite) {\n\t\tconst viteUserConfig = await loadViteConfig(fromVite === true ? \"vite\" : fromVite, cwd);\n\t\tif (viteUserConfig) {\n\t\t\tconst viteAlias = viteUserConfig.resolve?.alias;\n\t\t\tif (Array.isArray(viteAlias)) throw new TypeError(\"Unsupported resolve.alias in Vite config. Use object instead of array\");\n\t\t\tif (viteAlias) alias = {\n\t\t\t\t...alias,\n\t\t\t\t...viteAlias\n\t\t\t};\n\t\t\tif (viteUserConfig.plugins) plugins = [viteUserConfig.plugins, plugins];\n\t\t}\n\t}\n\tignoreWatch = toArray(ignoreWatch).map((ignore) => {\n\t\tignore = resolveRegex(ignore);\n\t\tif (typeof ignore === \"string\") return path.resolve(cwd, ignore);\n\t\treturn ignore;\n\t});\n\tif (noExternal != null && typeof noExternal !== \"function\") {\n\t\tconst noExternalPatterns = toArray(noExternal);\n\t\tnoExternal = (id) => matchPattern(id, noExternalPatterns);\n\t}\n\tif (inlineOnly != null) inlineOnly = toArray(inlineOnly);\n\treturn {\n\t\t...userConfig,\n\t\tentry,\n\t\tplugins,\n\t\tformat: normalizeFormat(format),\n\t\ttarget,\n\t\toutDir,\n\t\tclean,\n\t\tlogger,\n\t\ttreeshake,\n\t\tplatform,\n\t\tsourcemap,\n\t\tdts: dts === true ? {} : dts,\n\t\treport: report === true ? {} : report,\n\t\tunused,\n\t\twatch,\n\t\tignoreWatch,\n\t\tshims,\n\t\tskipNodeModulesBundle,\n\t\tpublint: publint$1,\n\t\tattw: attw$1,\n\t\talias,\n\t\ttsconfig,\n\t\tcwd,\n\t\tenv,\n\t\tpkg,\n\t\tcopy: publicDir || copy$1,\n\t\thash: hash ?? true,\n\t\tname,\n\t\texternal,\n\t\tnoExternal,\n\t\texports,\n\t\tunbundle,\n\t\tnodeProtocol,\n\t\tcjsDefault,\n\t\tglobImport,\n\t\tinlineOnly,\n\t\tfixedExtension\n\t};\n}\nasync function mergeUserOptions(defaults, user, args) {\n\tconst userOutputOptions = typeof user === \"function\" ? await user(defaults, ...args) : user;\n\treturn {\n\t\t...defaults,\n\t\t...userOutputOptions\n\t};\n}\n\n//#endregion\n//#region src/features/attw.ts\nconst debug$4 = Debug(\"tsdown:attw\");\nconst exec$1 = promisify(child_process.exec);\n/**\n* ATTW profiles.\n* Defines the resolution modes to ignore for each profile.\n*\n* @see https://github.com/arethetypeswrong/arethetypeswrong.github.io/blob/main/packages/cli/README.md#profiles\n*/\nconst profiles = {\n\tstrict: [],\n\tnode16: [\"node10\"],\n\tesmOnly: [\"node10\", \"node16-cjs\"]\n};\n/**\n* Format an ATTW problem for display\n*/\nfunction formatProblem(problem) {\n\tconst resolutionKind = \"resolutionKind\" in problem ? ` (${problem.resolutionKind})` : \"\";\n\tconst entrypoint = \"entrypoint\" in problem ? ` at ${problem.entrypoint}` : \"\";\n\tswitch (problem.kind) {\n\t\tcase \"NoResolution\": return `  ❌ No resolution${resolutionKind}${entrypoint}`;\n\t\tcase \"UntypedResolution\": return `  ⚠️  Untyped resolution${resolutionKind}${entrypoint}`;\n\t\tcase \"FalseESM\": return `  🔄 False ESM: Types indicate ESM (${problem.typesModuleKind}) but implementation is CJS (${problem.implementationModuleKind})\\n     Types: ${problem.typesFileName} | Implementation: ${problem.implementationFileName}`;\n\t\tcase \"FalseCJS\": return `  🔄 False CJS: Types indicate CJS (${problem.typesModuleKind}) but implementation is ESM (${problem.implementationModuleKind})\\n     Types: ${problem.typesFileName} | Implementation: ${problem.implementationFileName}`;\n\t\tcase \"CJSResolvesToESM\": return `  ⚡ CJS resolves to ESM${resolutionKind}${entrypoint}`;\n\t\tcase \"NamedExports\": {\n\t\t\tconst missingExports = problem.missing?.length > 0 ? ` Missing: ${problem.missing.join(\", \")}` : \"\";\n\t\t\treturn `  📤 Named exports problem${problem.isMissingAllNamed ? \" (all named exports missing)\" : \"\"}${missingExports}\\n     Types: ${problem.typesFileName} | Implementation: ${problem.implementationFileName}`;\n\t\t}\n\t\tcase \"FallbackCondition\": return `  🎯 Fallback condition used${resolutionKind}${entrypoint}`;\n\t\tcase \"FalseExportDefault\": return `  🎭 False export default\\n     Types: ${problem.typesFileName} | Implementation: ${problem.implementationFileName}`;\n\t\tcase \"MissingExportEquals\": return `  📝 Missing export equals\\n     Types: ${problem.typesFileName} | Implementation: ${problem.implementationFileName}`;\n\t\tcase \"InternalResolutionError\": return `  💥 Internal resolution error in ${problem.fileName} (${problem.resolutionOption})\\n     Module: ${problem.moduleSpecifier} | Mode: ${problem.resolutionMode}`;\n\t\tcase \"UnexpectedModuleSyntax\": return `  📋 Unexpected module syntax in ${problem.fileName}\\n     Expected: ${problem.moduleKind} | Found: ${problem.syntax === 99 ? \"ESM\" : \"CJS\"}`;\n\t\tcase \"CJSOnlyExportsDefault\": return `  🏷️  CJS only exports default in ${problem.fileName}`;\n\t\tdefault: return `  ❓ Unknown problem: ${JSON.stringify(problem)}`;\n\t}\n}\nasync function attw(options) {\n\tif (!options.attw) return;\n\tif (!options.pkg) {\n\t\toptions.logger.warn(\"attw is enabled but package.json is not found\");\n\t\treturn;\n\t}\n\tconst { profile = \"strict\", level = \"warn\",...attwOptions } = options.attw === true ? {} : options.attw;\n\tconst t = performance.now();\n\tdebug$4(\"Running attw check\");\n\tconst tempDir = await mkdtemp(path.join(tmpdir(), \"tsdown-attw-\"));\n\tlet attwCore;\n\ttry {\n\t\tattwCore = await import(\"@arethetypeswrong/core\");\n\t} catch {\n\t\toptions.logger.error(`ATTW check requires ${blue`@arethetypeswrong/core`} to be installed.`);\n\t\treturn;\n\t}\n\ttry {\n\t\tconst { stdout: tarballInfo } = await exec$1(`npm pack --json ----pack-destination ${tempDir}`, {\n\t\t\tencoding: \"utf8\",\n\t\t\tcwd: options.cwd\n\t\t});\n\t\tconst parsed = JSON.parse(tarballInfo);\n\t\tif (!Array.isArray(parsed) || !parsed[0]?.filename) throw new Error(\"Invalid npm pack output format\");\n\t\tconst tarball = await readFile(path.join(tempDir, parsed[0].filename));\n\t\tconst pkg = attwCore.createPackageFromTarballData(tarball);\n\t\tconst checkResult = await attwCore.checkPackage(pkg, attwOptions);\n\t\tif (checkResult.types !== false && checkResult.problems.length) {\n\t\t\tconst problems = checkResult.problems.filter((problem) => {\n\t\t\t\tif (\"resolutionKind\" in problem) return !profiles[profile]?.includes(problem.resolutionKind);\n\t\t\t\treturn true;\n\t\t\t});\n\t\t\tif (problems.length) {\n\t\t\t\tconst problemMessage = `Are the types wrong problems found:\\n${problems.map(formatProblem).join(\"\\n\")}`;\n\t\t\t\tif (level === \"error\") throw new Error(problemMessage);\n\t\t\t\toptions.logger.warn(problemMessage);\n\t\t\t}\n\t\t} else options.logger.success(`No Are the types wrong problems found`, dim`(${Math.round(performance.now() - t)}ms)`);\n\t} catch (error) {\n\t\toptions.logger.error(\"ATTW check failed:\", error);\n\t\tdebug$4(\"Found errors, setting exit code to 1\");\n\t\tprocess.exitCode = 1;\n\t} finally {\n\t\tawait fsRemove(tempDir);\n\t}\n}\n\n//#endregion\n//#region src/features/cjs.ts\n/**\n* If the config includes the `cjs` format and\n* one of its target >= node 23.0.0 / 22.12.0,\n* warn the user about the deprecation of CommonJS.\n*/\nfunction warnLegacyCJS(config) {\n\tif (!config.format.includes(\"cjs\") || !config.target) return;\n\tif (config.target.some((t) => {\n\t\tconst version$1 = coerce(t.split(\"node\")[1]);\n\t\treturn version$1 && satisfies(version$1, \">=23.0.0 || >=22.12.0\");\n\t})) config.logger.warnOnce(\"We recommend using the ESM format instead of CommonJS.\\nThe ESM format is compatible with modern platforms and runtimes, and most new libraries are now distributed only in ESM format.\\nLearn more at https://nodejs.org/en/learn/modules/publishing-a-package#how-did-we-get-here\");\n}\n\n//#endregion\n//#region src/features/copy.ts\nasync function copy(options) {\n\tif (!options.copy) return;\n\tconst copy$1 = typeof options.copy === \"function\" ? await options.copy(options) : options.copy;\n\tawait Promise.all(toArray(copy$1).map((dir) => {\n\t\tconst from = typeof dir === \"string\" ? dir : dir.from;\n\t\tconst to = typeof dir === \"string\" ? path.resolve(options.outDir, path.basename(from)) : dir.to;\n\t\treturn cp$1(options.cwd, from, to);\n\t}));\n}\nfunction cp$1(cwd, from, to) {\n\treturn fsCopy(path.resolve(cwd, from), path.resolve(cwd, to));\n}\n\n//#endregion\n//#region src/features/hooks.ts\nasync function createHooks$1(options) {\n\tconst hooks = createHooks();\n\tif (typeof options.hooks === \"object\") hooks.addHooks(options.hooks);\n\telse if (typeof options.hooks === \"function\") await options.hooks(hooks);\n\treturn {\n\t\thooks,\n\t\tcontext: {\n\t\t\toptions,\n\t\t\thooks\n\t\t}\n\t};\n}\n\n//#endregion\n//#region src/features/publint.ts\nconst debug$3 = Debug(\"tsdown:publint\");\nasync function publint(options) {\n\tif (!options.publint) return;\n\tif (!options.pkg) {\n\t\toptions.logger.warn(prettyName(options.name), \"publint is enabled but package.json is not found\");\n\t\treturn;\n\t}\n\tconst t = performance.now();\n\tdebug$3(\"Running publint\");\n\tconst { publint: publint$1 } = await import(\"publint\");\n\tconst { formatMessage } = await import(\"publint/utils\");\n\tconst { messages } = await publint$1({\n\t\t...options.publint === true ? {} : options.publint,\n\t\tpkgDir: path.dirname(options.pkg.packageJsonPath)\n\t});\n\tdebug$3(\"Found %d issues\", messages.length);\n\tif (!messages.length) options.logger.success(prettyName(options.name), `No publint issues found`, dim`(${Math.round(performance.now() - t)}ms)`);\n\tlet hasError = false;\n\tfor (const message of messages) {\n\t\thasError ||= message.type === \"error\";\n\t\tconst formattedMessage = formatMessage(message, options.pkg);\n\t\tconst logType = {\n\t\t\terror: \"error\",\n\t\t\twarning: \"warn\",\n\t\t\tsuggestion: \"info\"\n\t\t}[message.type];\n\t\toptions.logger[logType](prettyName(options.name), formattedMessage);\n\t}\n\tif (hasError) {\n\t\tdebug$3(\"Found errors, setting exit code to 1\");\n\t\tprocess.exitCode = 1;\n\t}\n}\n\n//#endregion\n//#region src/features/external.ts\nconst debug$2 = Debug(\"tsdown:external\");\nfunction ExternalPlugin({ pkg, noExternal, inlineOnly, skipNodeModulesBundle }) {\n\tconst deps = pkg && Array.from(getProductionDeps(pkg));\n\treturn {\n\t\tname: \"tsdown:external\",\n\t\tasync resolveId(id, importer, extraOptions) {\n\t\t\tif (extraOptions.isEntry || !importer) return;\n\t\t\tconst shouldExternal = await externalStrategy(this, id, importer, extraOptions);\n\t\t\tconst nodeBuiltinModule = isBuiltin(id);\n\t\t\tdebug$2(\"shouldExternal: %s = %s\", id, shouldExternal);\n\t\t\tif (shouldExternal === true || shouldExternal === \"absolute\") return {\n\t\t\t\tid,\n\t\t\t\texternal: shouldExternal,\n\t\t\t\tmoduleSideEffects: nodeBuiltinModule ? false : void 0\n\t\t\t};\n\t\t\tif (inlineOnly && !RE_DTS.test(importer) && !nodeBuiltinModule && id[0] !== \".\" && !path.isAbsolute(id)) {\n\t\t\t\tconst shouldInline = shouldExternal === \"no-external\" || matchPattern(id, inlineOnly);\n\t\t\t\tdebug$2(\"shouldInline: %s = %s\", id, shouldInline);\n\t\t\t\tif (shouldInline) return;\n\t\t\t\tconst resolved = await this.resolve(id, importer, extraOptions);\n\t\t\t\tif (!resolved) return;\n\t\t\t\tif (RE_NODE_MODULES.test(resolved.id)) throw new Error(`${underline(id)} is located in node_modules but is not included in ${blue`inlineOnly`} option.\nTo fix this, either add it to ${blue`inlineOnly`}, declare it as a production or peer dependency in your package.json, or externalize it manually.\nImported by ${underline(importer)}`);\n\t\t\t}\n\t\t}\n\t};\n\t/**\n\t* - `true`: always external\n\t* - `false`: skip, let other plugins handle it\n\t* - `'absolute'`: external as absolute path\n\t* - `'no-external'`: skip, but mark as non-external for inlineOnly check\n\t*/\n\tasync function externalStrategy(context, id, importer, extraOptions) {\n\t\tif (id === shimFile) return false;\n\t\tif (noExternal?.(id, importer)) return \"no-external\";\n\t\tif (skipNodeModulesBundle) {\n\t\t\tconst resolved = await context.resolve(id, importer, extraOptions);\n\t\t\tif (!resolved) return false;\n\t\t\treturn resolved.external || RE_NODE_MODULES.test(resolved.id);\n\t\t}\n\t\tif (deps) return deps.some((dep) => id === dep || id.startsWith(`${dep}/`));\n\t\treturn false;\n\t}\n}\nfunction getProductionDeps(pkg) {\n\treturn new Set([...Object.keys(pkg.dependencies || {}), ...Object.keys(pkg.peerDependencies || {})]);\n}\n\n//#endregion\n//#region src/utils/lightningcss.ts\n/**\n* Converts esbuild target [^1] (which is also used by Rolldown [^2]) to Lightning CSS targets [^3].\n*\n* [^1]: https://esbuild.github.io/api/#target\n* [^2]: https://github.com/rolldown/rolldown/blob/v1.0.0-beta.8/packages/rolldown/src/binding.d.ts#L1429-L1431\n* [^3]: https://lightningcss.dev/transpilation.html\n*/\nfunction esbuildTargetToLightningCSS(target) {\n\tlet targets;\n\tconst matches = [...target.join(\" \").toLowerCase().matchAll(TARGET_REGEX)];\n\tfor (const match of matches) {\n\t\tconst browser = ESBUILD_LIGHTNINGCSS_MAPPING[match[1]];\n\t\tif (!browser) continue;\n\t\tconst version$1 = match[2];\n\t\tconst versionInt = parseVersion(version$1);\n\t\tif (versionInt == null) continue;\n\t\ttargets = targets || {};\n\t\ttargets[browser] = versionInt;\n\t}\n\treturn targets;\n}\nconst TARGET_REGEX = /([a-z]+)(\\d+(?:\\.\\d+)*)/g;\nconst ESBUILD_LIGHTNINGCSS_MAPPING = {\n\tchrome: \"chrome\",\n\tedge: \"edge\",\n\tfirefox: \"firefox\",\n\tie: \"ie\",\n\tios: \"ios_saf\",\n\topera: \"opera\",\n\tsafari: \"safari\"\n};\nfunction parseVersion(version$1) {\n\tconst [major, minor = 0, patch = 0] = version$1.split(\"-\")[0].split(\".\").map((v) => Number.parseInt(v, 10));\n\tif (Number.isNaN(major) || Number.isNaN(minor) || Number.isNaN(patch)) return null;\n\treturn major << 16 | minor << 8 | patch;\n}\n\n//#endregion\n//#region src/features/lightningcss.ts\nasync function LightningCSSPlugin(options) {\n\tconst LightningCSS = await import(\"unplugin-lightningcss/rolldown\").catch(() => void 0);\n\tif (!LightningCSS) return;\n\tconst targets = options.target && esbuildTargetToLightningCSS(options.target);\n\tif (!targets) return;\n\treturn LightningCSS.default({ options: { targets } });\n}\n\n//#endregion\n//#region src/features/node-protocol.ts\nconst modulesWithoutProtocol = builtinModules.filter((mod) => !mod.startsWith(\"node:\"));\n/**\n* The `node:` protocol was added in Node.js v14.18.0.\n* @see https://nodejs.org/api/esm.html#node-imports\n*/\nfunction NodeProtocolPlugin(nodeProtocolOption) {\n\tif (nodeProtocolOption === \"strip\") return {\n\t\tname: \"tsdown:node-protocol:strip\",\n\t\tresolveId: {\n\t\t\torder: \"pre\",\n\t\t\tfilter: { id: /* @__PURE__ */ new RegExp(`^node:(${modulesWithoutProtocol.join(\"|\")})$`) },\n\t\t\thandler(id) {\n\t\t\t\treturn {\n\t\t\t\t\tid: id.slice(5),\n\t\t\t\t\texternal: true,\n\t\t\t\t\tmoduleSideEffects: false\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t};\n\treturn {\n\t\tname: \"tsdown:node-protocol:add\",\n\t\tresolveId: {\n\t\t\torder: \"pre\",\n\t\t\tfilter: { id: /* @__PURE__ */ new RegExp(`^(${modulesWithoutProtocol.join(\"|\")})$`) },\n\t\t\thandler(id) {\n\t\t\t\treturn {\n\t\t\t\t\tid: `node:${id}`,\n\t\t\t\t\texternal: true,\n\t\t\t\t\tmoduleSideEffects: false\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t};\n}\n\n//#endregion\n//#region src/features/output.ts\nfunction resolveJsOutputExtension(packageType, format, fixedExtension) {\n\tswitch (format) {\n\t\tcase \"es\": return !fixedExtension && packageType === \"module\" ? \"js\" : \"mjs\";\n\t\tcase \"cjs\": return fixedExtension || packageType === \"module\" ? \"cjs\" : \"js\";\n\t\tdefault: return \"js\";\n\t}\n}\nfunction resolveChunkFilename({ outExtensions, fixedExtension, pkg, hash }, inputOptions, format) {\n\tconst packageType = getPackageType(pkg);\n\tlet jsExtension;\n\tlet dtsExtension;\n\tif (outExtensions) {\n\t\tconst { js, dts } = outExtensions({\n\t\t\toptions: inputOptions,\n\t\t\tformat,\n\t\t\tpkgType: packageType\n\t\t}) || {};\n\t\tjsExtension = js;\n\t\tdtsExtension = dts;\n\t}\n\tjsExtension ??= `.${resolveJsOutputExtension(packageType, format, fixedExtension)}`;\n\tconst suffix = format === \"iife\" || format === \"umd\" ? `.${format}` : \"\";\n\treturn [createChunkFilename(`[name]${suffix}`, jsExtension, dtsExtension), createChunkFilename(`[name]${suffix}${hash ? \"-[hash]\" : \"\"}`, jsExtension, dtsExtension)];\n}\nfunction createChunkFilename(basename, jsExtension, dtsExtension) {\n\tif (dtsExtension === void 0) return `${basename}${jsExtension}`;\n\treturn (chunk) => {\n\t\treturn `${basename}${chunk.name.endsWith(\".d\") ? dtsExtension : jsExtension}`;\n\t};\n}\nfunction resolveChunkAddon(chunkAddon, format, dts) {\n\tif (!chunkAddon) return;\n\treturn (chunk) => {\n\t\tif (!dts && RE_DTS.test(chunk.fileName)) return \"\";\n\t\tif (typeof chunkAddon === \"function\") chunkAddon = chunkAddon({\n\t\t\tformat,\n\t\t\tfileName: chunk.fileName\n\t\t});\n\t\tif (typeof chunkAddon === \"string\") return chunkAddon;\n\t\tswitch (true) {\n\t\t\tcase RE_JS.test(chunk.fileName): return chunkAddon?.js || \"\";\n\t\t\tcase RE_CSS.test(chunk.fileName): return chunkAddon?.css || \"\";\n\t\t\tcase RE_DTS.test(chunk.fileName): return chunkAddon?.dts || \"\";\n\t\t\tdefault: return \"\";\n\t\t}\n\t};\n}\n\n//#endregion\n//#region src/utils/format.ts\nfunction formatBytes(bytes) {\n\tif (bytes === Infinity) return void 0;\n\treturn `${(bytes / 1e3).toFixed(2)} kB`;\n}\n\n//#endregion\n//#region src/features/report.ts\nconst debug$1 = Debug(\"tsdown:report\");\nconst brotliCompressAsync = promisify(brotliCompress);\nconst gzipAsync = promisify(gzip);\nconst defaultOptions = {\n\tgzip: true,\n\tbrotli: false,\n\tmaxCompressSize: 1e6\n};\nfunction ReportPlugin(userOptions, logger, cwd, cjsDts, name, isMultiFormat) {\n\tconst options = {\n\t\t...defaultOptions,\n\t\t...userOptions\n\t};\n\treturn {\n\t\tname: \"tsdown:report\",\n\t\tasync writeBundle(outputOptions, bundle) {\n\t\t\tconst outDir = path.relative(cwd, outputOptions.file ? path.resolve(cwd, outputOptions.file, \"..\") : path.resolve(cwd, outputOptions.dir));\n\t\t\tconst sizes = [];\n\t\t\tfor (const chunk of Object.values(bundle)) {\n\t\t\t\tconst size = await calcSize(options, chunk);\n\t\t\t\tsizes.push(size);\n\t\t\t}\n\t\t\tconst filenameLength = Math.max(...sizes.map((size) => size.filename.length));\n\t\t\tconst rawTextLength = Math.max(...sizes.map((size) => size.rawText.length));\n\t\t\tconst gzipTextLength = Math.max(...sizes.map((size) => size.gzipText == null ? 0 : size.gzipText.length));\n\t\t\tconst brotliTextLength = Math.max(...sizes.map((size) => size.brotliText == null ? 0 : size.brotliText.length));\n\t\t\tlet totalRaw = 0;\n\t\t\tfor (const size of sizes) {\n\t\t\t\tsize.rawText = size.rawText.padStart(rawTextLength);\n\t\t\t\tsize.gzipText = size.gzipText?.padStart(gzipTextLength);\n\t\t\t\tsize.brotliText = size.brotliText?.padStart(brotliTextLength);\n\t\t\t\ttotalRaw += size.raw;\n\t\t\t}\n\t\t\tsizes.sort((a, b) => {\n\t\t\t\tif (a.dts !== b.dts) return a.dts ? 1 : -1;\n\t\t\t\tif (a.isEntry !== b.isEntry) return a.isEntry ? -1 : 1;\n\t\t\t\treturn b.raw - a.raw;\n\t\t\t});\n\t\t\tconst nameLabel = prettyName(name);\n\t\t\tconst formatLabel = isMultiFormat && prettyFormat(cjsDts ? \"cjs\" : outputOptions.format);\n\t\t\tfor (const size of sizes) {\n\t\t\t\tconst filenameColor = size.dts ? green : noop;\n\t\t\t\tlogger.info(nameLabel, formatLabel, dim(outDir + path.sep) + filenameColor((size.isEntry ? bold : noop)(size.filename)), ` `.repeat(filenameLength - size.filename.length), dim(size.rawText), options.gzip && size.gzipText && dim`│ gzip: ${size.gzipText}`, options.brotli && size.brotliText && dim`│ brotli: ${size.brotliText}`);\n\t\t\t}\n\t\t\tconst totalSizeText = formatBytes(totalRaw);\n\t\t\tlogger.info(nameLabel, formatLabel, `${sizes.length} files, total: ${totalSizeText}`);\n\t\t}\n\t};\n}\nasync function calcSize(options, chunk) {\n\tdebug$1(`Calculating size for`, chunk.fileName);\n\tconst content = chunk.type === \"chunk\" ? chunk.code : chunk.source;\n\tconst raw = Buffer.byteLength(content, \"utf8\");\n\tdebug$1(\"[size]\", chunk.fileName, raw);\n\tlet gzip$1 = Infinity;\n\tlet brotli = Infinity;\n\tif (raw > options.maxCompressSize) debug$1(chunk.fileName, \"file size exceeds limit, skip gzip/brotli\");\n\telse {\n\t\tif (options.gzip) {\n\t\t\tgzip$1 = (await gzipAsync(content)).length;\n\t\t\tdebug$1(\"[gzip]\", chunk.fileName, gzip$1);\n\t\t}\n\t\tif (options.brotli) {\n\t\t\tbrotli = (await brotliCompressAsync(content)).length;\n\t\t\tdebug$1(\"[brotli]\", chunk.fileName, brotli);\n\t\t}\n\t}\n\treturn {\n\t\tfilename: chunk.fileName,\n\t\tdts: RE_DTS.test(chunk.fileName),\n\t\tisEntry: chunk.type === \"chunk\" && chunk.isEntry,\n\t\traw,\n\t\trawText: formatBytes(raw),\n\t\tgzip: gzip$1,\n\t\tgzipText: formatBytes(gzip$1),\n\t\tbrotli,\n\t\tbrotliText: formatBytes(brotli)\n\t};\n}\n\n//#endregion\n//#region src/features/shebang.ts\nconst RE_SHEBANG = /^#!.*/;\nfunction ShebangPlugin(logger, cwd, name, isMultiFormat) {\n\treturn {\n\t\tname: \"tsdown:shebang\",\n\t\tasync writeBundle(options, bundle) {\n\t\t\tfor (const chunk of Object.values(bundle)) {\n\t\t\t\tif (chunk.type !== \"chunk\" || !chunk.isEntry) continue;\n\t\t\t\tif (!RE_SHEBANG.test(chunk.code)) continue;\n\t\t\t\tconst filepath = path.resolve(cwd, options.file || path.join(options.dir, chunk.fileName));\n\t\t\t\tif (await fsExists(filepath)) {\n\t\t\t\t\tlogger.info(prettyName(name), isMultiFormat && prettyFormat(options.format), `Granting execute permission to ${underline(path.relative(cwd, filepath))}`);\n\t\t\t\t\tawait chmod(filepath, 493);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\n//#endregion\n//#region src/features/shims.ts\nfunction getShimsInject(format, platform) {\n\tif (format === \"es\" && platform === \"node\") return {\n\t\t__dirname: [shimFile, \"__dirname\"],\n\t\t__filename: [shimFile, \"__filename\"]\n\t};\n}\n\n//#endregion\n//#region src/features/rolldown.ts\nconst debug = Debug(\"tsdown:rolldown\");\nasync function getBuildOptions(config, format, isMultiFormat, cjsDts = false) {\n\tconst inputOptions = await resolveInputOptions(config, format, cjsDts, isMultiFormat);\n\tconst outputOptions = await resolveOutputOptions(inputOptions, config, format, cjsDts);\n\tconst rolldownConfig = {\n\t\t...inputOptions,\n\t\toutput: outputOptions\n\t};\n\tdebug(\"rolldown config with format \\\"%s\\\" %O\", cjsDts ? \"cjs dts\" : format, rolldownConfig);\n\treturn rolldownConfig;\n}\nasync function resolveInputOptions(config, format, cjsDts, isMultiFormat) {\n\tconst { entry, external, plugins: userPlugins, platform, alias, treeshake, dts, unused, target, shims, tsconfig, cwd, report, env, nodeProtocol, loader, name, logger, cjsDefault, banner, footer, globImport } = config;\n\tconst plugins = [];\n\tif (nodeProtocol) plugins.push(NodeProtocolPlugin(nodeProtocol));\n\tif (config.pkg || config.skipNodeModulesBundle) plugins.push(ExternalPlugin(config));\n\tif (dts) {\n\t\tconst { dts: dtsPlugin } = await import(\"rolldown-plugin-dts\");\n\t\tconst options = {\n\t\t\ttsconfig,\n\t\t\tbanner: resolveChunkAddon(banner, format, true),\n\t\t\tfooter: resolveChunkAddon(footer, format, true),\n\t\t\t...dts\n\t\t};\n\t\tif (format === \"es\") plugins.push(dtsPlugin(options));\n\t\telse if (cjsDts) plugins.push(dtsPlugin({\n\t\t\t...options,\n\t\t\temitDtsOnly: true,\n\t\t\tcjsDefault\n\t\t}));\n\t}\n\tif (!cjsDts) {\n\t\tif (unused) {\n\t\t\tconst { Unused } = await import(\"unplugin-unused\");\n\t\t\tplugins.push(Unused.rolldown(unused === true ? {} : unused));\n\t\t}\n\t\tif (target) plugins.push(await LightningCSSPlugin({ target }));\n\t\tplugins.push(ShebangPlugin(logger, cwd, name, isMultiFormat));\n\t\tif (globImport) plugins.push(importGlobPlugin());\n\t}\n\tif (report && LogLevels[logger.level] >= 3) plugins.push(ReportPlugin(report, logger, cwd, cjsDts, name, isMultiFormat));\n\tif (!cjsDts) plugins.push(userPlugins);\n\tconst define = {\n\t\t...config.define,\n\t\t...Object.keys(env).reduce((acc, key) => {\n\t\t\tconst value = JSON.stringify(env[key]);\n\t\t\tacc[`process.env.${key}`] = value;\n\t\t\tacc[`import.meta.env.${key}`] = value;\n\t\t\treturn acc;\n\t\t}, Object.create(null))\n\t};\n\tconst inject = shims && !cjsDts ? getShimsInject(format, platform) : void 0;\n\treturn await mergeUserOptions({\n\t\tinput: entry,\n\t\tcwd,\n\t\texternal,\n\t\tresolve: { alias },\n\t\ttsconfig: tsconfig || void 0,\n\t\ttreeshake,\n\t\tplatform: cjsDts || format === \"cjs\" ? \"node\" : platform,\n\t\ttransform: {\n\t\t\ttarget,\n\t\t\tdefine,\n\t\t\tinject\n\t\t},\n\t\tplugins,\n\t\tmoduleTypes: loader,\n\t\tlogLevel: logger.level === \"error\" ? \"silent\" : logger.level,\n\t\tonLog: cjsDefault ? (level, log, defaultHandler) => {\n\t\t\tif (log.code === \"MIXED_EXPORT\") return;\n\t\t\tdefaultHandler(level, log);\n\t\t} : void 0\n\t}, config.inputOptions, [format, { cjsDts }]);\n}\nasync function resolveOutputOptions(inputOptions, config, format, cjsDts) {\n\tconst { entry, outDir, sourcemap, minify, unbundle, banner, footer, cjsDefault } = config;\n\tconst [entryFileNames, chunkFileNames] = resolveChunkFilename(config, inputOptions, format);\n\treturn await mergeUserOptions({\n\t\tformat: cjsDts ? \"es\" : format,\n\t\tname: config.globalName,\n\t\tsourcemap,\n\t\tdir: outDir,\n\t\texports: cjsDefault ? \"auto\" : \"named\",\n\t\tminify: !cjsDts && minify,\n\t\tentryFileNames,\n\t\tchunkFileNames,\n\t\tpreserveModules: unbundle,\n\t\tpreserveModulesRoot: unbundle ? lowestCommonAncestor(...Object.values(entry)) : void 0,\n\t\tbanner: resolveChunkAddon(banner, format),\n\t\tfooter: resolveChunkAddon(footer, format)\n\t}, config.outputOptions, [format, { cjsDts }]);\n}\nasync function getDebugRolldownDir() {\n\tif (!debug.enabled) return;\n\treturn await mkdtemp(join(tmpdir(), \"tsdown-config-\"));\n}\nasync function debugBuildOptions(dir, name, format, buildOptions) {\n\tconst outFile = join(dir, `tsdown.config.${format}.js`);\n\thandlePluginInspect(buildOptions.plugins);\n\tconst serialized = util.formatWithOptions({\n\t\tdepth: null,\n\t\tmaxArrayLength: null,\n\t\tmaxStringLength: null\n\t}, buildOptions);\n\tawait writeFile(outFile, `/*\nAuto-generated rolldown config for tsdown debug purposes\ntsdown v${version}, rolldown v${VERSION}\nGenerated on ${(/* @__PURE__ */ new Date()).toISOString()}\nPackage name: ${name || \"not specified\"}\n*/\n\nexport default ${serialized}\\n`);\n\tdebug(\"Wrote debug rolldown config for \\\"%s\\\" (%s) -> %s\", name || \"default name\", format, outFile);\n}\nfunction handlePluginInspect(plugins) {\n\tif (Array.isArray(plugins)) for (const plugin of plugins) handlePluginInspect(plugin);\n\telse if (typeof plugins === \"object\" && plugins !== null && \"name\" in plugins) plugins[util.inspect.custom] = function(depth, options, inspect) {\n\t\tif (\"_options\" in plugins) return inspect({\n\t\t\tname: plugins.name,\n\t\t\toptions: plugins._options\n\t\t}, options);\n\t\telse return `\"rolldown plugin: ${plugins.name}\"`;\n\t};\n}\n\n//#endregion\n//#region src/features/shortcuts.ts\nfunction shortcuts(restart) {\n\tlet actionRunning = false;\n\tasync function onInput(input) {\n\t\tif (actionRunning) return;\n\t\tconst SHORTCUTS = [\n\t\t\t{\n\t\t\t\tkey: \"r\",\n\t\t\t\tdescription: \"reload config and rebuild\",\n\t\t\t\taction() {\n\t\t\t\t\trestart();\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: \"c\",\n\t\t\t\tdescription: \"clear console\",\n\t\t\t\taction() {\n\t\t\t\t\tconsole.clear();\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: \"q\",\n\t\t\t\tdescription: \"quit\",\n\t\t\t\taction() {\n\t\t\t\t\tprocess.exit(0);\n\t\t\t\t}\n\t\t\t}\n\t\t];\n\t\tif (input === \"h\") {\n\t\t\tconst loggedKeys = /* @__PURE__ */ new Set();\n\t\t\tglobalLogger.info(\"  Shortcuts\");\n\t\t\tfor (const shortcut$1 of SHORTCUTS) {\n\t\t\t\tif (loggedKeys.has(shortcut$1.key)) continue;\n\t\t\t\tloggedKeys.add(shortcut$1.key);\n\t\t\t\tif (shortcut$1.action == null) continue;\n\t\t\t\tglobalLogger.info(dim`  press ` + bold`${shortcut$1.key} + enter` + dim` to ${shortcut$1.description}`);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tconst shortcut = SHORTCUTS.find((shortcut$1) => shortcut$1.key === input);\n\t\tif (!shortcut) return;\n\t\tactionRunning = true;\n\t\tawait shortcut.action();\n\t\tactionRunning = false;\n\t}\n\tconst rl = readline.createInterface({ input: process.stdin });\n\trl.on(\"line\", onInput);\n\treturn () => rl.close();\n}\n\n//#endregion\n//#region src/features/watch.ts\nconst endsWithConfig = /[\\\\/](?:(?:package|tsconfig)\\.json|pnpm-(?:workspace|lock)\\.yaml|tsdown\\.config.*)$/;\nasync function watchBuild(options, configFiles, rebuild, restart) {\n\tif (typeof options.watch === \"boolean\" && options.outDir === options.cwd) throw new Error(`Watch is enabled, but output directory is the same as the current working directory.Please specify a different watch directory using ${blue`watch`} option,or set ${blue`outDir`} to a different directory.`);\n\tconst files = toArray(typeof options.watch === \"boolean\" ? options.cwd : options.watch);\n\toptions.logger.info(`Watching for changes in ${files.join(\", \")}`);\n\tfiles.push(...configFiles);\n\tconst { watch } = await import(\"chokidar\");\n\tconst debouncedOnChange = debounce(onChange, 100);\n\tconst watcher = watch(files, {\n\t\tcwd: options.cwd,\n\t\tignoreInitial: true,\n\t\tignorePermissionErrors: true,\n\t\tignored: [\n\t\t\t/[\\\\/]\\.git[\\\\/]/,\n\t\t\tRE_NODE_MODULES,\n\t\t\toptions.outDir,\n\t\t\t...options.ignoreWatch\n\t\t]\n\t});\n\tlet pending = [];\n\tlet pendingPromise;\n\twatcher.on(\"all\", (type, file) => {\n\t\tpending.push(path.resolve(options.cwd, file));\n\t\tdebouncedOnChange();\n\t});\n\treturn watcher;\n\tasync function onChange() {\n\t\tawait pendingPromise;\n\t\tif (!pending.length) return;\n\t\tfor (const file of pending) invalidateContextFile(globalContext, file);\n\t\tif (pending.some((file) => configFiles.includes(file) || endsWithConfig.test(file))) {\n\t\t\toptions.logger.info(`Restarting due to config change...`);\n\t\t\tpendingPromise = restart();\n\t\t} else {\n\t\t\toptions.logger.info(`Change detected: ${pending.join(\", \")}`);\n\t\t\tpendingPromise = rebuild();\n\t\t}\n\t\tpending = [];\n\t\tawait pendingPromise;\n\t}\n}\n\n//#endregion\n//#region src/index.ts\n/**\n* Build with tsdown.\n*/\nasync function build$1(userOptions = {}) {\n\tglobalLogger.level = userOptions.logLevel || (userOptions.silent ? \"error\" : \"info\");\n\tconst { configs, files: configFiles } = await resolveConfig(userOptions);\n\tlet cleanPromise;\n\tconst clean = () => {\n\t\tif (cleanPromise) return cleanPromise;\n\t\treturn cleanPromise = cleanOutDir(configs);\n\t};\n\tglobalLogger.info(\"Build start\");\n\tconst rebuilds = await Promise.all(configs.map((options) => buildSingle(options, clean)));\n\tconst disposeCbs = [];\n\tfor (const [i, config] of configs.entries()) {\n\t\tconst rebuild = rebuilds[i];\n\t\tif (!rebuild) continue;\n\t\tconst watcher = await watchBuild(config, configFiles, rebuild, restart);\n\t\tdisposeCbs.push(() => watcher.close());\n\t}\n\tif (disposeCbs.length) disposeCbs.push(shortcuts(restart));\n\tasync function restart() {\n\t\tfor (const dispose of disposeCbs) await dispose();\n\t\tbuild$1(userOptions);\n\t}\n}\nconst dirname$1 = path.dirname(fileURLToPath(import.meta.url));\nconst pkgRoot = path.resolve(dirname$1, \"..\");\n/** @internal */\nconst shimFile = path.resolve(pkgRoot, \"esm-shims.js\");\n/**\n* Build a single configuration, without watch and shortcuts features.\n*\n* Internal API, not for public use\n*\n* @private\n* @param config Resolved options\n*/\nasync function buildSingle(config, clean) {\n\tconst { format: formats, dts, watch, onSuccess, logger } = config;\n\tlet ab;\n\tconst { hooks, context } = await createHooks$1(config);\n\twarnLegacyCJS(config);\n\tawait rebuild(true);\n\tif (watch) return () => rebuild();\n\tasync function rebuild(first) {\n\t\tconst startTime = performance.now();\n\t\tawait hooks.callHook(\"build:prepare\", context);\n\t\tab?.abort();\n\t\tif (first) await clean();\n\t\telse await cleanOutDir([config]);\n\t\tlet hasErrors = false;\n\t\tconst isMultiFormat = formats.length > 1;\n\t\tconst chunks = {};\n\t\tconst debugRolldownDir = await getDebugRolldownDir();\n\t\tawait Promise.all(formats.map(async (format) => {\n\t\t\ttry {\n\t\t\t\tconst buildOptions = await getBuildOptions(config, format, isMultiFormat, false);\n\t\t\t\tawait hooks.callHook(\"build:before\", {\n\t\t\t\t\t...context,\n\t\t\t\t\tbuildOptions\n\t\t\t\t});\n\t\t\t\tif (debugRolldownDir) await debugBuildOptions(debugRolldownDir, config.name, format, buildOptions);\n\t\t\t\tconst { output } = await build(buildOptions);\n\t\t\t\tchunks[format] = output;\n\t\t\t\tif (format === \"cjs\" && dts) {\n\t\t\t\t\tconst { output: output$1 } = await build(await getBuildOptions(config, format, isMultiFormat, true));\n\t\t\t\t\tchunks[format].push(...output$1);\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (watch) {\n\t\t\t\t\tlogger.error(error);\n\t\t\t\t\thasErrors = true;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}));\n\t\tif (hasErrors) return;\n\t\tawait Promise.all([writeExports(config, chunks), copy(config)]);\n\t\tawait Promise.all([publint(config), attw(config)]);\n\t\tawait hooks.callHook(\"build:done\", context);\n\t\tlogger.success(prettyName(config.name), `${first ? \"Build\" : \"Rebuild\"} complete in ${green(`${Math.round(performance.now() - startTime)}ms`)}`);\n\t\tab = new AbortController();\n\t\tif (typeof onSuccess === \"string\") {\n\t\t\tconst p = exec(onSuccess, [], { nodeOptions: {\n\t\t\t\tshell: true,\n\t\t\t\tstdio: \"inherit\"\n\t\t\t} });\n\t\t\tp.then(({ exitCode }) => {\n\t\t\t\tif (exitCode) process.exitCode = exitCode;\n\t\t\t});\n\t\t\tab.signal.addEventListener(\"abort\", () => {\n\t\t\t\tif (typeof p.pid === \"number\") treeKill(p.pid);\n\t\t\t});\n\t\t} else await onSuccess?.(config, ab.signal);\n\t}\n}\n\n//#endregion\nexport { ReportPlugin as a, ShebangPlugin as i, buildSingle as n, NodeProtocolPlugin as o, shimFile as r, ExternalPlugin as s, build$1 as t };"}
{"timestamp":1761897885322,"action":"HookRenderChunkStart","plugin_name":"rolldown-plugin-require-cjs","plugin_id":9,"call_id":"db04fbe9-f7c6-47da-a7e5-0f354460f197","content":"$ref:eb09e0ddffbc63d38c3f4f91679737ce9e6edd0f2241017a2c07f1792806c7a9","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885323,"action":"HookRenderChunkStart","plugin_name":"rolldown-plugin-require-cjs","plugin_id":9,"call_id":"109c3b66-0fb7-4457-9986-89fa1bf8b639","content":"import { bgRed, bgYellow, blue, green, rgb, yellow } from \"ansis\";\n\n//#region src/utils/general.ts\nfunction toArray(val, defaultValue) {\n\tif (Array.isArray(val)) return val;\n\telse if (val == null) {\n\t\tif (defaultValue) return [defaultValue];\n\t\treturn [];\n\t} else return [val];\n}\nfunction resolveComma(arr) {\n\treturn arr.flatMap((format$1) => format$1.split(\",\"));\n}\nfunction resolveRegex(str) {\n\tif (typeof str === \"string\" && str.length > 2 && str[0] === \"/\" && str.at(-1) === \"/\") return new RegExp(str.slice(1, -1));\n\treturn str;\n}\nfunction debounce(fn, wait) {\n\tlet timeout;\n\treturn function(...args) {\n\t\tif (timeout) clearTimeout(timeout);\n\t\ttimeout = setTimeout(() => {\n\t\t\ttimeout = void 0;\n\t\t\tfn.apply(this, args);\n\t\t}, wait);\n\t};\n}\nfunction slash(string) {\n\treturn string.replaceAll(\"\\\\\", \"/\");\n}\nconst noop = (v) => v;\nfunction matchPattern(id, patterns) {\n\treturn patterns.some((pattern) => {\n\t\tif (pattern instanceof RegExp) {\n\t\t\tpattern.lastIndex = 0;\n\t\t\treturn pattern.test(id);\n\t\t}\n\t\treturn id === pattern;\n\t});\n}\n\n//#endregion\n//#region src/utils/logger.ts\nconst LogLevels = {\n\tsilent: 0,\n\terror: 1,\n\twarn: 2,\n\tinfo: 3\n};\nfunction format(msgs) {\n\treturn msgs.filter((arg) => arg !== void 0 && arg !== false).join(\" \");\n}\nconst warnedMessages = /* @__PURE__ */ new Set();\nfunction createLogger(level = \"info\", { customLogger, console = globalThis.console, failOnWarn = false } = {}) {\n\tif (customLogger) return customLogger;\n\tfunction output(type, msg) {\n\t\tif (LogLevels[logger.level] < LogLevels[type]) return;\n\t\tconsole[type === \"info\" ? \"log\" : type](msg);\n\t}\n\tconst logger = {\n\t\tlevel,\n\t\tinfo(...msgs) {\n\t\t\toutput(\"info\", `${blue`ℹ`} ${format(msgs)}`);\n\t\t},\n\t\twarn(...msgs) {\n\t\t\tconst message = format(msgs);\n\t\t\tif (failOnWarn) throw new Error(message);\n\t\t\twarnedMessages.add(message);\n\t\t\toutput(\"warn\", `\\n${bgYellow` WARN `} ${message}\\n`);\n\t\t},\n\t\twarnOnce(...msgs) {\n\t\t\tconst message = format(msgs);\n\t\t\tif (warnedMessages.has(message)) return;\n\t\t\tif (failOnWarn) throw new Error(message);\n\t\t\twarnedMessages.add(message);\n\t\t\toutput(\"warn\", `\\n${bgYellow` WARN `} ${message}\\n`);\n\t\t},\n\t\terror(...msgs) {\n\t\t\toutput(\"error\", `\\n${bgRed` ERROR `} ${format(msgs)}\\n`);\n\t\t},\n\t\tsuccess(...msgs) {\n\t\t\toutput(\"info\", `${green`✔`} ${format(msgs)}`);\n\t\t}\n\t};\n\treturn logger;\n}\nconst globalLogger = createLogger();\nfunction prettyName(name) {\n\tif (!name) return void 0;\n\treturn generateColor(name)(`[${name}]`);\n}\nfunction prettyFormat(format$1) {\n\tconst formatColor = format$1 === \"es\" ? blue : format$1 === \"cjs\" ? yellow : noop;\n\tlet formatText;\n\tswitch (format$1) {\n\t\tcase \"es\":\n\t\t\tformatText = \"ESM\";\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tformatText = format$1.toUpperCase();\n\t\t\tbreak;\n\t}\n\treturn formatColor(`[${formatText}]`);\n}\nconst colors = /* @__PURE__ */ new Map();\nfunction generateColor(name = \"default\") {\n\tif (colors.has(name)) return colors.get(name);\n\tlet color;\n\tif (name === \"default\") color = blue;\n\telse {\n\t\tlet hash = 0;\n\t\tfor (let i = 0; i < name.length; i++) hash = name.charCodeAt(i) + ((hash << 5) - hash);\n\t\tcolor = rgb(...hslToRgb(hash % 360, 35, 55));\n\t}\n\tcolors.set(name, color);\n\treturn color;\n}\nfunction hslToRgb(h, s, l) {\n\th = h % 360;\n\th /= 360;\n\ts /= 100;\n\tl /= 100;\n\tlet r, g, b;\n\tif (s === 0) r = g = b = l;\n\telse {\n\t\tconst q = l < .5 ? l * (1 + s) : l + s - l * s;\n\t\tconst p = 2 * l - q;\n\t\tr = hue2rgb(p, q, h + 1 / 3);\n\t\tg = hue2rgb(p, q, h);\n\t\tb = hue2rgb(p, q, h - 1 / 3);\n\t}\n\treturn [\n\t\tMath.max(0, Math.round(r * 255)),\n\t\tMath.max(0, Math.round(g * 255)),\n\t\tMath.max(0, Math.round(b * 255))\n\t];\n}\nfunction hue2rgb(p, q, t) {\n\tif (t < 0) t += 1;\n\tif (t > 1) t -= 1;\n\tif (t < 1 / 6) return p + (q - p) * 6 * t;\n\tif (t < 1 / 2) return q;\n\tif (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n\treturn p;\n}\n\n//#endregion\n//#region package.json\nvar version = \"0.15.12\";\n\n//#endregion\nexport { globalLogger as a, debounce as c, resolveComma as d, resolveRegex as f, generateColor as i, matchPattern as l, toArray as m, LogLevels as n, prettyFormat as o, slash as p, createLogger as r, prettyName as s, version as t, noop as u };","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885324,"action":"HookRenderChunkStart","plugin_name":"rolldown-plugin-require-cjs","plugin_id":9,"call_id":"bc049c97-0579-426c-b7f1-358e6df0ed61","content":"import \"ansis\";\nimport { BuildOptions, ExternalOption, InputOption, InputOptions, InternalModuleFormat, MinifyOptions, ModuleFormat, ModuleTypes, OutputAsset, OutputChunk, OutputOptions, Plugin, TreeshakingOptions } from \"rolldown\";\nimport { Hookable } from \"hookable\";\nimport { CheckPackageOptions } from \"@arethetypeswrong/core\";\nimport { Options as PublintOptions } from \"publint\";\nimport { Options as DtsOptions } from \"rolldown-plugin-dts\";\nimport { Options as UnusedOptions } from \"unplugin-unused\";\nimport { PackageJson } from \"pkg-types\";\n\n//#region src/utils/types.d.ts\nvar Overwrite = [35, (T, U) => [\n\tT,\n\tU,\n\tOmit,\n\tU\n]];\nvar Awaitable = [36, (T) => [\n\tT,\n\tT,\n\tPromise\n]];\nvar MarkPartial = [37, (T, K) => [\n\tT,\n\tT,\n\tRequired,\n\tK,\n\tOmit,\n\tT,\n\tK,\n\tPick,\n\tPartial\n]];\nvar Arrayable = [38, (T) => [T, T]];\n\n//#endregion\n//#region src/features/attw.d.ts\nvar AttwOptions = [47, () => [CheckPackageOptions]];\n\n//#endregion\n//#region src/features/copy.d.ts\nvar CopyEntry = [43, () => []];\nvar CopyOptions = [44, () => [CopyEntry, Arrayable]];\nvar CopyOptionsFn = [45, () => [\n\tResolvedConfig,\n\tCopyOptions,\n\tAwaitable\n]];\n\n//#endregion\n//#region src/features/exports.d.ts\nvar TsdownChunks = [49, () => [\n\tNormalizedFormat,\n\tOutputChunk,\n\tOutputAsset,\n\tArray,\n\tRecord,\n\tPartial\n]];\nvar ExportsOptions = [50, () => [\n\tRecord,\n\tPackageJson,\n\tTsdownChunks,\n\tRecord,\n\tAwaitable\n]];\n\n//#endregion\n//#region src/features/hooks.d.ts\nvar BuildContext = [63, () => [\n\tResolvedConfig,\n\tTsdownHooks,\n\tHookable\n]];\nvar RolldownContext = [64, () => [BuildOptions]];\nvar TsdownHooks = [65, () => [\n\tBuildContext,\n\tPromise,\n\tBuildContext,\n\tRolldownContext,\n\tPromise,\n\tBuildContext,\n\tPromise\n]];\n\n//#endregion\n//#region src/utils/package.d.ts\nvar PackageType = [40, () => []];\n\n//#endregion\n//#region src/features/output.d.ts\nvar OutExtensionContext = [54, () => [\n\tInputOptions,\n\tNormalizedFormat,\n\tPackageType\n]];\nvar OutExtensionObject = [55, () => []];\nvar OutExtensionFactory = [56, () => [OutExtensionContext, OutExtensionObject]];\nvar ChunkAddonObject = [59, () => []];\nvar ChunkAddonFunction = [60, () => [Format, ChunkAddonObject]];\nvar ChunkAddon = [61, () => [ChunkAddonObject, ChunkAddonFunction]];\n\n//#endregion\n//#region src/utils/logger.d.ts\nvar LogType = [11, () => []];\nvar LogLevel = [12, () => [LogType]];\nvar Logger = [15, () => [LogLevel]];\nvar globalLogger = [17, () => [Logger]];\n\n//#endregion\n//#region src/features/report.d.ts\nvar ReportOptions = [21, () => []];\nvar ReportPlugin = [22, () => [\n\tReportOptions,\n\tLogger,\n\tPlugin\n]];\n\n//#endregion\n//#region src/config/types.d.ts\nvar Sourcemap = [23, () => []];\nvar Format = [24, () => [ModuleFormat]];\nvar NormalizedFormat = [25, () => [InternalModuleFormat]];\nvar Workspace = [26, () => [Arrayable, Arrayable]];\nvar NoExternalFn = [27, () => []];\nvar UserConfig = [28, () => [\n\tInputOption,\n\tExternalOption,\n\tRegExp,\n\tArrayable,\n\tNoExternalFn,\n\tRegExp,\n\tArrayable,\n\tRecord,\n\tRecord,\n\tRecord,\n\tTreeshakingOptions,\n\tModuleTypes,\n\tInputOptions,\n\tInputOptions,\n\tInputOptions,\n\tNormalizedFormat,\n\tInputOptions,\n\tAwaitable,\n\tFormat,\n\tFormat,\n\tSourcemap,\n\tMinifyOptions,\n\tChunkAddon,\n\tChunkAddon,\n\tOutExtensionFactory,\n\tOutputOptions,\n\tOutputOptions,\n\tNormalizedFormat,\n\tOutputOptions,\n\tAwaitable,\n\tLogLevel,\n\tLogger,\n\tArrayable,\n\tRegExp,\n\tArrayable,\n\tResolvedConfig,\n\tAbortSignal,\n\tPromise,\n\tDtsOptions,\n\tUnusedOptions,\n\tPublintOptions,\n\tAttwOptions,\n\tReportOptions,\n\tExportsOptions,\n\tCopyOptions,\n\tCopyOptionsFn,\n\tCopyOptions,\n\tCopyOptionsFn,\n\tTsdownHooks,\n\tPartial,\n\tTsdownHooks,\n\tHookable,\n\tAwaitable,\n\tWorkspace,\n\tArrayable\n]];\nvar InlineConfig = [29, () => [RegExp, UserConfig]];\nvar UserConfigFn = [30, () => [\n\tInlineConfig,\n\tUserConfig,\n\tArrayable,\n\tAwaitable\n]];\nvar UserConfigExport = [31, () => [\n\tUserConfig,\n\tArrayable,\n\tUserConfigFn,\n\tAwaitable\n]];\nvar ResolvedConfig = [32, () => [\n\tUserConfig,\n\tOmit,\n\tMarkPartial,\n\tNormalizedFormat,\n\tDtsOptions,\n\tReportOptions,\n\tPackageJson,\n\tExportsOptions,\n\tLogger,\n\tRegExp,\n\tArray,\n\tNoExternalFn,\n\tRegExp,\n\tArray,\n\tOverwrite\n]];\n\n//#endregion\nexport { TsdownChunks as A, OutExtensionFactory as C, RolldownContext as D, BuildContext as E, CopyOptions as M, CopyOptionsFn as N, TsdownHooks as O, AttwOptions as P, OutExtensionContext as S, PackageType as T, Logger as _, NormalizedFormat as a, ChunkAddonFunction as b, Sourcemap as c, UserConfig as d, UserConfigExport as f, ReportPlugin as g, ReportOptions as h, NoExternalFn as i, CopyEntry as j, ExportsOptions as k, TreeshakingOptions as l, Workspace as m, Format as n, PublintOptions as o, UserConfigFn as p, InlineConfig as r, ResolvedConfig as s, DtsOptions as t, UnusedOptions as u, globalLogger as v, OutExtensionObject as w, ChunkAddonObject as x, ChunkAddon as y };","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885325,"action":"HookRenderChunkStart","plugin_name":"rolldown-plugin-require-cjs","plugin_id":9,"call_id":"585b1502-c684-458a-8fd0-15ae156f3090","content":"import { d as UserConfig, f as UserConfigExport, p as UserConfigFn } from \"./index-!~{008}~.d.mts\";\n\n//#region src/config.d.ts\nvar defineConfig = [0, () => [UserConfig, UserConfig]];\nvar defineConfig = [1, () => [UserConfig, UserConfig]];\nvar defineConfig = [2, () => [UserConfigFn, UserConfigFn]];\nvar defineConfig = [3, () => [UserConfigExport, UserConfigExport]];\n\n//#endregion\nexport { defineConfig as t };","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885325,"action":"HookRenderChunkEnd","plugin_name":"rolldown-plugin-require-cjs","plugin_id":9,"call_id":"fae5ddb7-9ec2-489a-891f-c7c2a9509136","content":null,"build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885325,"action":"HookRenderChunkStart","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"da0e0ce7-315b-4084-be51-eb3990cde41f","content":"import { t as defineConfig } from \"./config-!~{000}~.mjs\";\n\nexport { defineConfig };","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885325,"action":"HookRenderChunkEnd","plugin_name":"rolldown-plugin-require-cjs","plugin_id":9,"call_id":"e5186002-551a-4bb4-bd94-451db53304f7","content":null,"build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885325,"action":"HookRenderChunkStart","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"fca97d7e-b79d-425a-b9c6-c11c6b211908","content":"import { t as defineConfig } from \"./config-!~{000}~.mjs\";\nimport { n as buildSingle, r as shimFile, t as build } from \"./src-!~{002}~.mjs\";\nimport { a as globalLogger } from \"./package-!~{004}~.mjs\";\n\nexport { build, buildSingle, defineConfig, globalLogger, shimFile };","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885325,"action":"HookRenderChunkEnd","plugin_name":"rolldown-plugin-require-cjs","plugin_id":9,"call_id":"15804d42-ad20-4755-86b9-5fba8e514078","content":null,"build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885325,"action":"HookRenderChunkStart","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"c94bdd82-892e-4109-8f4f-c60ca9298aef","content":"import \"./config-!~{000}~.mjs\";\nimport { a as ReportPlugin, i as ShebangPlugin, o as NodeProtocolPlugin, s as ExternalPlugin } from \"./src-!~{002}~.mjs\";\nimport \"./package-!~{004}~.mjs\";\n\nexport { ExternalPlugin, NodeProtocolPlugin, ReportPlugin, ShebangPlugin };","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885326,"action":"HookRenderChunkEnd","plugin_name":"rolldown-plugin-require-cjs","plugin_id":9,"call_id":"763040f2-6886-4e96-85c1-729f05bf170c","content":null,"build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885326,"action":"HookRenderChunkStart","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"05568124-1e2f-4091-81b5-cb26879aea3a","content":"import { d as UserConfig, f as UserConfigExport, p as UserConfigFn } from \"./index-!~{008}~.d.mts\";\nimport { t as defineConfig } from \"./config-!~{00a}~.d.mts\";\n\nexport { UserConfig, UserConfigExport, UserConfigFn, defineConfig };","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885326,"action":"HookRenderChunkEnd","plugin_name":"rolldown-plugin-require-cjs","plugin_id":9,"call_id":"95a5330c-2160-4d2b-aee4-1368417887ae","content":null,"build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885326,"action":"HookRenderChunkStart","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"9322b881-a082-4fe6-8530-39a2dddf526b","content":"import { A as TsdownChunks, C as OutExtensionFactory, D as RolldownContext, E as BuildContext, M as CopyOptions, N as CopyOptionsFn, O as TsdownHooks, P as AttwOptions, S as OutExtensionContext, T as PackageType, _ as Logger, a as NormalizedFormat, b as ChunkAddonFunction, c as Sourcemap, d as UserConfig, f as UserConfigExport, h as ReportOptions, i as NoExternalFn, j as CopyEntry, k as ExportsOptions, l as TreeshakingOptions, m as Workspace, n as Format, o as PublintOptions, p as UserConfigFn, r as InlineConfig, s as ResolvedConfig, t as DtsOptions, u as UnusedOptions, v as globalLogger, w as OutExtensionObject, x as ChunkAddonObject, y as ChunkAddon } from \"./index-!~{008}~.d.mts\";\nimport { t as defineConfig } from \"./config-!~{00a}~.d.mts\";\n\n//#region src/index.d.ts\nvar build = [4, () => [InlineConfig, Promise]];\nvar shimFile = [5, () => []];\nvar buildSingle = [6, () => [\n\tResolvedConfig,\n\tPromise,\n\tPromise,\n\tPromise\n]];\n\n//#endregion\nexport { AttwOptions, BuildContext, ChunkAddon, ChunkAddonFunction, ChunkAddonObject, CopyEntry, CopyOptions, CopyOptionsFn, DtsOptions, ExportsOptions, Format, InlineConfig, Logger, NoExternalFn, NormalizedFormat, OutExtensionContext, OutExtensionFactory, OutExtensionObject, PackageType, PublintOptions, ReportOptions, ResolvedConfig, RolldownContext, Sourcemap, TreeshakingOptions, TsdownChunks, TsdownHooks, UnusedOptions, UserConfig, UserConfigExport, UserConfigFn, Workspace, build, buildSingle, defineConfig, globalLogger, shimFile };","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885326,"action":"HookRenderChunkEnd","plugin_name":"rolldown-plugin-require-cjs","plugin_id":9,"call_id":"f86fb523-8e19-46b4-a238-440c8c5dfdb6","content":null,"build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885326,"action":"HookRenderChunkStart","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"a759ba07-6b52-46a8-ad25-3a40f93da51c","content":"import { _ as Logger, g as ReportPlugin, s as ResolvedConfig } from \"./index-!~{008}~.d.mts\";\nimport { Plugin } from \"rolldown\";\nimport { PackageJson } from \"pkg-types\";\n\n//#region src/features/external.d.ts\nvar ExternalPlugin = [9, () => [\n\tpkg,\n\tnoExternal,\n\tinlineOnly,\n\tskipNodeModulesBundle,\n\tResolvedConfig,\n\tPlugin\n]];\n\n//#endregion\n//#region src/features/shebang.d.ts\nvar ShebangPlugin = [8, () => [Logger, Plugin]];\n\n//#endregion\n//#region src/features/node-protocol.d.ts\nvar NodeProtocolPlugin = [7, () => [Plugin]];\n\n//#endregion\nexport { ExternalPlugin, NodeProtocolPlugin, ReportPlugin, ShebangPlugin };","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885326,"action":"HookRenderChunkEnd","plugin_name":"rolldown-plugin-require-cjs","plugin_id":9,"call_id":"4c6ef3a3-abcc-45cf-bf47-935457b024f4","content":null,"build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885326,"action":"HookRenderChunkStart","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"5881a6aa-c7ca-4be4-986e-5b2405a6a640","content":"export {  };","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885327,"action":"HookRenderChunkEnd","plugin_name":"rolldown-plugin-require-cjs","plugin_id":9,"call_id":"2f49501e-c0fd-4830-9375-b53d25044fab","content":null,"build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885327,"action":"HookRenderChunkStart","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"fd306f24-5eea-4469-8256-c373d23a7678","content":"import { a as globalLogger, t as version } from \"./package-!~{004}~.mjs\";\nimport process from \"node:process\";\nimport { bold, green, underline } from \"ansis\";\nimport { readFile, unlink, writeFile } from \"node:fs/promises\";\nimport { existsSync } from \"node:fs\";\nimport { createInterface } from \"node:readline/promises\";\n\n//#region src/migrate.ts\nasync function migrate({ cwd, dryRun }) {\n\tif (dryRun) globalLogger.info(\"Dry run enabled. No changes were made.\");\n\telse {\n\t\tconst rl = createInterface({\n\t\t\tinput: process.stdin,\n\t\t\toutput: process.stdout\n\t\t});\n\t\tglobalLogger.warn(`\\n\\nBefore proceeding, review the migration guide at ${underline`https://tsdown.dev/guide/migrate-from-tsup`}, as this process will modify your files.\\nUncommitted changes will be lost. Use the ${green`--dry-run`} flag to preview changes without applying them.`);\n\t\tconst input = await rl.question(bold`Continue? (Y/n) `);\n\t\trl.close();\n\t\tif (!(input.toLowerCase() === \"y\" || input === \"\")) {\n\t\t\tglobalLogger.error(\"Migration cancelled.\");\n\t\t\tprocess.exitCode = 1;\n\t\t\treturn;\n\t\t}\n\t}\n\tif (cwd) process.chdir(cwd);\n\tlet migrated = await migratePackageJson(dryRun);\n\tif (await migrateTsupConfig(dryRun)) migrated = true;\n\tif (migrated) globalLogger.success(\"Migration completed. Remember to run install command with your package manager.\");\n\telse {\n\t\tglobalLogger.error(\"No migration performed.\");\n\t\tprocess.exitCode = 1;\n\t}\n}\nconst DEP_FIELDS = {\n\tdependencies: `^${version}`,\n\tdevDependencies: `^${version}`,\n\tpeerDependencies: \"*\"\n};\nasync function migratePackageJson(dryRun) {\n\tif (!existsSync(\"package.json\")) {\n\t\tglobalLogger.error(\"No package.json found\");\n\t\treturn false;\n\t}\n\tconst pkgRaw = await readFile(\"package.json\", \"utf8\");\n\tlet pkg = JSON.parse(pkgRaw);\n\tlet found = false;\n\tfor (const [field, semver] of Object.entries(DEP_FIELDS)) if (pkg[field]?.tsup) {\n\t\tglobalLogger.info(`Migrating \\`${field}\\` to tsdown.`);\n\t\tfound = true;\n\t\tpkg[field] = renameKey(pkg[field], \"tsup\", \"tsdown\", semver);\n\t}\n\tif (pkg.scripts) {\n\t\tfor (const key of Object.keys(pkg.scripts)) if (pkg.scripts[key].includes(\"tsup\")) {\n\t\t\tglobalLogger.info(`Migrating \\`${key}\\` script to tsdown`);\n\t\t\tfound = true;\n\t\t\tpkg.scripts[key] = pkg.scripts[key].replaceAll(/tsup(?:-node)?/g, \"tsdown\");\n\t\t}\n\t}\n\tif (pkg.tsup) {\n\t\tglobalLogger.info(\"Migrating `tsup` field in package.json to `tsdown`.\");\n\t\tfound = true;\n\t\tpkg = renameKey(pkg, \"tsup\", \"tsdown\");\n\t}\n\tif (!found) {\n\t\tglobalLogger.warn(\"No tsup-related fields found in package.json\");\n\t\treturn false;\n\t}\n\tconst pkgStr = `${JSON.stringify(pkg, null, pkgRaw.includes(\"\t\") ? \"\t\" : 2)}\\n`;\n\tif (dryRun) {\n\t\tconst { createPatch } = await import(\"diff\");\n\t\tglobalLogger.info(\"[dry-run] package.json:\");\n\t\tconsole.info(createPatch(\"package.json\", pkgRaw, pkgStr));\n\t} else {\n\t\tawait writeFile(\"package.json\", pkgStr);\n\t\tglobalLogger.success(\"Migrated `package.json`\");\n\t}\n\treturn true;\n}\nconst TSUP_FILES = [\n\t\"tsup.config.ts\",\n\t\"tsup.config.cts\",\n\t\"tsup.config.mts\",\n\t\"tsup.config.js\",\n\t\"tsup.config.cjs\",\n\t\"tsup.config.mjs\",\n\t\"tsup.config.json\"\n];\nasync function migrateTsupConfig(dryRun) {\n\tlet found = false;\n\tfor (const file of TSUP_FILES) {\n\t\tif (!existsSync(file)) continue;\n\t\tglobalLogger.info(`Found \\`${file}\\``);\n\t\tfound = true;\n\t\tconst tsupConfigRaw = await readFile(file, \"utf8\");\n\t\tconst tsupConfig = tsupConfigRaw.replaceAll(/\\btsup\\b/g, \"tsdown\").replaceAll(/\\bTSUP\\b/g, \"TSDOWN\");\n\t\tconst renamed = file.replaceAll(\"tsup\", \"tsdown\");\n\t\tif (dryRun) {\n\t\t\tconst { createTwoFilesPatch } = await import(\"diff\");\n\t\t\tglobalLogger.info(`[dry-run] ${file} -> ${renamed}:`);\n\t\t\tconsole.info(createTwoFilesPatch(file, renamed, tsupConfigRaw, tsupConfig));\n\t\t} else {\n\t\t\tawait writeFile(renamed, tsupConfig, \"utf8\");\n\t\t\tawait unlink(file);\n\t\t\tglobalLogger.success(`Migrated \\`${file}\\` to \\`${renamed}\\``);\n\t\t}\n\t}\n\tif (!found) globalLogger.warn(\"No tsup config found\");\n\treturn found;\n}\nfunction renameKey(obj, oldKey, newKey, newValue) {\n\tconst newObj = {};\n\tfor (const key of Object.keys(obj)) if (key === oldKey) newObj[newKey] = newValue || obj[oldKey];\n\telse newObj[key] = obj[key];\n\treturn newObj;\n}\n\n//#endregion\nexport { migrate };","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885328,"action":"HookRenderChunkEnd","plugin_name":"rolldown-plugin-require-cjs","plugin_id":9,"call_id":"87038437-93f5-48f0-95cb-f77022580568","content":null,"build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885328,"action":"HookRenderChunkStart","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"9c2f462b-50e0-494f-adde-c6e03605d194","content":"//#region src/config.ts\nfunction defineConfig(options) {\n\treturn options;\n}\n\n//#endregion\nexport { defineConfig as t };","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885328,"action":"HookRenderChunkEnd","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"da0e0ce7-315b-4084-be51-eb3990cde41f","content":null,"build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885328,"action":"HookRenderChunkEnd","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"fca97d7e-b79d-425a-b9c6-c11c6b211908","content":null,"build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885328,"action":"HookRenderChunkEnd","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"c94bdd82-892e-4109-8f4f-c60ca9298aef","content":null,"build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885328,"action":"HookRenderChunkEnd","plugin_name":"rolldown-plugin-require-cjs","plugin_id":9,"call_id":"962e964b-af05-49b5-b7a9-50087c34963d","content":"#!/usr/bin/env node\nimport { createRequire as __cjs_createRequire } from \"node:module\";\nconst __cjs_require = __cjs_createRequire(import.meta.url);\nimport { a as globalLogger, d as resolveComma, m as toArray, t as version } from \"./package-!~{004}~.mjs\";\nimport module from \"node:module\";\nimport process from \"node:process\";\nimport { dim } from \"ansis\";\nimport { VERSION } from \"rolldown\";\nconst Debug = __cjs_require(\"debug\");\nimport { cac } from \"cac\";\n\n//#region src/cli.ts\nconst cli = cac(\"tsdown\");\ncli.help().version(version);\ncli.command(\"[...files]\", \"Bundle files\", {\n\tignoreOptionDefaultValue: true,\n\tallowUnknownOptions: true\n}).option(\"-c, --config <filename>\", \"Use a custom config file\").option(\"--config-loader <loader>\", \"Config loader to use: auto, native, unconfig\", { default: \"auto\" }).option(\"--no-config\", \"Disable config file\").option(\"-f, --format <format>\", \"Bundle format: esm, cjs, iife, umd\", { default: \"esm\" }).option(\"--clean\", \"Clean output directory, --no-clean to disable\").option(\"--external <module>\", \"Mark dependencies as external\").option(\"--minify\", \"Minify output\").option(\"--debug [feat]\", \"Show debug logs\").option(\"--target <target>\", \"Bundle target, e.g \\\"es2015\\\", \\\"esnext\\\"\").option(\"-l, --logLevel <level>\", \"Set log level: info, warn, error, silent\").option(\"--fail-on-warn\", \"Fail on warnings\", { default: true }).option(\"-d, --out-dir <dir>\", \"Output directory\", { default: \"dist\" }).option(\"--treeshake\", \"Tree-shake bundle\", { default: true }).option(\"--sourcemap\", \"Generate source map\", { default: false }).option(\"--shims\", \"Enable cjs and esm shims \", { default: false }).option(\"--platform <platform>\", \"Target platform\", { default: \"node\" }).option(\"--dts\", \"Generate dts files\").option(\"--publint\", \"Enable publint\", { default: false }).option(\"--attw\", \"Enable Are the types wrong integration\", { default: false }).option(\"--unused\", \"Enable unused dependencies check\", { default: false }).option(\"-w, --watch [path]\", \"Watch mode\").option(\"--ignore-watch <path>\", \"Ignore custom paths in watch mode\").option(\"--from-vite [vitest]\", \"Reuse config from Vite or Vitest\").option(\"--report\", \"Size report\", { default: true }).option(\"--env.* <value>\", \"Define compile-time env variables\").option(\"--on-success <command>\", \"Command to run on success\").option(\"--copy <dir>\", \"Copy files to output dir\").option(\"--public-dir <dir>\", \"Alias for --copy, deprecated\").option(\"--tsconfig <tsconfig>\", \"Set tsconfig path\").option(\"--unbundle\", \"Unbundle mode\").option(\"-W, --workspace [dir]\", \"Enable workspace mode\").option(\"-F, --filter <pattern>\", \"Filter workspace packages, e.g. /regex/ or substring\").option(\"--exports\", \"Generate export-related metadata for package.json (experimental)\").action(async (input, flags) => {\n\tglobalLogger.level = flags.logLevel || (flags.silent ? \"error\" : \"info\");\n\tglobalLogger.info(`tsdown ${dim`v${version}`} powered by rolldown ${dim`v${VERSION}`}`);\n\tconst { build: build$1 } = await import(\"./index.mjs\");\n\tif (input.length > 0) flags.entry = input;\n\tawait build$1(flags);\n});\ncli.command(\"migrate\", \"Migrate from tsup to tsdown\").option(\"-c, --cwd <dir>\", \"Working directory\").option(\"-d, --dry-run\", \"Dry run\").action(async (args) => {\n\tconst { migrate } = await import(\"./migrate-!~{006}~.mjs\");\n\tawait migrate(args);\n});\nasync function runCLI() {\n\tcli.parse(process.argv, { run: false });\n\tif (cli.options.debug) {\n\t\tlet namespace;\n\t\tif (cli.options.debug === true) namespace = \"tsdown:*\";\n\t\telse namespace = resolveComma(toArray(cli.options.debug)).map((v) => `tsdown:${v}`).join(\",\");\n\t\tconst enabled = Debug.disable();\n\t\tif (enabled) namespace += `,${enabled}`;\n\t\tDebug.enable(namespace);\n\t\tDebug(\"tsdown:debug\")(\"Debugging enabled\", namespace);\n\t}\n\ttry {\n\t\tawait cli.runMatchedCommand();\n\t} catch (error) {\n\t\tglobalLogger.error(error);\n\t\tprocess.exit(1);\n\t}\n}\n\n//#endregion\n//#region src/run.ts\ntry {\n\tmodule.enableCompileCache?.();\n} catch {}\nrunCLI();\n\n//#endregion\nexport {  };","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885329,"action":"HookRenderChunkStart","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"99990224-c22c-4f16-a9cd-e80a1cf1d89a","content":"#!/usr/bin/env node\nimport { createRequire as __cjs_createRequire } from \"node:module\";\nconst __cjs_require = __cjs_createRequire(import.meta.url);\nimport { a as globalLogger, d as resolveComma, m as toArray, t as version } from \"./package-!~{004}~.mjs\";\nimport module from \"node:module\";\nimport process from \"node:process\";\nimport { dim } from \"ansis\";\nimport { VERSION } from \"rolldown\";\nconst Debug = __cjs_require(\"debug\");\nimport { cac } from \"cac\";\n\n//#region src/cli.ts\nconst cli = cac(\"tsdown\");\ncli.help().version(version);\ncli.command(\"[...files]\", \"Bundle files\", {\n\tignoreOptionDefaultValue: true,\n\tallowUnknownOptions: true\n}).option(\"-c, --config <filename>\", \"Use a custom config file\").option(\"--config-loader <loader>\", \"Config loader to use: auto, native, unconfig\", { default: \"auto\" }).option(\"--no-config\", \"Disable config file\").option(\"-f, --format <format>\", \"Bundle format: esm, cjs, iife, umd\", { default: \"esm\" }).option(\"--clean\", \"Clean output directory, --no-clean to disable\").option(\"--external <module>\", \"Mark dependencies as external\").option(\"--minify\", \"Minify output\").option(\"--debug [feat]\", \"Show debug logs\").option(\"--target <target>\", \"Bundle target, e.g \\\"es2015\\\", \\\"esnext\\\"\").option(\"-l, --logLevel <level>\", \"Set log level: info, warn, error, silent\").option(\"--fail-on-warn\", \"Fail on warnings\", { default: true }).option(\"-d, --out-dir <dir>\", \"Output directory\", { default: \"dist\" }).option(\"--treeshake\", \"Tree-shake bundle\", { default: true }).option(\"--sourcemap\", \"Generate source map\", { default: false }).option(\"--shims\", \"Enable cjs and esm shims \", { default: false }).option(\"--platform <platform>\", \"Target platform\", { default: \"node\" }).option(\"--dts\", \"Generate dts files\").option(\"--publint\", \"Enable publint\", { default: false }).option(\"--attw\", \"Enable Are the types wrong integration\", { default: false }).option(\"--unused\", \"Enable unused dependencies check\", { default: false }).option(\"-w, --watch [path]\", \"Watch mode\").option(\"--ignore-watch <path>\", \"Ignore custom paths in watch mode\").option(\"--from-vite [vitest]\", \"Reuse config from Vite or Vitest\").option(\"--report\", \"Size report\", { default: true }).option(\"--env.* <value>\", \"Define compile-time env variables\").option(\"--on-success <command>\", \"Command to run on success\").option(\"--copy <dir>\", \"Copy files to output dir\").option(\"--public-dir <dir>\", \"Alias for --copy, deprecated\").option(\"--tsconfig <tsconfig>\", \"Set tsconfig path\").option(\"--unbundle\", \"Unbundle mode\").option(\"-W, --workspace [dir]\", \"Enable workspace mode\").option(\"-F, --filter <pattern>\", \"Filter workspace packages, e.g. /regex/ or substring\").option(\"--exports\", \"Generate export-related metadata for package.json (experimental)\").action(async (input, flags) => {\n\tglobalLogger.level = flags.logLevel || (flags.silent ? \"error\" : \"info\");\n\tglobalLogger.info(`tsdown ${dim`v${version}`} powered by rolldown ${dim`v${VERSION}`}`);\n\tconst { build: build$1 } = await import(\"./index.mjs\");\n\tif (input.length > 0) flags.entry = input;\n\tawait build$1(flags);\n});\ncli.command(\"migrate\", \"Migrate from tsup to tsdown\").option(\"-c, --cwd <dir>\", \"Working directory\").option(\"-d, --dry-run\", \"Dry run\").action(async (args) => {\n\tconst { migrate } = await import(\"./migrate-!~{006}~.mjs\");\n\tawait migrate(args);\n});\nasync function runCLI() {\n\tcli.parse(process.argv, { run: false });\n\tif (cli.options.debug) {\n\t\tlet namespace;\n\t\tif (cli.options.debug === true) namespace = \"tsdown:*\";\n\t\telse namespace = resolveComma(toArray(cli.options.debug)).map((v) => `tsdown:${v}`).join(\",\");\n\t\tconst enabled = Debug.disable();\n\t\tif (enabled) namespace += `,${enabled}`;\n\t\tDebug.enable(namespace);\n\t\tDebug(\"tsdown:debug\")(\"Debugging enabled\", namespace);\n\t}\n\ttry {\n\t\tawait cli.runMatchedCommand();\n\t} catch (error) {\n\t\tglobalLogger.error(error);\n\t\tprocess.exit(1);\n\t}\n}\n\n//#endregion\n//#region src/run.ts\ntry {\n\tmodule.enableCompileCache?.();\n} catch {}\nrunCLI();\n\n//#endregion\nexport {  };","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885330,"action":"HookRenderChunkEnd","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"05568124-1e2f-4091-81b5-cb26879aea3a","content":"import { d as UserConfig, f as UserConfigExport, p as UserConfigFn } from \"./index-!~{008}~.mjs\";\nimport { t as defineConfig } from \"./config-!~{00a}~.mjs\";\nexport { UserConfig, UserConfigExport, UserConfigFn, defineConfig };","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885330,"action":"HookRenderChunkEnd","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"9322b881-a082-4fe6-8530-39a2dddf526b","content":"import { A as TsdownChunks, C as OutExtensionFactory, D as RolldownContext, E as BuildContext, M as CopyOptions, N as CopyOptionsFn, O as TsdownHooks, P as AttwOptions, S as OutExtensionContext, T as PackageType, _ as Logger, a as NormalizedFormat, b as ChunkAddonFunction, c as Sourcemap, d as UserConfig, f as UserConfigExport, h as ReportOptions, i as NoExternalFn, j as CopyEntry, k as ExportsOptions, l as TreeshakingOptions, m as Workspace, n as Format, o as PublintOptions, p as UserConfigFn, r as InlineConfig, s as ResolvedConfig, t as DtsOptions, u as UnusedOptions, v as globalLogger, w as OutExtensionObject, x as ChunkAddonObject, y as ChunkAddon } from \"./index-!~{008}~.mjs\";\nimport { t as defineConfig } from \"./config-!~{00a}~.mjs\";\n\n//#region src/index.d.ts\n\n/**\n* Build with tsdown.\n*/\ndeclare function build(userOptions?: InlineConfig): Promise<void>;\n/** @internal */\ndeclare const shimFile: string;\n/**\n* Build a single configuration, without watch and shortcuts features.\n*\n* Internal API, not for public use\n*\n* @private\n* @param config Resolved options\n*/\ndeclare function buildSingle(config: ResolvedConfig, clean: () => Promise<void>): Promise<(() => Promise<void>) | undefined>;\n//#endregion\nexport { AttwOptions, BuildContext, ChunkAddon, ChunkAddonFunction, ChunkAddonObject, CopyEntry, CopyOptions, CopyOptionsFn, DtsOptions, ExportsOptions, Format, InlineConfig, type Logger, NoExternalFn, NormalizedFormat, OutExtensionContext, OutExtensionFactory, OutExtensionObject, PackageType, PublintOptions, ReportOptions, ResolvedConfig, RolldownContext, Sourcemap, TreeshakingOptions, TsdownChunks, TsdownHooks, UnusedOptions, UserConfig, UserConfigExport, UserConfigFn, Workspace, build, buildSingle, defineConfig, globalLogger, shimFile };","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885330,"action":"HookRenderChunkEnd","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"a759ba07-6b52-46a8-ad25-3a40f93da51c","content":"import { _ as Logger, g as ReportPlugin, s as ResolvedConfig } from \"./index-!~{008}~.mjs\";\nimport { Plugin } from \"rolldown\";\nimport { PackageJson } from \"pkg-types\";\n\n//#region src/features/external.d.ts\ndeclare function ExternalPlugin({\n  pkg,\n  noExternal,\n  inlineOnly,\n  skipNodeModulesBundle\n}: ResolvedConfig): Plugin;\n//#endregion\n//#region src/features/shebang.d.ts\ndeclare function ShebangPlugin(logger: Logger, cwd: string, name?: string, isMultiFormat?: boolean): Plugin;\n//#endregion\n//#region src/features/node-protocol.d.ts\n/**\n* The `node:` protocol was added in Node.js v14.18.0.\n* @see https://nodejs.org/api/esm.html#node-imports\n*/\ndeclare function NodeProtocolPlugin(nodeProtocolOption: \"strip\" | true): Plugin;\n//#endregion\nexport { ExternalPlugin, NodeProtocolPlugin, ReportPlugin, ShebangPlugin };","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885331,"action":"HookRenderChunkEnd","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"5881a6aa-c7ca-4be4-986e-5b2405a6a640","content":"export { };","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885331,"action":"HookRenderChunkEnd","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"fd306f24-5eea-4469-8256-c373d23a7678","content":null,"build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885331,"action":"HookRenderChunkEnd","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"9c2f462b-50e0-494f-adde-c6e03605d194","content":null,"build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885336,"action":"HookRenderChunkEnd","plugin_name":"rolldown-plugin-require-cjs","plugin_id":9,"call_id":"109c3b66-0fb7-4457-9986-89fa1bf8b639","content":null,"build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885336,"action":"HookRenderChunkStart","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"331da865-7e06-49a0-9adc-c66f05ab9efd","content":"import { bgRed, bgYellow, blue, green, rgb, yellow } from \"ansis\";\n\n//#region src/utils/general.ts\nfunction toArray(val, defaultValue) {\n\tif (Array.isArray(val)) return val;\n\telse if (val == null) {\n\t\tif (defaultValue) return [defaultValue];\n\t\treturn [];\n\t} else return [val];\n}\nfunction resolveComma(arr) {\n\treturn arr.flatMap((format$1) => format$1.split(\",\"));\n}\nfunction resolveRegex(str) {\n\tif (typeof str === \"string\" && str.length > 2 && str[0] === \"/\" && str.at(-1) === \"/\") return new RegExp(str.slice(1, -1));\n\treturn str;\n}\nfunction debounce(fn, wait) {\n\tlet timeout;\n\treturn function(...args) {\n\t\tif (timeout) clearTimeout(timeout);\n\t\ttimeout = setTimeout(() => {\n\t\t\ttimeout = void 0;\n\t\t\tfn.apply(this, args);\n\t\t}, wait);\n\t};\n}\nfunction slash(string) {\n\treturn string.replaceAll(\"\\\\\", \"/\");\n}\nconst noop = (v) => v;\nfunction matchPattern(id, patterns) {\n\treturn patterns.some((pattern) => {\n\t\tif (pattern instanceof RegExp) {\n\t\t\tpattern.lastIndex = 0;\n\t\t\treturn pattern.test(id);\n\t\t}\n\t\treturn id === pattern;\n\t});\n}\n\n//#endregion\n//#region src/utils/logger.ts\nconst LogLevels = {\n\tsilent: 0,\n\terror: 1,\n\twarn: 2,\n\tinfo: 3\n};\nfunction format(msgs) {\n\treturn msgs.filter((arg) => arg !== void 0 && arg !== false).join(\" \");\n}\nconst warnedMessages = /* @__PURE__ */ new Set();\nfunction createLogger(level = \"info\", { customLogger, console = globalThis.console, failOnWarn = false } = {}) {\n\tif (customLogger) return customLogger;\n\tfunction output(type, msg) {\n\t\tif (LogLevels[logger.level] < LogLevels[type]) return;\n\t\tconsole[type === \"info\" ? \"log\" : type](msg);\n\t}\n\tconst logger = {\n\t\tlevel,\n\t\tinfo(...msgs) {\n\t\t\toutput(\"info\", `${blue`ℹ`} ${format(msgs)}`);\n\t\t},\n\t\twarn(...msgs) {\n\t\t\tconst message = format(msgs);\n\t\t\tif (failOnWarn) throw new Error(message);\n\t\t\twarnedMessages.add(message);\n\t\t\toutput(\"warn\", `\\n${bgYellow` WARN `} ${message}\\n`);\n\t\t},\n\t\twarnOnce(...msgs) {\n\t\t\tconst message = format(msgs);\n\t\t\tif (warnedMessages.has(message)) return;\n\t\t\tif (failOnWarn) throw new Error(message);\n\t\t\twarnedMessages.add(message);\n\t\t\toutput(\"warn\", `\\n${bgYellow` WARN `} ${message}\\n`);\n\t\t},\n\t\terror(...msgs) {\n\t\t\toutput(\"error\", `\\n${bgRed` ERROR `} ${format(msgs)}\\n`);\n\t\t},\n\t\tsuccess(...msgs) {\n\t\t\toutput(\"info\", `${green`✔`} ${format(msgs)}`);\n\t\t}\n\t};\n\treturn logger;\n}\nconst globalLogger = createLogger();\nfunction prettyName(name) {\n\tif (!name) return void 0;\n\treturn generateColor(name)(`[${name}]`);\n}\nfunction prettyFormat(format$1) {\n\tconst formatColor = format$1 === \"es\" ? blue : format$1 === \"cjs\" ? yellow : noop;\n\tlet formatText;\n\tswitch (format$1) {\n\t\tcase \"es\":\n\t\t\tformatText = \"ESM\";\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tformatText = format$1.toUpperCase();\n\t\t\tbreak;\n\t}\n\treturn formatColor(`[${formatText}]`);\n}\nconst colors = /* @__PURE__ */ new Map();\nfunction generateColor(name = \"default\") {\n\tif (colors.has(name)) return colors.get(name);\n\tlet color;\n\tif (name === \"default\") color = blue;\n\telse {\n\t\tlet hash = 0;\n\t\tfor (let i = 0; i < name.length; i++) hash = name.charCodeAt(i) + ((hash << 5) - hash);\n\t\tcolor = rgb(...hslToRgb(hash % 360, 35, 55));\n\t}\n\tcolors.set(name, color);\n\treturn color;\n}\nfunction hslToRgb(h, s, l) {\n\th = h % 360;\n\th /= 360;\n\ts /= 100;\n\tl /= 100;\n\tlet r, g, b;\n\tif (s === 0) r = g = b = l;\n\telse {\n\t\tconst q = l < .5 ? l * (1 + s) : l + s - l * s;\n\t\tconst p = 2 * l - q;\n\t\tr = hue2rgb(p, q, h + 1 / 3);\n\t\tg = hue2rgb(p, q, h);\n\t\tb = hue2rgb(p, q, h - 1 / 3);\n\t}\n\treturn [\n\t\tMath.max(0, Math.round(r * 255)),\n\t\tMath.max(0, Math.round(g * 255)),\n\t\tMath.max(0, Math.round(b * 255))\n\t];\n}\nfunction hue2rgb(p, q, t) {\n\tif (t < 0) t += 1;\n\tif (t > 1) t -= 1;\n\tif (t < 1 / 6) return p + (q - p) * 6 * t;\n\tif (t < 1 / 2) return q;\n\tif (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n\treturn p;\n}\n\n//#endregion\n//#region package.json\nvar version = \"0.15.12\";\n\n//#endregion\nexport { globalLogger as a, debounce as c, resolveComma as d, resolveRegex as f, generateColor as i, matchPattern as l, toArray as m, LogLevels as n, prettyFormat as o, slash as p, createLogger as r, prettyName as s, version as t, noop as u };","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885337,"action":"HookRenderChunkEnd","plugin_name":"rolldown-plugin-require-cjs","plugin_id":9,"call_id":"bc049c97-0579-426c-b7f1-358e6df0ed61","content":null,"build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885337,"action":"HookRenderChunkStart","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"6980bf16-c22e-4df0-a5ee-3b0862999639","content":"import \"ansis\";\nimport { BuildOptions, ExternalOption, InputOption, InputOptions, InternalModuleFormat, MinifyOptions, ModuleFormat, ModuleTypes, OutputAsset, OutputChunk, OutputOptions, Plugin, TreeshakingOptions } from \"rolldown\";\nimport { Hookable } from \"hookable\";\nimport { CheckPackageOptions } from \"@arethetypeswrong/core\";\nimport { Options as PublintOptions } from \"publint\";\nimport { Options as DtsOptions } from \"rolldown-plugin-dts\";\nimport { Options as UnusedOptions } from \"unplugin-unused\";\nimport { PackageJson } from \"pkg-types\";\n\n//#region src/utils/types.d.ts\nvar Overwrite = [35, (T, U) => [\n\tT,\n\tU,\n\tOmit,\n\tU\n]];\nvar Awaitable = [36, (T) => [\n\tT,\n\tT,\n\tPromise\n]];\nvar MarkPartial = [37, (T, K) => [\n\tT,\n\tT,\n\tRequired,\n\tK,\n\tOmit,\n\tT,\n\tK,\n\tPick,\n\tPartial\n]];\nvar Arrayable = [38, (T) => [T, T]];\n\n//#endregion\n//#region src/features/attw.d.ts\nvar AttwOptions = [47, () => [CheckPackageOptions]];\n\n//#endregion\n//#region src/features/copy.d.ts\nvar CopyEntry = [43, () => []];\nvar CopyOptions = [44, () => [CopyEntry, Arrayable]];\nvar CopyOptionsFn = [45, () => [\n\tResolvedConfig,\n\tCopyOptions,\n\tAwaitable\n]];\n\n//#endregion\n//#region src/features/exports.d.ts\nvar TsdownChunks = [49, () => [\n\tNormalizedFormat,\n\tOutputChunk,\n\tOutputAsset,\n\tArray,\n\tRecord,\n\tPartial\n]];\nvar ExportsOptions = [50, () => [\n\tRecord,\n\tPackageJson,\n\tTsdownChunks,\n\tRecord,\n\tAwaitable\n]];\n\n//#endregion\n//#region src/features/hooks.d.ts\nvar BuildContext = [63, () => [\n\tResolvedConfig,\n\tTsdownHooks,\n\tHookable\n]];\nvar RolldownContext = [64, () => [BuildOptions]];\nvar TsdownHooks = [65, () => [\n\tBuildContext,\n\tPromise,\n\tBuildContext,\n\tRolldownContext,\n\tPromise,\n\tBuildContext,\n\tPromise\n]];\n\n//#endregion\n//#region src/utils/package.d.ts\nvar PackageType = [40, () => []];\n\n//#endregion\n//#region src/features/output.d.ts\nvar OutExtensionContext = [54, () => [\n\tInputOptions,\n\tNormalizedFormat,\n\tPackageType\n]];\nvar OutExtensionObject = [55, () => []];\nvar OutExtensionFactory = [56, () => [OutExtensionContext, OutExtensionObject]];\nvar ChunkAddonObject = [59, () => []];\nvar ChunkAddonFunction = [60, () => [Format, ChunkAddonObject]];\nvar ChunkAddon = [61, () => [ChunkAddonObject, ChunkAddonFunction]];\n\n//#endregion\n//#region src/utils/logger.d.ts\nvar LogType = [11, () => []];\nvar LogLevel = [12, () => [LogType]];\nvar Logger = [15, () => [LogLevel]];\nvar globalLogger = [17, () => [Logger]];\n\n//#endregion\n//#region src/features/report.d.ts\nvar ReportOptions = [21, () => []];\nvar ReportPlugin = [22, () => [\n\tReportOptions,\n\tLogger,\n\tPlugin\n]];\n\n//#endregion\n//#region src/config/types.d.ts\nvar Sourcemap = [23, () => []];\nvar Format = [24, () => [ModuleFormat]];\nvar NormalizedFormat = [25, () => [InternalModuleFormat]];\nvar Workspace = [26, () => [Arrayable, Arrayable]];\nvar NoExternalFn = [27, () => []];\nvar UserConfig = [28, () => [\n\tInputOption,\n\tExternalOption,\n\tRegExp,\n\tArrayable,\n\tNoExternalFn,\n\tRegExp,\n\tArrayable,\n\tRecord,\n\tRecord,\n\tRecord,\n\tTreeshakingOptions,\n\tModuleTypes,\n\tInputOptions,\n\tInputOptions,\n\tInputOptions,\n\tNormalizedFormat,\n\tInputOptions,\n\tAwaitable,\n\tFormat,\n\tFormat,\n\tSourcemap,\n\tMinifyOptions,\n\tChunkAddon,\n\tChunkAddon,\n\tOutExtensionFactory,\n\tOutputOptions,\n\tOutputOptions,\n\tNormalizedFormat,\n\tOutputOptions,\n\tAwaitable,\n\tLogLevel,\n\tLogger,\n\tArrayable,\n\tRegExp,\n\tArrayable,\n\tResolvedConfig,\n\tAbortSignal,\n\tPromise,\n\tDtsOptions,\n\tUnusedOptions,\n\tPublintOptions,\n\tAttwOptions,\n\tReportOptions,\n\tExportsOptions,\n\tCopyOptions,\n\tCopyOptionsFn,\n\tCopyOptions,\n\tCopyOptionsFn,\n\tTsdownHooks,\n\tPartial,\n\tTsdownHooks,\n\tHookable,\n\tAwaitable,\n\tWorkspace,\n\tArrayable\n]];\nvar InlineConfig = [29, () => [RegExp, UserConfig]];\nvar UserConfigFn = [30, () => [\n\tInlineConfig,\n\tUserConfig,\n\tArrayable,\n\tAwaitable\n]];\nvar UserConfigExport = [31, () => [\n\tUserConfig,\n\tArrayable,\n\tUserConfigFn,\n\tAwaitable\n]];\nvar ResolvedConfig = [32, () => [\n\tUserConfig,\n\tOmit,\n\tMarkPartial,\n\tNormalizedFormat,\n\tDtsOptions,\n\tReportOptions,\n\tPackageJson,\n\tExportsOptions,\n\tLogger,\n\tRegExp,\n\tArray,\n\tNoExternalFn,\n\tRegExp,\n\tArray,\n\tOverwrite\n]];\n\n//#endregion\nexport { TsdownChunks as A, OutExtensionFactory as C, RolldownContext as D, BuildContext as E, CopyOptions as M, CopyOptionsFn as N, TsdownHooks as O, AttwOptions as P, OutExtensionContext as S, PackageType as T, Logger as _, NormalizedFormat as a, ChunkAddonFunction as b, Sourcemap as c, UserConfig as d, UserConfigExport as f, ReportPlugin as g, ReportOptions as h, NoExternalFn as i, CopyEntry as j, ExportsOptions as k, TreeshakingOptions as l, Workspace as m, Format as n, PublintOptions as o, UserConfigFn as p, InlineConfig as r, ResolvedConfig as s, DtsOptions as t, UnusedOptions as u, globalLogger as v, OutExtensionObject as w, ChunkAddonObject as x, ChunkAddon as y };","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885338,"action":"HookRenderChunkEnd","plugin_name":"rolldown-plugin-require-cjs","plugin_id":9,"call_id":"585b1502-c684-458a-8fd0-15ae156f3090","content":null,"build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885338,"action":"HookRenderChunkStart","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"fac5ec36-9745-4ef7-bcc1-b7b4b9721ad2","content":"import { d as UserConfig, f as UserConfigExport, p as UserConfigFn } from \"./index-!~{008}~.d.mts\";\n\n//#region src/config.d.ts\nvar defineConfig = [0, () => [UserConfig, UserConfig]];\nvar defineConfig = [1, () => [UserConfig, UserConfig]];\nvar defineConfig = [2, () => [UserConfigFn, UserConfigFn]];\nvar defineConfig = [3, () => [UserConfigExport, UserConfigExport]];\n\n//#endregion\nexport { defineConfig as t };","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885338,"action":"HookRenderChunkEnd","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"99990224-c22c-4f16-a9cd-e80a1cf1d89a","content":null,"build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885338,"action":"HookRenderChunkEnd","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"331da865-7e06-49a0-9adc-c66f05ab9efd","content":null,"build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"action":"StringRef","id":"1db4356cf924f3495a0b5f052b25bf1eabeca1baaae31552a60c10e9ab7bc852","content":"import \"ansis\";\nimport { BuildOptions, ExternalOption, InputOption, InputOptions, InternalModuleFormat, MinifyOptions, ModuleFormat, ModuleTypes, OutputAsset, OutputChunk, OutputOptions, Plugin, TreeshakingOptions } from \"rolldown\";\nimport { Hookable } from \"hookable\";\nimport { CheckPackageOptions } from \"@arethetypeswrong/core\";\nimport { Options as PublintOptions } from \"publint\";\nimport { Options as DtsOptions } from \"rolldown-plugin-dts\";\nimport { Options as UnusedOptions } from \"unplugin-unused\";\nimport { PackageJson } from \"pkg-types\";\n\n//#region src/utils/types.d.ts\ntype Overwrite<T, U> = Omit<T, keyof U> & U;\ntype Awaitable<T> = T | Promise<T>;\ntype MarkPartial<T, K extends keyof T> = Omit<Required<T>, K> & Partial<Pick<T, K>>;\ntype Arrayable<T> = T | T[];\n//#endregion\n//#region src/features/attw.d.ts\ninterface AttwOptions extends CheckPackageOptions {\n  /**\n  * Profiles select a set of resolution modes to require/ignore. All are evaluated but failures outside\n  * of those required are ignored.\n  *\n  * The available profiles are:\n  * - `strict`: requires all resolutions\n  * - `node16`: ignores node10 resolution failures\n  * - `esmOnly`: ignores CJS resolution failures\n  *\n  * @default 'strict'\n  */\n  profile?: \"strict\" | \"node16\" | \"esmOnly\";\n  /**\n  * The level of the check.\n  *\n  * The available levels are:\n  * - `error`: fails the build\n  * - `warn`: warns the build\n  *\n  * @default 'warn'\n  */\n  level?: \"error\" | \"warn\";\n}\n//#endregion\n//#region src/features/copy.d.ts\ninterface CopyEntry {\n  from: string;\n  to: string;\n}\ntype CopyOptions = Arrayable<string | CopyEntry>;\ntype CopyOptionsFn = (options: ResolvedConfig) => Awaitable<CopyOptions>;\n//#endregion\n//#region src/features/exports.d.ts\ntype TsdownChunks = Partial<Record<NormalizedFormat, Array<OutputChunk | OutputAsset>>>;\ninterface ExportsOptions {\n  /**\n  * Generate exports that link to source code during development.\n  * - string: add as a custom condition.\n  * - true: all conditions point to source files, and add dist exports to `publishConfig`.\n  */\n  devExports?: boolean | string;\n  /**\n  * Exports for all files.\n  */\n  all?: boolean;\n  customExports?: (exports: Record<string, any>, context: {\n    pkg: PackageJson;\n    chunks: TsdownChunks;\n    outDir: string;\n    isPublish: boolean;\n  }) => Awaitable<Record<string, any>>;\n}\n//#endregion\n//#region src/features/hooks.d.ts\ninterface BuildContext {\n  options: ResolvedConfig;\n  hooks: Hookable<TsdownHooks>;\n}\ninterface RolldownContext {\n  buildOptions: BuildOptions;\n}\n/**\n* Hooks for tsdown.\n*/\ninterface TsdownHooks {\n  /**\n  * Invoked before each tsdown build starts.\n  * Use this hook to perform setup or preparation tasks.\n  */\n  \"build:prepare\": (ctx: BuildContext) => void | Promise<void>;\n  /**\n  * Invoked before each Rolldown build.\n  * For dual-format builds, this hook is called for each format.\n  * Useful for configuring or modifying the build context before bundling.\n  */\n  \"build:before\": (ctx: BuildContext & RolldownContext) => void | Promise<void>;\n  /**\n  * Invoked after each tsdown build completes.\n  * Use this hook for cleanup or post-processing tasks.\n  */\n  \"build:done\": (ctx: BuildContext) => void | Promise<void>;\n}\n//#endregion\n//#region src/utils/package.d.ts\ntype PackageType = \"module\" | \"commonjs\" | undefined;\n//#endregion\n//#region src/features/output.d.ts\ninterface OutExtensionContext {\n  options: InputOptions;\n  format: NormalizedFormat;\n  /** \"type\" field in project's package.json */\n  pkgType?: PackageType;\n}\ninterface OutExtensionObject {\n  js?: string;\n  dts?: string;\n}\ntype OutExtensionFactory = (context: OutExtensionContext) => OutExtensionObject | undefined;\ninterface ChunkAddonObject {\n  js?: string;\n  css?: string;\n  dts?: string;\n}\ntype ChunkAddonFunction = (ctx: {\n  format: Format;\n  fileName: string;\n}) => ChunkAddonObject | string | undefined;\ntype ChunkAddon = ChunkAddonObject | ChunkAddonFunction | string;\n//#endregion\n//#region src/utils/logger.d.ts\ntype LogType = \"error\" | \"warn\" | \"info\";\ntype LogLevel = LogType | \"silent\";\ninterface Logger {\n  level: LogLevel;\n  info: (...args: any[]) => void;\n  warn: (...args: any[]) => void;\n  warnOnce: (...args: any[]) => void;\n  error: (...args: any[]) => void;\n  success: (...args: any[]) => void;\n}\ndeclare const globalLogger: Logger;\n//#endregion\n//#region src/features/report.d.ts\ninterface ReportOptions {\n  /**\n  * Enable/disable gzip-compressed size reporting.\n  * Compressing large output files can be slow, so disabling this may increase build performance for large projects.\n  *\n  * @default true\n  */\n  gzip?: boolean;\n  /**\n  * Enable/disable brotli-compressed size reporting.\n  * Compressing large output files can be slow, so disabling this may increase build performance for large projects.\n  *\n  * @default false\n  */\n  brotli?: boolean;\n  /**\n  * Skip reporting compressed size for files larger than this size.\n  * @default 1_000_000 // 1MB\n  */\n  maxCompressSize?: number;\n}\ndeclare function ReportPlugin(userOptions: ReportOptions, logger: Logger, cwd: string, cjsDts?: boolean, name?: string, isMultiFormat?: boolean): Plugin;\n//#endregion\n//#region src/config/types.d.ts\ntype Sourcemap = boolean | \"inline\" | \"hidden\";\ntype Format = ModuleFormat;\ntype NormalizedFormat = InternalModuleFormat;\ninterface Workspace {\n  /**\n  * Workspace directories. Glob patterns are supported.\n  * - `auto`: Automatically detect `package.json` files in the workspace.\n  * @default 'auto'\n  */\n  include?: Arrayable<string> | \"auto\";\n  /**\n  * Exclude directories from workspace.\n  * Defaults to all `node_modules`, `dist`, `test`, `tests`, `temp`, and `tmp` directories.\n  */\n  exclude?: Arrayable<string>;\n  /**\n  * Path to the workspace configuration file.\n  */\n  config?: boolean | string;\n}\ntype NoExternalFn = (id: string, importer: string | undefined) => boolean | null | undefined | void;\n/**\n* Options for tsdown.\n*/\ninterface UserConfig {\n  /**\n  * Defaults to `'src/index.ts'` if it exists.\n  */\n  entry?: InputOption;\n  external?: ExternalOption;\n  noExternal?: Arrayable<string | RegExp> | NoExternalFn;\n  /**\n  * Bundle only the dependencies listed here; throw an error if any others are missing.\n  *\n  * Note: Be sure to include all required sub-dependencies as well.\n  */\n  inlineOnly?: Arrayable<string | RegExp>;\n  /**\n  * Skip bundling `node_modules`.\n  * @default false\n  */\n  skipNodeModulesBundle?: boolean;\n  alias?: Record<string, string>;\n  tsconfig?: string | boolean;\n  /**\n  * Specifies the target runtime platform for the build.\n  *\n  * - `node`: Node.js and compatible runtimes (e.g., Deno, Bun).\n  *   For CJS format, this is always set to `node` and cannot be changed.\n  * - `neutral`: A platform-agnostic target with no specific runtime assumptions.\n  * - `browser`: Web browsers.\n  *\n  * @default 'node'\n  * @see https://tsdown.dev/options/platform\n  */\n  platform?: \"node\" | \"neutral\" | \"browser\";\n  /**\n  * Specifies the compilation target environment(s).\n  *\n  * Determines the JavaScript version or runtime(s) for which the code should be compiled.\n  * If not set, defaults to the value of `engines.node` in your project's `package.json`.\n  * If no `engines.node` field exists, no syntax transformations are applied.\n  *\n  * Accepts a single target (e.g., `'es2020'`, `'node18'`), an array of targets, or `false` to disable all transformations.\n  *\n  * @see {@link https://tsdown.dev/options/target#supported-targets} for a list of valid targets and more details.\n  *\n  * @example\n  * ```jsonc\n  * // Target a single environment\n  * { \"target\": \"node18\" }\n  * ```\n  *\n  * @example\n  * ```jsonc\n  * // Target multiple environments\n  * { \"target\": [\"node18\", \"es2020\"] }\n  * ```\n  *\n  * @example\n  * ```jsonc\n  * // Disable all syntax transformations\n  * { \"target\": false }\n  * ```\n  */\n  target?: string | string[] | false;\n  /**\n  * Compile-time env variables.\n  * @example\n  * ```json\n  * {\n  *   \"DEBUG\": true,\n  *   \"NODE_ENV\": \"production\"\n  * }\n  * ```\n  */\n  env?: Record<string, any>;\n  define?: Record<string, string>;\n  /** @default false */\n  shims?: boolean;\n  /**\n  * Configure tree shaking options.\n  * @see {@link https://rolldown.rs/options/treeshake} for more details.\n  * @default true\n  */\n  treeshake?: boolean | TreeshakingOptions;\n  /**\n  * Sets how input files are processed.\n  * For example, use 'js' to treat files as JavaScript or 'base64' for images.\n  * Lets you import or require files like images or fonts.\n  * @example\n  * ```json\n  * { '.jpg': 'asset', '.png': 'base64' }\n  * ```\n  */\n  loader?: ModuleTypes;\n  /**\n  * If enabled, strips the `node:` protocol prefix from import source.\n  *\n  * @default false\n  * @deprecated Use `nodeProtocol: 'strip'` instead.\n  *\n  * @example\n  * // With removeNodeProtocol enabled:\n  * import('node:fs'); // becomes import('fs')\n  */\n  removeNodeProtocol?: boolean;\n  /**\n  * - If `true`, add `node:` prefix to built-in modules.\n  * - If `'strip'`, strips the `node:` protocol prefix from import source.\n  * - If `false`, does not modify the import source.\n  *\n  * @default false\n  *\n  * @example\n  * // With nodeProtocol enabled:\n  * import('fs'); // becomes import('node:fs')\n  * // With nodeProtocol set to 'strip':\n  * import('node:fs'); // becomes import('fs')\n  * // With nodeProtocol set to false:\n  * import('node:fs'); // remains import('node:fs')\n  *\n  */\n  nodeProtocol?: \"strip\" | boolean;\n  plugins?: InputOptions[\"plugins\"];\n  /**\n  * Use with caution; ensure you understand the implications.\n  */\n  inputOptions?: InputOptions | ((options: InputOptions, format: NormalizedFormat, context: {\n    cjsDts: boolean;\n  }) => Awaitable<InputOptions | void | null>);\n  /** @default ['es'] */\n  format?: Format | Format[];\n  globalName?: string;\n  /** @default 'dist' */\n  outDir?: string;\n  /**\n  * Whether to generate source map files.\n  *\n  * Note that this option will always be `true` if you have\n  * [`declarationMap`](https://www.typescriptlang.org/tsconfig/#declarationMap)\n  * option enabled in your `tsconfig.json`.\n  *\n  * @default false\n  */\n  sourcemap?: Sourcemap;\n  /**\n  * Clean directories before build.\n  *\n  * Default to output directory.\n  * @default true\n  */\n  clean?: boolean | string[];\n  /**\n  * @default false\n  */\n  minify?: boolean | \"dce-only\" | MinifyOptions;\n  footer?: ChunkAddon;\n  banner?: ChunkAddon;\n  /**\n  * Determines whether unbundle mode is enabled.\n  * When set to true, the output files will mirror the input file structure.\n  * @default false\n  */\n  unbundle?: boolean;\n  /**\n  * @deprecated Use `unbundle` instead.\n  * @default true\n  */\n  bundle?: boolean;\n  /**\n  * Use a fixed extension for output files.\n  * The extension will always be `.cjs` or `.mjs`.\n  * Otherwise, it will depend on the package type.\n  *\n  * Defaults to `true` if `platform` is set to `node`, `false` otherwise.\n  */\n  fixedExtension?: boolean;\n  /**\n  * Custom extensions for output files.\n  * `fixedExtension` will be overridden by this option.\n  */\n  outExtensions?: OutExtensionFactory;\n  /**\n  * If enabled, appends hash to chunk filenames.\n  * @default true\n  */\n  hash?: boolean;\n  /**\n  * @default true\n  */\n  cjsDefault?: boolean;\n  /**\n  * Use with caution; ensure you understand the implications.\n  */\n  outputOptions?: OutputOptions | ((options: OutputOptions, format: NormalizedFormat, context: {\n    cjsDts: boolean;\n  }) => Awaitable<OutputOptions | void | null>);\n  /**\n  * The working directory of the config file.\n  * - Defaults to `process.cwd()` for root config.\n  * - Defaults to the package directory for workspace config.\n  */\n  cwd?: string;\n  /**\n  * The name to show in CLI output. This is useful for monorepos or workspaces.\n  * When using workspace mode, this option defaults to the package name from package.json.\n  * In non-workspace mode, this option must be set explicitly for the name to show in the CLI output.\n  */\n  name?: string;\n  /**\n  * @default false\n  * @deprecated Use `logLevel` instead.\n  */\n  silent?: boolean;\n  /**\n  * Log level.\n  * @default 'info'\n  */\n  logLevel?: LogLevel;\n  /**\n  * If true, fails the build on warnings.\n  * @default false\n  */\n  failOnWarn?: boolean;\n  /**\n  * Custom logger.\n  */\n  customLogger?: Logger;\n  /**\n  * Reuse config from Vite or Vitest (experimental)\n  * @default false\n  */\n  fromVite?: boolean | \"vitest\";\n  /**\n  * @default false\n  */\n  watch?: boolean | Arrayable<string>;\n  ignoreWatch?: Arrayable<string | RegExp>;\n  /**\n  * You can specify command to be executed after a successful build, specially useful for Watch mode\n  */\n  onSuccess?: string | ((config: ResolvedConfig, signal: AbortSignal) => void | Promise<void>);\n  /**\n  * Enables generation of TypeScript declaration files (`.d.ts`).\n  *\n  * By default, this option is auto-detected based on your project's `package.json`:\n  * - If the `types` field is present, or if the main `exports` contains a `types` entry, declaration file generation is enabled by default.\n  * - Otherwise, declaration file generation is disabled by default.\n  */\n  dts?: boolean | DtsOptions;\n  /**\n  * Enable unused dependencies check with `unplugin-unused`\n  * Requires `unplugin-unused` to be installed.\n  * @default false\n  */\n  unused?: boolean | UnusedOptions;\n  /**\n  * Run publint after bundling.\n  * Requires `publint` to be installed.\n  * @default false\n  */\n  publint?: boolean | PublintOptions;\n  /**\n  * Run `arethetypeswrong` after bundling.\n  * Requires `@arethetypeswrong/core` to be installed.\n  *\n  * @default false\n  * @see https://github.com/arethetypeswrong/arethetypeswrong.github.io\n  */\n  attw?: boolean | AttwOptions;\n  /**\n  * Enable size reporting after bundling.\n  * @default true\n  */\n  report?: boolean | ReportOptions;\n  /**\n  * `import.meta.glob` support.\n  * @see https://vite.dev/guide/features.html#glob-import\n  * @default true\n  */\n  globImport?: boolean;\n  /**\n  * **[experimental]** Generate package exports for `package.json`.\n  *\n  * This will set the `main`, `module`, `types`, `exports` fields in `package.json`\n  * to point to the generated files.\n  */\n  exports?: boolean | ExportsOptions;\n  /**\n  * @deprecated Alias for `copy`, will be removed in the future.\n  */\n  publicDir?: CopyOptions | CopyOptionsFn;\n  /**\n  * Copy files to another directory.\n  * @example\n  * ```ts\n  * [\n  *   'src/assets',\n  *   { from: 'src/assets', to: 'dist/assets' },\n  * ]\n  * ```\n  */\n  copy?: CopyOptions | CopyOptionsFn;\n  hooks?: Partial<TsdownHooks> | ((hooks: Hookable<TsdownHooks>) => Awaitable<void>);\n  /**\n  * **[experimental]** Enable workspace mode.\n  * This allows you to build multiple packages in a monorepo.\n  */\n  workspace?: Workspace | Arrayable<string> | true;\n}\ninterface InlineConfig extends UserConfig {\n  /**\n  * Config file path\n  */\n  config?: boolean | string;\n  /**\n  * Config loader to use. It can only be set via CLI or API.\n  * @default 'auto'\n  */\n  configLoader?: \"auto\" | \"native\" | \"unconfig\" | \"unrun\";\n  /**\n  * Filter workspace packages. This option is only available in workspace mode.\n  */\n  filter?: RegExp | string | string[];\n}\ntype UserConfigFn = (inlineConfig: InlineConfig) => Awaitable<Arrayable<UserConfig>>;\ntype UserConfigExport = Awaitable<Arrayable<UserConfig> | UserConfigFn>;\ntype ResolvedConfig = Overwrite<MarkPartial<Omit<UserConfig, \"workspace\" | \"fromVite\" | \"publicDir\" | \"silent\" | \"bundle\" | \"removeNodeProtocol\" | \"logLevel\" | \"failOnWarn\" | \"customLogger\">, \"globalName\" | \"inputOptions\" | \"outputOptions\" | \"minify\" | \"define\" | \"alias\" | \"external\" | \"onSuccess\" | \"outExtensions\" | \"hooks\" | \"copy\" | \"loader\" | \"name\" | \"banner\" | \"footer\">, {\n  format: NormalizedFormat[];\n  target?: string[];\n  clean: string[];\n  dts: false | DtsOptions;\n  report: false | ReportOptions;\n  tsconfig: false | string;\n  pkg?: PackageJson;\n  exports: false | ExportsOptions;\n  nodeProtocol: \"strip\" | boolean;\n  logger: Logger;\n  ignoreWatch: Array<string | RegExp>;\n  noExternal?: NoExternalFn;\n  inlineOnly?: Array<string | RegExp>;\n}>;\n//#endregion\nexport { TsdownChunks as A, OutExtensionFactory as C, RolldownContext as D, BuildContext as E, CopyOptions as M, CopyOptionsFn as N, TsdownHooks as O, AttwOptions as P, OutExtensionContext as S, PackageType as T, Logger as _, NormalizedFormat as a, ChunkAddonFunction as b, Sourcemap as c, UserConfig as d, UserConfigExport as f, ReportPlugin as g, ReportOptions as h, NoExternalFn as i, CopyEntry as j, ExportsOptions as k, TreeshakingOptions as l, Workspace as m, Format as n, PublintOptions as o, UserConfigFn as p, InlineConfig as r, ResolvedConfig as s, DtsOptions as t, UnusedOptions as u, globalLogger as v, OutExtensionObject as w, ChunkAddonObject as x, ChunkAddon as y };"}
{"timestamp":1761897885343,"action":"HookRenderChunkEnd","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"6980bf16-c22e-4df0-a5ee-3b0862999639","content":"$ref:1db4356cf924f3495a0b5f052b25bf1eabeca1baaae31552a60c10e9ab7bc852","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885343,"action":"HookRenderChunkEnd","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"fac5ec36-9745-4ef7-bcc1-b7b4b9721ad2","content":"import { d as UserConfig, f as UserConfigExport, p as UserConfigFn } from \"./index-!~{008}~.mjs\";\n\n//#region src/config.d.ts\n\n/**\n* Defines the configuration for tsdown.\n*/\ndeclare function defineConfig(options: UserConfig): UserConfig;\ndeclare function defineConfig(options: UserConfig[]): UserConfig[];\ndeclare function defineConfig(options: UserConfigFn): UserConfigFn;\ndeclare function defineConfig(options: UserConfigExport): UserConfigExport;\n//#endregion\nexport { defineConfig as t };","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"action":"StringRef","id":"5b37e1658fac80f8c1c4d03efe261bcf582058d61c6dea8c8a2170f9f7ce830d","content":"import { createRequire as __cjs_createRequire } from \"node:module\";\nconst __cjs_require = __cjs_createRequire(import.meta.url);\nimport { a as globalLogger, c as debounce, d as resolveComma, f as resolveRegex, i as generateColor, l as matchPattern, m as toArray, n as LogLevels, o as prettyFormat, p as slash, r as createLogger, s as prettyName, t as version, u as noop } from \"./package-!~{004}~.mjs\";\nimport { builtinModules, isBuiltin } from \"node:module\";\nimport path, { dirname, join, normalize, sep } from \"node:path\";\nimport process from \"node:process\";\nimport { fileURLToPath, pathToFileURL } from \"node:url\";\nimport { blue, bold, dim, green, underline } from \"ansis\";\nimport { VERSION, build } from \"rolldown\";\nimport { exec } from \"tinyexec\";\nconst treeKill = __cjs_require(\"tree-kill\");\nconst Debug = __cjs_require(\"debug\");\nimport { glob } from \"tinyglobby\";\nimport { access, chmod, cp, mkdtemp, readFile, rm, stat, writeFile } from \"node:fs/promises\";\nimport { RE_CSS, RE_DTS, RE_JS, RE_NODE_MODULES } from \"rolldown-plugin-dts/filename\";\nconst minVersion = __cjs_require(\"semver/ranges/min-version.js\");\nimport { up } from \"empathic/find\";\nimport { up as up$1 } from \"empathic/package\";\nimport { loadConfig } from \"unconfig\";\nimport child_process from \"node:child_process\";\nimport { tmpdir } from \"node:os\";\nimport util, { promisify } from \"node:util\";\nconst coerce = __cjs_require(\"semver/functions/coerce.js\");\nconst satisfies = __cjs_require(\"semver/functions/satisfies.js\");\nimport { createHooks } from \"hookable\";\nimport { importGlobPlugin } from \"rolldown/experimental\";\nimport { Buffer } from \"node:buffer\";\nimport { brotliCompress, gzip } from \"node:zlib\";\nimport readline from \"node:readline\";\nimport { globalContext, invalidateContextFile } from \"rolldown-plugin-dts/tsc-context\";\n\n//#region src/utils/fs.ts\nfunction fsExists(path$1) {\n\treturn access(path$1).then(() => true, () => false);\n}\nfunction fsStat(path$1) {\n\treturn stat(path$1).catch(() => null);\n}\nfunction fsRemove(path$1) {\n\treturn rm(path$1, {\n\t\tforce: true,\n\t\trecursive: true\n\t}).catch(() => {});\n}\nfunction fsCopy(from, to) {\n\treturn cp(from, to, {\n\t\trecursive: true,\n\t\tforce: true\n\t});\n}\nfunction lowestCommonAncestor(...filepaths) {\n\tif (filepaths.length === 0) return \"\";\n\tif (filepaths.length === 1) return dirname(filepaths[0]);\n\tfilepaths = filepaths.map(normalize);\n\tconst [first, ...rest] = filepaths;\n\tlet ancestor = first.split(sep);\n\tfor (const filepath of rest) {\n\t\tconst directories = filepath.split(sep, ancestor.length);\n\t\tlet index = 0;\n\t\tfor (const directory of directories) if (directory === ancestor[index]) index += 1;\n\t\telse {\n\t\t\tancestor = ancestor.slice(0, index);\n\t\t\tbreak;\n\t\t}\n\t\tancestor = ancestor.slice(0, index);\n\t}\n\treturn ancestor.length <= 1 && ancestor[0] === \"\" ? sep + ancestor[0] : ancestor.join(sep);\n}\n\n//#endregion\n//#region src/features/clean.ts\nconst debug$7 = Debug(\"tsdown:clean\");\nconst RE_LAST_SLASH = /[/\\\\]$/;\nasync function cleanOutDir(configs) {\n\tconst removes = /* @__PURE__ */ new Set();\n\tfor (const config of configs) {\n\t\tif (!config.clean.length) continue;\n\t\tconst files = await glob(config.clean, {\n\t\t\tcwd: config.cwd,\n\t\t\tabsolute: true,\n\t\t\tonlyFiles: false\n\t\t});\n\t\tconst normalizedOutDir = config.outDir.replace(RE_LAST_SLASH, \"\");\n\t\tfor (const file of files) if (file.replace(RE_LAST_SLASH, \"\") !== normalizedOutDir) removes.add(file);\n\t}\n\tif (!removes.size) return;\n\tglobalLogger.info(`Cleaning ${removes.size} files`);\n\tawait Promise.all([...removes].map(async (file) => {\n\t\tdebug$7(\"Removing\", file);\n\t\tawait fsRemove(file);\n\t}));\n\tdebug$7(\"Removed %d files\", removes.size);\n}\nfunction resolveClean(clean, outDir, cwd) {\n\tif (clean === true) clean = [slash(outDir)];\n\telse if (!clean) clean = [];\n\tif (clean.some((item) => path.resolve(item) === cwd)) throw new Error(\"Cannot clean the current working directory. Please specify a different path to clean option.\");\n\treturn clean;\n}\n\n//#endregion\n//#region src/features/entry.ts\nasync function resolveEntry(logger, entry, cwd, name) {\n\tconst nameLabel = name ? `[${name}] ` : \"\";\n\tif (!entry || Object.keys(entry).length === 0) {\n\t\tconst defaultEntry = path.resolve(cwd, \"src/index.ts\");\n\t\tif (await fsExists(defaultEntry)) entry = { index: defaultEntry };\n\t\telse throw new Error(`${nameLabel}No input files, try \"tsdown <your-file>\" or create src/index.ts`);\n\t}\n\tconst entryMap = await toObjectEntry(entry, cwd);\n\tconst entries = Object.values(entryMap);\n\tif (entries.length === 0) throw new Error(`${nameLabel}Cannot find entry: ${JSON.stringify(entry)}`);\n\tlogger.info(prettyName(name), `entry: ${generateColor(name)(entries.map((entry$1) => path.relative(cwd, entry$1)).join(\", \"))}`);\n\treturn entryMap;\n}\nasync function toObjectEntry(entry, cwd) {\n\tif (typeof entry === \"string\") entry = [entry];\n\tif (!Array.isArray(entry)) return entry;\n\tconst resolvedEntry = (await glob(entry, {\n\t\tcwd,\n\t\texpandDirectories: false\n\t})).map((file) => path.resolve(cwd, file));\n\tconst base = lowestCommonAncestor(...resolvedEntry);\n\treturn Object.fromEntries(resolvedEntry.map((file) => {\n\t\tconst relative = path.relative(base, file);\n\t\treturn [relative.slice(0, relative.length - path.extname(relative).length), file];\n\t}));\n}\n\n//#endregion\n//#region src/features/exports.ts\nasync function writeExports(options, chunks) {\n\tif (!options.exports) return;\n\tconst { outDir, pkg } = options;\n\tif (!pkg) throw new Error(\"`package.json` not found, cannot write exports\");\n\tconst { publishExports,...generated } = await generateExports(pkg, outDir, chunks, options.exports);\n\tconst updatedPkg = {\n\t\t...pkg,\n\t\t...generated,\n\t\tpackageJsonPath: void 0\n\t};\n\tif (publishExports) {\n\t\tupdatedPkg.publishConfig ||= {};\n\t\tupdatedPkg.publishConfig.exports = publishExports;\n\t}\n\tconst original = await readFile(pkg.packageJsonPath, \"utf8\");\n\tlet contents = JSON.stringify(updatedPkg, null, original.includes(\"\t\") ? \"\t\" : 2);\n\tif (original.endsWith(\"\\n\")) contents += \"\\n\";\n\tif (contents !== original) await writeFile(pkg.packageJsonPath, contents, \"utf8\");\n}\nasync function generateExports(pkg, outDir, chunks, { devExports, all, customExports }) {\n\tconst pkgJsonPath = pkg.packageJsonPath;\n\tconst pkgRoot$1 = path.dirname(pkgJsonPath);\n\tconst outDirRelative = slash(path.relative(pkgRoot$1, outDir));\n\tlet main, module$1, cjsTypes, esmTypes;\n\tconst exportsMap = /* @__PURE__ */ new Map();\n\tfor (const [format, chunksByFormat] of Object.entries(chunks)) {\n\t\tif (format !== \"es\" && format !== \"cjs\") continue;\n\t\tconst onlyOneEntry = chunksByFormat.filter((chunk) => chunk.type === \"chunk\" && chunk.isEntry && !RE_DTS.test(chunk.fileName)).length === 1;\n\t\tfor (const chunk of chunksByFormat) {\n\t\t\tif (chunk.type !== \"chunk\" || !chunk.isEntry) continue;\n\t\t\tconst normalizedName = slash(chunk.fileName);\n\t\t\tconst ext = path.extname(chunk.fileName);\n\t\t\tlet name = normalizedName.slice(0, -ext.length);\n\t\t\tconst isDts = name.endsWith(\".d\");\n\t\t\tif (isDts) name = name.slice(0, -2);\n\t\t\tconst isIndex = onlyOneEntry || name === \"index\";\n\t\t\tconst distFile = `${outDirRelative ? `./${outDirRelative}` : \".\"}/${normalizedName}`;\n\t\t\tif (isIndex) {\n\t\t\t\tname = \".\";\n\t\t\t\tif (format === \"cjs\") if (isDts) cjsTypes = distFile;\n\t\t\t\telse main = distFile;\n\t\t\t\telse if (format === \"es\") if (isDts) esmTypes = distFile;\n\t\t\t\telse module$1 = distFile;\n\t\t\t} else if (name.endsWith(\"/index\")) name = `./${name.slice(0, -6)}`;\n\t\t\telse name = `./${name}`;\n\t\t\tlet subExport = exportsMap.get(name);\n\t\t\tif (!subExport) {\n\t\t\t\tsubExport = {};\n\t\t\t\texportsMap.set(name, subExport);\n\t\t\t}\n\t\t\tif (!isDts) {\n\t\t\t\tsubExport[format] = distFile;\n\t\t\t\tif (chunk.facadeModuleId && !subExport.src) subExport.src = `./${slash(path.relative(pkgRoot$1, chunk.facadeModuleId))}`;\n\t\t\t}\n\t\t}\n\t}\n\tconst sortedExportsMap = Array.from(exportsMap.entries()).toSorted(([a], [b]) => {\n\t\tif (a === \"index\") return -1;\n\t\treturn a.localeCompare(b);\n\t});\n\tlet exports = Object.fromEntries(sortedExportsMap.map(([name, subExport]) => [name, genSubExport(devExports, subExport)]));\n\texportMeta(exports, all);\n\tif (customExports) exports = await customExports(exports, {\n\t\tpkg,\n\t\toutDir,\n\t\tchunks,\n\t\tisPublish: false\n\t});\n\tlet publishExports;\n\tif (devExports) {\n\t\tpublishExports = Object.fromEntries(sortedExportsMap.map(([name, subExport]) => [name, genSubExport(false, subExport)]));\n\t\texportMeta(publishExports, all);\n\t\tif (customExports) publishExports = await customExports(publishExports, {\n\t\t\tpkg,\n\t\t\toutDir,\n\t\t\tchunks,\n\t\t\tisPublish: true\n\t\t});\n\t}\n\treturn {\n\t\tmain: main || module$1 || pkg.main,\n\t\tmodule: module$1 || pkg.module,\n\t\ttypes: cjsTypes || esmTypes || pkg.types,\n\t\texports,\n\t\tpublishExports\n\t};\n}\nfunction genSubExport(devExports, { src, es, cjs }) {\n\tif (devExports === true) return src;\n\tlet value;\n\tconst dualFormat = es && cjs;\n\tif (!dualFormat && !devExports) value = cjs || es;\n\telse {\n\t\tvalue = {};\n\t\tif (typeof devExports === \"string\") value[devExports] = src;\n\t\tif (es) value[dualFormat ? \"import\" : \"default\"] = es;\n\t\tif (cjs) value[dualFormat ? \"require\" : \"default\"] = cjs;\n\t}\n\treturn value;\n}\nfunction exportMeta(exports, all) {\n\tif (all) exports[\"./*\"] = \"./*\";\n\telse exports[\"./package.json\"] = \"./package.json\";\n}\nfunction hasExportsTypes(pkg) {\n\tconst exports = pkg?.exports;\n\tif (!exports) return false;\n\tif (typeof exports === \"object\" && exports !== null && !Array.isArray(exports)) {\n\t\tif (\"types\" in exports) return true;\n\t\tif (\".\" in exports) {\n\t\t\tconst mainExport = exports[\".\"];\n\t\t\tif (typeof mainExport === \"object\" && mainExport !== null && \"types\" in mainExport) return true;\n\t\t}\n\t}\n\treturn false;\n}\n\n//#endregion\n//#region src/features/target.ts\nfunction resolveTarget(logger, target, pkg, name) {\n\tif (target === false) return;\n\tif (target == null) {\n\t\tconst pkgTarget = resolvePackageTarget(pkg);\n\t\tif (pkgTarget) target = pkgTarget;\n\t\telse return;\n\t}\n\tif (typeof target === \"number\") throw new TypeError(`Invalid target: ${target}`);\n\tconst targets = resolveComma(toArray(target));\n\tif (targets.length) logger.info(prettyName(name), `target${targets.length > 1 ? \"s\" : \"\"}: ${generateColor(name)(targets.join(\", \"))}`);\n\treturn targets;\n}\nfunction resolvePackageTarget(pkg) {\n\tconst nodeVersion = pkg?.engines?.node;\n\tif (!nodeVersion) return;\n\tconst nodeMinVersion = minVersion(nodeVersion);\n\tif (!nodeMinVersion) return;\n\tif (nodeMinVersion.version === \"0.0.0\") return;\n\treturn `node${nodeMinVersion.version}`;\n}\n\n//#endregion\n//#region src/features/tsconfig.ts\nfunction findTsconfig(cwd, name = \"tsconfig.json\") {\n\treturn up(name, { cwd }) || false;\n}\nasync function resolveTsconfig(logger, tsconfig, cwd, name) {\n\tconst original = tsconfig;\n\tif (tsconfig !== false) {\n\t\tif (tsconfig === true || tsconfig == null) {\n\t\t\ttsconfig = findTsconfig(cwd);\n\t\t\tif (original && !tsconfig) logger.warn(`No tsconfig found in ${blue(cwd)}`);\n\t\t} else {\n\t\t\tconst tsconfigPath = path.resolve(cwd, tsconfig);\n\t\t\tconst stat$1 = await fsStat(tsconfigPath);\n\t\t\tif (stat$1?.isFile()) tsconfig = tsconfigPath;\n\t\t\telse if (stat$1?.isDirectory()) {\n\t\t\t\ttsconfig = findTsconfig(tsconfigPath);\n\t\t\t\tif (!tsconfig) logger.warn(`No tsconfig found in ${blue(tsconfigPath)}`);\n\t\t\t} else {\n\t\t\t\ttsconfig = findTsconfig(cwd, tsconfig);\n\t\t\t\tif (!tsconfig) logger.warn(`tsconfig ${blue(original)} doesn't exist`);\n\t\t\t}\n\t\t}\n\t\tif (tsconfig) logger.info(prettyName(name), `tsconfig: ${generateColor(name)(path.relative(cwd, tsconfig))}`);\n\t}\n\treturn tsconfig;\n}\n\n//#endregion\n//#region src/utils/package.ts\nconst debug$6 = Debug(\"tsdown:package\");\nasync function readPackageJson(dir) {\n\tconst packageJsonPath = up$1({ cwd: dir });\n\tif (!packageJsonPath) return;\n\tdebug$6(\"Reading package.json:\", packageJsonPath);\n\tconst contents = await readFile(packageJsonPath, \"utf8\");\n\treturn {\n\t\t...JSON.parse(contents),\n\t\tpackageJsonPath\n\t};\n}\nfunction getPackageType(pkg) {\n\tif (pkg?.type) {\n\t\tif (![\"module\", \"commonjs\"].includes(pkg.type)) throw new Error(`Invalid package.json type: ${pkg.type}`);\n\t\treturn pkg.type;\n\t}\n}\nfunction normalizeFormat(format) {\n\treturn resolveComma(toArray(format, \"es\")).map((format$1) => {\n\t\tswitch (format$1) {\n\t\t\tcase \"es\":\n\t\t\tcase \"esm\":\n\t\t\tcase \"module\": return \"es\";\n\t\t\tcase \"cjs\":\n\t\t\tcase \"commonjs\": return \"cjs\";\n\t\t\tdefault: return format$1;\n\t\t}\n\t});\n}\n\n//#endregion\n//#region src/config/config.ts\nasync function loadViteConfig(prefix, cwd) {\n\tconst { config, sources: [source] } = await loadConfig({\n\t\tsources: [{\n\t\t\tfiles: `${prefix}.config`,\n\t\t\textensions: [\n\t\t\t\t\"ts\",\n\t\t\t\t\"mts\",\n\t\t\t\t\"cts\",\n\t\t\t\t\"js\",\n\t\t\t\t\"mjs\",\n\t\t\t\t\"cjs\",\n\t\t\t\t\"json\",\n\t\t\t\t\"\"\n\t\t\t]\n\t\t}],\n\t\tcwd,\n\t\tdefaults: {}\n\t});\n\tif (!source) return;\n\tglobalLogger.info(`Using Vite config: ${underline(source)}`);\n\tconst resolved = await config;\n\tif (typeof resolved === \"function\") return resolved({\n\t\tcommand: \"build\",\n\t\tmode: \"production\"\n\t});\n\treturn resolved;\n}\nlet loaded = false;\nasync function loadConfigFile(inlineConfig, workspace) {\n\tlet cwd = inlineConfig.cwd || process.cwd();\n\tlet overrideConfig = false;\n\tlet { config: filePath } = inlineConfig;\n\tif (filePath === false) return { configs: [{}] };\n\tif (typeof filePath === \"string\") {\n\t\tconst stats = await fsStat(filePath);\n\t\tif (stats) {\n\t\t\tconst resolved = path.resolve(filePath);\n\t\t\tif (stats.isFile()) {\n\t\t\t\toverrideConfig = true;\n\t\t\t\tfilePath = resolved;\n\t\t\t\tcwd = path.dirname(filePath);\n\t\t\t} else if (stats.isDirectory()) cwd = resolved;\n\t\t}\n\t}\n\tlet isNative = false;\n\tif (!loaded) {\n\t\tif (!inlineConfig.configLoader || inlineConfig.configLoader === \"auto\") isNative = !!(process.features.typescript || process.versions.bun || process.versions.deno);\n\t\telse if (inlineConfig.configLoader === \"native\") isNative = true;\n\t}\n\tlet { config, sources } = await loadConfig.async({\n\t\tsources: overrideConfig ? [{\n\t\t\tfiles: filePath,\n\t\t\textensions: []\n\t\t}] : [{\n\t\t\tfiles: \"tsdown.config\",\n\t\t\textensions: [\n\t\t\t\t\"ts\",\n\t\t\t\t\"mts\",\n\t\t\t\t\"cts\",\n\t\t\t\t\"js\",\n\t\t\t\t\"mjs\",\n\t\t\t\t\"cjs\",\n\t\t\t\t\"json\",\n\t\t\t\t\"\"\n\t\t\t],\n\t\t\tparser: inlineConfig.configLoader === \"unrun\" ? unrunImport : isNative ? nativeImport : \"auto\"\n\t\t}, {\n\t\t\tfiles: \"package.json\",\n\t\t\textensions: [],\n\t\t\trewrite: (config$1) => config$1?.tsdown\n\t\t}],\n\t\tcwd,\n\t\tstopAt: workspace && path.dirname(workspace),\n\t\tdefaults: {}\n\t}).finally(() => loaded = true);\n\tconfig = await config;\n\tif (typeof config === \"function\") config = await config(inlineConfig);\n\tconfig = toArray(config);\n\tif (config.length === 0) config.push({});\n\tconst file = sources[0];\n\tif (file) globalLogger.info(`Using tsdown config: ${underline(file)}`);\n\treturn {\n\t\tconfigs: config,\n\t\tfile\n\t};\n}\nasync function nativeImport(id) {\n\tconst mod = await import(pathToFileURL(id).href).catch((error) => {\n\t\tif (error?.message?.includes?.(\"Cannot find module\")) {\n\t\t\tconst configError = /* @__PURE__ */ new Error(`Failed to load the config file. Try setting the --config-loader CLI flag to \\`unconfig\\`.\\n\\n${error.message}`);\n\t\t\tconfigError.cause = error;\n\t\t\tthrow configError;\n\t\t} else throw error;\n\t});\n\treturn mod.default || mod;\n}\nasync function unrunImport(id) {\n\tconst { unrun } = await import(\"unrun\");\n\tconst { module: module$1 } = await unrun({ path: pathToFileURL(id).href }).catch((error) => {\n\t\tif (error?.message?.includes?.(\"Cannot find module\")) {\n\t\t\tconst configError = /* @__PURE__ */ new Error(`Failed to load the config file. \\`unrun\\` is experimental; try setting the --config-loader CLI flag to \\`unconfig\\` instead.\\n\\n${error.message}`);\n\t\t\tconfigError.cause = error;\n\t\t\tthrow configError;\n\t\t} else throw error;\n\t});\n\treturn module$1;\n}\n\n//#endregion\n//#region src/config/index.ts\nconst debug$5 = Debug(\"tsdown:options\");\nconst DEFAULT_EXCLUDE_WORKSPACE = [\n\t\"**/node_modules/**\",\n\t\"**/dist/**\",\n\t\"**/test?(s)/**\",\n\t\"**/t?(e)mp/**\"\n];\nasync function resolveConfig(inlineConfig) {\n\tdebug$5(\"inline config %O\", inlineConfig);\n\tconst { configs: rootConfigs, file } = await loadConfigFile(inlineConfig);\n\tconst files = [];\n\tif (file) {\n\t\tfiles.push(file);\n\t\tdebug$5(\"loaded root user config file %s\", file);\n\t\tdebug$5(\"root user configs %O\", rootConfigs);\n\t} else debug$5(\"no root user config file found\");\n\tconst configs = (await Promise.all(rootConfigs.map(async (rootConfig) => {\n\t\tconst { configs: workspaceConfigs, files: workspaceFiles } = await resolveWorkspace(rootConfig, inlineConfig);\n\t\tif (workspaceFiles) files.push(...workspaceFiles);\n\t\treturn Promise.all(workspaceConfigs.filter((config) => !config.workspace || config.entry).map((config) => resolveUserConfig(config)));\n\t}))).flat();\n\tdebug$5(\"resolved configs %O\", configs);\n\treturn {\n\t\tconfigs,\n\t\tfiles\n\t};\n}\nasync function resolveWorkspace(config, inlineConfig) {\n\tconst normalized = {\n\t\t...config,\n\t\t...inlineConfig\n\t};\n\tconst rootCwd = normalized.cwd || process.cwd();\n\tlet { workspace } = normalized;\n\tif (!workspace) return {\n\t\tconfigs: [normalized],\n\t\tfiles: []\n\t};\n\tif (workspace === true) workspace = {};\n\telse if (typeof workspace === \"string\" || Array.isArray(workspace)) workspace = { include: workspace };\n\tlet { include: packages = \"auto\", exclude = DEFAULT_EXCLUDE_WORKSPACE, config: workspaceConfig } = workspace;\n\tif (packages === \"auto\") packages = (await glob(\"**/package.json\", {\n\t\tignore: exclude,\n\t\tcwd: rootCwd,\n\t\texpandDirectories: false\n\t})).filter((file) => file !== \"package.json\").map((file) => slash(path.resolve(rootCwd, file, \"..\")));\n\telse packages = (await glob(packages, {\n\t\tignore: exclude,\n\t\tcwd: rootCwd,\n\t\tonlyDirectories: true,\n\t\tabsolute: true,\n\t\texpandDirectories: false\n\t})).map((file) => slash(path.resolve(file)));\n\tif (packages.length === 0) throw new Error(\"No workspace packages found, please check your config\");\n\tif (inlineConfig.filter) {\n\t\tinlineConfig.filter = resolveRegex(inlineConfig.filter);\n\t\tpackages = packages.filter((path$1) => {\n\t\t\treturn typeof inlineConfig.filter === \"string\" ? path$1.includes(inlineConfig.filter) : Array.isArray(inlineConfig.filter) ? inlineConfig.filter.some((filter) => path$1.includes(filter)) : inlineConfig.filter.test(path$1);\n\t\t});\n\t\tif (packages.length === 0) throw new Error(\"No packages matched the filters\");\n\t}\n\tconst files = [];\n\treturn {\n\t\tconfigs: (await Promise.all(packages.map(async (cwd) => {\n\t\t\tdebug$5(\"loading workspace config %s\", cwd);\n\t\t\tconst { configs, file } = await loadConfigFile({\n\t\t\t\t...inlineConfig,\n\t\t\t\tconfig: workspaceConfig,\n\t\t\t\tcwd\n\t\t\t}, cwd);\n\t\t\tif (file) {\n\t\t\t\tdebug$5(\"loaded workspace config file %s\", file);\n\t\t\t\tfiles.push(file);\n\t\t\t} else debug$5(\"no workspace config file found in %s\", cwd);\n\t\t\treturn configs.map((config$1) => ({\n\t\t\t\t...normalized,\n\t\t\t\tcwd,\n\t\t\t\t...config$1\n\t\t\t}));\n\t\t}))).flat(),\n\t\tfiles\n\t};\n}\nasync function resolveUserConfig(userConfig) {\n\tlet { entry, format = [\"es\"], plugins = [], clean = true, silent = false, logLevel = silent ? \"silent\" : \"info\", failOnWarn = false, customLogger, treeshake = true, platform = \"node\", outDir = \"dist\", sourcemap = false, dts, unused = false, watch = false, ignoreWatch, shims = false, skipNodeModulesBundle = false, publint: publint$1 = false, attw: attw$1 = false, fromVite, alias, tsconfig, report = true, target, env = {}, copy: copy$1, publicDir, hash, cwd = process.cwd(), name, workspace, external, noExternal, exports = false, bundle, unbundle = typeof bundle === \"boolean\" ? !bundle : false, removeNodeProtocol, nodeProtocol, cjsDefault = true, globImport = true, inlineOnly, fixedExtension = platform === \"node\" } = userConfig;\n\tconst logger = createLogger(logLevel, {\n\t\tcustomLogger,\n\t\tfailOnWarn\n\t});\n\tif (typeof bundle === \"boolean\") logger.warn(\"`bundle` option is deprecated. Use `unbundle` instead.\");\n\tif (removeNodeProtocol && nodeProtocol) throw new TypeError(\"`removeNodeProtocol` is deprecated. Please only use `nodeProtocol` instead.\");\n\tnodeProtocol = nodeProtocol ?? (removeNodeProtocol ? \"strip\" : false);\n\toutDir = path.resolve(cwd, outDir);\n\tclean = resolveClean(clean, outDir, cwd);\n\tconst pkg = await readPackageJson(cwd);\n\tif (workspace) name ||= pkg?.name;\n\tentry = await resolveEntry(logger, entry, cwd, name);\n\tif (dts == null) dts = !!(pkg?.types || pkg?.typings || hasExportsTypes(pkg));\n\ttarget = resolveTarget(logger, target, pkg, name);\n\ttsconfig = await resolveTsconfig(logger, tsconfig, cwd, name);\n\tif (typeof external === \"string\") external = resolveRegex(external);\n\tif (typeof noExternal === \"string\") noExternal = resolveRegex(noExternal);\n\tif (publint$1 === true) publint$1 = {};\n\tif (attw$1 === true) attw$1 = {};\n\tif (exports === true) exports = {};\n\tif (publicDir) if (copy$1) throw new TypeError(\"`publicDir` is deprecated. Cannot be used with `copy`\");\n\telse logger.warn(`${blue`publicDir`} is deprecated. Use ${blue`copy`} instead.`);\n\tif (fromVite) {\n\t\tconst viteUserConfig = await loadViteConfig(fromVite === true ? \"vite\" : fromVite, cwd);\n\t\tif (viteUserConfig) {\n\t\t\tconst viteAlias = viteUserConfig.resolve?.alias;\n\t\t\tif (Array.isArray(viteAlias)) throw new TypeError(\"Unsupported resolve.alias in Vite config. Use object instead of array\");\n\t\t\tif (viteAlias) alias = {\n\t\t\t\t...alias,\n\t\t\t\t...viteAlias\n\t\t\t};\n\t\t\tif (viteUserConfig.plugins) plugins = [viteUserConfig.plugins, plugins];\n\t\t}\n\t}\n\tignoreWatch = toArray(ignoreWatch).map((ignore) => {\n\t\tignore = resolveRegex(ignore);\n\t\tif (typeof ignore === \"string\") return path.resolve(cwd, ignore);\n\t\treturn ignore;\n\t});\n\tif (noExternal != null && typeof noExternal !== \"function\") {\n\t\tconst noExternalPatterns = toArray(noExternal);\n\t\tnoExternal = (id) => matchPattern(id, noExternalPatterns);\n\t}\n\tif (inlineOnly != null) inlineOnly = toArray(inlineOnly);\n\treturn {\n\t\t...userConfig,\n\t\tentry,\n\t\tplugins,\n\t\tformat: normalizeFormat(format),\n\t\ttarget,\n\t\toutDir,\n\t\tclean,\n\t\tlogger,\n\t\ttreeshake,\n\t\tplatform,\n\t\tsourcemap,\n\t\tdts: dts === true ? {} : dts,\n\t\treport: report === true ? {} : report,\n\t\tunused,\n\t\twatch,\n\t\tignoreWatch,\n\t\tshims,\n\t\tskipNodeModulesBundle,\n\t\tpublint: publint$1,\n\t\tattw: attw$1,\n\t\talias,\n\t\ttsconfig,\n\t\tcwd,\n\t\tenv,\n\t\tpkg,\n\t\tcopy: publicDir || copy$1,\n\t\thash: hash ?? true,\n\t\tname,\n\t\texternal,\n\t\tnoExternal,\n\t\texports,\n\t\tunbundle,\n\t\tnodeProtocol,\n\t\tcjsDefault,\n\t\tglobImport,\n\t\tinlineOnly,\n\t\tfixedExtension\n\t};\n}\nasync function mergeUserOptions(defaults, user, args) {\n\tconst userOutputOptions = typeof user === \"function\" ? await user(defaults, ...args) : user;\n\treturn {\n\t\t...defaults,\n\t\t...userOutputOptions\n\t};\n}\n\n//#endregion\n//#region src/features/attw.ts\nconst debug$4 = Debug(\"tsdown:attw\");\nconst exec$1 = promisify(child_process.exec);\n/**\n* ATTW profiles.\n* Defines the resolution modes to ignore for each profile.\n*\n* @see https://github.com/arethetypeswrong/arethetypeswrong.github.io/blob/main/packages/cli/README.md#profiles\n*/\nconst profiles = {\n\tstrict: [],\n\tnode16: [\"node10\"],\n\tesmOnly: [\"node10\", \"node16-cjs\"]\n};\n/**\n* Format an ATTW problem for display\n*/\nfunction formatProblem(problem) {\n\tconst resolutionKind = \"resolutionKind\" in problem ? ` (${problem.resolutionKind})` : \"\";\n\tconst entrypoint = \"entrypoint\" in problem ? ` at ${problem.entrypoint}` : \"\";\n\tswitch (problem.kind) {\n\t\tcase \"NoResolution\": return `  ❌ No resolution${resolutionKind}${entrypoint}`;\n\t\tcase \"UntypedResolution\": return `  ⚠️  Untyped resolution${resolutionKind}${entrypoint}`;\n\t\tcase \"FalseESM\": return `  🔄 False ESM: Types indicate ESM (${problem.typesModuleKind}) but implementation is CJS (${problem.implementationModuleKind})\\n     Types: ${problem.typesFileName} | Implementation: ${problem.implementationFileName}`;\n\t\tcase \"FalseCJS\": return `  🔄 False CJS: Types indicate CJS (${problem.typesModuleKind}) but implementation is ESM (${problem.implementationModuleKind})\\n     Types: ${problem.typesFileName} | Implementation: ${problem.implementationFileName}`;\n\t\tcase \"CJSResolvesToESM\": return `  ⚡ CJS resolves to ESM${resolutionKind}${entrypoint}`;\n\t\tcase \"NamedExports\": {\n\t\t\tconst missingExports = problem.missing?.length > 0 ? ` Missing: ${problem.missing.join(\", \")}` : \"\";\n\t\t\treturn `  📤 Named exports problem${problem.isMissingAllNamed ? \" (all named exports missing)\" : \"\"}${missingExports}\\n     Types: ${problem.typesFileName} | Implementation: ${problem.implementationFileName}`;\n\t\t}\n\t\tcase \"FallbackCondition\": return `  🎯 Fallback condition used${resolutionKind}${entrypoint}`;\n\t\tcase \"FalseExportDefault\": return `  🎭 False export default\\n     Types: ${problem.typesFileName} | Implementation: ${problem.implementationFileName}`;\n\t\tcase \"MissingExportEquals\": return `  📝 Missing export equals\\n     Types: ${problem.typesFileName} | Implementation: ${problem.implementationFileName}`;\n\t\tcase \"InternalResolutionError\": return `  💥 Internal resolution error in ${problem.fileName} (${problem.resolutionOption})\\n     Module: ${problem.moduleSpecifier} | Mode: ${problem.resolutionMode}`;\n\t\tcase \"UnexpectedModuleSyntax\": return `  📋 Unexpected module syntax in ${problem.fileName}\\n     Expected: ${problem.moduleKind} | Found: ${problem.syntax === 99 ? \"ESM\" : \"CJS\"}`;\n\t\tcase \"CJSOnlyExportsDefault\": return `  🏷️  CJS only exports default in ${problem.fileName}`;\n\t\tdefault: return `  ❓ Unknown problem: ${JSON.stringify(problem)}`;\n\t}\n}\nasync function attw(options) {\n\tif (!options.attw) return;\n\tif (!options.pkg) {\n\t\toptions.logger.warn(\"attw is enabled but package.json is not found\");\n\t\treturn;\n\t}\n\tconst { profile = \"strict\", level = \"warn\",...attwOptions } = options.attw === true ? {} : options.attw;\n\tconst t = performance.now();\n\tdebug$4(\"Running attw check\");\n\tconst tempDir = await mkdtemp(path.join(tmpdir(), \"tsdown-attw-\"));\n\tlet attwCore;\n\ttry {\n\t\tattwCore = await import(\"@arethetypeswrong/core\");\n\t} catch {\n\t\toptions.logger.error(`ATTW check requires ${blue`@arethetypeswrong/core`} to be installed.`);\n\t\treturn;\n\t}\n\ttry {\n\t\tconst { stdout: tarballInfo } = await exec$1(`npm pack --json ----pack-destination ${tempDir}`, {\n\t\t\tencoding: \"utf8\",\n\t\t\tcwd: options.cwd\n\t\t});\n\t\tconst parsed = JSON.parse(tarballInfo);\n\t\tif (!Array.isArray(parsed) || !parsed[0]?.filename) throw new Error(\"Invalid npm pack output format\");\n\t\tconst tarball = await readFile(path.join(tempDir, parsed[0].filename));\n\t\tconst pkg = attwCore.createPackageFromTarballData(tarball);\n\t\tconst checkResult = await attwCore.checkPackage(pkg, attwOptions);\n\t\tif (checkResult.types !== false && checkResult.problems.length) {\n\t\t\tconst problems = checkResult.problems.filter((problem) => {\n\t\t\t\tif (\"resolutionKind\" in problem) return !profiles[profile]?.includes(problem.resolutionKind);\n\t\t\t\treturn true;\n\t\t\t});\n\t\t\tif (problems.length) {\n\t\t\t\tconst problemMessage = `Are the types wrong problems found:\\n${problems.map(formatProblem).join(\"\\n\")}`;\n\t\t\t\tif (level === \"error\") throw new Error(problemMessage);\n\t\t\t\toptions.logger.warn(problemMessage);\n\t\t\t}\n\t\t} else options.logger.success(`No Are the types wrong problems found`, dim`(${Math.round(performance.now() - t)}ms)`);\n\t} catch (error) {\n\t\toptions.logger.error(\"ATTW check failed:\", error);\n\t\tdebug$4(\"Found errors, setting exit code to 1\");\n\t\tprocess.exitCode = 1;\n\t} finally {\n\t\tawait fsRemove(tempDir);\n\t}\n}\n\n//#endregion\n//#region src/features/cjs.ts\n/**\n* If the config includes the `cjs` format and\n* one of its target >= node 23.0.0 / 22.12.0,\n* warn the user about the deprecation of CommonJS.\n*/\nfunction warnLegacyCJS(config) {\n\tif (!config.format.includes(\"cjs\") || !config.target) return;\n\tif (config.target.some((t) => {\n\t\tconst version$1 = coerce(t.split(\"node\")[1]);\n\t\treturn version$1 && satisfies(version$1, \">=23.0.0 || >=22.12.0\");\n\t})) config.logger.warnOnce(\"We recommend using the ESM format instead of CommonJS.\\nThe ESM format is compatible with modern platforms and runtimes, and most new libraries are now distributed only in ESM format.\\nLearn more at https://nodejs.org/en/learn/modules/publishing-a-package#how-did-we-get-here\");\n}\n\n//#endregion\n//#region src/features/copy.ts\nasync function copy(options) {\n\tif (!options.copy) return;\n\tconst copy$1 = typeof options.copy === \"function\" ? await options.copy(options) : options.copy;\n\tawait Promise.all(toArray(copy$1).map((dir) => {\n\t\tconst from = typeof dir === \"string\" ? dir : dir.from;\n\t\tconst to = typeof dir === \"string\" ? path.resolve(options.outDir, path.basename(from)) : dir.to;\n\t\treturn cp$1(options.cwd, from, to);\n\t}));\n}\nfunction cp$1(cwd, from, to) {\n\treturn fsCopy(path.resolve(cwd, from), path.resolve(cwd, to));\n}\n\n//#endregion\n//#region src/features/hooks.ts\nasync function createHooks$1(options) {\n\tconst hooks = createHooks();\n\tif (typeof options.hooks === \"object\") hooks.addHooks(options.hooks);\n\telse if (typeof options.hooks === \"function\") await options.hooks(hooks);\n\treturn {\n\t\thooks,\n\t\tcontext: {\n\t\t\toptions,\n\t\t\thooks\n\t\t}\n\t};\n}\n\n//#endregion\n//#region src/features/publint.ts\nconst debug$3 = Debug(\"tsdown:publint\");\nasync function publint(options) {\n\tif (!options.publint) return;\n\tif (!options.pkg) {\n\t\toptions.logger.warn(prettyName(options.name), \"publint is enabled but package.json is not found\");\n\t\treturn;\n\t}\n\tconst t = performance.now();\n\tdebug$3(\"Running publint\");\n\tconst { publint: publint$1 } = await import(\"publint\");\n\tconst { formatMessage } = await import(\"publint/utils\");\n\tconst { messages } = await publint$1({\n\t\t...options.publint === true ? {} : options.publint,\n\t\tpkgDir: path.dirname(options.pkg.packageJsonPath)\n\t});\n\tdebug$3(\"Found %d issues\", messages.length);\n\tif (!messages.length) options.logger.success(prettyName(options.name), `No publint issues found`, dim`(${Math.round(performance.now() - t)}ms)`);\n\tlet hasError = false;\n\tfor (const message of messages) {\n\t\thasError ||= message.type === \"error\";\n\t\tconst formattedMessage = formatMessage(message, options.pkg);\n\t\tconst logType = {\n\t\t\terror: \"error\",\n\t\t\twarning: \"warn\",\n\t\t\tsuggestion: \"info\"\n\t\t}[message.type];\n\t\toptions.logger[logType](prettyName(options.name), formattedMessage);\n\t}\n\tif (hasError) {\n\t\tdebug$3(\"Found errors, setting exit code to 1\");\n\t\tprocess.exitCode = 1;\n\t}\n}\n\n//#endregion\n//#region src/features/external.ts\nconst debug$2 = Debug(\"tsdown:external\");\nfunction ExternalPlugin({ pkg, noExternal, inlineOnly, skipNodeModulesBundle }) {\n\tconst deps = pkg && Array.from(getProductionDeps(pkg));\n\treturn {\n\t\tname: \"tsdown:external\",\n\t\tasync resolveId(id, importer, extraOptions) {\n\t\t\tif (extraOptions.isEntry || !importer) return;\n\t\t\tconst shouldExternal = await externalStrategy(this, id, importer, extraOptions);\n\t\t\tconst nodeBuiltinModule = isBuiltin(id);\n\t\t\tdebug$2(\"shouldExternal: %s = %s\", id, shouldExternal);\n\t\t\tif (shouldExternal === true || shouldExternal === \"absolute\") return {\n\t\t\t\tid,\n\t\t\t\texternal: shouldExternal,\n\t\t\t\tmoduleSideEffects: nodeBuiltinModule ? false : void 0\n\t\t\t};\n\t\t\tif (inlineOnly && !RE_DTS.test(importer) && !nodeBuiltinModule && id[0] !== \".\" && !path.isAbsolute(id)) {\n\t\t\t\tconst shouldInline = shouldExternal === \"no-external\" || matchPattern(id, inlineOnly);\n\t\t\t\tdebug$2(\"shouldInline: %s = %s\", id, shouldInline);\n\t\t\t\tif (shouldInline) return;\n\t\t\t\tconst resolved = await this.resolve(id, importer, extraOptions);\n\t\t\t\tif (!resolved) return;\n\t\t\t\tif (RE_NODE_MODULES.test(resolved.id)) throw new Error(`${underline(id)} is located in node_modules but is not included in ${blue`inlineOnly`} option.\nTo fix this, either add it to ${blue`inlineOnly`}, declare it as a production or peer dependency in your package.json, or externalize it manually.\nImported by ${underline(importer)}`);\n\t\t\t}\n\t\t}\n\t};\n\t/**\n\t* - `true`: always external\n\t* - `false`: skip, let other plugins handle it\n\t* - `'absolute'`: external as absolute path\n\t* - `'no-external'`: skip, but mark as non-external for inlineOnly check\n\t*/\n\tasync function externalStrategy(context, id, importer, extraOptions) {\n\t\tif (id === shimFile) return false;\n\t\tif (noExternal?.(id, importer)) return \"no-external\";\n\t\tif (skipNodeModulesBundle) {\n\t\t\tconst resolved = await context.resolve(id, importer, extraOptions);\n\t\t\tif (!resolved) return false;\n\t\t\treturn resolved.external || RE_NODE_MODULES.test(resolved.id);\n\t\t}\n\t\tif (deps) return deps.some((dep) => id === dep || id.startsWith(`${dep}/`));\n\t\treturn false;\n\t}\n}\nfunction getProductionDeps(pkg) {\n\treturn new Set([...Object.keys(pkg.dependencies || {}), ...Object.keys(pkg.peerDependencies || {})]);\n}\n\n//#endregion\n//#region src/utils/lightningcss.ts\n/**\n* Converts esbuild target [^1] (which is also used by Rolldown [^2]) to Lightning CSS targets [^3].\n*\n* [^1]: https://esbuild.github.io/api/#target\n* [^2]: https://github.com/rolldown/rolldown/blob/v1.0.0-beta.8/packages/rolldown/src/binding.d.ts#L1429-L1431\n* [^3]: https://lightningcss.dev/transpilation.html\n*/\nfunction esbuildTargetToLightningCSS(target) {\n\tlet targets;\n\tconst matches = [...target.join(\" \").toLowerCase().matchAll(TARGET_REGEX)];\n\tfor (const match of matches) {\n\t\tconst browser = ESBUILD_LIGHTNINGCSS_MAPPING[match[1]];\n\t\tif (!browser) continue;\n\t\tconst version$1 = match[2];\n\t\tconst versionInt = parseVersion(version$1);\n\t\tif (versionInt == null) continue;\n\t\ttargets = targets || {};\n\t\ttargets[browser] = versionInt;\n\t}\n\treturn targets;\n}\nconst TARGET_REGEX = /([a-z]+)(\\d+(?:\\.\\d+)*)/g;\nconst ESBUILD_LIGHTNINGCSS_MAPPING = {\n\tchrome: \"chrome\",\n\tedge: \"edge\",\n\tfirefox: \"firefox\",\n\tie: \"ie\",\n\tios: \"ios_saf\",\n\topera: \"opera\",\n\tsafari: \"safari\"\n};\nfunction parseVersion(version$1) {\n\tconst [major, minor = 0, patch = 0] = version$1.split(\"-\")[0].split(\".\").map((v) => Number.parseInt(v, 10));\n\tif (Number.isNaN(major) || Number.isNaN(minor) || Number.isNaN(patch)) return null;\n\treturn major << 16 | minor << 8 | patch;\n}\n\n//#endregion\n//#region src/features/lightningcss.ts\nasync function LightningCSSPlugin(options) {\n\tconst LightningCSS = await import(\"unplugin-lightningcss/rolldown\").catch(() => void 0);\n\tif (!LightningCSS) return;\n\tconst targets = options.target && esbuildTargetToLightningCSS(options.target);\n\tif (!targets) return;\n\treturn LightningCSS.default({ options: { targets } });\n}\n\n//#endregion\n//#region src/features/node-protocol.ts\nconst modulesWithoutProtocol = builtinModules.filter((mod) => !mod.startsWith(\"node:\"));\n/**\n* The `node:` protocol was added in Node.js v14.18.0.\n* @see https://nodejs.org/api/esm.html#node-imports\n*/\nfunction NodeProtocolPlugin(nodeProtocolOption) {\n\tif (nodeProtocolOption === \"strip\") return {\n\t\tname: \"tsdown:node-protocol:strip\",\n\t\tresolveId: {\n\t\t\torder: \"pre\",\n\t\t\tfilter: { id: /* @__PURE__ */ new RegExp(`^node:(${modulesWithoutProtocol.join(\"|\")})$`) },\n\t\t\thandler(id) {\n\t\t\t\treturn {\n\t\t\t\t\tid: id.slice(5),\n\t\t\t\t\texternal: true,\n\t\t\t\t\tmoduleSideEffects: false\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t};\n\treturn {\n\t\tname: \"tsdown:node-protocol:add\",\n\t\tresolveId: {\n\t\t\torder: \"pre\",\n\t\t\tfilter: { id: /* @__PURE__ */ new RegExp(`^(${modulesWithoutProtocol.join(\"|\")})$`) },\n\t\t\thandler(id) {\n\t\t\t\treturn {\n\t\t\t\t\tid: `node:${id}`,\n\t\t\t\t\texternal: true,\n\t\t\t\t\tmoduleSideEffects: false\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t};\n}\n\n//#endregion\n//#region src/features/output.ts\nfunction resolveJsOutputExtension(packageType, format, fixedExtension) {\n\tswitch (format) {\n\t\tcase \"es\": return !fixedExtension && packageType === \"module\" ? \"js\" : \"mjs\";\n\t\tcase \"cjs\": return fixedExtension || packageType === \"module\" ? \"cjs\" : \"js\";\n\t\tdefault: return \"js\";\n\t}\n}\nfunction resolveChunkFilename({ outExtensions, fixedExtension, pkg, hash }, inputOptions, format) {\n\tconst packageType = getPackageType(pkg);\n\tlet jsExtension;\n\tlet dtsExtension;\n\tif (outExtensions) {\n\t\tconst { js, dts } = outExtensions({\n\t\t\toptions: inputOptions,\n\t\t\tformat,\n\t\t\tpkgType: packageType\n\t\t}) || {};\n\t\tjsExtension = js;\n\t\tdtsExtension = dts;\n\t}\n\tjsExtension ??= `.${resolveJsOutputExtension(packageType, format, fixedExtension)}`;\n\tconst suffix = format === \"iife\" || format === \"umd\" ? `.${format}` : \"\";\n\treturn [createChunkFilename(`[name]${suffix}`, jsExtension, dtsExtension), createChunkFilename(`[name]${suffix}${hash ? \"-[hash]\" : \"\"}`, jsExtension, dtsExtension)];\n}\nfunction createChunkFilename(basename, jsExtension, dtsExtension) {\n\tif (dtsExtension === void 0) return `${basename}${jsExtension}`;\n\treturn (chunk) => {\n\t\treturn `${basename}${chunk.name.endsWith(\".d\") ? dtsExtension : jsExtension}`;\n\t};\n}\nfunction resolveChunkAddon(chunkAddon, format, dts) {\n\tif (!chunkAddon) return;\n\treturn (chunk) => {\n\t\tif (!dts && RE_DTS.test(chunk.fileName)) return \"\";\n\t\tif (typeof chunkAddon === \"function\") chunkAddon = chunkAddon({\n\t\t\tformat,\n\t\t\tfileName: chunk.fileName\n\t\t});\n\t\tif (typeof chunkAddon === \"string\") return chunkAddon;\n\t\tswitch (true) {\n\t\t\tcase RE_JS.test(chunk.fileName): return chunkAddon?.js || \"\";\n\t\t\tcase RE_CSS.test(chunk.fileName): return chunkAddon?.css || \"\";\n\t\t\tcase RE_DTS.test(chunk.fileName): return chunkAddon?.dts || \"\";\n\t\t\tdefault: return \"\";\n\t\t}\n\t};\n}\n\n//#endregion\n//#region src/utils/format.ts\nfunction formatBytes(bytes) {\n\tif (bytes === Infinity) return void 0;\n\treturn `${(bytes / 1e3).toFixed(2)} kB`;\n}\n\n//#endregion\n//#region src/features/report.ts\nconst debug$1 = Debug(\"tsdown:report\");\nconst brotliCompressAsync = promisify(brotliCompress);\nconst gzipAsync = promisify(gzip);\nconst defaultOptions = {\n\tgzip: true,\n\tbrotli: false,\n\tmaxCompressSize: 1e6\n};\nfunction ReportPlugin(userOptions, logger, cwd, cjsDts, name, isMultiFormat) {\n\tconst options = {\n\t\t...defaultOptions,\n\t\t...userOptions\n\t};\n\treturn {\n\t\tname: \"tsdown:report\",\n\t\tasync writeBundle(outputOptions, bundle) {\n\t\t\tconst outDir = path.relative(cwd, outputOptions.file ? path.resolve(cwd, outputOptions.file, \"..\") : path.resolve(cwd, outputOptions.dir));\n\t\t\tconst sizes = [];\n\t\t\tfor (const chunk of Object.values(bundle)) {\n\t\t\t\tconst size = await calcSize(options, chunk);\n\t\t\t\tsizes.push(size);\n\t\t\t}\n\t\t\tconst filenameLength = Math.max(...sizes.map((size) => size.filename.length));\n\t\t\tconst rawTextLength = Math.max(...sizes.map((size) => size.rawText.length));\n\t\t\tconst gzipTextLength = Math.max(...sizes.map((size) => size.gzipText == null ? 0 : size.gzipText.length));\n\t\t\tconst brotliTextLength = Math.max(...sizes.map((size) => size.brotliText == null ? 0 : size.brotliText.length));\n\t\t\tlet totalRaw = 0;\n\t\t\tfor (const size of sizes) {\n\t\t\t\tsize.rawText = size.rawText.padStart(rawTextLength);\n\t\t\t\tsize.gzipText = size.gzipText?.padStart(gzipTextLength);\n\t\t\t\tsize.brotliText = size.brotliText?.padStart(brotliTextLength);\n\t\t\t\ttotalRaw += size.raw;\n\t\t\t}\n\t\t\tsizes.sort((a, b) => {\n\t\t\t\tif (a.dts !== b.dts) return a.dts ? 1 : -1;\n\t\t\t\tif (a.isEntry !== b.isEntry) return a.isEntry ? -1 : 1;\n\t\t\t\treturn b.raw - a.raw;\n\t\t\t});\n\t\t\tconst nameLabel = prettyName(name);\n\t\t\tconst formatLabel = isMultiFormat && prettyFormat(cjsDts ? \"cjs\" : outputOptions.format);\n\t\t\tfor (const size of sizes) {\n\t\t\t\tconst filenameColor = size.dts ? green : noop;\n\t\t\t\tlogger.info(nameLabel, formatLabel, dim(outDir + path.sep) + filenameColor((size.isEntry ? bold : noop)(size.filename)), ` `.repeat(filenameLength - size.filename.length), dim(size.rawText), options.gzip && size.gzipText && dim`│ gzip: ${size.gzipText}`, options.brotli && size.brotliText && dim`│ brotli: ${size.brotliText}`);\n\t\t\t}\n\t\t\tconst totalSizeText = formatBytes(totalRaw);\n\t\t\tlogger.info(nameLabel, formatLabel, `${sizes.length} files, total: ${totalSizeText}`);\n\t\t}\n\t};\n}\nasync function calcSize(options, chunk) {\n\tdebug$1(`Calculating size for`, chunk.fileName);\n\tconst content = chunk.type === \"chunk\" ? chunk.code : chunk.source;\n\tconst raw = Buffer.byteLength(content, \"utf8\");\n\tdebug$1(\"[size]\", chunk.fileName, raw);\n\tlet gzip$1 = Infinity;\n\tlet brotli = Infinity;\n\tif (raw > options.maxCompressSize) debug$1(chunk.fileName, \"file size exceeds limit, skip gzip/brotli\");\n\telse {\n\t\tif (options.gzip) {\n\t\t\tgzip$1 = (await gzipAsync(content)).length;\n\t\t\tdebug$1(\"[gzip]\", chunk.fileName, gzip$1);\n\t\t}\n\t\tif (options.brotli) {\n\t\t\tbrotli = (await brotliCompressAsync(content)).length;\n\t\t\tdebug$1(\"[brotli]\", chunk.fileName, brotli);\n\t\t}\n\t}\n\treturn {\n\t\tfilename: chunk.fileName,\n\t\tdts: RE_DTS.test(chunk.fileName),\n\t\tisEntry: chunk.type === \"chunk\" && chunk.isEntry,\n\t\traw,\n\t\trawText: formatBytes(raw),\n\t\tgzip: gzip$1,\n\t\tgzipText: formatBytes(gzip$1),\n\t\tbrotli,\n\t\tbrotliText: formatBytes(brotli)\n\t};\n}\n\n//#endregion\n//#region src/features/shebang.ts\nconst RE_SHEBANG = /^#!.*/;\nfunction ShebangPlugin(logger, cwd, name, isMultiFormat) {\n\treturn {\n\t\tname: \"tsdown:shebang\",\n\t\tasync writeBundle(options, bundle) {\n\t\t\tfor (const chunk of Object.values(bundle)) {\n\t\t\t\tif (chunk.type !== \"chunk\" || !chunk.isEntry) continue;\n\t\t\t\tif (!RE_SHEBANG.test(chunk.code)) continue;\n\t\t\t\tconst filepath = path.resolve(cwd, options.file || path.join(options.dir, chunk.fileName));\n\t\t\t\tif (await fsExists(filepath)) {\n\t\t\t\t\tlogger.info(prettyName(name), isMultiFormat && prettyFormat(options.format), `Granting execute permission to ${underline(path.relative(cwd, filepath))}`);\n\t\t\t\t\tawait chmod(filepath, 493);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\n//#endregion\n//#region src/features/shims.ts\nfunction getShimsInject(format, platform) {\n\tif (format === \"es\" && platform === \"node\") return {\n\t\t__dirname: [shimFile, \"__dirname\"],\n\t\t__filename: [shimFile, \"__filename\"]\n\t};\n}\n\n//#endregion\n//#region src/features/rolldown.ts\nconst debug = Debug(\"tsdown:rolldown\");\nasync function getBuildOptions(config, format, isMultiFormat, cjsDts = false) {\n\tconst inputOptions = await resolveInputOptions(config, format, cjsDts, isMultiFormat);\n\tconst outputOptions = await resolveOutputOptions(inputOptions, config, format, cjsDts);\n\tconst rolldownConfig = {\n\t\t...inputOptions,\n\t\toutput: outputOptions\n\t};\n\tdebug(\"rolldown config with format \\\"%s\\\" %O\", cjsDts ? \"cjs dts\" : format, rolldownConfig);\n\treturn rolldownConfig;\n}\nasync function resolveInputOptions(config, format, cjsDts, isMultiFormat) {\n\tconst { entry, external, plugins: userPlugins, platform, alias, treeshake, dts, unused, target, shims, tsconfig, cwd, report, env, nodeProtocol, loader, name, logger, cjsDefault, banner, footer, globImport } = config;\n\tconst plugins = [];\n\tif (nodeProtocol) plugins.push(NodeProtocolPlugin(nodeProtocol));\n\tif (config.pkg || config.skipNodeModulesBundle) plugins.push(ExternalPlugin(config));\n\tif (dts) {\n\t\tconst { dts: dtsPlugin } = await import(\"rolldown-plugin-dts\");\n\t\tconst options = {\n\t\t\ttsconfig,\n\t\t\tbanner: resolveChunkAddon(banner, format, true),\n\t\t\tfooter: resolveChunkAddon(footer, format, true),\n\t\t\t...dts\n\t\t};\n\t\tif (format === \"es\") plugins.push(dtsPlugin(options));\n\t\telse if (cjsDts) plugins.push(dtsPlugin({\n\t\t\t...options,\n\t\t\temitDtsOnly: true,\n\t\t\tcjsDefault\n\t\t}));\n\t}\n\tif (!cjsDts) {\n\t\tif (unused) {\n\t\t\tconst { Unused } = await import(\"unplugin-unused\");\n\t\t\tplugins.push(Unused.rolldown(unused === true ? {} : unused));\n\t\t}\n\t\tif (target) plugins.push(await LightningCSSPlugin({ target }));\n\t\tplugins.push(ShebangPlugin(logger, cwd, name, isMultiFormat));\n\t\tif (globImport) plugins.push(importGlobPlugin());\n\t}\n\tif (report && LogLevels[logger.level] >= 3) plugins.push(ReportPlugin(report, logger, cwd, cjsDts, name, isMultiFormat));\n\tif (!cjsDts) plugins.push(userPlugins);\n\tconst define = {\n\t\t...config.define,\n\t\t...Object.keys(env).reduce((acc, key) => {\n\t\t\tconst value = JSON.stringify(env[key]);\n\t\t\tacc[`process.env.${key}`] = value;\n\t\t\tacc[`import.meta.env.${key}`] = value;\n\t\t\treturn acc;\n\t\t}, Object.create(null))\n\t};\n\tconst inject = shims && !cjsDts ? getShimsInject(format, platform) : void 0;\n\treturn await mergeUserOptions({\n\t\tinput: entry,\n\t\tcwd,\n\t\texternal,\n\t\tresolve: { alias },\n\t\ttsconfig: tsconfig || void 0,\n\t\ttreeshake,\n\t\tplatform: cjsDts || format === \"cjs\" ? \"node\" : platform,\n\t\ttransform: {\n\t\t\ttarget,\n\t\t\tdefine,\n\t\t\tinject\n\t\t},\n\t\tplugins,\n\t\tmoduleTypes: loader,\n\t\tlogLevel: logger.level === \"error\" ? \"silent\" : logger.level,\n\t\tonLog: cjsDefault ? (level, log, defaultHandler) => {\n\t\t\tif (log.code === \"MIXED_EXPORT\") return;\n\t\t\tdefaultHandler(level, log);\n\t\t} : void 0\n\t}, config.inputOptions, [format, { cjsDts }]);\n}\nasync function resolveOutputOptions(inputOptions, config, format, cjsDts) {\n\tconst { entry, outDir, sourcemap, minify, unbundle, banner, footer, cjsDefault } = config;\n\tconst [entryFileNames, chunkFileNames] = resolveChunkFilename(config, inputOptions, format);\n\treturn await mergeUserOptions({\n\t\tformat: cjsDts ? \"es\" : format,\n\t\tname: config.globalName,\n\t\tsourcemap,\n\t\tdir: outDir,\n\t\texports: cjsDefault ? \"auto\" : \"named\",\n\t\tminify: !cjsDts && minify,\n\t\tentryFileNames,\n\t\tchunkFileNames,\n\t\tpreserveModules: unbundle,\n\t\tpreserveModulesRoot: unbundle ? lowestCommonAncestor(...Object.values(entry)) : void 0,\n\t\tbanner: resolveChunkAddon(banner, format),\n\t\tfooter: resolveChunkAddon(footer, format)\n\t}, config.outputOptions, [format, { cjsDts }]);\n}\nasync function getDebugRolldownDir() {\n\tif (!debug.enabled) return;\n\treturn await mkdtemp(join(tmpdir(), \"tsdown-config-\"));\n}\nasync function debugBuildOptions(dir, name, format, buildOptions) {\n\tconst outFile = join(dir, `tsdown.config.${format}.js`);\n\thandlePluginInspect(buildOptions.plugins);\n\tconst serialized = util.formatWithOptions({\n\t\tdepth: null,\n\t\tmaxArrayLength: null,\n\t\tmaxStringLength: null\n\t}, buildOptions);\n\tawait writeFile(outFile, `/*\nAuto-generated rolldown config for tsdown debug purposes\ntsdown v${version}, rolldown v${VERSION}\nGenerated on ${(/* @__PURE__ */ new Date()).toISOString()}\nPackage name: ${name || \"not specified\"}\n*/\n\nexport default ${serialized}\\n`);\n\tdebug(\"Wrote debug rolldown config for \\\"%s\\\" (%s) -> %s\", name || \"default name\", format, outFile);\n}\nfunction handlePluginInspect(plugins) {\n\tif (Array.isArray(plugins)) for (const plugin of plugins) handlePluginInspect(plugin);\n\telse if (typeof plugins === \"object\" && plugins !== null && \"name\" in plugins) plugins[util.inspect.custom] = function(depth, options, inspect) {\n\t\tif (\"_options\" in plugins) return inspect({\n\t\t\tname: plugins.name,\n\t\t\toptions: plugins._options\n\t\t}, options);\n\t\telse return `\"rolldown plugin: ${plugins.name}\"`;\n\t};\n}\n\n//#endregion\n//#region src/features/shortcuts.ts\nfunction shortcuts(restart) {\n\tlet actionRunning = false;\n\tasync function onInput(input) {\n\t\tif (actionRunning) return;\n\t\tconst SHORTCUTS = [\n\t\t\t{\n\t\t\t\tkey: \"r\",\n\t\t\t\tdescription: \"reload config and rebuild\",\n\t\t\t\taction() {\n\t\t\t\t\trestart();\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: \"c\",\n\t\t\t\tdescription: \"clear console\",\n\t\t\t\taction() {\n\t\t\t\t\tconsole.clear();\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: \"q\",\n\t\t\t\tdescription: \"quit\",\n\t\t\t\taction() {\n\t\t\t\t\tprocess.exit(0);\n\t\t\t\t}\n\t\t\t}\n\t\t];\n\t\tif (input === \"h\") {\n\t\t\tconst loggedKeys = /* @__PURE__ */ new Set();\n\t\t\tglobalLogger.info(\"  Shortcuts\");\n\t\t\tfor (const shortcut$1 of SHORTCUTS) {\n\t\t\t\tif (loggedKeys.has(shortcut$1.key)) continue;\n\t\t\t\tloggedKeys.add(shortcut$1.key);\n\t\t\t\tif (shortcut$1.action == null) continue;\n\t\t\t\tglobalLogger.info(dim`  press ` + bold`${shortcut$1.key} + enter` + dim` to ${shortcut$1.description}`);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tconst shortcut = SHORTCUTS.find((shortcut$1) => shortcut$1.key === input);\n\t\tif (!shortcut) return;\n\t\tactionRunning = true;\n\t\tawait shortcut.action();\n\t\tactionRunning = false;\n\t}\n\tconst rl = readline.createInterface({ input: process.stdin });\n\trl.on(\"line\", onInput);\n\treturn () => rl.close();\n}\n\n//#endregion\n//#region src/features/watch.ts\nconst endsWithConfig = /[\\\\/](?:(?:package|tsconfig)\\.json|pnpm-(?:workspace|lock)\\.yaml|tsdown\\.config.*)$/;\nasync function watchBuild(options, configFiles, rebuild, restart) {\n\tif (typeof options.watch === \"boolean\" && options.outDir === options.cwd) throw new Error(`Watch is enabled, but output directory is the same as the current working directory.Please specify a different watch directory using ${blue`watch`} option,or set ${blue`outDir`} to a different directory.`);\n\tconst files = toArray(typeof options.watch === \"boolean\" ? options.cwd : options.watch);\n\toptions.logger.info(`Watching for changes in ${files.join(\", \")}`);\n\tfiles.push(...configFiles);\n\tconst { watch } = await import(\"chokidar\");\n\tconst debouncedOnChange = debounce(onChange, 100);\n\tconst watcher = watch(files, {\n\t\tcwd: options.cwd,\n\t\tignoreInitial: true,\n\t\tignorePermissionErrors: true,\n\t\tignored: [\n\t\t\t/[\\\\/]\\.git[\\\\/]/,\n\t\t\tRE_NODE_MODULES,\n\t\t\toptions.outDir,\n\t\t\t...options.ignoreWatch\n\t\t]\n\t});\n\tlet pending = [];\n\tlet pendingPromise;\n\twatcher.on(\"all\", (type, file) => {\n\t\tpending.push(path.resolve(options.cwd, file));\n\t\tdebouncedOnChange();\n\t});\n\treturn watcher;\n\tasync function onChange() {\n\t\tawait pendingPromise;\n\t\tif (!pending.length) return;\n\t\tfor (const file of pending) invalidateContextFile(globalContext, file);\n\t\tif (pending.some((file) => configFiles.includes(file) || endsWithConfig.test(file))) {\n\t\t\toptions.logger.info(`Restarting due to config change...`);\n\t\t\tpendingPromise = restart();\n\t\t} else {\n\t\t\toptions.logger.info(`Change detected: ${pending.join(\", \")}`);\n\t\t\tpendingPromise = rebuild();\n\t\t}\n\t\tpending = [];\n\t\tawait pendingPromise;\n\t}\n}\n\n//#endregion\n//#region src/index.ts\n/**\n* Build with tsdown.\n*/\nasync function build$1(userOptions = {}) {\n\tglobalLogger.level = userOptions.logLevel || (userOptions.silent ? \"error\" : \"info\");\n\tconst { configs, files: configFiles } = await resolveConfig(userOptions);\n\tlet cleanPromise;\n\tconst clean = () => {\n\t\tif (cleanPromise) return cleanPromise;\n\t\treturn cleanPromise = cleanOutDir(configs);\n\t};\n\tglobalLogger.info(\"Build start\");\n\tconst rebuilds = await Promise.all(configs.map((options) => buildSingle(options, clean)));\n\tconst disposeCbs = [];\n\tfor (const [i, config] of configs.entries()) {\n\t\tconst rebuild = rebuilds[i];\n\t\tif (!rebuild) continue;\n\t\tconst watcher = await watchBuild(config, configFiles, rebuild, restart);\n\t\tdisposeCbs.push(() => watcher.close());\n\t}\n\tif (disposeCbs.length) disposeCbs.push(shortcuts(restart));\n\tasync function restart() {\n\t\tfor (const dispose of disposeCbs) await dispose();\n\t\tbuild$1(userOptions);\n\t}\n}\nconst dirname$1 = path.dirname(fileURLToPath(import.meta.url));\nconst pkgRoot = path.resolve(dirname$1, \"..\");\n/** @internal */\nconst shimFile = path.resolve(pkgRoot, \"esm-shims.js\");\n/**\n* Build a single configuration, without watch and shortcuts features.\n*\n* Internal API, not for public use\n*\n* @private\n* @param config Resolved options\n*/\nasync function buildSingle(config, clean) {\n\tconst { format: formats, dts, watch, onSuccess, logger } = config;\n\tlet ab;\n\tconst { hooks, context } = await createHooks$1(config);\n\twarnLegacyCJS(config);\n\tawait rebuild(true);\n\tif (watch) return () => rebuild();\n\tasync function rebuild(first) {\n\t\tconst startTime = performance.now();\n\t\tawait hooks.callHook(\"build:prepare\", context);\n\t\tab?.abort();\n\t\tif (first) await clean();\n\t\telse await cleanOutDir([config]);\n\t\tlet hasErrors = false;\n\t\tconst isMultiFormat = formats.length > 1;\n\t\tconst chunks = {};\n\t\tconst debugRolldownDir = await getDebugRolldownDir();\n\t\tawait Promise.all(formats.map(async (format) => {\n\t\t\ttry {\n\t\t\t\tconst buildOptions = await getBuildOptions(config, format, isMultiFormat, false);\n\t\t\t\tawait hooks.callHook(\"build:before\", {\n\t\t\t\t\t...context,\n\t\t\t\t\tbuildOptions\n\t\t\t\t});\n\t\t\t\tif (debugRolldownDir) await debugBuildOptions(debugRolldownDir, config.name, format, buildOptions);\n\t\t\t\tconst { output } = await build(buildOptions);\n\t\t\t\tchunks[format] = output;\n\t\t\t\tif (format === \"cjs\" && dts) {\n\t\t\t\t\tconst { output: output$1 } = await build(await getBuildOptions(config, format, isMultiFormat, true));\n\t\t\t\t\tchunks[format].push(...output$1);\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (watch) {\n\t\t\t\t\tlogger.error(error);\n\t\t\t\t\thasErrors = true;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}));\n\t\tif (hasErrors) return;\n\t\tawait Promise.all([writeExports(config, chunks), copy(config)]);\n\t\tawait Promise.all([publint(config), attw(config)]);\n\t\tawait hooks.callHook(\"build:done\", context);\n\t\tlogger.success(prettyName(config.name), `${first ? \"Build\" : \"Rebuild\"} complete in ${green(`${Math.round(performance.now() - startTime)}ms`)}`);\n\t\tab = new AbortController();\n\t\tif (typeof onSuccess === \"string\") {\n\t\t\tconst p = exec(onSuccess, [], { nodeOptions: {\n\t\t\t\tshell: true,\n\t\t\t\tstdio: \"inherit\"\n\t\t\t} });\n\t\t\tp.then(({ exitCode }) => {\n\t\t\t\tif (exitCode) process.exitCode = exitCode;\n\t\t\t});\n\t\t\tab.signal.addEventListener(\"abort\", () => {\n\t\t\t\tif (typeof p.pid === \"number\") treeKill(p.pid);\n\t\t\t});\n\t\t} else await onSuccess?.(config, ab.signal);\n\t}\n}\n\n//#endregion\nexport { ReportPlugin as a, ShebangPlugin as i, buildSingle as n, NodeProtocolPlugin as o, shimFile as r, ExternalPlugin as s, build$1 as t };"}
{"timestamp":1761897885369,"action":"HookRenderChunkEnd","plugin_name":"rolldown-plugin-require-cjs","plugin_id":9,"call_id":"db04fbe9-f7c6-47da-a7e5-0f354460f197","content":"$ref:5b37e1658fac80f8c1c4d03efe261bcf582058d61c6dea8c8a2170f9f7ce830d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885370,"action":"HookRenderChunkStart","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"eeeed9bb-d651-4a4b-aed2-d163fd90250f","content":"$ref:5b37e1658fac80f8c1c4d03efe261bcf582058d61c6dea8c8a2170f9f7ce830d","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885370,"action":"HookRenderChunkEnd","plugin_name":"rolldown-plugin-dts:fake-js","plugin_id":4,"call_id":"eeeed9bb-d651-4a4b-aed2-d163fd90250f","content":null,"build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885371,"action":"AssetsReady","assets":[{"chunk_id":0,"content":"import { t as defineConfig } from \"./config-BPLXnzPK.mjs\";\n\nexport { defineConfig };","size":84,"filename":"config.mjs"},{"chunk_id":1,"content":"import { t as defineConfig } from \"./config-BPLXnzPK.mjs\";\nimport { n as buildSingle, r as shimFile, t as build } from \"./src-2nUxf1wc.mjs\";\nimport { a as globalLogger } from \"./package-qYegZAPv.mjs\";\n\nexport { build, buildSingle, defineConfig, globalLogger, shimFile };","size":270,"filename":"index.mjs"},{"chunk_id":2,"content":"import \"./config-BPLXnzPK.mjs\";\nimport { a as ReportPlugin, i as ShebangPlugin, o as NodeProtocolPlugin, s as ExternalPlugin } from \"./src-2nUxf1wc.mjs\";\nimport \"./package-qYegZAPv.mjs\";\n\nexport { ExternalPlugin, NodeProtocolPlugin, ReportPlugin, ShebangPlugin };","size":263,"filename":"plugins.mjs"},{"chunk_id":3,"content":"#!/usr/bin/env node\nimport { createRequire as __cjs_createRequire } from \"node:module\";\nconst __cjs_require = __cjs_createRequire(import.meta.url);\nimport { a as globalLogger, d as resolveComma, m as toArray, t as version } from \"./package-qYegZAPv.mjs\";\nimport module from \"node:module\";\nimport process from \"node:process\";\nimport { dim } from \"ansis\";\nimport { VERSION } from \"rolldown\";\nconst Debug = __cjs_require(\"debug\");\nimport { cac } from \"cac\";\n\n//#region src/cli.ts\nconst cli = cac(\"tsdown\");\ncli.help().version(version);\ncli.command(\"[...files]\", \"Bundle files\", {\n\tignoreOptionDefaultValue: true,\n\tallowUnknownOptions: true\n}).option(\"-c, --config <filename>\", \"Use a custom config file\").option(\"--config-loader <loader>\", \"Config loader to use: auto, native, unconfig\", { default: \"auto\" }).option(\"--no-config\", \"Disable config file\").option(\"-f, --format <format>\", \"Bundle format: esm, cjs, iife, umd\", { default: \"esm\" }).option(\"--clean\", \"Clean output directory, --no-clean to disable\").option(\"--external <module>\", \"Mark dependencies as external\").option(\"--minify\", \"Minify output\").option(\"--debug [feat]\", \"Show debug logs\").option(\"--target <target>\", \"Bundle target, e.g \\\"es2015\\\", \\\"esnext\\\"\").option(\"-l, --logLevel <level>\", \"Set log level: info, warn, error, silent\").option(\"--fail-on-warn\", \"Fail on warnings\", { default: true }).option(\"-d, --out-dir <dir>\", \"Output directory\", { default: \"dist\" }).option(\"--treeshake\", \"Tree-shake bundle\", { default: true }).option(\"--sourcemap\", \"Generate source map\", { default: false }).option(\"--shims\", \"Enable cjs and esm shims \", { default: false }).option(\"--platform <platform>\", \"Target platform\", { default: \"node\" }).option(\"--dts\", \"Generate dts files\").option(\"--publint\", \"Enable publint\", { default: false }).option(\"--attw\", \"Enable Are the types wrong integration\", { default: false }).option(\"--unused\", \"Enable unused dependencies check\", { default: false }).option(\"-w, --watch [path]\", \"Watch mode\").option(\"--ignore-watch <path>\", \"Ignore custom paths in watch mode\").option(\"--from-vite [vitest]\", \"Reuse config from Vite or Vitest\").option(\"--report\", \"Size report\", { default: true }).option(\"--env.* <value>\", \"Define compile-time env variables\").option(\"--on-success <command>\", \"Command to run on success\").option(\"--copy <dir>\", \"Copy files to output dir\").option(\"--public-dir <dir>\", \"Alias for --copy, deprecated\").option(\"--tsconfig <tsconfig>\", \"Set tsconfig path\").option(\"--unbundle\", \"Unbundle mode\").option(\"-W, --workspace [dir]\", \"Enable workspace mode\").option(\"-F, --filter <pattern>\", \"Filter workspace packages, e.g. /regex/ or substring\").option(\"--exports\", \"Generate export-related metadata for package.json (experimental)\").action(async (input, flags) => {\n\tglobalLogger.level = flags.logLevel || (flags.silent ? \"error\" : \"info\");\n\tglobalLogger.info(`tsdown ${dim`v${version}`} powered by rolldown ${dim`v${VERSION}`}`);\n\tconst { build: build$1 } = await import(\"./index.mjs\");\n\tif (input.length > 0) flags.entry = input;\n\tawait build$1(flags);\n});\ncli.command(\"migrate\", \"Migrate from tsup to tsdown\").option(\"-c, --cwd <dir>\", \"Working directory\").option(\"-d, --dry-run\", \"Dry run\").action(async (args) => {\n\tconst { migrate } = await import(\"./migrate-GNvnRFv2.mjs\");\n\tawait migrate(args);\n});\nasync function runCLI() {\n\tcli.parse(process.argv, { run: false });\n\tif (cli.options.debug) {\n\t\tlet namespace;\n\t\tif (cli.options.debug === true) namespace = \"tsdown:*\";\n\t\telse namespace = resolveComma(toArray(cli.options.debug)).map((v) => `tsdown:${v}`).join(\",\");\n\t\tconst enabled = Debug.disable();\n\t\tif (enabled) namespace += `,${enabled}`;\n\t\tDebug.enable(namespace);\n\t\tDebug(\"tsdown:debug\")(\"Debugging enabled\", namespace);\n\t}\n\ttry {\n\t\tawait cli.runMatchedCommand();\n\t} catch (error) {\n\t\tglobalLogger.error(error);\n\t\tprocess.exit(1);\n\t}\n}\n\n//#endregion\n//#region src/run.ts\ntry {\n\tmodule.enableCompileCache?.();\n} catch {}\nrunCLI();\n\n//#endregion\nexport {  };","size":3983,"filename":"run.mjs"},{"chunk_id":4,"content":"import { d as UserConfig, f as UserConfigExport, p as UserConfigFn } from \"./index-CN4ptE9x.mjs\";\nimport { t as defineConfig } from \"./config-Bu8Q0Yxg.mjs\";\nexport { UserConfig, UserConfigExport, UserConfigFn, defineConfig };","size":225,"filename":"config.d.mts"},{"chunk_id":5,"content":"import { A as TsdownChunks, C as OutExtensionFactory, D as RolldownContext, E as BuildContext, M as CopyOptions, N as CopyOptionsFn, O as TsdownHooks, P as AttwOptions, S as OutExtensionContext, T as PackageType, _ as Logger, a as NormalizedFormat, b as ChunkAddonFunction, c as Sourcemap, d as UserConfig, f as UserConfigExport, h as ReportOptions, i as NoExternalFn, j as CopyEntry, k as ExportsOptions, l as TreeshakingOptions, m as Workspace, n as Format, o as PublintOptions, p as UserConfigFn, r as InlineConfig, s as ResolvedConfig, t as DtsOptions, u as UnusedOptions, v as globalLogger, w as OutExtensionObject, x as ChunkAddonObject, y as ChunkAddon } from \"./index-CN4ptE9x.mjs\";\nimport { t as defineConfig } from \"./config-Bu8Q0Yxg.mjs\";\n\n//#region src/index.d.ts\n\n/**\n* Build with tsdown.\n*/\ndeclare function build(userOptions?: InlineConfig): Promise<void>;\n/** @internal */\ndeclare const shimFile: string;\n/**\n* Build a single configuration, without watch and shortcuts features.\n*\n* Internal API, not for public use\n*\n* @private\n* @param config Resolved options\n*/\ndeclare function buildSingle(config: ResolvedConfig, clean: () => Promise<void>): Promise<(() => Promise<void>) | undefined>;\n//#endregion\nexport { AttwOptions, BuildContext, ChunkAddon, ChunkAddonFunction, ChunkAddonObject, CopyEntry, CopyOptions, CopyOptionsFn, DtsOptions, ExportsOptions, Format, InlineConfig, type Logger, NoExternalFn, NormalizedFormat, OutExtensionContext, OutExtensionFactory, OutExtensionObject, PackageType, PublintOptions, ReportOptions, ResolvedConfig, RolldownContext, Sourcemap, TreeshakingOptions, TsdownChunks, TsdownHooks, UnusedOptions, UserConfig, UserConfigExport, UserConfigFn, Workspace, build, buildSingle, defineConfig, globalLogger, shimFile };","size":1766,"filename":"index.d.mts"},{"chunk_id":6,"content":"import { _ as Logger, g as ReportPlugin, s as ResolvedConfig } from \"./index-CN4ptE9x.mjs\";\nimport { Plugin } from \"rolldown\";\nimport { PackageJson } from \"pkg-types\";\n\n//#region src/features/external.d.ts\ndeclare function ExternalPlugin({\n  pkg,\n  noExternal,\n  inlineOnly,\n  skipNodeModulesBundle\n}: ResolvedConfig): Plugin;\n//#endregion\n//#region src/features/shebang.d.ts\ndeclare function ShebangPlugin(logger: Logger, cwd: string, name?: string, isMultiFormat?: boolean): Plugin;\n//#endregion\n//#region src/features/node-protocol.d.ts\n/**\n* The `node:` protocol was added in Node.js v14.18.0.\n* @see https://nodejs.org/api/esm.html#node-imports\n*/\ndeclare function NodeProtocolPlugin(nodeProtocolOption: \"strip\" | true): Plugin;\n//#endregion\nexport { ExternalPlugin, NodeProtocolPlugin, ReportPlugin, ShebangPlugin };","size":822,"filename":"plugins.d.mts"},{"chunk_id":7,"content":"export { };","size":11,"filename":"run.d.mts"},{"chunk_id":8,"content":"import { a as globalLogger, t as version } from \"./package-qYegZAPv.mjs\";\nimport process from \"node:process\";\nimport { bold, green, underline } from \"ansis\";\nimport { readFile, unlink, writeFile } from \"node:fs/promises\";\nimport { existsSync } from \"node:fs\";\nimport { createInterface } from \"node:readline/promises\";\n\n//#region src/migrate.ts\nasync function migrate({ cwd, dryRun }) {\n\tif (dryRun) globalLogger.info(\"Dry run enabled. No changes were made.\");\n\telse {\n\t\tconst rl = createInterface({\n\t\t\tinput: process.stdin,\n\t\t\toutput: process.stdout\n\t\t});\n\t\tglobalLogger.warn(`\\n\\nBefore proceeding, review the migration guide at ${underline`https://tsdown.dev/guide/migrate-from-tsup`}, as this process will modify your files.\\nUncommitted changes will be lost. Use the ${green`--dry-run`} flag to preview changes without applying them.`);\n\t\tconst input = await rl.question(bold`Continue? (Y/n) `);\n\t\trl.close();\n\t\tif (!(input.toLowerCase() === \"y\" || input === \"\")) {\n\t\t\tglobalLogger.error(\"Migration cancelled.\");\n\t\t\tprocess.exitCode = 1;\n\t\t\treturn;\n\t\t}\n\t}\n\tif (cwd) process.chdir(cwd);\n\tlet migrated = await migratePackageJson(dryRun);\n\tif (await migrateTsupConfig(dryRun)) migrated = true;\n\tif (migrated) globalLogger.success(\"Migration completed. Remember to run install command with your package manager.\");\n\telse {\n\t\tglobalLogger.error(\"No migration performed.\");\n\t\tprocess.exitCode = 1;\n\t}\n}\nconst DEP_FIELDS = {\n\tdependencies: `^${version}`,\n\tdevDependencies: `^${version}`,\n\tpeerDependencies: \"*\"\n};\nasync function migratePackageJson(dryRun) {\n\tif (!existsSync(\"package.json\")) {\n\t\tglobalLogger.error(\"No package.json found\");\n\t\treturn false;\n\t}\n\tconst pkgRaw = await readFile(\"package.json\", \"utf8\");\n\tlet pkg = JSON.parse(pkgRaw);\n\tlet found = false;\n\tfor (const [field, semver] of Object.entries(DEP_FIELDS)) if (pkg[field]?.tsup) {\n\t\tglobalLogger.info(`Migrating \\`${field}\\` to tsdown.`);\n\t\tfound = true;\n\t\tpkg[field] = renameKey(pkg[field], \"tsup\", \"tsdown\", semver);\n\t}\n\tif (pkg.scripts) {\n\t\tfor (const key of Object.keys(pkg.scripts)) if (pkg.scripts[key].includes(\"tsup\")) {\n\t\t\tglobalLogger.info(`Migrating \\`${key}\\` script to tsdown`);\n\t\t\tfound = true;\n\t\t\tpkg.scripts[key] = pkg.scripts[key].replaceAll(/tsup(?:-node)?/g, \"tsdown\");\n\t\t}\n\t}\n\tif (pkg.tsup) {\n\t\tglobalLogger.info(\"Migrating `tsup` field in package.json to `tsdown`.\");\n\t\tfound = true;\n\t\tpkg = renameKey(pkg, \"tsup\", \"tsdown\");\n\t}\n\tif (!found) {\n\t\tglobalLogger.warn(\"No tsup-related fields found in package.json\");\n\t\treturn false;\n\t}\n\tconst pkgStr = `${JSON.stringify(pkg, null, pkgRaw.includes(\"\t\") ? \"\t\" : 2)}\\n`;\n\tif (dryRun) {\n\t\tconst { createPatch } = await import(\"diff\");\n\t\tglobalLogger.info(\"[dry-run] package.json:\");\n\t\tconsole.info(createPatch(\"package.json\", pkgRaw, pkgStr));\n\t} else {\n\t\tawait writeFile(\"package.json\", pkgStr);\n\t\tglobalLogger.success(\"Migrated `package.json`\");\n\t}\n\treturn true;\n}\nconst TSUP_FILES = [\n\t\"tsup.config.ts\",\n\t\"tsup.config.cts\",\n\t\"tsup.config.mts\",\n\t\"tsup.config.js\",\n\t\"tsup.config.cjs\",\n\t\"tsup.config.mjs\",\n\t\"tsup.config.json\"\n];\nasync function migrateTsupConfig(dryRun) {\n\tlet found = false;\n\tfor (const file of TSUP_FILES) {\n\t\tif (!existsSync(file)) continue;\n\t\tglobalLogger.info(`Found \\`${file}\\``);\n\t\tfound = true;\n\t\tconst tsupConfigRaw = await readFile(file, \"utf8\");\n\t\tconst tsupConfig = tsupConfigRaw.replaceAll(/\\btsup\\b/g, \"tsdown\").replaceAll(/\\bTSUP\\b/g, \"TSDOWN\");\n\t\tconst renamed = file.replaceAll(\"tsup\", \"tsdown\");\n\t\tif (dryRun) {\n\t\t\tconst { createTwoFilesPatch } = await import(\"diff\");\n\t\t\tglobalLogger.info(`[dry-run] ${file} -> ${renamed}:`);\n\t\t\tconsole.info(createTwoFilesPatch(file, renamed, tsupConfigRaw, tsupConfig));\n\t\t} else {\n\t\t\tawait writeFile(renamed, tsupConfig, \"utf8\");\n\t\t\tawait unlink(file);\n\t\t\tglobalLogger.success(`Migrated \\`${file}\\` to \\`${renamed}\\``);\n\t\t}\n\t}\n\tif (!found) globalLogger.warn(\"No tsup config found\");\n\treturn found;\n}\nfunction renameKey(obj, oldKey, newKey, newValue) {\n\tconst newObj = {};\n\tfor (const key of Object.keys(obj)) if (key === oldKey) newObj[newKey] = newValue || obj[oldKey];\n\telse newObj[key] = obj[key];\n\treturn newObj;\n}\n\n//#endregion\nexport { migrate };","size":4152,"filename":"migrate-GNvnRFv2.mjs"},{"chunk_id":9,"content":"//#region src/config.ts\nfunction defineConfig(options) {\n\treturn options;\n}\n\n//#endregion\nexport { defineConfig as t };","size":119,"filename":"config-BPLXnzPK.mjs"},{"chunk_id":10,"content":"import { createRequire as __cjs_createRequire } from \"node:module\";\nconst __cjs_require = __cjs_createRequire(import.meta.url);\nimport { a as globalLogger, c as debounce, d as resolveComma, f as resolveRegex, i as generateColor, l as matchPattern, m as toArray, n as LogLevels, o as prettyFormat, p as slash, r as createLogger, s as prettyName, t as version, u as noop } from \"./package-qYegZAPv.mjs\";\nimport { builtinModules, isBuiltin } from \"node:module\";\nimport path, { dirname, join, normalize, sep } from \"node:path\";\nimport process from \"node:process\";\nimport { fileURLToPath, pathToFileURL } from \"node:url\";\nimport { blue, bold, dim, green, underline } from \"ansis\";\nimport { VERSION, build } from \"rolldown\";\nimport { exec } from \"tinyexec\";\nconst treeKill = __cjs_require(\"tree-kill\");\nconst Debug = __cjs_require(\"debug\");\nimport { glob } from \"tinyglobby\";\nimport { access, chmod, cp, mkdtemp, readFile, rm, stat, writeFile } from \"node:fs/promises\";\nimport { RE_CSS, RE_DTS, RE_JS, RE_NODE_MODULES } from \"rolldown-plugin-dts/filename\";\nconst minVersion = __cjs_require(\"semver/ranges/min-version.js\");\nimport { up } from \"empathic/find\";\nimport { up as up$1 } from \"empathic/package\";\nimport { loadConfig } from \"unconfig\";\nimport child_process from \"node:child_process\";\nimport { tmpdir } from \"node:os\";\nimport util, { promisify } from \"node:util\";\nconst coerce = __cjs_require(\"semver/functions/coerce.js\");\nconst satisfies = __cjs_require(\"semver/functions/satisfies.js\");\nimport { createHooks } from \"hookable\";\nimport { importGlobPlugin } from \"rolldown/experimental\";\nimport { Buffer } from \"node:buffer\";\nimport { brotliCompress, gzip } from \"node:zlib\";\nimport readline from \"node:readline\";\nimport { globalContext, invalidateContextFile } from \"rolldown-plugin-dts/tsc-context\";\n\n//#region src/utils/fs.ts\nfunction fsExists(path$1) {\n\treturn access(path$1).then(() => true, () => false);\n}\nfunction fsStat(path$1) {\n\treturn stat(path$1).catch(() => null);\n}\nfunction fsRemove(path$1) {\n\treturn rm(path$1, {\n\t\tforce: true,\n\t\trecursive: true\n\t}).catch(() => {});\n}\nfunction fsCopy(from, to) {\n\treturn cp(from, to, {\n\t\trecursive: true,\n\t\tforce: true\n\t});\n}\nfunction lowestCommonAncestor(...filepaths) {\n\tif (filepaths.length === 0) return \"\";\n\tif (filepaths.length === 1) return dirname(filepaths[0]);\n\tfilepaths = filepaths.map(normalize);\n\tconst [first, ...rest] = filepaths;\n\tlet ancestor = first.split(sep);\n\tfor (const filepath of rest) {\n\t\tconst directories = filepath.split(sep, ancestor.length);\n\t\tlet index = 0;\n\t\tfor (const directory of directories) if (directory === ancestor[index]) index += 1;\n\t\telse {\n\t\t\tancestor = ancestor.slice(0, index);\n\t\t\tbreak;\n\t\t}\n\t\tancestor = ancestor.slice(0, index);\n\t}\n\treturn ancestor.length <= 1 && ancestor[0] === \"\" ? sep + ancestor[0] : ancestor.join(sep);\n}\n\n//#endregion\n//#region src/features/clean.ts\nconst debug$7 = Debug(\"tsdown:clean\");\nconst RE_LAST_SLASH = /[/\\\\]$/;\nasync function cleanOutDir(configs) {\n\tconst removes = /* @__PURE__ */ new Set();\n\tfor (const config of configs) {\n\t\tif (!config.clean.length) continue;\n\t\tconst files = await glob(config.clean, {\n\t\t\tcwd: config.cwd,\n\t\t\tabsolute: true,\n\t\t\tonlyFiles: false\n\t\t});\n\t\tconst normalizedOutDir = config.outDir.replace(RE_LAST_SLASH, \"\");\n\t\tfor (const file of files) if (file.replace(RE_LAST_SLASH, \"\") !== normalizedOutDir) removes.add(file);\n\t}\n\tif (!removes.size) return;\n\tglobalLogger.info(`Cleaning ${removes.size} files`);\n\tawait Promise.all([...removes].map(async (file) => {\n\t\tdebug$7(\"Removing\", file);\n\t\tawait fsRemove(file);\n\t}));\n\tdebug$7(\"Removed %d files\", removes.size);\n}\nfunction resolveClean(clean, outDir, cwd) {\n\tif (clean === true) clean = [slash(outDir)];\n\telse if (!clean) clean = [];\n\tif (clean.some((item) => path.resolve(item) === cwd)) throw new Error(\"Cannot clean the current working directory. Please specify a different path to clean option.\");\n\treturn clean;\n}\n\n//#endregion\n//#region src/features/entry.ts\nasync function resolveEntry(logger, entry, cwd, name) {\n\tconst nameLabel = name ? `[${name}] ` : \"\";\n\tif (!entry || Object.keys(entry).length === 0) {\n\t\tconst defaultEntry = path.resolve(cwd, \"src/index.ts\");\n\t\tif (await fsExists(defaultEntry)) entry = { index: defaultEntry };\n\t\telse throw new Error(`${nameLabel}No input files, try \"tsdown <your-file>\" or create src/index.ts`);\n\t}\n\tconst entryMap = await toObjectEntry(entry, cwd);\n\tconst entries = Object.values(entryMap);\n\tif (entries.length === 0) throw new Error(`${nameLabel}Cannot find entry: ${JSON.stringify(entry)}`);\n\tlogger.info(prettyName(name), `entry: ${generateColor(name)(entries.map((entry$1) => path.relative(cwd, entry$1)).join(\", \"))}`);\n\treturn entryMap;\n}\nasync function toObjectEntry(entry, cwd) {\n\tif (typeof entry === \"string\") entry = [entry];\n\tif (!Array.isArray(entry)) return entry;\n\tconst resolvedEntry = (await glob(entry, {\n\t\tcwd,\n\t\texpandDirectories: false\n\t})).map((file) => path.resolve(cwd, file));\n\tconst base = lowestCommonAncestor(...resolvedEntry);\n\treturn Object.fromEntries(resolvedEntry.map((file) => {\n\t\tconst relative = path.relative(base, file);\n\t\treturn [relative.slice(0, relative.length - path.extname(relative).length), file];\n\t}));\n}\n\n//#endregion\n//#region src/features/exports.ts\nasync function writeExports(options, chunks) {\n\tif (!options.exports) return;\n\tconst { outDir, pkg } = options;\n\tif (!pkg) throw new Error(\"`package.json` not found, cannot write exports\");\n\tconst { publishExports,...generated } = await generateExports(pkg, outDir, chunks, options.exports);\n\tconst updatedPkg = {\n\t\t...pkg,\n\t\t...generated,\n\t\tpackageJsonPath: void 0\n\t};\n\tif (publishExports) {\n\t\tupdatedPkg.publishConfig ||= {};\n\t\tupdatedPkg.publishConfig.exports = publishExports;\n\t}\n\tconst original = await readFile(pkg.packageJsonPath, \"utf8\");\n\tlet contents = JSON.stringify(updatedPkg, null, original.includes(\"\t\") ? \"\t\" : 2);\n\tif (original.endsWith(\"\\n\")) contents += \"\\n\";\n\tif (contents !== original) await writeFile(pkg.packageJsonPath, contents, \"utf8\");\n}\nasync function generateExports(pkg, outDir, chunks, { devExports, all, customExports }) {\n\tconst pkgJsonPath = pkg.packageJsonPath;\n\tconst pkgRoot$1 = path.dirname(pkgJsonPath);\n\tconst outDirRelative = slash(path.relative(pkgRoot$1, outDir));\n\tlet main, module$1, cjsTypes, esmTypes;\n\tconst exportsMap = /* @__PURE__ */ new Map();\n\tfor (const [format, chunksByFormat] of Object.entries(chunks)) {\n\t\tif (format !== \"es\" && format !== \"cjs\") continue;\n\t\tconst onlyOneEntry = chunksByFormat.filter((chunk) => chunk.type === \"chunk\" && chunk.isEntry && !RE_DTS.test(chunk.fileName)).length === 1;\n\t\tfor (const chunk of chunksByFormat) {\n\t\t\tif (chunk.type !== \"chunk\" || !chunk.isEntry) continue;\n\t\t\tconst normalizedName = slash(chunk.fileName);\n\t\t\tconst ext = path.extname(chunk.fileName);\n\t\t\tlet name = normalizedName.slice(0, -ext.length);\n\t\t\tconst isDts = name.endsWith(\".d\");\n\t\t\tif (isDts) name = name.slice(0, -2);\n\t\t\tconst isIndex = onlyOneEntry || name === \"index\";\n\t\t\tconst distFile = `${outDirRelative ? `./${outDirRelative}` : \".\"}/${normalizedName}`;\n\t\t\tif (isIndex) {\n\t\t\t\tname = \".\";\n\t\t\t\tif (format === \"cjs\") if (isDts) cjsTypes = distFile;\n\t\t\t\telse main = distFile;\n\t\t\t\telse if (format === \"es\") if (isDts) esmTypes = distFile;\n\t\t\t\telse module$1 = distFile;\n\t\t\t} else if (name.endsWith(\"/index\")) name = `./${name.slice(0, -6)}`;\n\t\t\telse name = `./${name}`;\n\t\t\tlet subExport = exportsMap.get(name);\n\t\t\tif (!subExport) {\n\t\t\t\tsubExport = {};\n\t\t\t\texportsMap.set(name, subExport);\n\t\t\t}\n\t\t\tif (!isDts) {\n\t\t\t\tsubExport[format] = distFile;\n\t\t\t\tif (chunk.facadeModuleId && !subExport.src) subExport.src = `./${slash(path.relative(pkgRoot$1, chunk.facadeModuleId))}`;\n\t\t\t}\n\t\t}\n\t}\n\tconst sortedExportsMap = Array.from(exportsMap.entries()).toSorted(([a], [b]) => {\n\t\tif (a === \"index\") return -1;\n\t\treturn a.localeCompare(b);\n\t});\n\tlet exports = Object.fromEntries(sortedExportsMap.map(([name, subExport]) => [name, genSubExport(devExports, subExport)]));\n\texportMeta(exports, all);\n\tif (customExports) exports = await customExports(exports, {\n\t\tpkg,\n\t\toutDir,\n\t\tchunks,\n\t\tisPublish: false\n\t});\n\tlet publishExports;\n\tif (devExports) {\n\t\tpublishExports = Object.fromEntries(sortedExportsMap.map(([name, subExport]) => [name, genSubExport(false, subExport)]));\n\t\texportMeta(publishExports, all);\n\t\tif (customExports) publishExports = await customExports(publishExports, {\n\t\t\tpkg,\n\t\t\toutDir,\n\t\t\tchunks,\n\t\t\tisPublish: true\n\t\t});\n\t}\n\treturn {\n\t\tmain: main || module$1 || pkg.main,\n\t\tmodule: module$1 || pkg.module,\n\t\ttypes: cjsTypes || esmTypes || pkg.types,\n\t\texports,\n\t\tpublishExports\n\t};\n}\nfunction genSubExport(devExports, { src, es, cjs }) {\n\tif (devExports === true) return src;\n\tlet value;\n\tconst dualFormat = es && cjs;\n\tif (!dualFormat && !devExports) value = cjs || es;\n\telse {\n\t\tvalue = {};\n\t\tif (typeof devExports === \"string\") value[devExports] = src;\n\t\tif (es) value[dualFormat ? \"import\" : \"default\"] = es;\n\t\tif (cjs) value[dualFormat ? \"require\" : \"default\"] = cjs;\n\t}\n\treturn value;\n}\nfunction exportMeta(exports, all) {\n\tif (all) exports[\"./*\"] = \"./*\";\n\telse exports[\"./package.json\"] = \"./package.json\";\n}\nfunction hasExportsTypes(pkg) {\n\tconst exports = pkg?.exports;\n\tif (!exports) return false;\n\tif (typeof exports === \"object\" && exports !== null && !Array.isArray(exports)) {\n\t\tif (\"types\" in exports) return true;\n\t\tif (\".\" in exports) {\n\t\t\tconst mainExport = exports[\".\"];\n\t\t\tif (typeof mainExport === \"object\" && mainExport !== null && \"types\" in mainExport) return true;\n\t\t}\n\t}\n\treturn false;\n}\n\n//#endregion\n//#region src/features/target.ts\nfunction resolveTarget(logger, target, pkg, name) {\n\tif (target === false) return;\n\tif (target == null) {\n\t\tconst pkgTarget = resolvePackageTarget(pkg);\n\t\tif (pkgTarget) target = pkgTarget;\n\t\telse return;\n\t}\n\tif (typeof target === \"number\") throw new TypeError(`Invalid target: ${target}`);\n\tconst targets = resolveComma(toArray(target));\n\tif (targets.length) logger.info(prettyName(name), `target${targets.length > 1 ? \"s\" : \"\"}: ${generateColor(name)(targets.join(\", \"))}`);\n\treturn targets;\n}\nfunction resolvePackageTarget(pkg) {\n\tconst nodeVersion = pkg?.engines?.node;\n\tif (!nodeVersion) return;\n\tconst nodeMinVersion = minVersion(nodeVersion);\n\tif (!nodeMinVersion) return;\n\tif (nodeMinVersion.version === \"0.0.0\") return;\n\treturn `node${nodeMinVersion.version}`;\n}\n\n//#endregion\n//#region src/features/tsconfig.ts\nfunction findTsconfig(cwd, name = \"tsconfig.json\") {\n\treturn up(name, { cwd }) || false;\n}\nasync function resolveTsconfig(logger, tsconfig, cwd, name) {\n\tconst original = tsconfig;\n\tif (tsconfig !== false) {\n\t\tif (tsconfig === true || tsconfig == null) {\n\t\t\ttsconfig = findTsconfig(cwd);\n\t\t\tif (original && !tsconfig) logger.warn(`No tsconfig found in ${blue(cwd)}`);\n\t\t} else {\n\t\t\tconst tsconfigPath = path.resolve(cwd, tsconfig);\n\t\t\tconst stat$1 = await fsStat(tsconfigPath);\n\t\t\tif (stat$1?.isFile()) tsconfig = tsconfigPath;\n\t\t\telse if (stat$1?.isDirectory()) {\n\t\t\t\ttsconfig = findTsconfig(tsconfigPath);\n\t\t\t\tif (!tsconfig) logger.warn(`No tsconfig found in ${blue(tsconfigPath)}`);\n\t\t\t} else {\n\t\t\t\ttsconfig = findTsconfig(cwd, tsconfig);\n\t\t\t\tif (!tsconfig) logger.warn(`tsconfig ${blue(original)} doesn't exist`);\n\t\t\t}\n\t\t}\n\t\tif (tsconfig) logger.info(prettyName(name), `tsconfig: ${generateColor(name)(path.relative(cwd, tsconfig))}`);\n\t}\n\treturn tsconfig;\n}\n\n//#endregion\n//#region src/utils/package.ts\nconst debug$6 = Debug(\"tsdown:package\");\nasync function readPackageJson(dir) {\n\tconst packageJsonPath = up$1({ cwd: dir });\n\tif (!packageJsonPath) return;\n\tdebug$6(\"Reading package.json:\", packageJsonPath);\n\tconst contents = await readFile(packageJsonPath, \"utf8\");\n\treturn {\n\t\t...JSON.parse(contents),\n\t\tpackageJsonPath\n\t};\n}\nfunction getPackageType(pkg) {\n\tif (pkg?.type) {\n\t\tif (![\"module\", \"commonjs\"].includes(pkg.type)) throw new Error(`Invalid package.json type: ${pkg.type}`);\n\t\treturn pkg.type;\n\t}\n}\nfunction normalizeFormat(format) {\n\treturn resolveComma(toArray(format, \"es\")).map((format$1) => {\n\t\tswitch (format$1) {\n\t\t\tcase \"es\":\n\t\t\tcase \"esm\":\n\t\t\tcase \"module\": return \"es\";\n\t\t\tcase \"cjs\":\n\t\t\tcase \"commonjs\": return \"cjs\";\n\t\t\tdefault: return format$1;\n\t\t}\n\t});\n}\n\n//#endregion\n//#region src/config/config.ts\nasync function loadViteConfig(prefix, cwd) {\n\tconst { config, sources: [source] } = await loadConfig({\n\t\tsources: [{\n\t\t\tfiles: `${prefix}.config`,\n\t\t\textensions: [\n\t\t\t\t\"ts\",\n\t\t\t\t\"mts\",\n\t\t\t\t\"cts\",\n\t\t\t\t\"js\",\n\t\t\t\t\"mjs\",\n\t\t\t\t\"cjs\",\n\t\t\t\t\"json\",\n\t\t\t\t\"\"\n\t\t\t]\n\t\t}],\n\t\tcwd,\n\t\tdefaults: {}\n\t});\n\tif (!source) return;\n\tglobalLogger.info(`Using Vite config: ${underline(source)}`);\n\tconst resolved = await config;\n\tif (typeof resolved === \"function\") return resolved({\n\t\tcommand: \"build\",\n\t\tmode: \"production\"\n\t});\n\treturn resolved;\n}\nlet loaded = false;\nasync function loadConfigFile(inlineConfig, workspace) {\n\tlet cwd = inlineConfig.cwd || process.cwd();\n\tlet overrideConfig = false;\n\tlet { config: filePath } = inlineConfig;\n\tif (filePath === false) return { configs: [{}] };\n\tif (typeof filePath === \"string\") {\n\t\tconst stats = await fsStat(filePath);\n\t\tif (stats) {\n\t\t\tconst resolved = path.resolve(filePath);\n\t\t\tif (stats.isFile()) {\n\t\t\t\toverrideConfig = true;\n\t\t\t\tfilePath = resolved;\n\t\t\t\tcwd = path.dirname(filePath);\n\t\t\t} else if (stats.isDirectory()) cwd = resolved;\n\t\t}\n\t}\n\tlet isNative = false;\n\tif (!loaded) {\n\t\tif (!inlineConfig.configLoader || inlineConfig.configLoader === \"auto\") isNative = !!(process.features.typescript || process.versions.bun || process.versions.deno);\n\t\telse if (inlineConfig.configLoader === \"native\") isNative = true;\n\t}\n\tlet { config, sources } = await loadConfig.async({\n\t\tsources: overrideConfig ? [{\n\t\t\tfiles: filePath,\n\t\t\textensions: []\n\t\t}] : [{\n\t\t\tfiles: \"tsdown.config\",\n\t\t\textensions: [\n\t\t\t\t\"ts\",\n\t\t\t\t\"mts\",\n\t\t\t\t\"cts\",\n\t\t\t\t\"js\",\n\t\t\t\t\"mjs\",\n\t\t\t\t\"cjs\",\n\t\t\t\t\"json\",\n\t\t\t\t\"\"\n\t\t\t],\n\t\t\tparser: inlineConfig.configLoader === \"unrun\" ? unrunImport : isNative ? nativeImport : \"auto\"\n\t\t}, {\n\t\t\tfiles: \"package.json\",\n\t\t\textensions: [],\n\t\t\trewrite: (config$1) => config$1?.tsdown\n\t\t}],\n\t\tcwd,\n\t\tstopAt: workspace && path.dirname(workspace),\n\t\tdefaults: {}\n\t}).finally(() => loaded = true);\n\tconfig = await config;\n\tif (typeof config === \"function\") config = await config(inlineConfig);\n\tconfig = toArray(config);\n\tif (config.length === 0) config.push({});\n\tconst file = sources[0];\n\tif (file) globalLogger.info(`Using tsdown config: ${underline(file)}`);\n\treturn {\n\t\tconfigs: config,\n\t\tfile\n\t};\n}\nasync function nativeImport(id) {\n\tconst mod = await import(pathToFileURL(id).href).catch((error) => {\n\t\tif (error?.message?.includes?.(\"Cannot find module\")) {\n\t\t\tconst configError = /* @__PURE__ */ new Error(`Failed to load the config file. Try setting the --config-loader CLI flag to \\`unconfig\\`.\\n\\n${error.message}`);\n\t\t\tconfigError.cause = error;\n\t\t\tthrow configError;\n\t\t} else throw error;\n\t});\n\treturn mod.default || mod;\n}\nasync function unrunImport(id) {\n\tconst { unrun } = await import(\"unrun\");\n\tconst { module: module$1 } = await unrun({ path: pathToFileURL(id).href }).catch((error) => {\n\t\tif (error?.message?.includes?.(\"Cannot find module\")) {\n\t\t\tconst configError = /* @__PURE__ */ new Error(`Failed to load the config file. \\`unrun\\` is experimental; try setting the --config-loader CLI flag to \\`unconfig\\` instead.\\n\\n${error.message}`);\n\t\t\tconfigError.cause = error;\n\t\t\tthrow configError;\n\t\t} else throw error;\n\t});\n\treturn module$1;\n}\n\n//#endregion\n//#region src/config/index.ts\nconst debug$5 = Debug(\"tsdown:options\");\nconst DEFAULT_EXCLUDE_WORKSPACE = [\n\t\"**/node_modules/**\",\n\t\"**/dist/**\",\n\t\"**/test?(s)/**\",\n\t\"**/t?(e)mp/**\"\n];\nasync function resolveConfig(inlineConfig) {\n\tdebug$5(\"inline config %O\", inlineConfig);\n\tconst { configs: rootConfigs, file } = await loadConfigFile(inlineConfig);\n\tconst files = [];\n\tif (file) {\n\t\tfiles.push(file);\n\t\tdebug$5(\"loaded root user config file %s\", file);\n\t\tdebug$5(\"root user configs %O\", rootConfigs);\n\t} else debug$5(\"no root user config file found\");\n\tconst configs = (await Promise.all(rootConfigs.map(async (rootConfig) => {\n\t\tconst { configs: workspaceConfigs, files: workspaceFiles } = await resolveWorkspace(rootConfig, inlineConfig);\n\t\tif (workspaceFiles) files.push(...workspaceFiles);\n\t\treturn Promise.all(workspaceConfigs.filter((config) => !config.workspace || config.entry).map((config) => resolveUserConfig(config)));\n\t}))).flat();\n\tdebug$5(\"resolved configs %O\", configs);\n\treturn {\n\t\tconfigs,\n\t\tfiles\n\t};\n}\nasync function resolveWorkspace(config, inlineConfig) {\n\tconst normalized = {\n\t\t...config,\n\t\t...inlineConfig\n\t};\n\tconst rootCwd = normalized.cwd || process.cwd();\n\tlet { workspace } = normalized;\n\tif (!workspace) return {\n\t\tconfigs: [normalized],\n\t\tfiles: []\n\t};\n\tif (workspace === true) workspace = {};\n\telse if (typeof workspace === \"string\" || Array.isArray(workspace)) workspace = { include: workspace };\n\tlet { include: packages = \"auto\", exclude = DEFAULT_EXCLUDE_WORKSPACE, config: workspaceConfig } = workspace;\n\tif (packages === \"auto\") packages = (await glob(\"**/package.json\", {\n\t\tignore: exclude,\n\t\tcwd: rootCwd,\n\t\texpandDirectories: false\n\t})).filter((file) => file !== \"package.json\").map((file) => slash(path.resolve(rootCwd, file, \"..\")));\n\telse packages = (await glob(packages, {\n\t\tignore: exclude,\n\t\tcwd: rootCwd,\n\t\tonlyDirectories: true,\n\t\tabsolute: true,\n\t\texpandDirectories: false\n\t})).map((file) => slash(path.resolve(file)));\n\tif (packages.length === 0) throw new Error(\"No workspace packages found, please check your config\");\n\tif (inlineConfig.filter) {\n\t\tinlineConfig.filter = resolveRegex(inlineConfig.filter);\n\t\tpackages = packages.filter((path$1) => {\n\t\t\treturn typeof inlineConfig.filter === \"string\" ? path$1.includes(inlineConfig.filter) : Array.isArray(inlineConfig.filter) ? inlineConfig.filter.some((filter) => path$1.includes(filter)) : inlineConfig.filter.test(path$1);\n\t\t});\n\t\tif (packages.length === 0) throw new Error(\"No packages matched the filters\");\n\t}\n\tconst files = [];\n\treturn {\n\t\tconfigs: (await Promise.all(packages.map(async (cwd) => {\n\t\t\tdebug$5(\"loading workspace config %s\", cwd);\n\t\t\tconst { configs, file } = await loadConfigFile({\n\t\t\t\t...inlineConfig,\n\t\t\t\tconfig: workspaceConfig,\n\t\t\t\tcwd\n\t\t\t}, cwd);\n\t\t\tif (file) {\n\t\t\t\tdebug$5(\"loaded workspace config file %s\", file);\n\t\t\t\tfiles.push(file);\n\t\t\t} else debug$5(\"no workspace config file found in %s\", cwd);\n\t\t\treturn configs.map((config$1) => ({\n\t\t\t\t...normalized,\n\t\t\t\tcwd,\n\t\t\t\t...config$1\n\t\t\t}));\n\t\t}))).flat(),\n\t\tfiles\n\t};\n}\nasync function resolveUserConfig(userConfig) {\n\tlet { entry, format = [\"es\"], plugins = [], clean = true, silent = false, logLevel = silent ? \"silent\" : \"info\", failOnWarn = false, customLogger, treeshake = true, platform = \"node\", outDir = \"dist\", sourcemap = false, dts, unused = false, watch = false, ignoreWatch, shims = false, skipNodeModulesBundle = false, publint: publint$1 = false, attw: attw$1 = false, fromVite, alias, tsconfig, report = true, target, env = {}, copy: copy$1, publicDir, hash, cwd = process.cwd(), name, workspace, external, noExternal, exports = false, bundle, unbundle = typeof bundle === \"boolean\" ? !bundle : false, removeNodeProtocol, nodeProtocol, cjsDefault = true, globImport = true, inlineOnly, fixedExtension = platform === \"node\" } = userConfig;\n\tconst logger = createLogger(logLevel, {\n\t\tcustomLogger,\n\t\tfailOnWarn\n\t});\n\tif (typeof bundle === \"boolean\") logger.warn(\"`bundle` option is deprecated. Use `unbundle` instead.\");\n\tif (removeNodeProtocol && nodeProtocol) throw new TypeError(\"`removeNodeProtocol` is deprecated. Please only use `nodeProtocol` instead.\");\n\tnodeProtocol = nodeProtocol ?? (removeNodeProtocol ? \"strip\" : false);\n\toutDir = path.resolve(cwd, outDir);\n\tclean = resolveClean(clean, outDir, cwd);\n\tconst pkg = await readPackageJson(cwd);\n\tif (workspace) name ||= pkg?.name;\n\tentry = await resolveEntry(logger, entry, cwd, name);\n\tif (dts == null) dts = !!(pkg?.types || pkg?.typings || hasExportsTypes(pkg));\n\ttarget = resolveTarget(logger, target, pkg, name);\n\ttsconfig = await resolveTsconfig(logger, tsconfig, cwd, name);\n\tif (typeof external === \"string\") external = resolveRegex(external);\n\tif (typeof noExternal === \"string\") noExternal = resolveRegex(noExternal);\n\tif (publint$1 === true) publint$1 = {};\n\tif (attw$1 === true) attw$1 = {};\n\tif (exports === true) exports = {};\n\tif (publicDir) if (copy$1) throw new TypeError(\"`publicDir` is deprecated. Cannot be used with `copy`\");\n\telse logger.warn(`${blue`publicDir`} is deprecated. Use ${blue`copy`} instead.`);\n\tif (fromVite) {\n\t\tconst viteUserConfig = await loadViteConfig(fromVite === true ? \"vite\" : fromVite, cwd);\n\t\tif (viteUserConfig) {\n\t\t\tconst viteAlias = viteUserConfig.resolve?.alias;\n\t\t\tif (Array.isArray(viteAlias)) throw new TypeError(\"Unsupported resolve.alias in Vite config. Use object instead of array\");\n\t\t\tif (viteAlias) alias = {\n\t\t\t\t...alias,\n\t\t\t\t...viteAlias\n\t\t\t};\n\t\t\tif (viteUserConfig.plugins) plugins = [viteUserConfig.plugins, plugins];\n\t\t}\n\t}\n\tignoreWatch = toArray(ignoreWatch).map((ignore) => {\n\t\tignore = resolveRegex(ignore);\n\t\tif (typeof ignore === \"string\") return path.resolve(cwd, ignore);\n\t\treturn ignore;\n\t});\n\tif (noExternal != null && typeof noExternal !== \"function\") {\n\t\tconst noExternalPatterns = toArray(noExternal);\n\t\tnoExternal = (id) => matchPattern(id, noExternalPatterns);\n\t}\n\tif (inlineOnly != null) inlineOnly = toArray(inlineOnly);\n\treturn {\n\t\t...userConfig,\n\t\tentry,\n\t\tplugins,\n\t\tformat: normalizeFormat(format),\n\t\ttarget,\n\t\toutDir,\n\t\tclean,\n\t\tlogger,\n\t\ttreeshake,\n\t\tplatform,\n\t\tsourcemap,\n\t\tdts: dts === true ? {} : dts,\n\t\treport: report === true ? {} : report,\n\t\tunused,\n\t\twatch,\n\t\tignoreWatch,\n\t\tshims,\n\t\tskipNodeModulesBundle,\n\t\tpublint: publint$1,\n\t\tattw: attw$1,\n\t\talias,\n\t\ttsconfig,\n\t\tcwd,\n\t\tenv,\n\t\tpkg,\n\t\tcopy: publicDir || copy$1,\n\t\thash: hash ?? true,\n\t\tname,\n\t\texternal,\n\t\tnoExternal,\n\t\texports,\n\t\tunbundle,\n\t\tnodeProtocol,\n\t\tcjsDefault,\n\t\tglobImport,\n\t\tinlineOnly,\n\t\tfixedExtension\n\t};\n}\nasync function mergeUserOptions(defaults, user, args) {\n\tconst userOutputOptions = typeof user === \"function\" ? await user(defaults, ...args) : user;\n\treturn {\n\t\t...defaults,\n\t\t...userOutputOptions\n\t};\n}\n\n//#endregion\n//#region src/features/attw.ts\nconst debug$4 = Debug(\"tsdown:attw\");\nconst exec$1 = promisify(child_process.exec);\n/**\n* ATTW profiles.\n* Defines the resolution modes to ignore for each profile.\n*\n* @see https://github.com/arethetypeswrong/arethetypeswrong.github.io/blob/main/packages/cli/README.md#profiles\n*/\nconst profiles = {\n\tstrict: [],\n\tnode16: [\"node10\"],\n\tesmOnly: [\"node10\", \"node16-cjs\"]\n};\n/**\n* Format an ATTW problem for display\n*/\nfunction formatProblem(problem) {\n\tconst resolutionKind = \"resolutionKind\" in problem ? ` (${problem.resolutionKind})` : \"\";\n\tconst entrypoint = \"entrypoint\" in problem ? ` at ${problem.entrypoint}` : \"\";\n\tswitch (problem.kind) {\n\t\tcase \"NoResolution\": return `  ❌ No resolution${resolutionKind}${entrypoint}`;\n\t\tcase \"UntypedResolution\": return `  ⚠️  Untyped resolution${resolutionKind}${entrypoint}`;\n\t\tcase \"FalseESM\": return `  🔄 False ESM: Types indicate ESM (${problem.typesModuleKind}) but implementation is CJS (${problem.implementationModuleKind})\\n     Types: ${problem.typesFileName} | Implementation: ${problem.implementationFileName}`;\n\t\tcase \"FalseCJS\": return `  🔄 False CJS: Types indicate CJS (${problem.typesModuleKind}) but implementation is ESM (${problem.implementationModuleKind})\\n     Types: ${problem.typesFileName} | Implementation: ${problem.implementationFileName}`;\n\t\tcase \"CJSResolvesToESM\": return `  ⚡ CJS resolves to ESM${resolutionKind}${entrypoint}`;\n\t\tcase \"NamedExports\": {\n\t\t\tconst missingExports = problem.missing?.length > 0 ? ` Missing: ${problem.missing.join(\", \")}` : \"\";\n\t\t\treturn `  📤 Named exports problem${problem.isMissingAllNamed ? \" (all named exports missing)\" : \"\"}${missingExports}\\n     Types: ${problem.typesFileName} | Implementation: ${problem.implementationFileName}`;\n\t\t}\n\t\tcase \"FallbackCondition\": return `  🎯 Fallback condition used${resolutionKind}${entrypoint}`;\n\t\tcase \"FalseExportDefault\": return `  🎭 False export default\\n     Types: ${problem.typesFileName} | Implementation: ${problem.implementationFileName}`;\n\t\tcase \"MissingExportEquals\": return `  📝 Missing export equals\\n     Types: ${problem.typesFileName} | Implementation: ${problem.implementationFileName}`;\n\t\tcase \"InternalResolutionError\": return `  💥 Internal resolution error in ${problem.fileName} (${problem.resolutionOption})\\n     Module: ${problem.moduleSpecifier} | Mode: ${problem.resolutionMode}`;\n\t\tcase \"UnexpectedModuleSyntax\": return `  📋 Unexpected module syntax in ${problem.fileName}\\n     Expected: ${problem.moduleKind} | Found: ${problem.syntax === 99 ? \"ESM\" : \"CJS\"}`;\n\t\tcase \"CJSOnlyExportsDefault\": return `  🏷️  CJS only exports default in ${problem.fileName}`;\n\t\tdefault: return `  ❓ Unknown problem: ${JSON.stringify(problem)}`;\n\t}\n}\nasync function attw(options) {\n\tif (!options.attw) return;\n\tif (!options.pkg) {\n\t\toptions.logger.warn(\"attw is enabled but package.json is not found\");\n\t\treturn;\n\t}\n\tconst { profile = \"strict\", level = \"warn\",...attwOptions } = options.attw === true ? {} : options.attw;\n\tconst t = performance.now();\n\tdebug$4(\"Running attw check\");\n\tconst tempDir = await mkdtemp(path.join(tmpdir(), \"tsdown-attw-\"));\n\tlet attwCore;\n\ttry {\n\t\tattwCore = await import(\"@arethetypeswrong/core\");\n\t} catch {\n\t\toptions.logger.error(`ATTW check requires ${blue`@arethetypeswrong/core`} to be installed.`);\n\t\treturn;\n\t}\n\ttry {\n\t\tconst { stdout: tarballInfo } = await exec$1(`npm pack --json ----pack-destination ${tempDir}`, {\n\t\t\tencoding: \"utf8\",\n\t\t\tcwd: options.cwd\n\t\t});\n\t\tconst parsed = JSON.parse(tarballInfo);\n\t\tif (!Array.isArray(parsed) || !parsed[0]?.filename) throw new Error(\"Invalid npm pack output format\");\n\t\tconst tarball = await readFile(path.join(tempDir, parsed[0].filename));\n\t\tconst pkg = attwCore.createPackageFromTarballData(tarball);\n\t\tconst checkResult = await attwCore.checkPackage(pkg, attwOptions);\n\t\tif (checkResult.types !== false && checkResult.problems.length) {\n\t\t\tconst problems = checkResult.problems.filter((problem) => {\n\t\t\t\tif (\"resolutionKind\" in problem) return !profiles[profile]?.includes(problem.resolutionKind);\n\t\t\t\treturn true;\n\t\t\t});\n\t\t\tif (problems.length) {\n\t\t\t\tconst problemMessage = `Are the types wrong problems found:\\n${problems.map(formatProblem).join(\"\\n\")}`;\n\t\t\t\tif (level === \"error\") throw new Error(problemMessage);\n\t\t\t\toptions.logger.warn(problemMessage);\n\t\t\t}\n\t\t} else options.logger.success(`No Are the types wrong problems found`, dim`(${Math.round(performance.now() - t)}ms)`);\n\t} catch (error) {\n\t\toptions.logger.error(\"ATTW check failed:\", error);\n\t\tdebug$4(\"Found errors, setting exit code to 1\");\n\t\tprocess.exitCode = 1;\n\t} finally {\n\t\tawait fsRemove(tempDir);\n\t}\n}\n\n//#endregion\n//#region src/features/cjs.ts\n/**\n* If the config includes the `cjs` format and\n* one of its target >= node 23.0.0 / 22.12.0,\n* warn the user about the deprecation of CommonJS.\n*/\nfunction warnLegacyCJS(config) {\n\tif (!config.format.includes(\"cjs\") || !config.target) return;\n\tif (config.target.some((t) => {\n\t\tconst version$1 = coerce(t.split(\"node\")[1]);\n\t\treturn version$1 && satisfies(version$1, \">=23.0.0 || >=22.12.0\");\n\t})) config.logger.warnOnce(\"We recommend using the ESM format instead of CommonJS.\\nThe ESM format is compatible with modern platforms and runtimes, and most new libraries are now distributed only in ESM format.\\nLearn more at https://nodejs.org/en/learn/modules/publishing-a-package#how-did-we-get-here\");\n}\n\n//#endregion\n//#region src/features/copy.ts\nasync function copy(options) {\n\tif (!options.copy) return;\n\tconst copy$1 = typeof options.copy === \"function\" ? await options.copy(options) : options.copy;\n\tawait Promise.all(toArray(copy$1).map((dir) => {\n\t\tconst from = typeof dir === \"string\" ? dir : dir.from;\n\t\tconst to = typeof dir === \"string\" ? path.resolve(options.outDir, path.basename(from)) : dir.to;\n\t\treturn cp$1(options.cwd, from, to);\n\t}));\n}\nfunction cp$1(cwd, from, to) {\n\treturn fsCopy(path.resolve(cwd, from), path.resolve(cwd, to));\n}\n\n//#endregion\n//#region src/features/hooks.ts\nasync function createHooks$1(options) {\n\tconst hooks = createHooks();\n\tif (typeof options.hooks === \"object\") hooks.addHooks(options.hooks);\n\telse if (typeof options.hooks === \"function\") await options.hooks(hooks);\n\treturn {\n\t\thooks,\n\t\tcontext: {\n\t\t\toptions,\n\t\t\thooks\n\t\t}\n\t};\n}\n\n//#endregion\n//#region src/features/publint.ts\nconst debug$3 = Debug(\"tsdown:publint\");\nasync function publint(options) {\n\tif (!options.publint) return;\n\tif (!options.pkg) {\n\t\toptions.logger.warn(prettyName(options.name), \"publint is enabled but package.json is not found\");\n\t\treturn;\n\t}\n\tconst t = performance.now();\n\tdebug$3(\"Running publint\");\n\tconst { publint: publint$1 } = await import(\"publint\");\n\tconst { formatMessage } = await import(\"publint/utils\");\n\tconst { messages } = await publint$1({\n\t\t...options.publint === true ? {} : options.publint,\n\t\tpkgDir: path.dirname(options.pkg.packageJsonPath)\n\t});\n\tdebug$3(\"Found %d issues\", messages.length);\n\tif (!messages.length) options.logger.success(prettyName(options.name), `No publint issues found`, dim`(${Math.round(performance.now() - t)}ms)`);\n\tlet hasError = false;\n\tfor (const message of messages) {\n\t\thasError ||= message.type === \"error\";\n\t\tconst formattedMessage = formatMessage(message, options.pkg);\n\t\tconst logType = {\n\t\t\terror: \"error\",\n\t\t\twarning: \"warn\",\n\t\t\tsuggestion: \"info\"\n\t\t}[message.type];\n\t\toptions.logger[logType](prettyName(options.name), formattedMessage);\n\t}\n\tif (hasError) {\n\t\tdebug$3(\"Found errors, setting exit code to 1\");\n\t\tprocess.exitCode = 1;\n\t}\n}\n\n//#endregion\n//#region src/features/external.ts\nconst debug$2 = Debug(\"tsdown:external\");\nfunction ExternalPlugin({ pkg, noExternal, inlineOnly, skipNodeModulesBundle }) {\n\tconst deps = pkg && Array.from(getProductionDeps(pkg));\n\treturn {\n\t\tname: \"tsdown:external\",\n\t\tasync resolveId(id, importer, extraOptions) {\n\t\t\tif (extraOptions.isEntry || !importer) return;\n\t\t\tconst shouldExternal = await externalStrategy(this, id, importer, extraOptions);\n\t\t\tconst nodeBuiltinModule = isBuiltin(id);\n\t\t\tdebug$2(\"shouldExternal: %s = %s\", id, shouldExternal);\n\t\t\tif (shouldExternal === true || shouldExternal === \"absolute\") return {\n\t\t\t\tid,\n\t\t\t\texternal: shouldExternal,\n\t\t\t\tmoduleSideEffects: nodeBuiltinModule ? false : void 0\n\t\t\t};\n\t\t\tif (inlineOnly && !RE_DTS.test(importer) && !nodeBuiltinModule && id[0] !== \".\" && !path.isAbsolute(id)) {\n\t\t\t\tconst shouldInline = shouldExternal === \"no-external\" || matchPattern(id, inlineOnly);\n\t\t\t\tdebug$2(\"shouldInline: %s = %s\", id, shouldInline);\n\t\t\t\tif (shouldInline) return;\n\t\t\t\tconst resolved = await this.resolve(id, importer, extraOptions);\n\t\t\t\tif (!resolved) return;\n\t\t\t\tif (RE_NODE_MODULES.test(resolved.id)) throw new Error(`${underline(id)} is located in node_modules but is not included in ${blue`inlineOnly`} option.\nTo fix this, either add it to ${blue`inlineOnly`}, declare it as a production or peer dependency in your package.json, or externalize it manually.\nImported by ${underline(importer)}`);\n\t\t\t}\n\t\t}\n\t};\n\t/**\n\t* - `true`: always external\n\t* - `false`: skip, let other plugins handle it\n\t* - `'absolute'`: external as absolute path\n\t* - `'no-external'`: skip, but mark as non-external for inlineOnly check\n\t*/\n\tasync function externalStrategy(context, id, importer, extraOptions) {\n\t\tif (id === shimFile) return false;\n\t\tif (noExternal?.(id, importer)) return \"no-external\";\n\t\tif (skipNodeModulesBundle) {\n\t\t\tconst resolved = await context.resolve(id, importer, extraOptions);\n\t\t\tif (!resolved) return false;\n\t\t\treturn resolved.external || RE_NODE_MODULES.test(resolved.id);\n\t\t}\n\t\tif (deps) return deps.some((dep) => id === dep || id.startsWith(`${dep}/`));\n\t\treturn false;\n\t}\n}\nfunction getProductionDeps(pkg) {\n\treturn new Set([...Object.keys(pkg.dependencies || {}), ...Object.keys(pkg.peerDependencies || {})]);\n}\n\n//#endregion\n//#region src/utils/lightningcss.ts\n/**\n* Converts esbuild target [^1] (which is also used by Rolldown [^2]) to Lightning CSS targets [^3].\n*\n* [^1]: https://esbuild.github.io/api/#target\n* [^2]: https://github.com/rolldown/rolldown/blob/v1.0.0-beta.8/packages/rolldown/src/binding.d.ts#L1429-L1431\n* [^3]: https://lightningcss.dev/transpilation.html\n*/\nfunction esbuildTargetToLightningCSS(target) {\n\tlet targets;\n\tconst matches = [...target.join(\" \").toLowerCase().matchAll(TARGET_REGEX)];\n\tfor (const match of matches) {\n\t\tconst browser = ESBUILD_LIGHTNINGCSS_MAPPING[match[1]];\n\t\tif (!browser) continue;\n\t\tconst version$1 = match[2];\n\t\tconst versionInt = parseVersion(version$1);\n\t\tif (versionInt == null) continue;\n\t\ttargets = targets || {};\n\t\ttargets[browser] = versionInt;\n\t}\n\treturn targets;\n}\nconst TARGET_REGEX = /([a-z]+)(\\d+(?:\\.\\d+)*)/g;\nconst ESBUILD_LIGHTNINGCSS_MAPPING = {\n\tchrome: \"chrome\",\n\tedge: \"edge\",\n\tfirefox: \"firefox\",\n\tie: \"ie\",\n\tios: \"ios_saf\",\n\topera: \"opera\",\n\tsafari: \"safari\"\n};\nfunction parseVersion(version$1) {\n\tconst [major, minor = 0, patch = 0] = version$1.split(\"-\")[0].split(\".\").map((v) => Number.parseInt(v, 10));\n\tif (Number.isNaN(major) || Number.isNaN(minor) || Number.isNaN(patch)) return null;\n\treturn major << 16 | minor << 8 | patch;\n}\n\n//#endregion\n//#region src/features/lightningcss.ts\nasync function LightningCSSPlugin(options) {\n\tconst LightningCSS = await import(\"unplugin-lightningcss/rolldown\").catch(() => void 0);\n\tif (!LightningCSS) return;\n\tconst targets = options.target && esbuildTargetToLightningCSS(options.target);\n\tif (!targets) return;\n\treturn LightningCSS.default({ options: { targets } });\n}\n\n//#endregion\n//#region src/features/node-protocol.ts\nconst modulesWithoutProtocol = builtinModules.filter((mod) => !mod.startsWith(\"node:\"));\n/**\n* The `node:` protocol was added in Node.js v14.18.0.\n* @see https://nodejs.org/api/esm.html#node-imports\n*/\nfunction NodeProtocolPlugin(nodeProtocolOption) {\n\tif (nodeProtocolOption === \"strip\") return {\n\t\tname: \"tsdown:node-protocol:strip\",\n\t\tresolveId: {\n\t\t\torder: \"pre\",\n\t\t\tfilter: { id: /* @__PURE__ */ new RegExp(`^node:(${modulesWithoutProtocol.join(\"|\")})$`) },\n\t\t\thandler(id) {\n\t\t\t\treturn {\n\t\t\t\t\tid: id.slice(5),\n\t\t\t\t\texternal: true,\n\t\t\t\t\tmoduleSideEffects: false\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t};\n\treturn {\n\t\tname: \"tsdown:node-protocol:add\",\n\t\tresolveId: {\n\t\t\torder: \"pre\",\n\t\t\tfilter: { id: /* @__PURE__ */ new RegExp(`^(${modulesWithoutProtocol.join(\"|\")})$`) },\n\t\t\thandler(id) {\n\t\t\t\treturn {\n\t\t\t\t\tid: `node:${id}`,\n\t\t\t\t\texternal: true,\n\t\t\t\t\tmoduleSideEffects: false\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t};\n}\n\n//#endregion\n//#region src/features/output.ts\nfunction resolveJsOutputExtension(packageType, format, fixedExtension) {\n\tswitch (format) {\n\t\tcase \"es\": return !fixedExtension && packageType === \"module\" ? \"js\" : \"mjs\";\n\t\tcase \"cjs\": return fixedExtension || packageType === \"module\" ? \"cjs\" : \"js\";\n\t\tdefault: return \"js\";\n\t}\n}\nfunction resolveChunkFilename({ outExtensions, fixedExtension, pkg, hash }, inputOptions, format) {\n\tconst packageType = getPackageType(pkg);\n\tlet jsExtension;\n\tlet dtsExtension;\n\tif (outExtensions) {\n\t\tconst { js, dts } = outExtensions({\n\t\t\toptions: inputOptions,\n\t\t\tformat,\n\t\t\tpkgType: packageType\n\t\t}) || {};\n\t\tjsExtension = js;\n\t\tdtsExtension = dts;\n\t}\n\tjsExtension ??= `.${resolveJsOutputExtension(packageType, format, fixedExtension)}`;\n\tconst suffix = format === \"iife\" || format === \"umd\" ? `.${format}` : \"\";\n\treturn [createChunkFilename(`[name]${suffix}`, jsExtension, dtsExtension), createChunkFilename(`[name]${suffix}${hash ? \"-[hash]\" : \"\"}`, jsExtension, dtsExtension)];\n}\nfunction createChunkFilename(basename, jsExtension, dtsExtension) {\n\tif (dtsExtension === void 0) return `${basename}${jsExtension}`;\n\treturn (chunk) => {\n\t\treturn `${basename}${chunk.name.endsWith(\".d\") ? dtsExtension : jsExtension}`;\n\t};\n}\nfunction resolveChunkAddon(chunkAddon, format, dts) {\n\tif (!chunkAddon) return;\n\treturn (chunk) => {\n\t\tif (!dts && RE_DTS.test(chunk.fileName)) return \"\";\n\t\tif (typeof chunkAddon === \"function\") chunkAddon = chunkAddon({\n\t\t\tformat,\n\t\t\tfileName: chunk.fileName\n\t\t});\n\t\tif (typeof chunkAddon === \"string\") return chunkAddon;\n\t\tswitch (true) {\n\t\t\tcase RE_JS.test(chunk.fileName): return chunkAddon?.js || \"\";\n\t\t\tcase RE_CSS.test(chunk.fileName): return chunkAddon?.css || \"\";\n\t\t\tcase RE_DTS.test(chunk.fileName): return chunkAddon?.dts || \"\";\n\t\t\tdefault: return \"\";\n\t\t}\n\t};\n}\n\n//#endregion\n//#region src/utils/format.ts\nfunction formatBytes(bytes) {\n\tif (bytes === Infinity) return void 0;\n\treturn `${(bytes / 1e3).toFixed(2)} kB`;\n}\n\n//#endregion\n//#region src/features/report.ts\nconst debug$1 = Debug(\"tsdown:report\");\nconst brotliCompressAsync = promisify(brotliCompress);\nconst gzipAsync = promisify(gzip);\nconst defaultOptions = {\n\tgzip: true,\n\tbrotli: false,\n\tmaxCompressSize: 1e6\n};\nfunction ReportPlugin(userOptions, logger, cwd, cjsDts, name, isMultiFormat) {\n\tconst options = {\n\t\t...defaultOptions,\n\t\t...userOptions\n\t};\n\treturn {\n\t\tname: \"tsdown:report\",\n\t\tasync writeBundle(outputOptions, bundle) {\n\t\t\tconst outDir = path.relative(cwd, outputOptions.file ? path.resolve(cwd, outputOptions.file, \"..\") : path.resolve(cwd, outputOptions.dir));\n\t\t\tconst sizes = [];\n\t\t\tfor (const chunk of Object.values(bundle)) {\n\t\t\t\tconst size = await calcSize(options, chunk);\n\t\t\t\tsizes.push(size);\n\t\t\t}\n\t\t\tconst filenameLength = Math.max(...sizes.map((size) => size.filename.length));\n\t\t\tconst rawTextLength = Math.max(...sizes.map((size) => size.rawText.length));\n\t\t\tconst gzipTextLength = Math.max(...sizes.map((size) => size.gzipText == null ? 0 : size.gzipText.length));\n\t\t\tconst brotliTextLength = Math.max(...sizes.map((size) => size.brotliText == null ? 0 : size.brotliText.length));\n\t\t\tlet totalRaw = 0;\n\t\t\tfor (const size of sizes) {\n\t\t\t\tsize.rawText = size.rawText.padStart(rawTextLength);\n\t\t\t\tsize.gzipText = size.gzipText?.padStart(gzipTextLength);\n\t\t\t\tsize.brotliText = size.brotliText?.padStart(brotliTextLength);\n\t\t\t\ttotalRaw += size.raw;\n\t\t\t}\n\t\t\tsizes.sort((a, b) => {\n\t\t\t\tif (a.dts !== b.dts) return a.dts ? 1 : -1;\n\t\t\t\tif (a.isEntry !== b.isEntry) return a.isEntry ? -1 : 1;\n\t\t\t\treturn b.raw - a.raw;\n\t\t\t});\n\t\t\tconst nameLabel = prettyName(name);\n\t\t\tconst formatLabel = isMultiFormat && prettyFormat(cjsDts ? \"cjs\" : outputOptions.format);\n\t\t\tfor (const size of sizes) {\n\t\t\t\tconst filenameColor = size.dts ? green : noop;\n\t\t\t\tlogger.info(nameLabel, formatLabel, dim(outDir + path.sep) + filenameColor((size.isEntry ? bold : noop)(size.filename)), ` `.repeat(filenameLength - size.filename.length), dim(size.rawText), options.gzip && size.gzipText && dim`│ gzip: ${size.gzipText}`, options.brotli && size.brotliText && dim`│ brotli: ${size.brotliText}`);\n\t\t\t}\n\t\t\tconst totalSizeText = formatBytes(totalRaw);\n\t\t\tlogger.info(nameLabel, formatLabel, `${sizes.length} files, total: ${totalSizeText}`);\n\t\t}\n\t};\n}\nasync function calcSize(options, chunk) {\n\tdebug$1(`Calculating size for`, chunk.fileName);\n\tconst content = chunk.type === \"chunk\" ? chunk.code : chunk.source;\n\tconst raw = Buffer.byteLength(content, \"utf8\");\n\tdebug$1(\"[size]\", chunk.fileName, raw);\n\tlet gzip$1 = Infinity;\n\tlet brotli = Infinity;\n\tif (raw > options.maxCompressSize) debug$1(chunk.fileName, \"file size exceeds limit, skip gzip/brotli\");\n\telse {\n\t\tif (options.gzip) {\n\t\t\tgzip$1 = (await gzipAsync(content)).length;\n\t\t\tdebug$1(\"[gzip]\", chunk.fileName, gzip$1);\n\t\t}\n\t\tif (options.brotli) {\n\t\t\tbrotli = (await brotliCompressAsync(content)).length;\n\t\t\tdebug$1(\"[brotli]\", chunk.fileName, brotli);\n\t\t}\n\t}\n\treturn {\n\t\tfilename: chunk.fileName,\n\t\tdts: RE_DTS.test(chunk.fileName),\n\t\tisEntry: chunk.type === \"chunk\" && chunk.isEntry,\n\t\traw,\n\t\trawText: formatBytes(raw),\n\t\tgzip: gzip$1,\n\t\tgzipText: formatBytes(gzip$1),\n\t\tbrotli,\n\t\tbrotliText: formatBytes(brotli)\n\t};\n}\n\n//#endregion\n//#region src/features/shebang.ts\nconst RE_SHEBANG = /^#!.*/;\nfunction ShebangPlugin(logger, cwd, name, isMultiFormat) {\n\treturn {\n\t\tname: \"tsdown:shebang\",\n\t\tasync writeBundle(options, bundle) {\n\t\t\tfor (const chunk of Object.values(bundle)) {\n\t\t\t\tif (chunk.type !== \"chunk\" || !chunk.isEntry) continue;\n\t\t\t\tif (!RE_SHEBANG.test(chunk.code)) continue;\n\t\t\t\tconst filepath = path.resolve(cwd, options.file || path.join(options.dir, chunk.fileName));\n\t\t\t\tif (await fsExists(filepath)) {\n\t\t\t\t\tlogger.info(prettyName(name), isMultiFormat && prettyFormat(options.format), `Granting execute permission to ${underline(path.relative(cwd, filepath))}`);\n\t\t\t\t\tawait chmod(filepath, 493);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\n//#endregion\n//#region src/features/shims.ts\nfunction getShimsInject(format, platform) {\n\tif (format === \"es\" && platform === \"node\") return {\n\t\t__dirname: [shimFile, \"__dirname\"],\n\t\t__filename: [shimFile, \"__filename\"]\n\t};\n}\n\n//#endregion\n//#region src/features/rolldown.ts\nconst debug = Debug(\"tsdown:rolldown\");\nasync function getBuildOptions(config, format, isMultiFormat, cjsDts = false) {\n\tconst inputOptions = await resolveInputOptions(config, format, cjsDts, isMultiFormat);\n\tconst outputOptions = await resolveOutputOptions(inputOptions, config, format, cjsDts);\n\tconst rolldownConfig = {\n\t\t...inputOptions,\n\t\toutput: outputOptions\n\t};\n\tdebug(\"rolldown config with format \\\"%s\\\" %O\", cjsDts ? \"cjs dts\" : format, rolldownConfig);\n\treturn rolldownConfig;\n}\nasync function resolveInputOptions(config, format, cjsDts, isMultiFormat) {\n\tconst { entry, external, plugins: userPlugins, platform, alias, treeshake, dts, unused, target, shims, tsconfig, cwd, report, env, nodeProtocol, loader, name, logger, cjsDefault, banner, footer, globImport } = config;\n\tconst plugins = [];\n\tif (nodeProtocol) plugins.push(NodeProtocolPlugin(nodeProtocol));\n\tif (config.pkg || config.skipNodeModulesBundle) plugins.push(ExternalPlugin(config));\n\tif (dts) {\n\t\tconst { dts: dtsPlugin } = await import(\"rolldown-plugin-dts\");\n\t\tconst options = {\n\t\t\ttsconfig,\n\t\t\tbanner: resolveChunkAddon(banner, format, true),\n\t\t\tfooter: resolveChunkAddon(footer, format, true),\n\t\t\t...dts\n\t\t};\n\t\tif (format === \"es\") plugins.push(dtsPlugin(options));\n\t\telse if (cjsDts) plugins.push(dtsPlugin({\n\t\t\t...options,\n\t\t\temitDtsOnly: true,\n\t\t\tcjsDefault\n\t\t}));\n\t}\n\tif (!cjsDts) {\n\t\tif (unused) {\n\t\t\tconst { Unused } = await import(\"unplugin-unused\");\n\t\t\tplugins.push(Unused.rolldown(unused === true ? {} : unused));\n\t\t}\n\t\tif (target) plugins.push(await LightningCSSPlugin({ target }));\n\t\tplugins.push(ShebangPlugin(logger, cwd, name, isMultiFormat));\n\t\tif (globImport) plugins.push(importGlobPlugin());\n\t}\n\tif (report && LogLevels[logger.level] >= 3) plugins.push(ReportPlugin(report, logger, cwd, cjsDts, name, isMultiFormat));\n\tif (!cjsDts) plugins.push(userPlugins);\n\tconst define = {\n\t\t...config.define,\n\t\t...Object.keys(env).reduce((acc, key) => {\n\t\t\tconst value = JSON.stringify(env[key]);\n\t\t\tacc[`process.env.${key}`] = value;\n\t\t\tacc[`import.meta.env.${key}`] = value;\n\t\t\treturn acc;\n\t\t}, Object.create(null))\n\t};\n\tconst inject = shims && !cjsDts ? getShimsInject(format, platform) : void 0;\n\treturn await mergeUserOptions({\n\t\tinput: entry,\n\t\tcwd,\n\t\texternal,\n\t\tresolve: { alias },\n\t\ttsconfig: tsconfig || void 0,\n\t\ttreeshake,\n\t\tplatform: cjsDts || format === \"cjs\" ? \"node\" : platform,\n\t\ttransform: {\n\t\t\ttarget,\n\t\t\tdefine,\n\t\t\tinject\n\t\t},\n\t\tplugins,\n\t\tmoduleTypes: loader,\n\t\tlogLevel: logger.level === \"error\" ? \"silent\" : logger.level,\n\t\tonLog: cjsDefault ? (level, log, defaultHandler) => {\n\t\t\tif (log.code === \"MIXED_EXPORT\") return;\n\t\t\tdefaultHandler(level, log);\n\t\t} : void 0\n\t}, config.inputOptions, [format, { cjsDts }]);\n}\nasync function resolveOutputOptions(inputOptions, config, format, cjsDts) {\n\tconst { entry, outDir, sourcemap, minify, unbundle, banner, footer, cjsDefault } = config;\n\tconst [entryFileNames, chunkFileNames] = resolveChunkFilename(config, inputOptions, format);\n\treturn await mergeUserOptions({\n\t\tformat: cjsDts ? \"es\" : format,\n\t\tname: config.globalName,\n\t\tsourcemap,\n\t\tdir: outDir,\n\t\texports: cjsDefault ? \"auto\" : \"named\",\n\t\tminify: !cjsDts && minify,\n\t\tentryFileNames,\n\t\tchunkFileNames,\n\t\tpreserveModules: unbundle,\n\t\tpreserveModulesRoot: unbundle ? lowestCommonAncestor(...Object.values(entry)) : void 0,\n\t\tbanner: resolveChunkAddon(banner, format),\n\t\tfooter: resolveChunkAddon(footer, format)\n\t}, config.outputOptions, [format, { cjsDts }]);\n}\nasync function getDebugRolldownDir() {\n\tif (!debug.enabled) return;\n\treturn await mkdtemp(join(tmpdir(), \"tsdown-config-\"));\n}\nasync function debugBuildOptions(dir, name, format, buildOptions) {\n\tconst outFile = join(dir, `tsdown.config.${format}.js`);\n\thandlePluginInspect(buildOptions.plugins);\n\tconst serialized = util.formatWithOptions({\n\t\tdepth: null,\n\t\tmaxArrayLength: null,\n\t\tmaxStringLength: null\n\t}, buildOptions);\n\tawait writeFile(outFile, `/*\nAuto-generated rolldown config for tsdown debug purposes\ntsdown v${version}, rolldown v${VERSION}\nGenerated on ${(/* @__PURE__ */ new Date()).toISOString()}\nPackage name: ${name || \"not specified\"}\n*/\n\nexport default ${serialized}\\n`);\n\tdebug(\"Wrote debug rolldown config for \\\"%s\\\" (%s) -> %s\", name || \"default name\", format, outFile);\n}\nfunction handlePluginInspect(plugins) {\n\tif (Array.isArray(plugins)) for (const plugin of plugins) handlePluginInspect(plugin);\n\telse if (typeof plugins === \"object\" && plugins !== null && \"name\" in plugins) plugins[util.inspect.custom] = function(depth, options, inspect) {\n\t\tif (\"_options\" in plugins) return inspect({\n\t\t\tname: plugins.name,\n\t\t\toptions: plugins._options\n\t\t}, options);\n\t\telse return `\"rolldown plugin: ${plugins.name}\"`;\n\t};\n}\n\n//#endregion\n//#region src/features/shortcuts.ts\nfunction shortcuts(restart) {\n\tlet actionRunning = false;\n\tasync function onInput(input) {\n\t\tif (actionRunning) return;\n\t\tconst SHORTCUTS = [\n\t\t\t{\n\t\t\t\tkey: \"r\",\n\t\t\t\tdescription: \"reload config and rebuild\",\n\t\t\t\taction() {\n\t\t\t\t\trestart();\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: \"c\",\n\t\t\t\tdescription: \"clear console\",\n\t\t\t\taction() {\n\t\t\t\t\tconsole.clear();\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tkey: \"q\",\n\t\t\t\tdescription: \"quit\",\n\t\t\t\taction() {\n\t\t\t\t\tprocess.exit(0);\n\t\t\t\t}\n\t\t\t}\n\t\t];\n\t\tif (input === \"h\") {\n\t\t\tconst loggedKeys = /* @__PURE__ */ new Set();\n\t\t\tglobalLogger.info(\"  Shortcuts\");\n\t\t\tfor (const shortcut$1 of SHORTCUTS) {\n\t\t\t\tif (loggedKeys.has(shortcut$1.key)) continue;\n\t\t\t\tloggedKeys.add(shortcut$1.key);\n\t\t\t\tif (shortcut$1.action == null) continue;\n\t\t\t\tglobalLogger.info(dim`  press ` + bold`${shortcut$1.key} + enter` + dim` to ${shortcut$1.description}`);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tconst shortcut = SHORTCUTS.find((shortcut$1) => shortcut$1.key === input);\n\t\tif (!shortcut) return;\n\t\tactionRunning = true;\n\t\tawait shortcut.action();\n\t\tactionRunning = false;\n\t}\n\tconst rl = readline.createInterface({ input: process.stdin });\n\trl.on(\"line\", onInput);\n\treturn () => rl.close();\n}\n\n//#endregion\n//#region src/features/watch.ts\nconst endsWithConfig = /[\\\\/](?:(?:package|tsconfig)\\.json|pnpm-(?:workspace|lock)\\.yaml|tsdown\\.config.*)$/;\nasync function watchBuild(options, configFiles, rebuild, restart) {\n\tif (typeof options.watch === \"boolean\" && options.outDir === options.cwd) throw new Error(`Watch is enabled, but output directory is the same as the current working directory.Please specify a different watch directory using ${blue`watch`} option,or set ${blue`outDir`} to a different directory.`);\n\tconst files = toArray(typeof options.watch === \"boolean\" ? options.cwd : options.watch);\n\toptions.logger.info(`Watching for changes in ${files.join(\", \")}`);\n\tfiles.push(...configFiles);\n\tconst { watch } = await import(\"chokidar\");\n\tconst debouncedOnChange = debounce(onChange, 100);\n\tconst watcher = watch(files, {\n\t\tcwd: options.cwd,\n\t\tignoreInitial: true,\n\t\tignorePermissionErrors: true,\n\t\tignored: [\n\t\t\t/[\\\\/]\\.git[\\\\/]/,\n\t\t\tRE_NODE_MODULES,\n\t\t\toptions.outDir,\n\t\t\t...options.ignoreWatch\n\t\t]\n\t});\n\tlet pending = [];\n\tlet pendingPromise;\n\twatcher.on(\"all\", (type, file) => {\n\t\tpending.push(path.resolve(options.cwd, file));\n\t\tdebouncedOnChange();\n\t});\n\treturn watcher;\n\tasync function onChange() {\n\t\tawait pendingPromise;\n\t\tif (!pending.length) return;\n\t\tfor (const file of pending) invalidateContextFile(globalContext, file);\n\t\tif (pending.some((file) => configFiles.includes(file) || endsWithConfig.test(file))) {\n\t\t\toptions.logger.info(`Restarting due to config change...`);\n\t\t\tpendingPromise = restart();\n\t\t} else {\n\t\t\toptions.logger.info(`Change detected: ${pending.join(\", \")}`);\n\t\t\tpendingPromise = rebuild();\n\t\t}\n\t\tpending = [];\n\t\tawait pendingPromise;\n\t}\n}\n\n//#endregion\n//#region src/index.ts\n/**\n* Build with tsdown.\n*/\nasync function build$1(userOptions = {}) {\n\tglobalLogger.level = userOptions.logLevel || (userOptions.silent ? \"error\" : \"info\");\n\tconst { configs, files: configFiles } = await resolveConfig(userOptions);\n\tlet cleanPromise;\n\tconst clean = () => {\n\t\tif (cleanPromise) return cleanPromise;\n\t\treturn cleanPromise = cleanOutDir(configs);\n\t};\n\tglobalLogger.info(\"Build start\");\n\tconst rebuilds = await Promise.all(configs.map((options) => buildSingle(options, clean)));\n\tconst disposeCbs = [];\n\tfor (const [i, config] of configs.entries()) {\n\t\tconst rebuild = rebuilds[i];\n\t\tif (!rebuild) continue;\n\t\tconst watcher = await watchBuild(config, configFiles, rebuild, restart);\n\t\tdisposeCbs.push(() => watcher.close());\n\t}\n\tif (disposeCbs.length) disposeCbs.push(shortcuts(restart));\n\tasync function restart() {\n\t\tfor (const dispose of disposeCbs) await dispose();\n\t\tbuild$1(userOptions);\n\t}\n}\nconst dirname$1 = path.dirname(fileURLToPath(import.meta.url));\nconst pkgRoot = path.resolve(dirname$1, \"..\");\n/** @internal */\nconst shimFile = path.resolve(pkgRoot, \"esm-shims.js\");\n/**\n* Build a single configuration, without watch and shortcuts features.\n*\n* Internal API, not for public use\n*\n* @private\n* @param config Resolved options\n*/\nasync function buildSingle(config, clean) {\n\tconst { format: formats, dts, watch, onSuccess, logger } = config;\n\tlet ab;\n\tconst { hooks, context } = await createHooks$1(config);\n\twarnLegacyCJS(config);\n\tawait rebuild(true);\n\tif (watch) return () => rebuild();\n\tasync function rebuild(first) {\n\t\tconst startTime = performance.now();\n\t\tawait hooks.callHook(\"build:prepare\", context);\n\t\tab?.abort();\n\t\tif (first) await clean();\n\t\telse await cleanOutDir([config]);\n\t\tlet hasErrors = false;\n\t\tconst isMultiFormat = formats.length > 1;\n\t\tconst chunks = {};\n\t\tconst debugRolldownDir = await getDebugRolldownDir();\n\t\tawait Promise.all(formats.map(async (format) => {\n\t\t\ttry {\n\t\t\t\tconst buildOptions = await getBuildOptions(config, format, isMultiFormat, false);\n\t\t\t\tawait hooks.callHook(\"build:before\", {\n\t\t\t\t\t...context,\n\t\t\t\t\tbuildOptions\n\t\t\t\t});\n\t\t\t\tif (debugRolldownDir) await debugBuildOptions(debugRolldownDir, config.name, format, buildOptions);\n\t\t\t\tconst { output } = await build(buildOptions);\n\t\t\t\tchunks[format] = output;\n\t\t\t\tif (format === \"cjs\" && dts) {\n\t\t\t\t\tconst { output: output$1 } = await build(await getBuildOptions(config, format, isMultiFormat, true));\n\t\t\t\t\tchunks[format].push(...output$1);\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (watch) {\n\t\t\t\t\tlogger.error(error);\n\t\t\t\t\thasErrors = true;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}));\n\t\tif (hasErrors) return;\n\t\tawait Promise.all([writeExports(config, chunks), copy(config)]);\n\t\tawait Promise.all([publint(config), attw(config)]);\n\t\tawait hooks.callHook(\"build:done\", context);\n\t\tlogger.success(prettyName(config.name), `${first ? \"Build\" : \"Rebuild\"} complete in ${green(`${Math.round(performance.now() - startTime)}ms`)}`);\n\t\tab = new AbortController();\n\t\tif (typeof onSuccess === \"string\") {\n\t\t\tconst p = exec(onSuccess, [], { nodeOptions: {\n\t\t\t\tshell: true,\n\t\t\t\tstdio: \"inherit\"\n\t\t\t} });\n\t\t\tp.then(({ exitCode }) => {\n\t\t\t\tif (exitCode) process.exitCode = exitCode;\n\t\t\t});\n\t\t\tab.signal.addEventListener(\"abort\", () => {\n\t\t\t\tif (typeof p.pid === \"number\") treeKill(p.pid);\n\t\t\t});\n\t\t} else await onSuccess?.(config, ab.signal);\n\t}\n}\n\n//#endregion\nexport { ReportPlugin as a, ShebangPlugin as i, buildSingle as n, NodeProtocolPlugin as o, shimFile as r, ExternalPlugin as s, build$1 as t };","size":51984,"filename":"src-2nUxf1wc.mjs"},{"chunk_id":11,"content":"import { bgRed, bgYellow, blue, green, rgb, yellow } from \"ansis\";\n\n//#region src/utils/general.ts\nfunction toArray(val, defaultValue) {\n\tif (Array.isArray(val)) return val;\n\telse if (val == null) {\n\t\tif (defaultValue) return [defaultValue];\n\t\treturn [];\n\t} else return [val];\n}\nfunction resolveComma(arr) {\n\treturn arr.flatMap((format$1) => format$1.split(\",\"));\n}\nfunction resolveRegex(str) {\n\tif (typeof str === \"string\" && str.length > 2 && str[0] === \"/\" && str.at(-1) === \"/\") return new RegExp(str.slice(1, -1));\n\treturn str;\n}\nfunction debounce(fn, wait) {\n\tlet timeout;\n\treturn function(...args) {\n\t\tif (timeout) clearTimeout(timeout);\n\t\ttimeout = setTimeout(() => {\n\t\t\ttimeout = void 0;\n\t\t\tfn.apply(this, args);\n\t\t}, wait);\n\t};\n}\nfunction slash(string) {\n\treturn string.replaceAll(\"\\\\\", \"/\");\n}\nconst noop = (v) => v;\nfunction matchPattern(id, patterns) {\n\treturn patterns.some((pattern) => {\n\t\tif (pattern instanceof RegExp) {\n\t\t\tpattern.lastIndex = 0;\n\t\t\treturn pattern.test(id);\n\t\t}\n\t\treturn id === pattern;\n\t});\n}\n\n//#endregion\n//#region src/utils/logger.ts\nconst LogLevels = {\n\tsilent: 0,\n\terror: 1,\n\twarn: 2,\n\tinfo: 3\n};\nfunction format(msgs) {\n\treturn msgs.filter((arg) => arg !== void 0 && arg !== false).join(\" \");\n}\nconst warnedMessages = /* @__PURE__ */ new Set();\nfunction createLogger(level = \"info\", { customLogger, console = globalThis.console, failOnWarn = false } = {}) {\n\tif (customLogger) return customLogger;\n\tfunction output(type, msg) {\n\t\tif (LogLevels[logger.level] < LogLevels[type]) return;\n\t\tconsole[type === \"info\" ? \"log\" : type](msg);\n\t}\n\tconst logger = {\n\t\tlevel,\n\t\tinfo(...msgs) {\n\t\t\toutput(\"info\", `${blue`ℹ`} ${format(msgs)}`);\n\t\t},\n\t\twarn(...msgs) {\n\t\t\tconst message = format(msgs);\n\t\t\tif (failOnWarn) throw new Error(message);\n\t\t\twarnedMessages.add(message);\n\t\t\toutput(\"warn\", `\\n${bgYellow` WARN `} ${message}\\n`);\n\t\t},\n\t\twarnOnce(...msgs) {\n\t\t\tconst message = format(msgs);\n\t\t\tif (warnedMessages.has(message)) return;\n\t\t\tif (failOnWarn) throw new Error(message);\n\t\t\twarnedMessages.add(message);\n\t\t\toutput(\"warn\", `\\n${bgYellow` WARN `} ${message}\\n`);\n\t\t},\n\t\terror(...msgs) {\n\t\t\toutput(\"error\", `\\n${bgRed` ERROR `} ${format(msgs)}\\n`);\n\t\t},\n\t\tsuccess(...msgs) {\n\t\t\toutput(\"info\", `${green`✔`} ${format(msgs)}`);\n\t\t}\n\t};\n\treturn logger;\n}\nconst globalLogger = createLogger();\nfunction prettyName(name) {\n\tif (!name) return void 0;\n\treturn generateColor(name)(`[${name}]`);\n}\nfunction prettyFormat(format$1) {\n\tconst formatColor = format$1 === \"es\" ? blue : format$1 === \"cjs\" ? yellow : noop;\n\tlet formatText;\n\tswitch (format$1) {\n\t\tcase \"es\":\n\t\t\tformatText = \"ESM\";\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tformatText = format$1.toUpperCase();\n\t\t\tbreak;\n\t}\n\treturn formatColor(`[${formatText}]`);\n}\nconst colors = /* @__PURE__ */ new Map();\nfunction generateColor(name = \"default\") {\n\tif (colors.has(name)) return colors.get(name);\n\tlet color;\n\tif (name === \"default\") color = blue;\n\telse {\n\t\tlet hash = 0;\n\t\tfor (let i = 0; i < name.length; i++) hash = name.charCodeAt(i) + ((hash << 5) - hash);\n\t\tcolor = rgb(...hslToRgb(hash % 360, 35, 55));\n\t}\n\tcolors.set(name, color);\n\treturn color;\n}\nfunction hslToRgb(h, s, l) {\n\th = h % 360;\n\th /= 360;\n\ts /= 100;\n\tl /= 100;\n\tlet r, g, b;\n\tif (s === 0) r = g = b = l;\n\telse {\n\t\tconst q = l < .5 ? l * (1 + s) : l + s - l * s;\n\t\tconst p = 2 * l - q;\n\t\tr = hue2rgb(p, q, h + 1 / 3);\n\t\tg = hue2rgb(p, q, h);\n\t\tb = hue2rgb(p, q, h - 1 / 3);\n\t}\n\treturn [\n\t\tMath.max(0, Math.round(r * 255)),\n\t\tMath.max(0, Math.round(g * 255)),\n\t\tMath.max(0, Math.round(b * 255))\n\t];\n}\nfunction hue2rgb(p, q, t) {\n\tif (t < 0) t += 1;\n\tif (t > 1) t -= 1;\n\tif (t < 1 / 6) return p + (q - p) * 6 * t;\n\tif (t < 1 / 2) return q;\n\tif (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n\treturn p;\n}\n\n//#endregion\n//#region package.json\nvar version = \"0.15.12\";\n\n//#endregion\nexport { globalLogger as a, debounce as c, resolveComma as d, resolveRegex as f, generateColor as i, matchPattern as l, toArray as m, LogLevels as n, prettyFormat as o, slash as p, createLogger as r, prettyName as s, version as t, noop as u };","size":4064,"filename":"package-qYegZAPv.mjs"},{"chunk_id":12,"content":"import \"ansis\";\nimport { BuildOptions, ExternalOption, InputOption, InputOptions, InternalModuleFormat, MinifyOptions, ModuleFormat, ModuleTypes, OutputAsset, OutputChunk, OutputOptions, Plugin, TreeshakingOptions } from \"rolldown\";\nimport { Hookable } from \"hookable\";\nimport { CheckPackageOptions } from \"@arethetypeswrong/core\";\nimport { Options as PublintOptions } from \"publint\";\nimport { Options as DtsOptions } from \"rolldown-plugin-dts\";\nimport { Options as UnusedOptions } from \"unplugin-unused\";\nimport { PackageJson } from \"pkg-types\";\n\n//#region src/utils/types.d.ts\ntype Overwrite<T, U> = Omit<T, keyof U> & U;\ntype Awaitable<T> = T | Promise<T>;\ntype MarkPartial<T, K extends keyof T> = Omit<Required<T>, K> & Partial<Pick<T, K>>;\ntype Arrayable<T> = T | T[];\n//#endregion\n//#region src/features/attw.d.ts\ninterface AttwOptions extends CheckPackageOptions {\n  /**\n  * Profiles select a set of resolution modes to require/ignore. All are evaluated but failures outside\n  * of those required are ignored.\n  *\n  * The available profiles are:\n  * - `strict`: requires all resolutions\n  * - `node16`: ignores node10 resolution failures\n  * - `esmOnly`: ignores CJS resolution failures\n  *\n  * @default 'strict'\n  */\n  profile?: \"strict\" | \"node16\" | \"esmOnly\";\n  /**\n  * The level of the check.\n  *\n  * The available levels are:\n  * - `error`: fails the build\n  * - `warn`: warns the build\n  *\n  * @default 'warn'\n  */\n  level?: \"error\" | \"warn\";\n}\n//#endregion\n//#region src/features/copy.d.ts\ninterface CopyEntry {\n  from: string;\n  to: string;\n}\ntype CopyOptions = Arrayable<string | CopyEntry>;\ntype CopyOptionsFn = (options: ResolvedConfig) => Awaitable<CopyOptions>;\n//#endregion\n//#region src/features/exports.d.ts\ntype TsdownChunks = Partial<Record<NormalizedFormat, Array<OutputChunk | OutputAsset>>>;\ninterface ExportsOptions {\n  /**\n  * Generate exports that link to source code during development.\n  * - string: add as a custom condition.\n  * - true: all conditions point to source files, and add dist exports to `publishConfig`.\n  */\n  devExports?: boolean | string;\n  /**\n  * Exports for all files.\n  */\n  all?: boolean;\n  customExports?: (exports: Record<string, any>, context: {\n    pkg: PackageJson;\n    chunks: TsdownChunks;\n    outDir: string;\n    isPublish: boolean;\n  }) => Awaitable<Record<string, any>>;\n}\n//#endregion\n//#region src/features/hooks.d.ts\ninterface BuildContext {\n  options: ResolvedConfig;\n  hooks: Hookable<TsdownHooks>;\n}\ninterface RolldownContext {\n  buildOptions: BuildOptions;\n}\n/**\n* Hooks for tsdown.\n*/\ninterface TsdownHooks {\n  /**\n  * Invoked before each tsdown build starts.\n  * Use this hook to perform setup or preparation tasks.\n  */\n  \"build:prepare\": (ctx: BuildContext) => void | Promise<void>;\n  /**\n  * Invoked before each Rolldown build.\n  * For dual-format builds, this hook is called for each format.\n  * Useful for configuring or modifying the build context before bundling.\n  */\n  \"build:before\": (ctx: BuildContext & RolldownContext) => void | Promise<void>;\n  /**\n  * Invoked after each tsdown build completes.\n  * Use this hook for cleanup or post-processing tasks.\n  */\n  \"build:done\": (ctx: BuildContext) => void | Promise<void>;\n}\n//#endregion\n//#region src/utils/package.d.ts\ntype PackageType = \"module\" | \"commonjs\" | undefined;\n//#endregion\n//#region src/features/output.d.ts\ninterface OutExtensionContext {\n  options: InputOptions;\n  format: NormalizedFormat;\n  /** \"type\" field in project's package.json */\n  pkgType?: PackageType;\n}\ninterface OutExtensionObject {\n  js?: string;\n  dts?: string;\n}\ntype OutExtensionFactory = (context: OutExtensionContext) => OutExtensionObject | undefined;\ninterface ChunkAddonObject {\n  js?: string;\n  css?: string;\n  dts?: string;\n}\ntype ChunkAddonFunction = (ctx: {\n  format: Format;\n  fileName: string;\n}) => ChunkAddonObject | string | undefined;\ntype ChunkAddon = ChunkAddonObject | ChunkAddonFunction | string;\n//#endregion\n//#region src/utils/logger.d.ts\ntype LogType = \"error\" | \"warn\" | \"info\";\ntype LogLevel = LogType | \"silent\";\ninterface Logger {\n  level: LogLevel;\n  info: (...args: any[]) => void;\n  warn: (...args: any[]) => void;\n  warnOnce: (...args: any[]) => void;\n  error: (...args: any[]) => void;\n  success: (...args: any[]) => void;\n}\ndeclare const globalLogger: Logger;\n//#endregion\n//#region src/features/report.d.ts\ninterface ReportOptions {\n  /**\n  * Enable/disable gzip-compressed size reporting.\n  * Compressing large output files can be slow, so disabling this may increase build performance for large projects.\n  *\n  * @default true\n  */\n  gzip?: boolean;\n  /**\n  * Enable/disable brotli-compressed size reporting.\n  * Compressing large output files can be slow, so disabling this may increase build performance for large projects.\n  *\n  * @default false\n  */\n  brotli?: boolean;\n  /**\n  * Skip reporting compressed size for files larger than this size.\n  * @default 1_000_000 // 1MB\n  */\n  maxCompressSize?: number;\n}\ndeclare function ReportPlugin(userOptions: ReportOptions, logger: Logger, cwd: string, cjsDts?: boolean, name?: string, isMultiFormat?: boolean): Plugin;\n//#endregion\n//#region src/config/types.d.ts\ntype Sourcemap = boolean | \"inline\" | \"hidden\";\ntype Format = ModuleFormat;\ntype NormalizedFormat = InternalModuleFormat;\ninterface Workspace {\n  /**\n  * Workspace directories. Glob patterns are supported.\n  * - `auto`: Automatically detect `package.json` files in the workspace.\n  * @default 'auto'\n  */\n  include?: Arrayable<string> | \"auto\";\n  /**\n  * Exclude directories from workspace.\n  * Defaults to all `node_modules`, `dist`, `test`, `tests`, `temp`, and `tmp` directories.\n  */\n  exclude?: Arrayable<string>;\n  /**\n  * Path to the workspace configuration file.\n  */\n  config?: boolean | string;\n}\ntype NoExternalFn = (id: string, importer: string | undefined) => boolean | null | undefined | void;\n/**\n* Options for tsdown.\n*/\ninterface UserConfig {\n  /**\n  * Defaults to `'src/index.ts'` if it exists.\n  */\n  entry?: InputOption;\n  external?: ExternalOption;\n  noExternal?: Arrayable<string | RegExp> | NoExternalFn;\n  /**\n  * Bundle only the dependencies listed here; throw an error if any others are missing.\n  *\n  * Note: Be sure to include all required sub-dependencies as well.\n  */\n  inlineOnly?: Arrayable<string | RegExp>;\n  /**\n  * Skip bundling `node_modules`.\n  * @default false\n  */\n  skipNodeModulesBundle?: boolean;\n  alias?: Record<string, string>;\n  tsconfig?: string | boolean;\n  /**\n  * Specifies the target runtime platform for the build.\n  *\n  * - `node`: Node.js and compatible runtimes (e.g., Deno, Bun).\n  *   For CJS format, this is always set to `node` and cannot be changed.\n  * - `neutral`: A platform-agnostic target with no specific runtime assumptions.\n  * - `browser`: Web browsers.\n  *\n  * @default 'node'\n  * @see https://tsdown.dev/options/platform\n  */\n  platform?: \"node\" | \"neutral\" | \"browser\";\n  /**\n  * Specifies the compilation target environment(s).\n  *\n  * Determines the JavaScript version or runtime(s) for which the code should be compiled.\n  * If not set, defaults to the value of `engines.node` in your project's `package.json`.\n  * If no `engines.node` field exists, no syntax transformations are applied.\n  *\n  * Accepts a single target (e.g., `'es2020'`, `'node18'`), an array of targets, or `false` to disable all transformations.\n  *\n  * @see {@link https://tsdown.dev/options/target#supported-targets} for a list of valid targets and more details.\n  *\n  * @example\n  * ```jsonc\n  * // Target a single environment\n  * { \"target\": \"node18\" }\n  * ```\n  *\n  * @example\n  * ```jsonc\n  * // Target multiple environments\n  * { \"target\": [\"node18\", \"es2020\"] }\n  * ```\n  *\n  * @example\n  * ```jsonc\n  * // Disable all syntax transformations\n  * { \"target\": false }\n  * ```\n  */\n  target?: string | string[] | false;\n  /**\n  * Compile-time env variables.\n  * @example\n  * ```json\n  * {\n  *   \"DEBUG\": true,\n  *   \"NODE_ENV\": \"production\"\n  * }\n  * ```\n  */\n  env?: Record<string, any>;\n  define?: Record<string, string>;\n  /** @default false */\n  shims?: boolean;\n  /**\n  * Configure tree shaking options.\n  * @see {@link https://rolldown.rs/options/treeshake} for more details.\n  * @default true\n  */\n  treeshake?: boolean | TreeshakingOptions;\n  /**\n  * Sets how input files are processed.\n  * For example, use 'js' to treat files as JavaScript or 'base64' for images.\n  * Lets you import or require files like images or fonts.\n  * @example\n  * ```json\n  * { '.jpg': 'asset', '.png': 'base64' }\n  * ```\n  */\n  loader?: ModuleTypes;\n  /**\n  * If enabled, strips the `node:` protocol prefix from import source.\n  *\n  * @default false\n  * @deprecated Use `nodeProtocol: 'strip'` instead.\n  *\n  * @example\n  * // With removeNodeProtocol enabled:\n  * import('node:fs'); // becomes import('fs')\n  */\n  removeNodeProtocol?: boolean;\n  /**\n  * - If `true`, add `node:` prefix to built-in modules.\n  * - If `'strip'`, strips the `node:` protocol prefix from import source.\n  * - If `false`, does not modify the import source.\n  *\n  * @default false\n  *\n  * @example\n  * // With nodeProtocol enabled:\n  * import('fs'); // becomes import('node:fs')\n  * // With nodeProtocol set to 'strip':\n  * import('node:fs'); // becomes import('fs')\n  * // With nodeProtocol set to false:\n  * import('node:fs'); // remains import('node:fs')\n  *\n  */\n  nodeProtocol?: \"strip\" | boolean;\n  plugins?: InputOptions[\"plugins\"];\n  /**\n  * Use with caution; ensure you understand the implications.\n  */\n  inputOptions?: InputOptions | ((options: InputOptions, format: NormalizedFormat, context: {\n    cjsDts: boolean;\n  }) => Awaitable<InputOptions | void | null>);\n  /** @default ['es'] */\n  format?: Format | Format[];\n  globalName?: string;\n  /** @default 'dist' */\n  outDir?: string;\n  /**\n  * Whether to generate source map files.\n  *\n  * Note that this option will always be `true` if you have\n  * [`declarationMap`](https://www.typescriptlang.org/tsconfig/#declarationMap)\n  * option enabled in your `tsconfig.json`.\n  *\n  * @default false\n  */\n  sourcemap?: Sourcemap;\n  /**\n  * Clean directories before build.\n  *\n  * Default to output directory.\n  * @default true\n  */\n  clean?: boolean | string[];\n  /**\n  * @default false\n  */\n  minify?: boolean | \"dce-only\" | MinifyOptions;\n  footer?: ChunkAddon;\n  banner?: ChunkAddon;\n  /**\n  * Determines whether unbundle mode is enabled.\n  * When set to true, the output files will mirror the input file structure.\n  * @default false\n  */\n  unbundle?: boolean;\n  /**\n  * @deprecated Use `unbundle` instead.\n  * @default true\n  */\n  bundle?: boolean;\n  /**\n  * Use a fixed extension for output files.\n  * The extension will always be `.cjs` or `.mjs`.\n  * Otherwise, it will depend on the package type.\n  *\n  * Defaults to `true` if `platform` is set to `node`, `false` otherwise.\n  */\n  fixedExtension?: boolean;\n  /**\n  * Custom extensions for output files.\n  * `fixedExtension` will be overridden by this option.\n  */\n  outExtensions?: OutExtensionFactory;\n  /**\n  * If enabled, appends hash to chunk filenames.\n  * @default true\n  */\n  hash?: boolean;\n  /**\n  * @default true\n  */\n  cjsDefault?: boolean;\n  /**\n  * Use with caution; ensure you understand the implications.\n  */\n  outputOptions?: OutputOptions | ((options: OutputOptions, format: NormalizedFormat, context: {\n    cjsDts: boolean;\n  }) => Awaitable<OutputOptions | void | null>);\n  /**\n  * The working directory of the config file.\n  * - Defaults to `process.cwd()` for root config.\n  * - Defaults to the package directory for workspace config.\n  */\n  cwd?: string;\n  /**\n  * The name to show in CLI output. This is useful for monorepos or workspaces.\n  * When using workspace mode, this option defaults to the package name from package.json.\n  * In non-workspace mode, this option must be set explicitly for the name to show in the CLI output.\n  */\n  name?: string;\n  /**\n  * @default false\n  * @deprecated Use `logLevel` instead.\n  */\n  silent?: boolean;\n  /**\n  * Log level.\n  * @default 'info'\n  */\n  logLevel?: LogLevel;\n  /**\n  * If true, fails the build on warnings.\n  * @default false\n  */\n  failOnWarn?: boolean;\n  /**\n  * Custom logger.\n  */\n  customLogger?: Logger;\n  /**\n  * Reuse config from Vite or Vitest (experimental)\n  * @default false\n  */\n  fromVite?: boolean | \"vitest\";\n  /**\n  * @default false\n  */\n  watch?: boolean | Arrayable<string>;\n  ignoreWatch?: Arrayable<string | RegExp>;\n  /**\n  * You can specify command to be executed after a successful build, specially useful for Watch mode\n  */\n  onSuccess?: string | ((config: ResolvedConfig, signal: AbortSignal) => void | Promise<void>);\n  /**\n  * Enables generation of TypeScript declaration files (`.d.ts`).\n  *\n  * By default, this option is auto-detected based on your project's `package.json`:\n  * - If the `types` field is present, or if the main `exports` contains a `types` entry, declaration file generation is enabled by default.\n  * - Otherwise, declaration file generation is disabled by default.\n  */\n  dts?: boolean | DtsOptions;\n  /**\n  * Enable unused dependencies check with `unplugin-unused`\n  * Requires `unplugin-unused` to be installed.\n  * @default false\n  */\n  unused?: boolean | UnusedOptions;\n  /**\n  * Run publint after bundling.\n  * Requires `publint` to be installed.\n  * @default false\n  */\n  publint?: boolean | PublintOptions;\n  /**\n  * Run `arethetypeswrong` after bundling.\n  * Requires `@arethetypeswrong/core` to be installed.\n  *\n  * @default false\n  * @see https://github.com/arethetypeswrong/arethetypeswrong.github.io\n  */\n  attw?: boolean | AttwOptions;\n  /**\n  * Enable size reporting after bundling.\n  * @default true\n  */\n  report?: boolean | ReportOptions;\n  /**\n  * `import.meta.glob` support.\n  * @see https://vite.dev/guide/features.html#glob-import\n  * @default true\n  */\n  globImport?: boolean;\n  /**\n  * **[experimental]** Generate package exports for `package.json`.\n  *\n  * This will set the `main`, `module`, `types`, `exports` fields in `package.json`\n  * to point to the generated files.\n  */\n  exports?: boolean | ExportsOptions;\n  /**\n  * @deprecated Alias for `copy`, will be removed in the future.\n  */\n  publicDir?: CopyOptions | CopyOptionsFn;\n  /**\n  * Copy files to another directory.\n  * @example\n  * ```ts\n  * [\n  *   'src/assets',\n  *   { from: 'src/assets', to: 'dist/assets' },\n  * ]\n  * ```\n  */\n  copy?: CopyOptions | CopyOptionsFn;\n  hooks?: Partial<TsdownHooks> | ((hooks: Hookable<TsdownHooks>) => Awaitable<void>);\n  /**\n  * **[experimental]** Enable workspace mode.\n  * This allows you to build multiple packages in a monorepo.\n  */\n  workspace?: Workspace | Arrayable<string> | true;\n}\ninterface InlineConfig extends UserConfig {\n  /**\n  * Config file path\n  */\n  config?: boolean | string;\n  /**\n  * Config loader to use. It can only be set via CLI or API.\n  * @default 'auto'\n  */\n  configLoader?: \"auto\" | \"native\" | \"unconfig\" | \"unrun\";\n  /**\n  * Filter workspace packages. This option is only available in workspace mode.\n  */\n  filter?: RegExp | string | string[];\n}\ntype UserConfigFn = (inlineConfig: InlineConfig) => Awaitable<Arrayable<UserConfig>>;\ntype UserConfigExport = Awaitable<Arrayable<UserConfig> | UserConfigFn>;\ntype ResolvedConfig = Overwrite<MarkPartial<Omit<UserConfig, \"workspace\" | \"fromVite\" | \"publicDir\" | \"silent\" | \"bundle\" | \"removeNodeProtocol\" | \"logLevel\" | \"failOnWarn\" | \"customLogger\">, \"globalName\" | \"inputOptions\" | \"outputOptions\" | \"minify\" | \"define\" | \"alias\" | \"external\" | \"onSuccess\" | \"outExtensions\" | \"hooks\" | \"copy\" | \"loader\" | \"name\" | \"banner\" | \"footer\">, {\n  format: NormalizedFormat[];\n  target?: string[];\n  clean: string[];\n  dts: false | DtsOptions;\n  report: false | ReportOptions;\n  tsconfig: false | string;\n  pkg?: PackageJson;\n  exports: false | ExportsOptions;\n  nodeProtocol: \"strip\" | boolean;\n  logger: Logger;\n  ignoreWatch: Array<string | RegExp>;\n  noExternal?: NoExternalFn;\n  inlineOnly?: Array<string | RegExp>;\n}>;\n//#endregion\nexport { TsdownChunks as A, OutExtensionFactory as C, RolldownContext as D, BuildContext as E, CopyOptions as M, CopyOptionsFn as N, TsdownHooks as O, AttwOptions as P, OutExtensionContext as S, PackageType as T, Logger as _, NormalizedFormat as a, ChunkAddonFunction as b, Sourcemap as c, UserConfig as d, UserConfigExport as f, ReportPlugin as g, ReportOptions as h, NoExternalFn as i, CopyEntry as j, ExportsOptions as k, TreeshakingOptions as l, Workspace as m, Format as n, PublintOptions as o, UserConfigFn as p, InlineConfig as r, ResolvedConfig as s, DtsOptions as t, UnusedOptions as u, globalLogger as v, OutExtensionObject as w, ChunkAddonObject as x, ChunkAddon as y };","size":16650,"filename":"index-CN4ptE9x.d.mts"},{"chunk_id":13,"content":"import { d as UserConfig, f as UserConfigExport, p as UserConfigFn } from \"./index-CN4ptE9x.mjs\";\n\n//#region src/config.d.ts\n\n/**\n* Defines the configuration for tsdown.\n*/\ndeclare function defineConfig(options: UserConfig): UserConfig;\ndeclare function defineConfig(options: UserConfig[]): UserConfig[];\ndeclare function defineConfig(options: UserConfigFn): UserConfigFn;\ndeclare function defineConfig(options: UserConfigExport): UserConfigExport;\n//#endregion\nexport { defineConfig as t };","size":491,"filename":"config-Bu8Q0Yxg.d.mts"}],"build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
{"timestamp":1761897885391,"action":"BuildEnd","build_id":"bid_0_count_1","session_id":"sid_1_1761897884759"}
